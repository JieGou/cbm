/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MsisService_H
#define MsisService_H

#include <thrift/TDispatchProcessor.h>
#include "msis_types.h"

namespace msis {

class MsisServiceIf {
 public:
  virtual ~MsisServiceIf() {}
  virtual void ping() = 0;
  virtual void zip() = 0;
  virtual bool update(const Entity& ent) = 0;
};

class MsisServiceIfFactory {
 public:
  typedef MsisServiceIf Handler;

  virtual ~MsisServiceIfFactory() {}

  virtual MsisServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MsisServiceIf* /* handler */) = 0;
};

class MsisServiceIfSingletonFactory : virtual public MsisServiceIfFactory {
 public:
  MsisServiceIfSingletonFactory(const boost::shared_ptr<MsisServiceIf>& iface) : iface_(iface) {}
  virtual ~MsisServiceIfSingletonFactory() {}

  virtual MsisServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MsisServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MsisServiceIf> iface_;
};

class MsisServiceNull : virtual public MsisServiceIf {
 public:
  virtual ~MsisServiceNull() {}
  void ping() {
    return;
  }
  void zip() {
    return;
  }
  bool update(const Entity& /* ent */) {
    bool _return = false;
    return _return;
  }
};


class MsisService_ping_args {
 public:

  MsisService_ping_args() {
  }

  virtual ~MsisService_ping_args() throw() {}


  bool operator == (const MsisService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MsisService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsisService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MsisService_ping_pargs {
 public:


  virtual ~MsisService_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MsisService_ping_result {
 public:

  MsisService_ping_result() {
  }

  virtual ~MsisService_ping_result() throw() {}


  bool operator == (const MsisService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MsisService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsisService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MsisService_ping_presult {
 public:


  virtual ~MsisService_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MsisService_zip_args {
 public:

  MsisService_zip_args() {
  }

  virtual ~MsisService_zip_args() throw() {}


  bool operator == (const MsisService_zip_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MsisService_zip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsisService_zip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MsisService_zip_pargs {
 public:


  virtual ~MsisService_zip_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MsisService_update_args__isset {
  _MsisService_update_args__isset() : ent(false) {}
  bool ent;
} _MsisService_update_args__isset;

class MsisService_update_args {
 public:

  MsisService_update_args() {
  }

  virtual ~MsisService_update_args() throw() {}

  Entity ent;

  _MsisService_update_args__isset __isset;

  void __set_ent(const Entity& val) {
    ent = val;
  }

  bool operator == (const MsisService_update_args & rhs) const
  {
    if (!(ent == rhs.ent))
      return false;
    return true;
  }
  bool operator != (const MsisService_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsisService_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MsisService_update_pargs {
 public:


  virtual ~MsisService_update_pargs() throw() {}

  const Entity* ent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MsisService_update_result__isset {
  _MsisService_update_result__isset() : success(false) {}
  bool success;
} _MsisService_update_result__isset;

class MsisService_update_result {
 public:

  MsisService_update_result() : success(0) {
  }

  virtual ~MsisService_update_result() throw() {}

  bool success;

  _MsisService_update_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const MsisService_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MsisService_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsisService_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MsisService_update_presult__isset {
  _MsisService_update_presult__isset() : success(false) {}
  bool success;
} _MsisService_update_presult__isset;

class MsisService_update_presult {
 public:


  virtual ~MsisService_update_presult() throw() {}

  bool* success;

  _MsisService_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MsisServiceClient : virtual public MsisServiceIf {
 public:
  MsisServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MsisServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void zip();
  void send_zip();
  bool update(const Entity& ent);
  void send_update(const Entity& ent);
  bool recv_update();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MsisServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MsisServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MsisServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_zip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MsisServiceProcessor(boost::shared_ptr<MsisServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &MsisServiceProcessor::process_ping;
    processMap_["zip"] = &MsisServiceProcessor::process_zip;
    processMap_["update"] = &MsisServiceProcessor::process_update;
  }

  virtual ~MsisServiceProcessor() {}
};

class MsisServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MsisServiceProcessorFactory(const ::boost::shared_ptr< MsisServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MsisServiceIfFactory > handlerFactory_;
};

class MsisServiceMultiface : virtual public MsisServiceIf {
 public:
  MsisServiceMultiface(std::vector<boost::shared_ptr<MsisServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MsisServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MsisServiceIf> > ifaces_;
  MsisServiceMultiface() {}
  void add(boost::shared_ptr<MsisServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void zip() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->zip();
    }
    ifaces_[i]->zip();
  }

  bool update(const Entity& ent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(ent);
    }
    return ifaces_[i]->update(ent);
  }

};

} // namespace

#endif
