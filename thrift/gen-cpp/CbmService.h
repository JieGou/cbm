/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CbmService_H
#define CbmService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "cbm_types.h"

namespace cbm {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CbmServiceIf {
 public:
  virtual ~CbmServiceIf() {}
  virtual int32_t AddAccount(const Account& account) = 0;
  virtual bool DeleteAccount(const int32_t id) = 0;
  virtual bool UpdateAccount(const Account& account) = 0;
  virtual void GetAccountById(Account& _return, const int32_t id) = 0;
  virtual void GetAccountByForeignKey(Account& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetAccountList(std::vector<Account> & _return) = 0;
  virtual void GetAccountIds(std::vector<int32_t> & _return) = 0;
  virtual void GetAccountNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreAccount(const std::vector<Account> & objs) = 0;
  virtual void DeleteMoreAccount(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetAccountByFields(Account& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetAccountByFields1(Account& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetAccountByFields2(Account& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetAccountListByFields(std::vector<Account> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetAccountListByFields1(std::vector<Account> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetAccountListByFields2(std::vector<Account> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddAdjLayer(const AdjLayer& adj_layer) = 0;
  virtual bool DeleteAdjLayer(const int32_t id) = 0;
  virtual bool UpdateAdjLayer(const AdjLayer& adj_layer) = 0;
  virtual void GetAdjLayerById(AdjLayer& _return, const int32_t id) = 0;
  virtual void GetAdjLayerByForeignKey(AdjLayer& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetAdjLayerList(std::vector<AdjLayer> & _return) = 0;
  virtual void GetAdjLayerIds(std::vector<int32_t> & _return) = 0;
  virtual void GetAdjLayerNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreAdjLayer(const std::vector<AdjLayer> & objs) = 0;
  virtual void DeleteMoreAdjLayer(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetAdjLayerByFields(AdjLayer& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetAdjLayerByFields1(AdjLayer& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetAdjLayerByFields2(AdjLayer& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetAdjLayerListByFields(std::vector<AdjLayer> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetAdjLayerListByFields1(std::vector<AdjLayer> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetAdjLayerListByFields2(std::vector<AdjLayer> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddCoal(const Coal& coal) = 0;
  virtual bool DeleteCoal(const int32_t id) = 0;
  virtual bool UpdateCoal(const Coal& coal) = 0;
  virtual void GetCoalById(Coal& _return, const int32_t id) = 0;
  virtual void GetCoalByForeignKey(Coal& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetCoalList(std::vector<Coal> & _return) = 0;
  virtual void GetCoalIds(std::vector<int32_t> & _return) = 0;
  virtual void GetCoalNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreCoal(const std::vector<Coal> & objs) = 0;
  virtual void DeleteMoreCoal(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetCoalByFields(Coal& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetCoalByFields1(Coal& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetCoalByFields2(Coal& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetCoalListByFields(std::vector<Coal> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetCoalListByFields1(std::vector<Coal> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetCoalListByFields2(std::vector<Coal> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddComplexity(const Complexity& complexity) = 0;
  virtual bool DeleteComplexity(const int32_t id) = 0;
  virtual bool UpdateComplexity(const Complexity& complexity) = 0;
  virtual void GetComplexityById(Complexity& _return, const int32_t id) = 0;
  virtual void GetComplexityByForeignKey(Complexity& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetComplexityList(std::vector<Complexity> & _return) = 0;
  virtual void GetComplexityIds(std::vector<int32_t> & _return) = 0;
  virtual void GetComplexityNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreComplexity(const std::vector<Complexity> & objs) = 0;
  virtual void DeleteMoreComplexity(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetComplexityByFields(Complexity& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetComplexityByFields1(Complexity& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetComplexityByFields2(Complexity& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetComplexityListByFields(std::vector<Complexity> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetComplexityListByFields1(std::vector<Complexity> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetComplexityListByFields2(std::vector<Complexity> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& design_drilling_surf_technology) = 0;
  virtual bool DeleteDesignDrillingSurfTechnology(const int32_t id) = 0;
  virtual bool UpdateDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& design_drilling_surf_technology) = 0;
  virtual void GetDesignDrillingSurfTechnologyById(DesignDrillingSurfTechnology& _return, const int32_t id) = 0;
  virtual void GetDesignDrillingSurfTechnologyByForeignKey(DesignDrillingSurfTechnology& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetDesignDrillingSurfTechnologyList(std::vector<DesignDrillingSurfTechnology> & _return) = 0;
  virtual void GetDesignDrillingSurfTechnologyIds(std::vector<int32_t> & _return) = 0;
  virtual void GetDesignDrillingSurfTechnologyNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreDesignDrillingSurfTechnology(const std::vector<DesignDrillingSurfTechnology> & objs) = 0;
  virtual void DeleteMoreDesignDrillingSurfTechnology(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetDesignDrillingSurfTechnologyByFields(DesignDrillingSurfTechnology& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDesignDrillingSurfTechnologyByFields1(DesignDrillingSurfTechnology& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDesignDrillingSurfTechnologyByFields2(DesignDrillingSurfTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetDesignDrillingSurfTechnologyListByFields(std::vector<DesignDrillingSurfTechnology> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDesignDrillingSurfTechnologyListByFields1(std::vector<DesignDrillingSurfTechnology> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDesignDrillingSurfTechnologyListByFields2(std::vector<DesignDrillingSurfTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddDesignGoafTechnology(const DesignGoafTechnology& design_goaf_technology) = 0;
  virtual bool DeleteDesignGoafTechnology(const int32_t id) = 0;
  virtual bool UpdateDesignGoafTechnology(const DesignGoafTechnology& design_goaf_technology) = 0;
  virtual void GetDesignGoafTechnologyById(DesignGoafTechnology& _return, const int32_t id) = 0;
  virtual void GetDesignGoafTechnologyByForeignKey(DesignGoafTechnology& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetDesignGoafTechnologyList(std::vector<DesignGoafTechnology> & _return) = 0;
  virtual void GetDesignGoafTechnologyIds(std::vector<int32_t> & _return) = 0;
  virtual void GetDesignGoafTechnologyNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreDesignGoafTechnology(const std::vector<DesignGoafTechnology> & objs) = 0;
  virtual void DeleteMoreDesignGoafTechnology(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetDesignGoafTechnologyByFields(DesignGoafTechnology& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDesignGoafTechnologyByFields1(DesignGoafTechnology& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDesignGoafTechnologyByFields2(DesignGoafTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetDesignGoafTechnologyListByFields(std::vector<DesignGoafTechnology> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDesignGoafTechnologyListByFields1(std::vector<DesignGoafTechnology> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDesignGoafTechnologyListByFields2(std::vector<DesignGoafTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddDesignPore(const DesignPore& design_pore) = 0;
  virtual bool DeleteDesignPore(const int32_t id) = 0;
  virtual bool UpdateDesignPore(const DesignPore& design_pore) = 0;
  virtual void GetDesignPoreById(DesignPore& _return, const int32_t id) = 0;
  virtual void GetDesignPoreByForeignKey(DesignPore& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetDesignPoreList(std::vector<DesignPore> & _return) = 0;
  virtual void GetDesignPoreIds(std::vector<int32_t> & _return) = 0;
  virtual void GetDesignPoreNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreDesignPore(const std::vector<DesignPore> & objs) = 0;
  virtual void DeleteMoreDesignPore(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetDesignPoreByFields(DesignPore& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDesignPoreByFields1(DesignPore& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDesignPoreByFields2(DesignPore& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetDesignPoreListByFields(std::vector<DesignPore> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDesignPoreListByFields1(std::vector<DesignPore> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDesignPoreListByFields2(std::vector<DesignPore> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddDesignSite(const DesignSite& design_site) = 0;
  virtual bool DeleteDesignSite(const int32_t id) = 0;
  virtual bool UpdateDesignSite(const DesignSite& design_site) = 0;
  virtual void GetDesignSiteById(DesignSite& _return, const int32_t id) = 0;
  virtual void GetDesignSiteByForeignKey(DesignSite& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetDesignSiteList(std::vector<DesignSite> & _return) = 0;
  virtual void GetDesignSiteIds(std::vector<int32_t> & _return) = 0;
  virtual void GetDesignSiteNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreDesignSite(const std::vector<DesignSite> & objs) = 0;
  virtual void DeleteMoreDesignSite(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetDesignSiteByFields(DesignSite& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDesignSiteByFields1(DesignSite& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDesignSiteByFields2(DesignSite& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetDesignSiteListByFields(std::vector<DesignSite> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDesignSiteListByFields1(std::vector<DesignSite> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDesignSiteListByFields2(std::vector<DesignSite> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddDesignTechnology(const DesignTechnology& design_technology) = 0;
  virtual bool DeleteDesignTechnology(const int32_t id) = 0;
  virtual bool UpdateDesignTechnology(const DesignTechnology& design_technology) = 0;
  virtual void GetDesignTechnologyById(DesignTechnology& _return, const int32_t id) = 0;
  virtual void GetDesignTechnologyByForeignKey(DesignTechnology& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetDesignTechnologyList(std::vector<DesignTechnology> & _return) = 0;
  virtual void GetDesignTechnologyIds(std::vector<int32_t> & _return) = 0;
  virtual void GetDesignTechnologyNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreDesignTechnology(const std::vector<DesignTechnology> & objs) = 0;
  virtual void DeleteMoreDesignTechnology(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetDesignTechnologyByFields(DesignTechnology& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDesignTechnologyByFields1(DesignTechnology& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDesignTechnologyByFields2(DesignTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetDesignTechnologyListByFields(std::vector<DesignTechnology> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDesignTechnologyListByFields1(std::vector<DesignTechnology> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDesignTechnologyListByFields2(std::vector<DesignTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddDesignWorkSurfTechnology(const DesignWorkSurfTechnology& design_work_surf_technology) = 0;
  virtual bool DeleteDesignWorkSurfTechnology(const int32_t id) = 0;
  virtual bool UpdateDesignWorkSurfTechnology(const DesignWorkSurfTechnology& design_work_surf_technology) = 0;
  virtual void GetDesignWorkSurfTechnologyById(DesignWorkSurfTechnology& _return, const int32_t id) = 0;
  virtual void GetDesignWorkSurfTechnologyByForeignKey(DesignWorkSurfTechnology& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetDesignWorkSurfTechnologyList(std::vector<DesignWorkSurfTechnology> & _return) = 0;
  virtual void GetDesignWorkSurfTechnologyIds(std::vector<int32_t> & _return) = 0;
  virtual void GetDesignWorkSurfTechnologyNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreDesignWorkSurfTechnology(const std::vector<DesignWorkSurfTechnology> & objs) = 0;
  virtual void DeleteMoreDesignWorkSurfTechnology(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetDesignWorkSurfTechnologyByFields(DesignWorkSurfTechnology& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDesignWorkSurfTechnologyByFields1(DesignWorkSurfTechnology& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDesignWorkSurfTechnologyByFields2(DesignWorkSurfTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetDesignWorkSurfTechnologyListByFields(std::vector<DesignWorkSurfTechnology> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDesignWorkSurfTechnologyListByFields1(std::vector<DesignWorkSurfTechnology> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDesignWorkSurfTechnologyListByFields2(std::vector<DesignWorkSurfTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddDrillingRadiusParam(const DrillingRadiusParam& drilling_radius_param) = 0;
  virtual bool DeleteDrillingRadiusParam(const int32_t id) = 0;
  virtual bool UpdateDrillingRadiusParam(const DrillingRadiusParam& drilling_radius_param) = 0;
  virtual void GetDrillingRadiusParamById(DrillingRadiusParam& _return, const int32_t id) = 0;
  virtual void GetDrillingRadiusParamByForeignKey(DrillingRadiusParam& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetDrillingRadiusParamList(std::vector<DrillingRadiusParam> & _return) = 0;
  virtual void GetDrillingRadiusParamIds(std::vector<int32_t> & _return) = 0;
  virtual void GetDrillingRadiusParamNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreDrillingRadiusParam(const std::vector<DrillingRadiusParam> & objs) = 0;
  virtual void DeleteMoreDrillingRadiusParam(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetDrillingRadiusParamByFields(DrillingRadiusParam& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDrillingRadiusParamByFields1(DrillingRadiusParam& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDrillingRadiusParamByFields2(DrillingRadiusParam& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetDrillingRadiusParamListByFields(std::vector<DrillingRadiusParam> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDrillingRadiusParamListByFields1(std::vector<DrillingRadiusParam> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDrillingRadiusParamListByFields2(std::vector<DrillingRadiusParam> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddDrillingSurf(const DrillingSurf& drilling_surf) = 0;
  virtual bool DeleteDrillingSurf(const int32_t id) = 0;
  virtual bool UpdateDrillingSurf(const DrillingSurf& drilling_surf) = 0;
  virtual void GetDrillingSurfById(DrillingSurf& _return, const int32_t id) = 0;
  virtual void GetDrillingSurfByForeignKey(DrillingSurf& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetDrillingSurfList(std::vector<DrillingSurf> & _return) = 0;
  virtual void GetDrillingSurfIds(std::vector<int32_t> & _return) = 0;
  virtual void GetDrillingSurfNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreDrillingSurf(const std::vector<DrillingSurf> & objs) = 0;
  virtual void DeleteMoreDrillingSurf(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetDrillingSurfByFields(DrillingSurf& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDrillingSurfByFields1(DrillingSurf& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDrillingSurfByFields2(DrillingSurf& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetDrillingSurfListByFields(std::vector<DrillingSurf> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetDrillingSurfListByFields1(std::vector<DrillingSurf> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetDrillingSurfListByFields2(std::vector<DrillingSurf> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddEvalUnit(const EvalUnit& eval_unit) = 0;
  virtual bool DeleteEvalUnit(const int32_t id) = 0;
  virtual bool UpdateEvalUnit(const EvalUnit& eval_unit) = 0;
  virtual void GetEvalUnitById(EvalUnit& _return, const int32_t id) = 0;
  virtual void GetEvalUnitByForeignKey(EvalUnit& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetEvalUnitList(std::vector<EvalUnit> & _return) = 0;
  virtual void GetEvalUnitIds(std::vector<int32_t> & _return) = 0;
  virtual void GetEvalUnitNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreEvalUnit(const std::vector<EvalUnit> & objs) = 0;
  virtual void DeleteMoreEvalUnit(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetEvalUnitByFields(EvalUnit& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetEvalUnitByFields1(EvalUnit& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetEvalUnitByFields2(EvalUnit& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetEvalUnitListByFields(std::vector<EvalUnit> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetEvalUnitListByFields1(std::vector<EvalUnit> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetEvalUnitListByFields2(std::vector<EvalUnit> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddHighDrillingPore(const HighDrillingPore& high_drilling_pore) = 0;
  virtual bool DeleteHighDrillingPore(const int32_t id) = 0;
  virtual bool UpdateHighDrillingPore(const HighDrillingPore& high_drilling_pore) = 0;
  virtual void GetHighDrillingPoreById(HighDrillingPore& _return, const int32_t id) = 0;
  virtual void GetHighDrillingPoreByForeignKey(HighDrillingPore& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetHighDrillingPoreList(std::vector<HighDrillingPore> & _return) = 0;
  virtual void GetHighDrillingPoreIds(std::vector<int32_t> & _return) = 0;
  virtual void GetHighDrillingPoreNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreHighDrillingPore(const std::vector<HighDrillingPore> & objs) = 0;
  virtual void DeleteMoreHighDrillingPore(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetHighDrillingPoreByFields(HighDrillingPore& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetHighDrillingPoreByFields1(HighDrillingPore& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetHighDrillingPoreByFields2(HighDrillingPore& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetHighDrillingPoreListByFields(std::vector<HighDrillingPore> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetHighDrillingPoreListByFields1(std::vector<HighDrillingPore> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetHighDrillingPoreListByFields2(std::vector<HighDrillingPore> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddHighDrillingPoreParam(const HighDrillingPoreParam& high_drilling_pore_param) = 0;
  virtual bool DeleteHighDrillingPoreParam(const int32_t id) = 0;
  virtual bool UpdateHighDrillingPoreParam(const HighDrillingPoreParam& high_drilling_pore_param) = 0;
  virtual void GetHighDrillingPoreParamById(HighDrillingPoreParam& _return, const int32_t id) = 0;
  virtual void GetHighDrillingPoreParamByForeignKey(HighDrillingPoreParam& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetHighDrillingPoreParamList(std::vector<HighDrillingPoreParam> & _return) = 0;
  virtual void GetHighDrillingPoreParamIds(std::vector<int32_t> & _return) = 0;
  virtual void GetHighDrillingPoreParamNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreHighDrillingPoreParam(const std::vector<HighDrillingPoreParam> & objs) = 0;
  virtual void DeleteMoreHighDrillingPoreParam(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetHighDrillingPoreParamByFields(HighDrillingPoreParam& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetHighDrillingPoreParamByFields1(HighDrillingPoreParam& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetHighDrillingPoreParamByFields2(HighDrillingPoreParam& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetHighDrillingPoreParamListByFields(std::vector<HighDrillingPoreParam> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetHighDrillingPoreParamListByFields1(std::vector<HighDrillingPoreParam> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetHighDrillingPoreParamListByFields2(std::vector<HighDrillingPoreParam> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddHighDrillingSiteParam(const HighDrillingSiteParam& high_drilling_site_param) = 0;
  virtual bool DeleteHighDrillingSiteParam(const int32_t id) = 0;
  virtual bool UpdateHighDrillingSiteParam(const HighDrillingSiteParam& high_drilling_site_param) = 0;
  virtual void GetHighDrillingSiteParamById(HighDrillingSiteParam& _return, const int32_t id) = 0;
  virtual void GetHighDrillingSiteParamByForeignKey(HighDrillingSiteParam& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetHighDrillingSiteParamList(std::vector<HighDrillingSiteParam> & _return) = 0;
  virtual void GetHighDrillingSiteParamIds(std::vector<int32_t> & _return) = 0;
  virtual void GetHighDrillingSiteParamNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreHighDrillingSiteParam(const std::vector<HighDrillingSiteParam> & objs) = 0;
  virtual void DeleteMoreHighDrillingSiteParam(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetHighDrillingSiteParamByFields(HighDrillingSiteParam& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetHighDrillingSiteParamByFields1(HighDrillingSiteParam& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetHighDrillingSiteParamByFields2(HighDrillingSiteParam& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetHighDrillingSiteParamListByFields(std::vector<HighDrillingSiteParam> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetHighDrillingSiteParamListByFields1(std::vector<HighDrillingSiteParam> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetHighDrillingSiteParamListByFields2(std::vector<HighDrillingSiteParam> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddHighDrillingTunnel(const HighDrillingTunnel& high_drilling_tunnel) = 0;
  virtual bool DeleteHighDrillingTunnel(const int32_t id) = 0;
  virtual bool UpdateHighDrillingTunnel(const HighDrillingTunnel& high_drilling_tunnel) = 0;
  virtual void GetHighDrillingTunnelById(HighDrillingTunnel& _return, const int32_t id) = 0;
  virtual void GetHighDrillingTunnelByForeignKey(HighDrillingTunnel& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetHighDrillingTunnelList(std::vector<HighDrillingTunnel> & _return) = 0;
  virtual void GetHighDrillingTunnelIds(std::vector<int32_t> & _return) = 0;
  virtual void GetHighDrillingTunnelNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreHighDrillingTunnel(const std::vector<HighDrillingTunnel> & objs) = 0;
  virtual void DeleteMoreHighDrillingTunnel(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetHighDrillingTunnelByFields(HighDrillingTunnel& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetHighDrillingTunnelByFields1(HighDrillingTunnel& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetHighDrillingTunnelByFields2(HighDrillingTunnel& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetHighDrillingTunnelListByFields(std::vector<HighDrillingTunnel> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetHighDrillingTunnelListByFields1(std::vector<HighDrillingTunnel> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetHighDrillingTunnelListByFields2(std::vector<HighDrillingTunnel> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddHydrGeo(const HydrGeo& hydr_geo) = 0;
  virtual bool DeleteHydrGeo(const int32_t id) = 0;
  virtual bool UpdateHydrGeo(const HydrGeo& hydr_geo) = 0;
  virtual void GetHydrGeoById(HydrGeo& _return, const int32_t id) = 0;
  virtual void GetHydrGeoByForeignKey(HydrGeo& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetHydrGeoList(std::vector<HydrGeo> & _return) = 0;
  virtual void GetHydrGeoIds(std::vector<int32_t> & _return) = 0;
  virtual void GetHydrGeoNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreHydrGeo(const std::vector<HydrGeo> & objs) = 0;
  virtual void DeleteMoreHydrGeo(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetHydrGeoByFields(HydrGeo& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetHydrGeoByFields1(HydrGeo& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetHydrGeoByFields2(HydrGeo& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetHydrGeoListByFields(std::vector<HydrGeo> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetHydrGeoListByFields1(std::vector<HydrGeo> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetHydrGeoListByFields2(std::vector<HydrGeo> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddMine(const Mine& mine) = 0;
  virtual bool DeleteMine(const int32_t id) = 0;
  virtual bool UpdateMine(const Mine& mine) = 0;
  virtual void GetMineById(Mine& _return, const int32_t id) = 0;
  virtual void GetMineByForeignKey(Mine& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetMineList(std::vector<Mine> & _return) = 0;
  virtual void GetMineIds(std::vector<int32_t> & _return) = 0;
  virtual void GetMineNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreMine(const std::vector<Mine> & objs) = 0;
  virtual void DeleteMoreMine(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetMineByFields(Mine& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetMineByFields1(Mine& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetMineByFields2(Mine& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetMineListByFields(std::vector<Mine> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetMineListByFields1(std::vector<Mine> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetMineListByFields2(std::vector<Mine> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddMineBase(const MineBase& mine_base) = 0;
  virtual bool DeleteMineBase(const int32_t id) = 0;
  virtual bool UpdateMineBase(const MineBase& mine_base) = 0;
  virtual void GetMineBaseById(MineBase& _return, const int32_t id) = 0;
  virtual void GetMineBaseByForeignKey(MineBase& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetMineBaseList(std::vector<MineBase> & _return) = 0;
  virtual void GetMineBaseIds(std::vector<int32_t> & _return) = 0;
  virtual void GetMineBaseNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreMineBase(const std::vector<MineBase> & objs) = 0;
  virtual void DeleteMoreMineBase(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetMineBaseByFields(MineBase& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetMineBaseByFields1(MineBase& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetMineBaseByFields2(MineBase& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetMineBaseListByFields(std::vector<MineBase> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetMineBaseListByFields1(std::vector<MineBase> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetMineBaseListByFields2(std::vector<MineBase> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddMineRegion(const MineRegion& mine_region) = 0;
  virtual bool DeleteMineRegion(const int32_t id) = 0;
  virtual bool UpdateMineRegion(const MineRegion& mine_region) = 0;
  virtual void GetMineRegionById(MineRegion& _return, const int32_t id) = 0;
  virtual void GetMineRegionByForeignKey(MineRegion& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetMineRegionList(std::vector<MineRegion> & _return) = 0;
  virtual void GetMineRegionIds(std::vector<int32_t> & _return) = 0;
  virtual void GetMineRegionNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreMineRegion(const std::vector<MineRegion> & objs) = 0;
  virtual void DeleteMoreMineRegion(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetMineRegionByFields(MineRegion& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetMineRegionByFields1(MineRegion& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetMineRegionByFields2(MineRegion& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetMineRegionListByFields(std::vector<MineRegion> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetMineRegionListByFields1(std::vector<MineRegion> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetMineRegionListByFields2(std::vector<MineRegion> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddPoreFlow(const PoreFlow& pore_flow) = 0;
  virtual bool DeletePoreFlow(const int32_t id) = 0;
  virtual bool UpdatePoreFlow(const PoreFlow& pore_flow) = 0;
  virtual void GetPoreFlowById(PoreFlow& _return, const int32_t id) = 0;
  virtual void GetPoreFlowByForeignKey(PoreFlow& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetPoreFlowList(std::vector<PoreFlow> & _return) = 0;
  virtual void GetPoreFlowIds(std::vector<int32_t> & _return) = 0;
  virtual void GetPoreFlowNames(std::vector<std::string> & _return) = 0;
  virtual void AddMorePoreFlow(const std::vector<PoreFlow> & objs) = 0;
  virtual void DeleteMorePoreFlow(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetPoreFlowByFields(PoreFlow& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetPoreFlowByFields1(PoreFlow& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetPoreFlowByFields2(PoreFlow& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetPoreFlowListByFields(std::vector<PoreFlow> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetPoreFlowListByFields1(std::vector<PoreFlow> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetPoreFlowListByFields2(std::vector<PoreFlow> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddPoreSize(const PoreSize& pore_size) = 0;
  virtual bool DeletePoreSize(const int32_t id) = 0;
  virtual bool UpdatePoreSize(const PoreSize& pore_size) = 0;
  virtual void GetPoreSizeById(PoreSize& _return, const int32_t id) = 0;
  virtual void GetPoreSizeByForeignKey(PoreSize& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetPoreSizeList(std::vector<PoreSize> & _return) = 0;
  virtual void GetPoreSizeIds(std::vector<int32_t> & _return) = 0;
  virtual void GetPoreSizeNames(std::vector<std::string> & _return) = 0;
  virtual void AddMorePoreSize(const std::vector<PoreSize> & objs) = 0;
  virtual void DeleteMorePoreSize(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetPoreSizeByFields(PoreSize& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetPoreSizeByFields1(PoreSize& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetPoreSizeByFields2(PoreSize& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetPoreSizeListByFields(std::vector<PoreSize> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetPoreSizeListByFields1(std::vector<PoreSize> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetPoreSizeListByFields2(std::vector<PoreSize> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddResAbundance(const ResAbundance& res_abundance) = 0;
  virtual bool DeleteResAbundance(const int32_t id) = 0;
  virtual bool UpdateResAbundance(const ResAbundance& res_abundance) = 0;
  virtual void GetResAbundanceById(ResAbundance& _return, const int32_t id) = 0;
  virtual void GetResAbundanceByForeignKey(ResAbundance& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetResAbundanceList(std::vector<ResAbundance> & _return) = 0;
  virtual void GetResAbundanceIds(std::vector<int32_t> & _return) = 0;
  virtual void GetResAbundanceNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreResAbundance(const std::vector<ResAbundance> & objs) = 0;
  virtual void DeleteMoreResAbundance(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetResAbundanceByFields(ResAbundance& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetResAbundanceByFields1(ResAbundance& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetResAbundanceByFields2(ResAbundance& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetResAbundanceListByFields(std::vector<ResAbundance> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetResAbundanceListByFields1(std::vector<ResAbundance> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetResAbundanceListByFields2(std::vector<ResAbundance> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddRock(const Rock& rock) = 0;
  virtual bool DeleteRock(const int32_t id) = 0;
  virtual bool UpdateRock(const Rock& rock) = 0;
  virtual void GetRockById(Rock& _return, const int32_t id) = 0;
  virtual void GetRockByForeignKey(Rock& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetRockList(std::vector<Rock> & _return) = 0;
  virtual void GetRockIds(std::vector<int32_t> & _return) = 0;
  virtual void GetRockNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreRock(const std::vector<Rock> & objs) = 0;
  virtual void DeleteMoreRock(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetRockByFields(Rock& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetRockByFields1(Rock& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetRockByFields2(Rock& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetRockListByFields(std::vector<Rock> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetRockListByFields1(std::vector<Rock> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetRockListByFields2(std::vector<Rock> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddSysInfo(const SysInfo& sys_info) = 0;
  virtual bool DeleteSysInfo(const int32_t id) = 0;
  virtual bool UpdateSysInfo(const SysInfo& sys_info) = 0;
  virtual void GetSysInfoById(SysInfo& _return, const int32_t id) = 0;
  virtual void GetSysInfoByForeignKey(SysInfo& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetSysInfoList(std::vector<SysInfo> & _return) = 0;
  virtual void GetSysInfoIds(std::vector<int32_t> & _return) = 0;
  virtual void GetSysInfoNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreSysInfo(const std::vector<SysInfo> & objs) = 0;
  virtual void DeleteMoreSysInfo(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetSysInfoByFields(SysInfo& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetSysInfoByFields1(SysInfo& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetSysInfoByFields2(SysInfo& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetSysInfoListByFields(std::vector<SysInfo> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetSysInfoListByFields1(std::vector<SysInfo> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetSysInfoListByFields2(std::vector<SysInfo> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddTechMode(const TechMode& tech_mode) = 0;
  virtual bool DeleteTechMode(const int32_t id) = 0;
  virtual bool UpdateTechMode(const TechMode& tech_mode) = 0;
  virtual void GetTechModeById(TechMode& _return, const int32_t id) = 0;
  virtual void GetTechModeByForeignKey(TechMode& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetTechModeList(std::vector<TechMode> & _return) = 0;
  virtual void GetTechModeIds(std::vector<int32_t> & _return) = 0;
  virtual void GetTechModeNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreTechMode(const std::vector<TechMode> & objs) = 0;
  virtual void DeleteMoreTechMode(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetTechModeByFields(TechMode& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetTechModeByFields1(TechMode& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetTechModeByFields2(TechMode& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetTechModeListByFields(std::vector<TechMode> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetTechModeListByFields1(std::vector<TechMode> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetTechModeListByFields2(std::vector<TechMode> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddTechnology(const Technology& technology) = 0;
  virtual bool DeleteTechnology(const int32_t id) = 0;
  virtual bool UpdateTechnology(const Technology& technology) = 0;
  virtual void GetTechnologyById(Technology& _return, const int32_t id) = 0;
  virtual void GetTechnologyByForeignKey(Technology& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetTechnologyList(std::vector<Technology> & _return) = 0;
  virtual void GetTechnologyIds(std::vector<int32_t> & _return) = 0;
  virtual void GetTechnologyNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreTechnology(const std::vector<Technology> & objs) = 0;
  virtual void DeleteMoreTechnology(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetTechnologyByFields(Technology& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetTechnologyByFields1(Technology& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetTechnologyByFields2(Technology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetTechnologyListByFields(std::vector<Technology> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetTechnologyListByFields1(std::vector<Technology> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetTechnologyListByFields2(std::vector<Technology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddTopoGeo(const TopoGeo& topo_geo) = 0;
  virtual bool DeleteTopoGeo(const int32_t id) = 0;
  virtual bool UpdateTopoGeo(const TopoGeo& topo_geo) = 0;
  virtual void GetTopoGeoById(TopoGeo& _return, const int32_t id) = 0;
  virtual void GetTopoGeoByForeignKey(TopoGeo& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetTopoGeoList(std::vector<TopoGeo> & _return) = 0;
  virtual void GetTopoGeoIds(std::vector<int32_t> & _return) = 0;
  virtual void GetTopoGeoNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreTopoGeo(const std::vector<TopoGeo> & objs) = 0;
  virtual void DeleteMoreTopoGeo(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetTopoGeoByFields(TopoGeo& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetTopoGeoByFields1(TopoGeo& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetTopoGeoByFields2(TopoGeo& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetTopoGeoListByFields(std::vector<TopoGeo> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetTopoGeoListByFields1(std::vector<TopoGeo> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetTopoGeoListByFields2(std::vector<TopoGeo> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddTunnel(const Tunnel& tunnel) = 0;
  virtual bool DeleteTunnel(const int32_t id) = 0;
  virtual bool UpdateTunnel(const Tunnel& tunnel) = 0;
  virtual void GetTunnelById(Tunnel& _return, const int32_t id) = 0;
  virtual void GetTunnelByForeignKey(Tunnel& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetTunnelList(std::vector<Tunnel> & _return) = 0;
  virtual void GetTunnelIds(std::vector<int32_t> & _return) = 0;
  virtual void GetTunnelNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreTunnel(const std::vector<Tunnel> & objs) = 0;
  virtual void DeleteMoreTunnel(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetTunnelByFields(Tunnel& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetTunnelByFields1(Tunnel& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetTunnelByFields2(Tunnel& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetTunnelListByFields(std::vector<Tunnel> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetTunnelListByFields1(std::vector<Tunnel> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetTunnelListByFields2(std::vector<Tunnel> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddWorkArea(const WorkArea& work_area) = 0;
  virtual bool DeleteWorkArea(const int32_t id) = 0;
  virtual bool UpdateWorkArea(const WorkArea& work_area) = 0;
  virtual void GetWorkAreaById(WorkArea& _return, const int32_t id) = 0;
  virtual void GetWorkAreaByForeignKey(WorkArea& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetWorkAreaList(std::vector<WorkArea> & _return) = 0;
  virtual void GetWorkAreaIds(std::vector<int32_t> & _return) = 0;
  virtual void GetWorkAreaNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreWorkArea(const std::vector<WorkArea> & objs) = 0;
  virtual void DeleteMoreWorkArea(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetWorkAreaByFields(WorkArea& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetWorkAreaByFields1(WorkArea& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetWorkAreaByFields2(WorkArea& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetWorkAreaListByFields(std::vector<WorkArea> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetWorkAreaListByFields1(std::vector<WorkArea> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetWorkAreaListByFields2(std::vector<WorkArea> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual int32_t AddWorkSurf(const WorkSurf& work_surf) = 0;
  virtual bool DeleteWorkSurf(const int32_t id) = 0;
  virtual bool UpdateWorkSurf(const WorkSurf& work_surf) = 0;
  virtual void GetWorkSurfById(WorkSurf& _return, const int32_t id) = 0;
  virtual void GetWorkSurfByForeignKey(WorkSurf& _return, const std::string& fkey, const int32_t id) = 0;
  virtual void GetWorkSurfList(std::vector<WorkSurf> & _return) = 0;
  virtual void GetWorkSurfIds(std::vector<int32_t> & _return) = 0;
  virtual void GetWorkSurfNames(std::vector<std::string> & _return) = 0;
  virtual void AddMoreWorkSurf(const std::vector<WorkSurf> & objs) = 0;
  virtual void DeleteMoreWorkSurf(const std::vector<int32_t> & obj_ids) = 0;
  virtual void GetWorkSurfByFields(WorkSurf& _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetWorkSurfByFields1(WorkSurf& _return, const std::string& field, const std::string& value) = 0;
  virtual void GetWorkSurfByFields2(WorkSurf& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void GetWorkSurfListByFields(std::vector<WorkSurf> & _return, const std::map<std::string, std::string> & fields) = 0;
  virtual void GetWorkSurfListByFields1(std::vector<WorkSurf> & _return, const std::string& field, const std::string& value) = 0;
  virtual void GetWorkSurfListByFields2(std::vector<WorkSurf> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) = 0;
  virtual void InitSampleRegion() = 0;
  virtual int32_t GetOnlineAccountId() = 0;
  virtual void GetOnlineMine(Mine& _return) = 0;
  virtual int32_t VerifyMineAccount(const std::string& username, const std::string& pwd) = 0;
  virtual void GetMineRegionsOfBase(std::vector<std::string> & _return, const std::string& baseName) = 0;
  virtual void GetBaseByRegion(std::string& _return, const std::string& regionName) = 0;
  virtual void GetSampleMineOfRegion(Mine& _return, const std::string& regionName) = 0;
  virtual void GetSampleCoalOfRegion(Coal& _return, const std::string& regionName) = 0;
  virtual void GetCoalNamesOfMine(std::vector<std::string> & _return, const int32_t mine_id) = 0;
  virtual void GetCoalIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id) = 0;
  virtual void GetWorkAreasOfMine(std::vector<WorkArea> & _return, const int32_t mine_id) = 0;
  virtual void GetWorkSurfsOfMine(std::vector<WorkSurf> & _return, const int32_t mine_id) = 0;
  virtual void GetDrillingSurfsOfMine(std::vector<DrillingSurf> & _return, const int32_t mine_id) = 0;
  virtual void GetWorkAreaIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id) = 0;
  virtual void GetWorkSurfIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id) = 0;
  virtual void GetDrillingSurfIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id) = 0;
  virtual int32_t DifficultEval(const Coal& coal) = 0;
  virtual void DifficultEvalString(std::string& _return, const Coal& coal) = 0;
  virtual double MineGasReservesW1(const int32_t mine_id) = 0;
  virtual double MineGasReservesW2(const int32_t mine_id) = 0;
  virtual double WorkAreaGasFlow(const WorkArea& work_area, const double K1) = 0;
  virtual double MineGasFlow(const Mine& mine) = 0;
  virtual double WorkSurfGasFlow1(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf) = 0;
  virtual double WorkSurfGasFlow2(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf) = 0;
  virtual void DrillingSurfGasFlow(DrillingSurfGasFlowResult& _return, const Coal& coal, const DrillingSurf& drilling_surf, const Tunnel& tunnel) = 0;
};

class CbmServiceIfFactory {
 public:
  typedef CbmServiceIf Handler;

  virtual ~CbmServiceIfFactory() {}

  virtual CbmServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CbmServiceIf* /* handler */) = 0;
};

class CbmServiceIfSingletonFactory : virtual public CbmServiceIfFactory {
 public:
  CbmServiceIfSingletonFactory(const boost::shared_ptr<CbmServiceIf>& iface) : iface_(iface) {}
  virtual ~CbmServiceIfSingletonFactory() {}

  virtual CbmServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CbmServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CbmServiceIf> iface_;
};

class CbmServiceNull : virtual public CbmServiceIf {
 public:
  virtual ~CbmServiceNull() {}
  int32_t AddAccount(const Account& /* account */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteAccount(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateAccount(const Account& /* account */) {
    bool _return = false;
    return _return;
  }
  void GetAccountById(Account& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetAccountByForeignKey(Account& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetAccountList(std::vector<Account> & /* _return */) {
    return;
  }
  void GetAccountIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetAccountNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreAccount(const std::vector<Account> & /* objs */) {
    return;
  }
  void DeleteMoreAccount(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetAccountByFields(Account& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetAccountByFields1(Account& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetAccountByFields2(Account& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetAccountListByFields(std::vector<Account> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetAccountListByFields1(std::vector<Account> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetAccountListByFields2(std::vector<Account> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddAdjLayer(const AdjLayer& /* adj_layer */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteAdjLayer(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateAdjLayer(const AdjLayer& /* adj_layer */) {
    bool _return = false;
    return _return;
  }
  void GetAdjLayerById(AdjLayer& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetAdjLayerByForeignKey(AdjLayer& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetAdjLayerList(std::vector<AdjLayer> & /* _return */) {
    return;
  }
  void GetAdjLayerIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetAdjLayerNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreAdjLayer(const std::vector<AdjLayer> & /* objs */) {
    return;
  }
  void DeleteMoreAdjLayer(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetAdjLayerByFields(AdjLayer& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetAdjLayerByFields1(AdjLayer& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetAdjLayerByFields2(AdjLayer& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetAdjLayerListByFields(std::vector<AdjLayer> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetAdjLayerListByFields1(std::vector<AdjLayer> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetAdjLayerListByFields2(std::vector<AdjLayer> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddCoal(const Coal& /* coal */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteCoal(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateCoal(const Coal& /* coal */) {
    bool _return = false;
    return _return;
  }
  void GetCoalById(Coal& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetCoalByForeignKey(Coal& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetCoalList(std::vector<Coal> & /* _return */) {
    return;
  }
  void GetCoalIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetCoalNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreCoal(const std::vector<Coal> & /* objs */) {
    return;
  }
  void DeleteMoreCoal(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetCoalByFields(Coal& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetCoalByFields1(Coal& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetCoalByFields2(Coal& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetCoalListByFields(std::vector<Coal> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetCoalListByFields1(std::vector<Coal> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetCoalListByFields2(std::vector<Coal> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddComplexity(const Complexity& /* complexity */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteComplexity(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateComplexity(const Complexity& /* complexity */) {
    bool _return = false;
    return _return;
  }
  void GetComplexityById(Complexity& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetComplexityByForeignKey(Complexity& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetComplexityList(std::vector<Complexity> & /* _return */) {
    return;
  }
  void GetComplexityIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetComplexityNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreComplexity(const std::vector<Complexity> & /* objs */) {
    return;
  }
  void DeleteMoreComplexity(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetComplexityByFields(Complexity& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetComplexityByFields1(Complexity& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetComplexityByFields2(Complexity& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetComplexityListByFields(std::vector<Complexity> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetComplexityListByFields1(std::vector<Complexity> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetComplexityListByFields2(std::vector<Complexity> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& /* design_drilling_surf_technology */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteDesignDrillingSurfTechnology(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& /* design_drilling_surf_technology */) {
    bool _return = false;
    return _return;
  }
  void GetDesignDrillingSurfTechnologyById(DesignDrillingSurfTechnology& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetDesignDrillingSurfTechnologyByForeignKey(DesignDrillingSurfTechnology& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetDesignDrillingSurfTechnologyList(std::vector<DesignDrillingSurfTechnology> & /* _return */) {
    return;
  }
  void GetDesignDrillingSurfTechnologyIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetDesignDrillingSurfTechnologyNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreDesignDrillingSurfTechnology(const std::vector<DesignDrillingSurfTechnology> & /* objs */) {
    return;
  }
  void DeleteMoreDesignDrillingSurfTechnology(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetDesignDrillingSurfTechnologyByFields(DesignDrillingSurfTechnology& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDesignDrillingSurfTechnologyByFields1(DesignDrillingSurfTechnology& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDesignDrillingSurfTechnologyByFields2(DesignDrillingSurfTechnology& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetDesignDrillingSurfTechnologyListByFields(std::vector<DesignDrillingSurfTechnology> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDesignDrillingSurfTechnologyListByFields1(std::vector<DesignDrillingSurfTechnology> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDesignDrillingSurfTechnologyListByFields2(std::vector<DesignDrillingSurfTechnology> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddDesignGoafTechnology(const DesignGoafTechnology& /* design_goaf_technology */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteDesignGoafTechnology(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateDesignGoafTechnology(const DesignGoafTechnology& /* design_goaf_technology */) {
    bool _return = false;
    return _return;
  }
  void GetDesignGoafTechnologyById(DesignGoafTechnology& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetDesignGoafTechnologyByForeignKey(DesignGoafTechnology& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetDesignGoafTechnologyList(std::vector<DesignGoafTechnology> & /* _return */) {
    return;
  }
  void GetDesignGoafTechnologyIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetDesignGoafTechnologyNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreDesignGoafTechnology(const std::vector<DesignGoafTechnology> & /* objs */) {
    return;
  }
  void DeleteMoreDesignGoafTechnology(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetDesignGoafTechnologyByFields(DesignGoafTechnology& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDesignGoafTechnologyByFields1(DesignGoafTechnology& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDesignGoafTechnologyByFields2(DesignGoafTechnology& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetDesignGoafTechnologyListByFields(std::vector<DesignGoafTechnology> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDesignGoafTechnologyListByFields1(std::vector<DesignGoafTechnology> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDesignGoafTechnologyListByFields2(std::vector<DesignGoafTechnology> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddDesignPore(const DesignPore& /* design_pore */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteDesignPore(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateDesignPore(const DesignPore& /* design_pore */) {
    bool _return = false;
    return _return;
  }
  void GetDesignPoreById(DesignPore& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetDesignPoreByForeignKey(DesignPore& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetDesignPoreList(std::vector<DesignPore> & /* _return */) {
    return;
  }
  void GetDesignPoreIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetDesignPoreNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreDesignPore(const std::vector<DesignPore> & /* objs */) {
    return;
  }
  void DeleteMoreDesignPore(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetDesignPoreByFields(DesignPore& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDesignPoreByFields1(DesignPore& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDesignPoreByFields2(DesignPore& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetDesignPoreListByFields(std::vector<DesignPore> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDesignPoreListByFields1(std::vector<DesignPore> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDesignPoreListByFields2(std::vector<DesignPore> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddDesignSite(const DesignSite& /* design_site */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteDesignSite(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateDesignSite(const DesignSite& /* design_site */) {
    bool _return = false;
    return _return;
  }
  void GetDesignSiteById(DesignSite& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetDesignSiteByForeignKey(DesignSite& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetDesignSiteList(std::vector<DesignSite> & /* _return */) {
    return;
  }
  void GetDesignSiteIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetDesignSiteNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreDesignSite(const std::vector<DesignSite> & /* objs */) {
    return;
  }
  void DeleteMoreDesignSite(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetDesignSiteByFields(DesignSite& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDesignSiteByFields1(DesignSite& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDesignSiteByFields2(DesignSite& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetDesignSiteListByFields(std::vector<DesignSite> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDesignSiteListByFields1(std::vector<DesignSite> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDesignSiteListByFields2(std::vector<DesignSite> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddDesignTechnology(const DesignTechnology& /* design_technology */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteDesignTechnology(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateDesignTechnology(const DesignTechnology& /* design_technology */) {
    bool _return = false;
    return _return;
  }
  void GetDesignTechnologyById(DesignTechnology& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetDesignTechnologyByForeignKey(DesignTechnology& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetDesignTechnologyList(std::vector<DesignTechnology> & /* _return */) {
    return;
  }
  void GetDesignTechnologyIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetDesignTechnologyNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreDesignTechnology(const std::vector<DesignTechnology> & /* objs */) {
    return;
  }
  void DeleteMoreDesignTechnology(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetDesignTechnologyByFields(DesignTechnology& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDesignTechnologyByFields1(DesignTechnology& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDesignTechnologyByFields2(DesignTechnology& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetDesignTechnologyListByFields(std::vector<DesignTechnology> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDesignTechnologyListByFields1(std::vector<DesignTechnology> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDesignTechnologyListByFields2(std::vector<DesignTechnology> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddDesignWorkSurfTechnology(const DesignWorkSurfTechnology& /* design_work_surf_technology */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteDesignWorkSurfTechnology(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateDesignWorkSurfTechnology(const DesignWorkSurfTechnology& /* design_work_surf_technology */) {
    bool _return = false;
    return _return;
  }
  void GetDesignWorkSurfTechnologyById(DesignWorkSurfTechnology& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetDesignWorkSurfTechnologyByForeignKey(DesignWorkSurfTechnology& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetDesignWorkSurfTechnologyList(std::vector<DesignWorkSurfTechnology> & /* _return */) {
    return;
  }
  void GetDesignWorkSurfTechnologyIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetDesignWorkSurfTechnologyNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreDesignWorkSurfTechnology(const std::vector<DesignWorkSurfTechnology> & /* objs */) {
    return;
  }
  void DeleteMoreDesignWorkSurfTechnology(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetDesignWorkSurfTechnologyByFields(DesignWorkSurfTechnology& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDesignWorkSurfTechnologyByFields1(DesignWorkSurfTechnology& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDesignWorkSurfTechnologyByFields2(DesignWorkSurfTechnology& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetDesignWorkSurfTechnologyListByFields(std::vector<DesignWorkSurfTechnology> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDesignWorkSurfTechnologyListByFields1(std::vector<DesignWorkSurfTechnology> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDesignWorkSurfTechnologyListByFields2(std::vector<DesignWorkSurfTechnology> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddDrillingRadiusParam(const DrillingRadiusParam& /* drilling_radius_param */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteDrillingRadiusParam(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateDrillingRadiusParam(const DrillingRadiusParam& /* drilling_radius_param */) {
    bool _return = false;
    return _return;
  }
  void GetDrillingRadiusParamById(DrillingRadiusParam& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetDrillingRadiusParamByForeignKey(DrillingRadiusParam& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetDrillingRadiusParamList(std::vector<DrillingRadiusParam> & /* _return */) {
    return;
  }
  void GetDrillingRadiusParamIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetDrillingRadiusParamNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreDrillingRadiusParam(const std::vector<DrillingRadiusParam> & /* objs */) {
    return;
  }
  void DeleteMoreDrillingRadiusParam(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetDrillingRadiusParamByFields(DrillingRadiusParam& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDrillingRadiusParamByFields1(DrillingRadiusParam& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDrillingRadiusParamByFields2(DrillingRadiusParam& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetDrillingRadiusParamListByFields(std::vector<DrillingRadiusParam> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDrillingRadiusParamListByFields1(std::vector<DrillingRadiusParam> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDrillingRadiusParamListByFields2(std::vector<DrillingRadiusParam> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddDrillingSurf(const DrillingSurf& /* drilling_surf */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteDrillingSurf(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateDrillingSurf(const DrillingSurf& /* drilling_surf */) {
    bool _return = false;
    return _return;
  }
  void GetDrillingSurfById(DrillingSurf& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetDrillingSurfByForeignKey(DrillingSurf& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetDrillingSurfList(std::vector<DrillingSurf> & /* _return */) {
    return;
  }
  void GetDrillingSurfIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetDrillingSurfNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreDrillingSurf(const std::vector<DrillingSurf> & /* objs */) {
    return;
  }
  void DeleteMoreDrillingSurf(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetDrillingSurfByFields(DrillingSurf& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDrillingSurfByFields1(DrillingSurf& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDrillingSurfByFields2(DrillingSurf& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetDrillingSurfListByFields(std::vector<DrillingSurf> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetDrillingSurfListByFields1(std::vector<DrillingSurf> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetDrillingSurfListByFields2(std::vector<DrillingSurf> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddEvalUnit(const EvalUnit& /* eval_unit */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteEvalUnit(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateEvalUnit(const EvalUnit& /* eval_unit */) {
    bool _return = false;
    return _return;
  }
  void GetEvalUnitById(EvalUnit& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetEvalUnitByForeignKey(EvalUnit& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetEvalUnitList(std::vector<EvalUnit> & /* _return */) {
    return;
  }
  void GetEvalUnitIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetEvalUnitNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreEvalUnit(const std::vector<EvalUnit> & /* objs */) {
    return;
  }
  void DeleteMoreEvalUnit(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetEvalUnitByFields(EvalUnit& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetEvalUnitByFields1(EvalUnit& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetEvalUnitByFields2(EvalUnit& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetEvalUnitListByFields(std::vector<EvalUnit> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetEvalUnitListByFields1(std::vector<EvalUnit> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetEvalUnitListByFields2(std::vector<EvalUnit> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddHighDrillingPore(const HighDrillingPore& /* high_drilling_pore */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteHighDrillingPore(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateHighDrillingPore(const HighDrillingPore& /* high_drilling_pore */) {
    bool _return = false;
    return _return;
  }
  void GetHighDrillingPoreById(HighDrillingPore& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetHighDrillingPoreByForeignKey(HighDrillingPore& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetHighDrillingPoreList(std::vector<HighDrillingPore> & /* _return */) {
    return;
  }
  void GetHighDrillingPoreIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetHighDrillingPoreNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreHighDrillingPore(const std::vector<HighDrillingPore> & /* objs */) {
    return;
  }
  void DeleteMoreHighDrillingPore(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetHighDrillingPoreByFields(HighDrillingPore& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetHighDrillingPoreByFields1(HighDrillingPore& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetHighDrillingPoreByFields2(HighDrillingPore& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetHighDrillingPoreListByFields(std::vector<HighDrillingPore> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetHighDrillingPoreListByFields1(std::vector<HighDrillingPore> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetHighDrillingPoreListByFields2(std::vector<HighDrillingPore> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddHighDrillingPoreParam(const HighDrillingPoreParam& /* high_drilling_pore_param */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteHighDrillingPoreParam(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateHighDrillingPoreParam(const HighDrillingPoreParam& /* high_drilling_pore_param */) {
    bool _return = false;
    return _return;
  }
  void GetHighDrillingPoreParamById(HighDrillingPoreParam& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetHighDrillingPoreParamByForeignKey(HighDrillingPoreParam& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetHighDrillingPoreParamList(std::vector<HighDrillingPoreParam> & /* _return */) {
    return;
  }
  void GetHighDrillingPoreParamIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetHighDrillingPoreParamNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreHighDrillingPoreParam(const std::vector<HighDrillingPoreParam> & /* objs */) {
    return;
  }
  void DeleteMoreHighDrillingPoreParam(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetHighDrillingPoreParamByFields(HighDrillingPoreParam& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetHighDrillingPoreParamByFields1(HighDrillingPoreParam& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetHighDrillingPoreParamByFields2(HighDrillingPoreParam& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetHighDrillingPoreParamListByFields(std::vector<HighDrillingPoreParam> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetHighDrillingPoreParamListByFields1(std::vector<HighDrillingPoreParam> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetHighDrillingPoreParamListByFields2(std::vector<HighDrillingPoreParam> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddHighDrillingSiteParam(const HighDrillingSiteParam& /* high_drilling_site_param */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteHighDrillingSiteParam(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateHighDrillingSiteParam(const HighDrillingSiteParam& /* high_drilling_site_param */) {
    bool _return = false;
    return _return;
  }
  void GetHighDrillingSiteParamById(HighDrillingSiteParam& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetHighDrillingSiteParamByForeignKey(HighDrillingSiteParam& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetHighDrillingSiteParamList(std::vector<HighDrillingSiteParam> & /* _return */) {
    return;
  }
  void GetHighDrillingSiteParamIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetHighDrillingSiteParamNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreHighDrillingSiteParam(const std::vector<HighDrillingSiteParam> & /* objs */) {
    return;
  }
  void DeleteMoreHighDrillingSiteParam(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetHighDrillingSiteParamByFields(HighDrillingSiteParam& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetHighDrillingSiteParamByFields1(HighDrillingSiteParam& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetHighDrillingSiteParamByFields2(HighDrillingSiteParam& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetHighDrillingSiteParamListByFields(std::vector<HighDrillingSiteParam> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetHighDrillingSiteParamListByFields1(std::vector<HighDrillingSiteParam> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetHighDrillingSiteParamListByFields2(std::vector<HighDrillingSiteParam> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddHighDrillingTunnel(const HighDrillingTunnel& /* high_drilling_tunnel */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteHighDrillingTunnel(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateHighDrillingTunnel(const HighDrillingTunnel& /* high_drilling_tunnel */) {
    bool _return = false;
    return _return;
  }
  void GetHighDrillingTunnelById(HighDrillingTunnel& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetHighDrillingTunnelByForeignKey(HighDrillingTunnel& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetHighDrillingTunnelList(std::vector<HighDrillingTunnel> & /* _return */) {
    return;
  }
  void GetHighDrillingTunnelIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetHighDrillingTunnelNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreHighDrillingTunnel(const std::vector<HighDrillingTunnel> & /* objs */) {
    return;
  }
  void DeleteMoreHighDrillingTunnel(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetHighDrillingTunnelByFields(HighDrillingTunnel& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetHighDrillingTunnelByFields1(HighDrillingTunnel& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetHighDrillingTunnelByFields2(HighDrillingTunnel& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetHighDrillingTunnelListByFields(std::vector<HighDrillingTunnel> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetHighDrillingTunnelListByFields1(std::vector<HighDrillingTunnel> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetHighDrillingTunnelListByFields2(std::vector<HighDrillingTunnel> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddHydrGeo(const HydrGeo& /* hydr_geo */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteHydrGeo(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateHydrGeo(const HydrGeo& /* hydr_geo */) {
    bool _return = false;
    return _return;
  }
  void GetHydrGeoById(HydrGeo& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetHydrGeoByForeignKey(HydrGeo& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetHydrGeoList(std::vector<HydrGeo> & /* _return */) {
    return;
  }
  void GetHydrGeoIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetHydrGeoNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreHydrGeo(const std::vector<HydrGeo> & /* objs */) {
    return;
  }
  void DeleteMoreHydrGeo(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetHydrGeoByFields(HydrGeo& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetHydrGeoByFields1(HydrGeo& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetHydrGeoByFields2(HydrGeo& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetHydrGeoListByFields(std::vector<HydrGeo> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetHydrGeoListByFields1(std::vector<HydrGeo> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetHydrGeoListByFields2(std::vector<HydrGeo> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddMine(const Mine& /* mine */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteMine(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateMine(const Mine& /* mine */) {
    bool _return = false;
    return _return;
  }
  void GetMineById(Mine& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetMineByForeignKey(Mine& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetMineList(std::vector<Mine> & /* _return */) {
    return;
  }
  void GetMineIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetMineNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreMine(const std::vector<Mine> & /* objs */) {
    return;
  }
  void DeleteMoreMine(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetMineByFields(Mine& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetMineByFields1(Mine& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetMineByFields2(Mine& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetMineListByFields(std::vector<Mine> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetMineListByFields1(std::vector<Mine> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetMineListByFields2(std::vector<Mine> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddMineBase(const MineBase& /* mine_base */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteMineBase(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateMineBase(const MineBase& /* mine_base */) {
    bool _return = false;
    return _return;
  }
  void GetMineBaseById(MineBase& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetMineBaseByForeignKey(MineBase& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetMineBaseList(std::vector<MineBase> & /* _return */) {
    return;
  }
  void GetMineBaseIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetMineBaseNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreMineBase(const std::vector<MineBase> & /* objs */) {
    return;
  }
  void DeleteMoreMineBase(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetMineBaseByFields(MineBase& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetMineBaseByFields1(MineBase& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetMineBaseByFields2(MineBase& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetMineBaseListByFields(std::vector<MineBase> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetMineBaseListByFields1(std::vector<MineBase> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetMineBaseListByFields2(std::vector<MineBase> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddMineRegion(const MineRegion& /* mine_region */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteMineRegion(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateMineRegion(const MineRegion& /* mine_region */) {
    bool _return = false;
    return _return;
  }
  void GetMineRegionById(MineRegion& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetMineRegionByForeignKey(MineRegion& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetMineRegionList(std::vector<MineRegion> & /* _return */) {
    return;
  }
  void GetMineRegionIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetMineRegionNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreMineRegion(const std::vector<MineRegion> & /* objs */) {
    return;
  }
  void DeleteMoreMineRegion(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetMineRegionByFields(MineRegion& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetMineRegionByFields1(MineRegion& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetMineRegionByFields2(MineRegion& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetMineRegionListByFields(std::vector<MineRegion> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetMineRegionListByFields1(std::vector<MineRegion> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetMineRegionListByFields2(std::vector<MineRegion> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddPoreFlow(const PoreFlow& /* pore_flow */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeletePoreFlow(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdatePoreFlow(const PoreFlow& /* pore_flow */) {
    bool _return = false;
    return _return;
  }
  void GetPoreFlowById(PoreFlow& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetPoreFlowByForeignKey(PoreFlow& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetPoreFlowList(std::vector<PoreFlow> & /* _return */) {
    return;
  }
  void GetPoreFlowIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetPoreFlowNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMorePoreFlow(const std::vector<PoreFlow> & /* objs */) {
    return;
  }
  void DeleteMorePoreFlow(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetPoreFlowByFields(PoreFlow& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetPoreFlowByFields1(PoreFlow& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetPoreFlowByFields2(PoreFlow& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetPoreFlowListByFields(std::vector<PoreFlow> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetPoreFlowListByFields1(std::vector<PoreFlow> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetPoreFlowListByFields2(std::vector<PoreFlow> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddPoreSize(const PoreSize& /* pore_size */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeletePoreSize(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdatePoreSize(const PoreSize& /* pore_size */) {
    bool _return = false;
    return _return;
  }
  void GetPoreSizeById(PoreSize& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetPoreSizeByForeignKey(PoreSize& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetPoreSizeList(std::vector<PoreSize> & /* _return */) {
    return;
  }
  void GetPoreSizeIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetPoreSizeNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMorePoreSize(const std::vector<PoreSize> & /* objs */) {
    return;
  }
  void DeleteMorePoreSize(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetPoreSizeByFields(PoreSize& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetPoreSizeByFields1(PoreSize& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetPoreSizeByFields2(PoreSize& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetPoreSizeListByFields(std::vector<PoreSize> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetPoreSizeListByFields1(std::vector<PoreSize> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetPoreSizeListByFields2(std::vector<PoreSize> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddResAbundance(const ResAbundance& /* res_abundance */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteResAbundance(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateResAbundance(const ResAbundance& /* res_abundance */) {
    bool _return = false;
    return _return;
  }
  void GetResAbundanceById(ResAbundance& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetResAbundanceByForeignKey(ResAbundance& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetResAbundanceList(std::vector<ResAbundance> & /* _return */) {
    return;
  }
  void GetResAbundanceIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetResAbundanceNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreResAbundance(const std::vector<ResAbundance> & /* objs */) {
    return;
  }
  void DeleteMoreResAbundance(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetResAbundanceByFields(ResAbundance& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetResAbundanceByFields1(ResAbundance& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetResAbundanceByFields2(ResAbundance& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetResAbundanceListByFields(std::vector<ResAbundance> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetResAbundanceListByFields1(std::vector<ResAbundance> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetResAbundanceListByFields2(std::vector<ResAbundance> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddRock(const Rock& /* rock */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteRock(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateRock(const Rock& /* rock */) {
    bool _return = false;
    return _return;
  }
  void GetRockById(Rock& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetRockByForeignKey(Rock& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetRockList(std::vector<Rock> & /* _return */) {
    return;
  }
  void GetRockIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetRockNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreRock(const std::vector<Rock> & /* objs */) {
    return;
  }
  void DeleteMoreRock(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetRockByFields(Rock& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetRockByFields1(Rock& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetRockByFields2(Rock& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetRockListByFields(std::vector<Rock> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetRockListByFields1(std::vector<Rock> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetRockListByFields2(std::vector<Rock> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddSysInfo(const SysInfo& /* sys_info */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteSysInfo(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateSysInfo(const SysInfo& /* sys_info */) {
    bool _return = false;
    return _return;
  }
  void GetSysInfoById(SysInfo& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetSysInfoByForeignKey(SysInfo& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetSysInfoList(std::vector<SysInfo> & /* _return */) {
    return;
  }
  void GetSysInfoIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetSysInfoNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreSysInfo(const std::vector<SysInfo> & /* objs */) {
    return;
  }
  void DeleteMoreSysInfo(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetSysInfoByFields(SysInfo& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetSysInfoByFields1(SysInfo& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetSysInfoByFields2(SysInfo& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetSysInfoListByFields(std::vector<SysInfo> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetSysInfoListByFields1(std::vector<SysInfo> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetSysInfoListByFields2(std::vector<SysInfo> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddTechMode(const TechMode& /* tech_mode */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteTechMode(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateTechMode(const TechMode& /* tech_mode */) {
    bool _return = false;
    return _return;
  }
  void GetTechModeById(TechMode& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetTechModeByForeignKey(TechMode& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetTechModeList(std::vector<TechMode> & /* _return */) {
    return;
  }
  void GetTechModeIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetTechModeNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreTechMode(const std::vector<TechMode> & /* objs */) {
    return;
  }
  void DeleteMoreTechMode(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetTechModeByFields(TechMode& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetTechModeByFields1(TechMode& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetTechModeByFields2(TechMode& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetTechModeListByFields(std::vector<TechMode> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetTechModeListByFields1(std::vector<TechMode> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetTechModeListByFields2(std::vector<TechMode> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddTechnology(const Technology& /* technology */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteTechnology(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateTechnology(const Technology& /* technology */) {
    bool _return = false;
    return _return;
  }
  void GetTechnologyById(Technology& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetTechnologyByForeignKey(Technology& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetTechnologyList(std::vector<Technology> & /* _return */) {
    return;
  }
  void GetTechnologyIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetTechnologyNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreTechnology(const std::vector<Technology> & /* objs */) {
    return;
  }
  void DeleteMoreTechnology(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetTechnologyByFields(Technology& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetTechnologyByFields1(Technology& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetTechnologyByFields2(Technology& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetTechnologyListByFields(std::vector<Technology> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetTechnologyListByFields1(std::vector<Technology> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetTechnologyListByFields2(std::vector<Technology> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddTopoGeo(const TopoGeo& /* topo_geo */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteTopoGeo(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateTopoGeo(const TopoGeo& /* topo_geo */) {
    bool _return = false;
    return _return;
  }
  void GetTopoGeoById(TopoGeo& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetTopoGeoByForeignKey(TopoGeo& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetTopoGeoList(std::vector<TopoGeo> & /* _return */) {
    return;
  }
  void GetTopoGeoIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetTopoGeoNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreTopoGeo(const std::vector<TopoGeo> & /* objs */) {
    return;
  }
  void DeleteMoreTopoGeo(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetTopoGeoByFields(TopoGeo& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetTopoGeoByFields1(TopoGeo& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetTopoGeoByFields2(TopoGeo& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetTopoGeoListByFields(std::vector<TopoGeo> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetTopoGeoListByFields1(std::vector<TopoGeo> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetTopoGeoListByFields2(std::vector<TopoGeo> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddTunnel(const Tunnel& /* tunnel */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteTunnel(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateTunnel(const Tunnel& /* tunnel */) {
    bool _return = false;
    return _return;
  }
  void GetTunnelById(Tunnel& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetTunnelByForeignKey(Tunnel& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetTunnelList(std::vector<Tunnel> & /* _return */) {
    return;
  }
  void GetTunnelIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetTunnelNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreTunnel(const std::vector<Tunnel> & /* objs */) {
    return;
  }
  void DeleteMoreTunnel(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetTunnelByFields(Tunnel& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetTunnelByFields1(Tunnel& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetTunnelByFields2(Tunnel& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetTunnelListByFields(std::vector<Tunnel> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetTunnelListByFields1(std::vector<Tunnel> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetTunnelListByFields2(std::vector<Tunnel> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddWorkArea(const WorkArea& /* work_area */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteWorkArea(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateWorkArea(const WorkArea& /* work_area */) {
    bool _return = false;
    return _return;
  }
  void GetWorkAreaById(WorkArea& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetWorkAreaByForeignKey(WorkArea& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetWorkAreaList(std::vector<WorkArea> & /* _return */) {
    return;
  }
  void GetWorkAreaIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetWorkAreaNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreWorkArea(const std::vector<WorkArea> & /* objs */) {
    return;
  }
  void DeleteMoreWorkArea(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetWorkAreaByFields(WorkArea& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetWorkAreaByFields1(WorkArea& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetWorkAreaByFields2(WorkArea& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetWorkAreaListByFields(std::vector<WorkArea> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetWorkAreaListByFields1(std::vector<WorkArea> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetWorkAreaListByFields2(std::vector<WorkArea> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  int32_t AddWorkSurf(const WorkSurf& /* work_surf */) {
    int32_t _return = 0;
    return _return;
  }
  bool DeleteWorkSurf(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool UpdateWorkSurf(const WorkSurf& /* work_surf */) {
    bool _return = false;
    return _return;
  }
  void GetWorkSurfById(WorkSurf& /* _return */, const int32_t /* id */) {
    return;
  }
  void GetWorkSurfByForeignKey(WorkSurf& /* _return */, const std::string& /* fkey */, const int32_t /* id */) {
    return;
  }
  void GetWorkSurfList(std::vector<WorkSurf> & /* _return */) {
    return;
  }
  void GetWorkSurfIds(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetWorkSurfNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void AddMoreWorkSurf(const std::vector<WorkSurf> & /* objs */) {
    return;
  }
  void DeleteMoreWorkSurf(const std::vector<int32_t> & /* obj_ids */) {
    return;
  }
  void GetWorkSurfByFields(WorkSurf& /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetWorkSurfByFields1(WorkSurf& /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetWorkSurfByFields2(WorkSurf& /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void GetWorkSurfListByFields(std::vector<WorkSurf> & /* _return */, const std::map<std::string, std::string> & /* fields */) {
    return;
  }
  void GetWorkSurfListByFields1(std::vector<WorkSurf> & /* _return */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void GetWorkSurfListByFields2(std::vector<WorkSurf> & /* _return */, const std::string& /* field1 */, const std::string& /* value1 */, const std::string& /* field2 */, const std::string& /* value2 */) {
    return;
  }
  void InitSampleRegion() {
    return;
  }
  int32_t GetOnlineAccountId() {
    int32_t _return = 0;
    return _return;
  }
  void GetOnlineMine(Mine& /* _return */) {
    return;
  }
  int32_t VerifyMineAccount(const std::string& /* username */, const std::string& /* pwd */) {
    int32_t _return = 0;
    return _return;
  }
  void GetMineRegionsOfBase(std::vector<std::string> & /* _return */, const std::string& /* baseName */) {
    return;
  }
  void GetBaseByRegion(std::string& /* _return */, const std::string& /* regionName */) {
    return;
  }
  void GetSampleMineOfRegion(Mine& /* _return */, const std::string& /* regionName */) {
    return;
  }
  void GetSampleCoalOfRegion(Coal& /* _return */, const std::string& /* regionName */) {
    return;
  }
  void GetCoalNamesOfMine(std::vector<std::string> & /* _return */, const int32_t /* mine_id */) {
    return;
  }
  void GetCoalIdsOfMine(std::vector<int32_t> & /* _return */, const int32_t /* mine_id */) {
    return;
  }
  void GetWorkAreasOfMine(std::vector<WorkArea> & /* _return */, const int32_t /* mine_id */) {
    return;
  }
  void GetWorkSurfsOfMine(std::vector<WorkSurf> & /* _return */, const int32_t /* mine_id */) {
    return;
  }
  void GetDrillingSurfsOfMine(std::vector<DrillingSurf> & /* _return */, const int32_t /* mine_id */) {
    return;
  }
  void GetWorkAreaIdsOfMine(std::vector<int32_t> & /* _return */, const int32_t /* mine_id */) {
    return;
  }
  void GetWorkSurfIdsOfMine(std::vector<int32_t> & /* _return */, const int32_t /* mine_id */) {
    return;
  }
  void GetDrillingSurfIdsOfMine(std::vector<int32_t> & /* _return */, const int32_t /* mine_id */) {
    return;
  }
  int32_t DifficultEval(const Coal& /* coal */) {
    int32_t _return = 0;
    return _return;
  }
  void DifficultEvalString(std::string& /* _return */, const Coal& /* coal */) {
    return;
  }
  double MineGasReservesW1(const int32_t /* mine_id */) {
    double _return = (double)0;
    return _return;
  }
  double MineGasReservesW2(const int32_t /* mine_id */) {
    double _return = (double)0;
    return _return;
  }
  double WorkAreaGasFlow(const WorkArea& /* work_area */, const double /* K1 */) {
    double _return = (double)0;
    return _return;
  }
  double MineGasFlow(const Mine& /* mine */) {
    double _return = (double)0;
    return _return;
  }
  double WorkSurfGasFlow1(const Coal& /* coal */, const WorkArea& /* work_area */, const WorkSurf& /* work_surf */) {
    double _return = (double)0;
    return _return;
  }
  double WorkSurfGasFlow2(const Coal& /* coal */, const WorkArea& /* work_area */, const WorkSurf& /* work_surf */) {
    double _return = (double)0;
    return _return;
  }
  void DrillingSurfGasFlow(DrillingSurfGasFlowResult& /* _return */, const Coal& /* coal */, const DrillingSurf& /* drilling_surf */, const Tunnel& /* tunnel */) {
    return;
  }
};

typedef struct _CbmService_AddAccount_args__isset {
  _CbmService_AddAccount_args__isset() : account(false) {}
  bool account :1;
} _CbmService_AddAccount_args__isset;

class CbmService_AddAccount_args {
 public:

  CbmService_AddAccount_args(const CbmService_AddAccount_args&);
  CbmService_AddAccount_args& operator=(const CbmService_AddAccount_args&);
  CbmService_AddAccount_args() {
  }

  virtual ~CbmService_AddAccount_args() throw();
  Account account;

  _CbmService_AddAccount_args__isset __isset;

  void __set_account(const Account& val);

  bool operator == (const CbmService_AddAccount_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddAccount_pargs {
 public:


  virtual ~CbmService_AddAccount_pargs() throw();
  const Account* account;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddAccount_result__isset {
  _CbmService_AddAccount_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddAccount_result__isset;

class CbmService_AddAccount_result {
 public:

  CbmService_AddAccount_result(const CbmService_AddAccount_result&);
  CbmService_AddAccount_result& operator=(const CbmService_AddAccount_result&);
  CbmService_AddAccount_result() : success(0) {
  }

  virtual ~CbmService_AddAccount_result() throw();
  int32_t success;

  _CbmService_AddAccount_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddAccount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddAccount_presult__isset {
  _CbmService_AddAccount_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddAccount_presult__isset;

class CbmService_AddAccount_presult {
 public:


  virtual ~CbmService_AddAccount_presult() throw();
  int32_t* success;

  _CbmService_AddAccount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteAccount_args__isset {
  _CbmService_DeleteAccount_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteAccount_args__isset;

class CbmService_DeleteAccount_args {
 public:

  CbmService_DeleteAccount_args(const CbmService_DeleteAccount_args&);
  CbmService_DeleteAccount_args& operator=(const CbmService_DeleteAccount_args&);
  CbmService_DeleteAccount_args() : id(0) {
  }

  virtual ~CbmService_DeleteAccount_args() throw();
  int32_t id;

  _CbmService_DeleteAccount_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteAccount_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteAccount_pargs {
 public:


  virtual ~CbmService_DeleteAccount_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteAccount_result__isset {
  _CbmService_DeleteAccount_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteAccount_result__isset;

class CbmService_DeleteAccount_result {
 public:

  CbmService_DeleteAccount_result(const CbmService_DeleteAccount_result&);
  CbmService_DeleteAccount_result& operator=(const CbmService_DeleteAccount_result&);
  CbmService_DeleteAccount_result() : success(0) {
  }

  virtual ~CbmService_DeleteAccount_result() throw();
  bool success;

  _CbmService_DeleteAccount_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteAccount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteAccount_presult__isset {
  _CbmService_DeleteAccount_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteAccount_presult__isset;

class CbmService_DeleteAccount_presult {
 public:


  virtual ~CbmService_DeleteAccount_presult() throw();
  bool* success;

  _CbmService_DeleteAccount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateAccount_args__isset {
  _CbmService_UpdateAccount_args__isset() : account(false) {}
  bool account :1;
} _CbmService_UpdateAccount_args__isset;

class CbmService_UpdateAccount_args {
 public:

  CbmService_UpdateAccount_args(const CbmService_UpdateAccount_args&);
  CbmService_UpdateAccount_args& operator=(const CbmService_UpdateAccount_args&);
  CbmService_UpdateAccount_args() {
  }

  virtual ~CbmService_UpdateAccount_args() throw();
  Account account;

  _CbmService_UpdateAccount_args__isset __isset;

  void __set_account(const Account& val);

  bool operator == (const CbmService_UpdateAccount_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateAccount_pargs {
 public:


  virtual ~CbmService_UpdateAccount_pargs() throw();
  const Account* account;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateAccount_result__isset {
  _CbmService_UpdateAccount_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateAccount_result__isset;

class CbmService_UpdateAccount_result {
 public:

  CbmService_UpdateAccount_result(const CbmService_UpdateAccount_result&);
  CbmService_UpdateAccount_result& operator=(const CbmService_UpdateAccount_result&);
  CbmService_UpdateAccount_result() : success(0) {
  }

  virtual ~CbmService_UpdateAccount_result() throw();
  bool success;

  _CbmService_UpdateAccount_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateAccount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateAccount_presult__isset {
  _CbmService_UpdateAccount_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateAccount_presult__isset;

class CbmService_UpdateAccount_presult {
 public:


  virtual ~CbmService_UpdateAccount_presult() throw();
  bool* success;

  _CbmService_UpdateAccount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAccountById_args__isset {
  _CbmService_GetAccountById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetAccountById_args__isset;

class CbmService_GetAccountById_args {
 public:

  CbmService_GetAccountById_args(const CbmService_GetAccountById_args&);
  CbmService_GetAccountById_args& operator=(const CbmService_GetAccountById_args&);
  CbmService_GetAccountById_args() : id(0) {
  }

  virtual ~CbmService_GetAccountById_args() throw();
  int32_t id;

  _CbmService_GetAccountById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetAccountById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAccountById_pargs {
 public:


  virtual ~CbmService_GetAccountById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountById_result__isset {
  _CbmService_GetAccountById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountById_result__isset;

class CbmService_GetAccountById_result {
 public:

  CbmService_GetAccountById_result(const CbmService_GetAccountById_result&);
  CbmService_GetAccountById_result& operator=(const CbmService_GetAccountById_result&);
  CbmService_GetAccountById_result() {
  }

  virtual ~CbmService_GetAccountById_result() throw();
  Account success;

  _CbmService_GetAccountById_result__isset __isset;

  void __set_success(const Account& val);

  bool operator == (const CbmService_GetAccountById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountById_presult__isset {
  _CbmService_GetAccountById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountById_presult__isset;

class CbmService_GetAccountById_presult {
 public:


  virtual ~CbmService_GetAccountById_presult() throw();
  Account* success;

  _CbmService_GetAccountById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAccountByForeignKey_args__isset {
  _CbmService_GetAccountByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetAccountByForeignKey_args__isset;

class CbmService_GetAccountByForeignKey_args {
 public:

  CbmService_GetAccountByForeignKey_args(const CbmService_GetAccountByForeignKey_args&);
  CbmService_GetAccountByForeignKey_args& operator=(const CbmService_GetAccountByForeignKey_args&);
  CbmService_GetAccountByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetAccountByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetAccountByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetAccountByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAccountByForeignKey_pargs {
 public:


  virtual ~CbmService_GetAccountByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountByForeignKey_result__isset {
  _CbmService_GetAccountByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountByForeignKey_result__isset;

class CbmService_GetAccountByForeignKey_result {
 public:

  CbmService_GetAccountByForeignKey_result(const CbmService_GetAccountByForeignKey_result&);
  CbmService_GetAccountByForeignKey_result& operator=(const CbmService_GetAccountByForeignKey_result&);
  CbmService_GetAccountByForeignKey_result() {
  }

  virtual ~CbmService_GetAccountByForeignKey_result() throw();
  Account success;

  _CbmService_GetAccountByForeignKey_result__isset __isset;

  void __set_success(const Account& val);

  bool operator == (const CbmService_GetAccountByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountByForeignKey_presult__isset {
  _CbmService_GetAccountByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountByForeignKey_presult__isset;

class CbmService_GetAccountByForeignKey_presult {
 public:


  virtual ~CbmService_GetAccountByForeignKey_presult() throw();
  Account* success;

  _CbmService_GetAccountByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetAccountList_args {
 public:

  CbmService_GetAccountList_args(const CbmService_GetAccountList_args&);
  CbmService_GetAccountList_args& operator=(const CbmService_GetAccountList_args&);
  CbmService_GetAccountList_args() {
  }

  virtual ~CbmService_GetAccountList_args() throw();

  bool operator == (const CbmService_GetAccountList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetAccountList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAccountList_pargs {
 public:


  virtual ~CbmService_GetAccountList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountList_result__isset {
  _CbmService_GetAccountList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountList_result__isset;

class CbmService_GetAccountList_result {
 public:

  CbmService_GetAccountList_result(const CbmService_GetAccountList_result&);
  CbmService_GetAccountList_result& operator=(const CbmService_GetAccountList_result&);
  CbmService_GetAccountList_result() {
  }

  virtual ~CbmService_GetAccountList_result() throw();
  std::vector<Account>  success;

  _CbmService_GetAccountList_result__isset __isset;

  void __set_success(const std::vector<Account> & val);

  bool operator == (const CbmService_GetAccountList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountList_presult__isset {
  _CbmService_GetAccountList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountList_presult__isset;

class CbmService_GetAccountList_presult {
 public:


  virtual ~CbmService_GetAccountList_presult() throw();
  std::vector<Account> * success;

  _CbmService_GetAccountList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetAccountIds_args {
 public:

  CbmService_GetAccountIds_args(const CbmService_GetAccountIds_args&);
  CbmService_GetAccountIds_args& operator=(const CbmService_GetAccountIds_args&);
  CbmService_GetAccountIds_args() {
  }

  virtual ~CbmService_GetAccountIds_args() throw();

  bool operator == (const CbmService_GetAccountIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetAccountIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAccountIds_pargs {
 public:


  virtual ~CbmService_GetAccountIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountIds_result__isset {
  _CbmService_GetAccountIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountIds_result__isset;

class CbmService_GetAccountIds_result {
 public:

  CbmService_GetAccountIds_result(const CbmService_GetAccountIds_result&);
  CbmService_GetAccountIds_result& operator=(const CbmService_GetAccountIds_result&);
  CbmService_GetAccountIds_result() {
  }

  virtual ~CbmService_GetAccountIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetAccountIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetAccountIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountIds_presult__isset {
  _CbmService_GetAccountIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountIds_presult__isset;

class CbmService_GetAccountIds_presult {
 public:


  virtual ~CbmService_GetAccountIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetAccountIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetAccountNames_args {
 public:

  CbmService_GetAccountNames_args(const CbmService_GetAccountNames_args&);
  CbmService_GetAccountNames_args& operator=(const CbmService_GetAccountNames_args&);
  CbmService_GetAccountNames_args() {
  }

  virtual ~CbmService_GetAccountNames_args() throw();

  bool operator == (const CbmService_GetAccountNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetAccountNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAccountNames_pargs {
 public:


  virtual ~CbmService_GetAccountNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountNames_result__isset {
  _CbmService_GetAccountNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountNames_result__isset;

class CbmService_GetAccountNames_result {
 public:

  CbmService_GetAccountNames_result(const CbmService_GetAccountNames_result&);
  CbmService_GetAccountNames_result& operator=(const CbmService_GetAccountNames_result&);
  CbmService_GetAccountNames_result() {
  }

  virtual ~CbmService_GetAccountNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetAccountNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetAccountNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountNames_presult__isset {
  _CbmService_GetAccountNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountNames_presult__isset;

class CbmService_GetAccountNames_presult {
 public:


  virtual ~CbmService_GetAccountNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetAccountNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreAccount_args__isset {
  _CbmService_AddMoreAccount_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreAccount_args__isset;

class CbmService_AddMoreAccount_args {
 public:

  CbmService_AddMoreAccount_args(const CbmService_AddMoreAccount_args&);
  CbmService_AddMoreAccount_args& operator=(const CbmService_AddMoreAccount_args&);
  CbmService_AddMoreAccount_args() {
  }

  virtual ~CbmService_AddMoreAccount_args() throw();
  std::vector<Account>  objs;

  _CbmService_AddMoreAccount_args__isset __isset;

  void __set_objs(const std::vector<Account> & val);

  bool operator == (const CbmService_AddMoreAccount_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreAccount_pargs {
 public:


  virtual ~CbmService_AddMoreAccount_pargs() throw();
  const std::vector<Account> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreAccount_result {
 public:

  CbmService_AddMoreAccount_result(const CbmService_AddMoreAccount_result&);
  CbmService_AddMoreAccount_result& operator=(const CbmService_AddMoreAccount_result&);
  CbmService_AddMoreAccount_result() {
  }

  virtual ~CbmService_AddMoreAccount_result() throw();

  bool operator == (const CbmService_AddMoreAccount_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreAccount_presult {
 public:


  virtual ~CbmService_AddMoreAccount_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreAccount_args__isset {
  _CbmService_DeleteMoreAccount_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreAccount_args__isset;

class CbmService_DeleteMoreAccount_args {
 public:

  CbmService_DeleteMoreAccount_args(const CbmService_DeleteMoreAccount_args&);
  CbmService_DeleteMoreAccount_args& operator=(const CbmService_DeleteMoreAccount_args&);
  CbmService_DeleteMoreAccount_args() {
  }

  virtual ~CbmService_DeleteMoreAccount_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreAccount_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreAccount_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreAccount_pargs {
 public:


  virtual ~CbmService_DeleteMoreAccount_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreAccount_result {
 public:

  CbmService_DeleteMoreAccount_result(const CbmService_DeleteMoreAccount_result&);
  CbmService_DeleteMoreAccount_result& operator=(const CbmService_DeleteMoreAccount_result&);
  CbmService_DeleteMoreAccount_result() {
  }

  virtual ~CbmService_DeleteMoreAccount_result() throw();

  bool operator == (const CbmService_DeleteMoreAccount_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreAccount_presult {
 public:


  virtual ~CbmService_DeleteMoreAccount_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAccountByFields_args__isset {
  _CbmService_GetAccountByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetAccountByFields_args__isset;

class CbmService_GetAccountByFields_args {
 public:

  CbmService_GetAccountByFields_args(const CbmService_GetAccountByFields_args&);
  CbmService_GetAccountByFields_args& operator=(const CbmService_GetAccountByFields_args&);
  CbmService_GetAccountByFields_args() {
  }

  virtual ~CbmService_GetAccountByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetAccountByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetAccountByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAccountByFields_pargs {
 public:


  virtual ~CbmService_GetAccountByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountByFields_result__isset {
  _CbmService_GetAccountByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountByFields_result__isset;

class CbmService_GetAccountByFields_result {
 public:

  CbmService_GetAccountByFields_result(const CbmService_GetAccountByFields_result&);
  CbmService_GetAccountByFields_result& operator=(const CbmService_GetAccountByFields_result&);
  CbmService_GetAccountByFields_result() {
  }

  virtual ~CbmService_GetAccountByFields_result() throw();
  Account success;

  _CbmService_GetAccountByFields_result__isset __isset;

  void __set_success(const Account& val);

  bool operator == (const CbmService_GetAccountByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountByFields_presult__isset {
  _CbmService_GetAccountByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountByFields_presult__isset;

class CbmService_GetAccountByFields_presult {
 public:


  virtual ~CbmService_GetAccountByFields_presult() throw();
  Account* success;

  _CbmService_GetAccountByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAccountByFields1_args__isset {
  _CbmService_GetAccountByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetAccountByFields1_args__isset;

class CbmService_GetAccountByFields1_args {
 public:

  CbmService_GetAccountByFields1_args(const CbmService_GetAccountByFields1_args&);
  CbmService_GetAccountByFields1_args& operator=(const CbmService_GetAccountByFields1_args&);
  CbmService_GetAccountByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetAccountByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetAccountByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetAccountByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAccountByFields1_pargs {
 public:


  virtual ~CbmService_GetAccountByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountByFields1_result__isset {
  _CbmService_GetAccountByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountByFields1_result__isset;

class CbmService_GetAccountByFields1_result {
 public:

  CbmService_GetAccountByFields1_result(const CbmService_GetAccountByFields1_result&);
  CbmService_GetAccountByFields1_result& operator=(const CbmService_GetAccountByFields1_result&);
  CbmService_GetAccountByFields1_result() {
  }

  virtual ~CbmService_GetAccountByFields1_result() throw();
  Account success;

  _CbmService_GetAccountByFields1_result__isset __isset;

  void __set_success(const Account& val);

  bool operator == (const CbmService_GetAccountByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountByFields1_presult__isset {
  _CbmService_GetAccountByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountByFields1_presult__isset;

class CbmService_GetAccountByFields1_presult {
 public:


  virtual ~CbmService_GetAccountByFields1_presult() throw();
  Account* success;

  _CbmService_GetAccountByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAccountByFields2_args__isset {
  _CbmService_GetAccountByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetAccountByFields2_args__isset;

class CbmService_GetAccountByFields2_args {
 public:

  CbmService_GetAccountByFields2_args(const CbmService_GetAccountByFields2_args&);
  CbmService_GetAccountByFields2_args& operator=(const CbmService_GetAccountByFields2_args&);
  CbmService_GetAccountByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetAccountByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetAccountByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetAccountByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAccountByFields2_pargs {
 public:


  virtual ~CbmService_GetAccountByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountByFields2_result__isset {
  _CbmService_GetAccountByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountByFields2_result__isset;

class CbmService_GetAccountByFields2_result {
 public:

  CbmService_GetAccountByFields2_result(const CbmService_GetAccountByFields2_result&);
  CbmService_GetAccountByFields2_result& operator=(const CbmService_GetAccountByFields2_result&);
  CbmService_GetAccountByFields2_result() {
  }

  virtual ~CbmService_GetAccountByFields2_result() throw();
  Account success;

  _CbmService_GetAccountByFields2_result__isset __isset;

  void __set_success(const Account& val);

  bool operator == (const CbmService_GetAccountByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountByFields2_presult__isset {
  _CbmService_GetAccountByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountByFields2_presult__isset;

class CbmService_GetAccountByFields2_presult {
 public:


  virtual ~CbmService_GetAccountByFields2_presult() throw();
  Account* success;

  _CbmService_GetAccountByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAccountListByFields_args__isset {
  _CbmService_GetAccountListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetAccountListByFields_args__isset;

class CbmService_GetAccountListByFields_args {
 public:

  CbmService_GetAccountListByFields_args(const CbmService_GetAccountListByFields_args&);
  CbmService_GetAccountListByFields_args& operator=(const CbmService_GetAccountListByFields_args&);
  CbmService_GetAccountListByFields_args() {
  }

  virtual ~CbmService_GetAccountListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetAccountListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetAccountListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAccountListByFields_pargs {
 public:


  virtual ~CbmService_GetAccountListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountListByFields_result__isset {
  _CbmService_GetAccountListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountListByFields_result__isset;

class CbmService_GetAccountListByFields_result {
 public:

  CbmService_GetAccountListByFields_result(const CbmService_GetAccountListByFields_result&);
  CbmService_GetAccountListByFields_result& operator=(const CbmService_GetAccountListByFields_result&);
  CbmService_GetAccountListByFields_result() {
  }

  virtual ~CbmService_GetAccountListByFields_result() throw();
  std::vector<Account>  success;

  _CbmService_GetAccountListByFields_result__isset __isset;

  void __set_success(const std::vector<Account> & val);

  bool operator == (const CbmService_GetAccountListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountListByFields_presult__isset {
  _CbmService_GetAccountListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountListByFields_presult__isset;

class CbmService_GetAccountListByFields_presult {
 public:


  virtual ~CbmService_GetAccountListByFields_presult() throw();
  std::vector<Account> * success;

  _CbmService_GetAccountListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAccountListByFields1_args__isset {
  _CbmService_GetAccountListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetAccountListByFields1_args__isset;

class CbmService_GetAccountListByFields1_args {
 public:

  CbmService_GetAccountListByFields1_args(const CbmService_GetAccountListByFields1_args&);
  CbmService_GetAccountListByFields1_args& operator=(const CbmService_GetAccountListByFields1_args&);
  CbmService_GetAccountListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetAccountListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetAccountListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetAccountListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAccountListByFields1_pargs {
 public:


  virtual ~CbmService_GetAccountListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountListByFields1_result__isset {
  _CbmService_GetAccountListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountListByFields1_result__isset;

class CbmService_GetAccountListByFields1_result {
 public:

  CbmService_GetAccountListByFields1_result(const CbmService_GetAccountListByFields1_result&);
  CbmService_GetAccountListByFields1_result& operator=(const CbmService_GetAccountListByFields1_result&);
  CbmService_GetAccountListByFields1_result() {
  }

  virtual ~CbmService_GetAccountListByFields1_result() throw();
  std::vector<Account>  success;

  _CbmService_GetAccountListByFields1_result__isset __isset;

  void __set_success(const std::vector<Account> & val);

  bool operator == (const CbmService_GetAccountListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountListByFields1_presult__isset {
  _CbmService_GetAccountListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountListByFields1_presult__isset;

class CbmService_GetAccountListByFields1_presult {
 public:


  virtual ~CbmService_GetAccountListByFields1_presult() throw();
  std::vector<Account> * success;

  _CbmService_GetAccountListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAccountListByFields2_args__isset {
  _CbmService_GetAccountListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetAccountListByFields2_args__isset;

class CbmService_GetAccountListByFields2_args {
 public:

  CbmService_GetAccountListByFields2_args(const CbmService_GetAccountListByFields2_args&);
  CbmService_GetAccountListByFields2_args& operator=(const CbmService_GetAccountListByFields2_args&);
  CbmService_GetAccountListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetAccountListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetAccountListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetAccountListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAccountListByFields2_pargs {
 public:


  virtual ~CbmService_GetAccountListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountListByFields2_result__isset {
  _CbmService_GetAccountListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountListByFields2_result__isset;

class CbmService_GetAccountListByFields2_result {
 public:

  CbmService_GetAccountListByFields2_result(const CbmService_GetAccountListByFields2_result&);
  CbmService_GetAccountListByFields2_result& operator=(const CbmService_GetAccountListByFields2_result&);
  CbmService_GetAccountListByFields2_result() {
  }

  virtual ~CbmService_GetAccountListByFields2_result() throw();
  std::vector<Account>  success;

  _CbmService_GetAccountListByFields2_result__isset __isset;

  void __set_success(const std::vector<Account> & val);

  bool operator == (const CbmService_GetAccountListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAccountListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAccountListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAccountListByFields2_presult__isset {
  _CbmService_GetAccountListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAccountListByFields2_presult__isset;

class CbmService_GetAccountListByFields2_presult {
 public:


  virtual ~CbmService_GetAccountListByFields2_presult() throw();
  std::vector<Account> * success;

  _CbmService_GetAccountListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddAdjLayer_args__isset {
  _CbmService_AddAdjLayer_args__isset() : adj_layer(false) {}
  bool adj_layer :1;
} _CbmService_AddAdjLayer_args__isset;

class CbmService_AddAdjLayer_args {
 public:

  CbmService_AddAdjLayer_args(const CbmService_AddAdjLayer_args&);
  CbmService_AddAdjLayer_args& operator=(const CbmService_AddAdjLayer_args&);
  CbmService_AddAdjLayer_args() {
  }

  virtual ~CbmService_AddAdjLayer_args() throw();
  AdjLayer adj_layer;

  _CbmService_AddAdjLayer_args__isset __isset;

  void __set_adj_layer(const AdjLayer& val);

  bool operator == (const CbmService_AddAdjLayer_args & rhs) const
  {
    if (!(adj_layer == rhs.adj_layer))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddAdjLayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddAdjLayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddAdjLayer_pargs {
 public:


  virtual ~CbmService_AddAdjLayer_pargs() throw();
  const AdjLayer* adj_layer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddAdjLayer_result__isset {
  _CbmService_AddAdjLayer_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddAdjLayer_result__isset;

class CbmService_AddAdjLayer_result {
 public:

  CbmService_AddAdjLayer_result(const CbmService_AddAdjLayer_result&);
  CbmService_AddAdjLayer_result& operator=(const CbmService_AddAdjLayer_result&);
  CbmService_AddAdjLayer_result() : success(0) {
  }

  virtual ~CbmService_AddAdjLayer_result() throw();
  int32_t success;

  _CbmService_AddAdjLayer_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddAdjLayer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddAdjLayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddAdjLayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddAdjLayer_presult__isset {
  _CbmService_AddAdjLayer_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddAdjLayer_presult__isset;

class CbmService_AddAdjLayer_presult {
 public:


  virtual ~CbmService_AddAdjLayer_presult() throw();
  int32_t* success;

  _CbmService_AddAdjLayer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteAdjLayer_args__isset {
  _CbmService_DeleteAdjLayer_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteAdjLayer_args__isset;

class CbmService_DeleteAdjLayer_args {
 public:

  CbmService_DeleteAdjLayer_args(const CbmService_DeleteAdjLayer_args&);
  CbmService_DeleteAdjLayer_args& operator=(const CbmService_DeleteAdjLayer_args&);
  CbmService_DeleteAdjLayer_args() : id(0) {
  }

  virtual ~CbmService_DeleteAdjLayer_args() throw();
  int32_t id;

  _CbmService_DeleteAdjLayer_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteAdjLayer_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteAdjLayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteAdjLayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteAdjLayer_pargs {
 public:


  virtual ~CbmService_DeleteAdjLayer_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteAdjLayer_result__isset {
  _CbmService_DeleteAdjLayer_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteAdjLayer_result__isset;

class CbmService_DeleteAdjLayer_result {
 public:

  CbmService_DeleteAdjLayer_result(const CbmService_DeleteAdjLayer_result&);
  CbmService_DeleteAdjLayer_result& operator=(const CbmService_DeleteAdjLayer_result&);
  CbmService_DeleteAdjLayer_result() : success(0) {
  }

  virtual ~CbmService_DeleteAdjLayer_result() throw();
  bool success;

  _CbmService_DeleteAdjLayer_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteAdjLayer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteAdjLayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteAdjLayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteAdjLayer_presult__isset {
  _CbmService_DeleteAdjLayer_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteAdjLayer_presult__isset;

class CbmService_DeleteAdjLayer_presult {
 public:


  virtual ~CbmService_DeleteAdjLayer_presult() throw();
  bool* success;

  _CbmService_DeleteAdjLayer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateAdjLayer_args__isset {
  _CbmService_UpdateAdjLayer_args__isset() : adj_layer(false) {}
  bool adj_layer :1;
} _CbmService_UpdateAdjLayer_args__isset;

class CbmService_UpdateAdjLayer_args {
 public:

  CbmService_UpdateAdjLayer_args(const CbmService_UpdateAdjLayer_args&);
  CbmService_UpdateAdjLayer_args& operator=(const CbmService_UpdateAdjLayer_args&);
  CbmService_UpdateAdjLayer_args() {
  }

  virtual ~CbmService_UpdateAdjLayer_args() throw();
  AdjLayer adj_layer;

  _CbmService_UpdateAdjLayer_args__isset __isset;

  void __set_adj_layer(const AdjLayer& val);

  bool operator == (const CbmService_UpdateAdjLayer_args & rhs) const
  {
    if (!(adj_layer == rhs.adj_layer))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateAdjLayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateAdjLayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateAdjLayer_pargs {
 public:


  virtual ~CbmService_UpdateAdjLayer_pargs() throw();
  const AdjLayer* adj_layer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateAdjLayer_result__isset {
  _CbmService_UpdateAdjLayer_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateAdjLayer_result__isset;

class CbmService_UpdateAdjLayer_result {
 public:

  CbmService_UpdateAdjLayer_result(const CbmService_UpdateAdjLayer_result&);
  CbmService_UpdateAdjLayer_result& operator=(const CbmService_UpdateAdjLayer_result&);
  CbmService_UpdateAdjLayer_result() : success(0) {
  }

  virtual ~CbmService_UpdateAdjLayer_result() throw();
  bool success;

  _CbmService_UpdateAdjLayer_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateAdjLayer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateAdjLayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateAdjLayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateAdjLayer_presult__isset {
  _CbmService_UpdateAdjLayer_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateAdjLayer_presult__isset;

class CbmService_UpdateAdjLayer_presult {
 public:


  virtual ~CbmService_UpdateAdjLayer_presult() throw();
  bool* success;

  _CbmService_UpdateAdjLayer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAdjLayerById_args__isset {
  _CbmService_GetAdjLayerById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetAdjLayerById_args__isset;

class CbmService_GetAdjLayerById_args {
 public:

  CbmService_GetAdjLayerById_args(const CbmService_GetAdjLayerById_args&);
  CbmService_GetAdjLayerById_args& operator=(const CbmService_GetAdjLayerById_args&);
  CbmService_GetAdjLayerById_args() : id(0) {
  }

  virtual ~CbmService_GetAdjLayerById_args() throw();
  int32_t id;

  _CbmService_GetAdjLayerById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetAdjLayerById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAdjLayerById_pargs {
 public:


  virtual ~CbmService_GetAdjLayerById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerById_result__isset {
  _CbmService_GetAdjLayerById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerById_result__isset;

class CbmService_GetAdjLayerById_result {
 public:

  CbmService_GetAdjLayerById_result(const CbmService_GetAdjLayerById_result&);
  CbmService_GetAdjLayerById_result& operator=(const CbmService_GetAdjLayerById_result&);
  CbmService_GetAdjLayerById_result() {
  }

  virtual ~CbmService_GetAdjLayerById_result() throw();
  AdjLayer success;

  _CbmService_GetAdjLayerById_result__isset __isset;

  void __set_success(const AdjLayer& val);

  bool operator == (const CbmService_GetAdjLayerById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerById_presult__isset {
  _CbmService_GetAdjLayerById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerById_presult__isset;

class CbmService_GetAdjLayerById_presult {
 public:


  virtual ~CbmService_GetAdjLayerById_presult() throw();
  AdjLayer* success;

  _CbmService_GetAdjLayerById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAdjLayerByForeignKey_args__isset {
  _CbmService_GetAdjLayerByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetAdjLayerByForeignKey_args__isset;

class CbmService_GetAdjLayerByForeignKey_args {
 public:

  CbmService_GetAdjLayerByForeignKey_args(const CbmService_GetAdjLayerByForeignKey_args&);
  CbmService_GetAdjLayerByForeignKey_args& operator=(const CbmService_GetAdjLayerByForeignKey_args&);
  CbmService_GetAdjLayerByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetAdjLayerByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetAdjLayerByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetAdjLayerByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAdjLayerByForeignKey_pargs {
 public:


  virtual ~CbmService_GetAdjLayerByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerByForeignKey_result__isset {
  _CbmService_GetAdjLayerByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerByForeignKey_result__isset;

class CbmService_GetAdjLayerByForeignKey_result {
 public:

  CbmService_GetAdjLayerByForeignKey_result(const CbmService_GetAdjLayerByForeignKey_result&);
  CbmService_GetAdjLayerByForeignKey_result& operator=(const CbmService_GetAdjLayerByForeignKey_result&);
  CbmService_GetAdjLayerByForeignKey_result() {
  }

  virtual ~CbmService_GetAdjLayerByForeignKey_result() throw();
  AdjLayer success;

  _CbmService_GetAdjLayerByForeignKey_result__isset __isset;

  void __set_success(const AdjLayer& val);

  bool operator == (const CbmService_GetAdjLayerByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerByForeignKey_presult__isset {
  _CbmService_GetAdjLayerByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerByForeignKey_presult__isset;

class CbmService_GetAdjLayerByForeignKey_presult {
 public:


  virtual ~CbmService_GetAdjLayerByForeignKey_presult() throw();
  AdjLayer* success;

  _CbmService_GetAdjLayerByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetAdjLayerList_args {
 public:

  CbmService_GetAdjLayerList_args(const CbmService_GetAdjLayerList_args&);
  CbmService_GetAdjLayerList_args& operator=(const CbmService_GetAdjLayerList_args&);
  CbmService_GetAdjLayerList_args() {
  }

  virtual ~CbmService_GetAdjLayerList_args() throw();

  bool operator == (const CbmService_GetAdjLayerList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAdjLayerList_pargs {
 public:


  virtual ~CbmService_GetAdjLayerList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerList_result__isset {
  _CbmService_GetAdjLayerList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerList_result__isset;

class CbmService_GetAdjLayerList_result {
 public:

  CbmService_GetAdjLayerList_result(const CbmService_GetAdjLayerList_result&);
  CbmService_GetAdjLayerList_result& operator=(const CbmService_GetAdjLayerList_result&);
  CbmService_GetAdjLayerList_result() {
  }

  virtual ~CbmService_GetAdjLayerList_result() throw();
  std::vector<AdjLayer>  success;

  _CbmService_GetAdjLayerList_result__isset __isset;

  void __set_success(const std::vector<AdjLayer> & val);

  bool operator == (const CbmService_GetAdjLayerList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerList_presult__isset {
  _CbmService_GetAdjLayerList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerList_presult__isset;

class CbmService_GetAdjLayerList_presult {
 public:


  virtual ~CbmService_GetAdjLayerList_presult() throw();
  std::vector<AdjLayer> * success;

  _CbmService_GetAdjLayerList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetAdjLayerIds_args {
 public:

  CbmService_GetAdjLayerIds_args(const CbmService_GetAdjLayerIds_args&);
  CbmService_GetAdjLayerIds_args& operator=(const CbmService_GetAdjLayerIds_args&);
  CbmService_GetAdjLayerIds_args() {
  }

  virtual ~CbmService_GetAdjLayerIds_args() throw();

  bool operator == (const CbmService_GetAdjLayerIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAdjLayerIds_pargs {
 public:


  virtual ~CbmService_GetAdjLayerIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerIds_result__isset {
  _CbmService_GetAdjLayerIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerIds_result__isset;

class CbmService_GetAdjLayerIds_result {
 public:

  CbmService_GetAdjLayerIds_result(const CbmService_GetAdjLayerIds_result&);
  CbmService_GetAdjLayerIds_result& operator=(const CbmService_GetAdjLayerIds_result&);
  CbmService_GetAdjLayerIds_result() {
  }

  virtual ~CbmService_GetAdjLayerIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetAdjLayerIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetAdjLayerIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerIds_presult__isset {
  _CbmService_GetAdjLayerIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerIds_presult__isset;

class CbmService_GetAdjLayerIds_presult {
 public:


  virtual ~CbmService_GetAdjLayerIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetAdjLayerIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetAdjLayerNames_args {
 public:

  CbmService_GetAdjLayerNames_args(const CbmService_GetAdjLayerNames_args&);
  CbmService_GetAdjLayerNames_args& operator=(const CbmService_GetAdjLayerNames_args&);
  CbmService_GetAdjLayerNames_args() {
  }

  virtual ~CbmService_GetAdjLayerNames_args() throw();

  bool operator == (const CbmService_GetAdjLayerNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAdjLayerNames_pargs {
 public:


  virtual ~CbmService_GetAdjLayerNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerNames_result__isset {
  _CbmService_GetAdjLayerNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerNames_result__isset;

class CbmService_GetAdjLayerNames_result {
 public:

  CbmService_GetAdjLayerNames_result(const CbmService_GetAdjLayerNames_result&);
  CbmService_GetAdjLayerNames_result& operator=(const CbmService_GetAdjLayerNames_result&);
  CbmService_GetAdjLayerNames_result() {
  }

  virtual ~CbmService_GetAdjLayerNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetAdjLayerNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetAdjLayerNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerNames_presult__isset {
  _CbmService_GetAdjLayerNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerNames_presult__isset;

class CbmService_GetAdjLayerNames_presult {
 public:


  virtual ~CbmService_GetAdjLayerNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetAdjLayerNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreAdjLayer_args__isset {
  _CbmService_AddMoreAdjLayer_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreAdjLayer_args__isset;

class CbmService_AddMoreAdjLayer_args {
 public:

  CbmService_AddMoreAdjLayer_args(const CbmService_AddMoreAdjLayer_args&);
  CbmService_AddMoreAdjLayer_args& operator=(const CbmService_AddMoreAdjLayer_args&);
  CbmService_AddMoreAdjLayer_args() {
  }

  virtual ~CbmService_AddMoreAdjLayer_args() throw();
  std::vector<AdjLayer>  objs;

  _CbmService_AddMoreAdjLayer_args__isset __isset;

  void __set_objs(const std::vector<AdjLayer> & val);

  bool operator == (const CbmService_AddMoreAdjLayer_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreAdjLayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreAdjLayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreAdjLayer_pargs {
 public:


  virtual ~CbmService_AddMoreAdjLayer_pargs() throw();
  const std::vector<AdjLayer> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreAdjLayer_result {
 public:

  CbmService_AddMoreAdjLayer_result(const CbmService_AddMoreAdjLayer_result&);
  CbmService_AddMoreAdjLayer_result& operator=(const CbmService_AddMoreAdjLayer_result&);
  CbmService_AddMoreAdjLayer_result() {
  }

  virtual ~CbmService_AddMoreAdjLayer_result() throw();

  bool operator == (const CbmService_AddMoreAdjLayer_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreAdjLayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreAdjLayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreAdjLayer_presult {
 public:


  virtual ~CbmService_AddMoreAdjLayer_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreAdjLayer_args__isset {
  _CbmService_DeleteMoreAdjLayer_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreAdjLayer_args__isset;

class CbmService_DeleteMoreAdjLayer_args {
 public:

  CbmService_DeleteMoreAdjLayer_args(const CbmService_DeleteMoreAdjLayer_args&);
  CbmService_DeleteMoreAdjLayer_args& operator=(const CbmService_DeleteMoreAdjLayer_args&);
  CbmService_DeleteMoreAdjLayer_args() {
  }

  virtual ~CbmService_DeleteMoreAdjLayer_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreAdjLayer_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreAdjLayer_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreAdjLayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreAdjLayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreAdjLayer_pargs {
 public:


  virtual ~CbmService_DeleteMoreAdjLayer_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreAdjLayer_result {
 public:

  CbmService_DeleteMoreAdjLayer_result(const CbmService_DeleteMoreAdjLayer_result&);
  CbmService_DeleteMoreAdjLayer_result& operator=(const CbmService_DeleteMoreAdjLayer_result&);
  CbmService_DeleteMoreAdjLayer_result() {
  }

  virtual ~CbmService_DeleteMoreAdjLayer_result() throw();

  bool operator == (const CbmService_DeleteMoreAdjLayer_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreAdjLayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreAdjLayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreAdjLayer_presult {
 public:


  virtual ~CbmService_DeleteMoreAdjLayer_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAdjLayerByFields_args__isset {
  _CbmService_GetAdjLayerByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetAdjLayerByFields_args__isset;

class CbmService_GetAdjLayerByFields_args {
 public:

  CbmService_GetAdjLayerByFields_args(const CbmService_GetAdjLayerByFields_args&);
  CbmService_GetAdjLayerByFields_args& operator=(const CbmService_GetAdjLayerByFields_args&);
  CbmService_GetAdjLayerByFields_args() {
  }

  virtual ~CbmService_GetAdjLayerByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetAdjLayerByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetAdjLayerByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAdjLayerByFields_pargs {
 public:


  virtual ~CbmService_GetAdjLayerByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerByFields_result__isset {
  _CbmService_GetAdjLayerByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerByFields_result__isset;

class CbmService_GetAdjLayerByFields_result {
 public:

  CbmService_GetAdjLayerByFields_result(const CbmService_GetAdjLayerByFields_result&);
  CbmService_GetAdjLayerByFields_result& operator=(const CbmService_GetAdjLayerByFields_result&);
  CbmService_GetAdjLayerByFields_result() {
  }

  virtual ~CbmService_GetAdjLayerByFields_result() throw();
  AdjLayer success;

  _CbmService_GetAdjLayerByFields_result__isset __isset;

  void __set_success(const AdjLayer& val);

  bool operator == (const CbmService_GetAdjLayerByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerByFields_presult__isset {
  _CbmService_GetAdjLayerByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerByFields_presult__isset;

class CbmService_GetAdjLayerByFields_presult {
 public:


  virtual ~CbmService_GetAdjLayerByFields_presult() throw();
  AdjLayer* success;

  _CbmService_GetAdjLayerByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAdjLayerByFields1_args__isset {
  _CbmService_GetAdjLayerByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetAdjLayerByFields1_args__isset;

class CbmService_GetAdjLayerByFields1_args {
 public:

  CbmService_GetAdjLayerByFields1_args(const CbmService_GetAdjLayerByFields1_args&);
  CbmService_GetAdjLayerByFields1_args& operator=(const CbmService_GetAdjLayerByFields1_args&);
  CbmService_GetAdjLayerByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetAdjLayerByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetAdjLayerByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetAdjLayerByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAdjLayerByFields1_pargs {
 public:


  virtual ~CbmService_GetAdjLayerByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerByFields1_result__isset {
  _CbmService_GetAdjLayerByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerByFields1_result__isset;

class CbmService_GetAdjLayerByFields1_result {
 public:

  CbmService_GetAdjLayerByFields1_result(const CbmService_GetAdjLayerByFields1_result&);
  CbmService_GetAdjLayerByFields1_result& operator=(const CbmService_GetAdjLayerByFields1_result&);
  CbmService_GetAdjLayerByFields1_result() {
  }

  virtual ~CbmService_GetAdjLayerByFields1_result() throw();
  AdjLayer success;

  _CbmService_GetAdjLayerByFields1_result__isset __isset;

  void __set_success(const AdjLayer& val);

  bool operator == (const CbmService_GetAdjLayerByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerByFields1_presult__isset {
  _CbmService_GetAdjLayerByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerByFields1_presult__isset;

class CbmService_GetAdjLayerByFields1_presult {
 public:


  virtual ~CbmService_GetAdjLayerByFields1_presult() throw();
  AdjLayer* success;

  _CbmService_GetAdjLayerByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAdjLayerByFields2_args__isset {
  _CbmService_GetAdjLayerByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetAdjLayerByFields2_args__isset;

class CbmService_GetAdjLayerByFields2_args {
 public:

  CbmService_GetAdjLayerByFields2_args(const CbmService_GetAdjLayerByFields2_args&);
  CbmService_GetAdjLayerByFields2_args& operator=(const CbmService_GetAdjLayerByFields2_args&);
  CbmService_GetAdjLayerByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetAdjLayerByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetAdjLayerByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetAdjLayerByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAdjLayerByFields2_pargs {
 public:


  virtual ~CbmService_GetAdjLayerByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerByFields2_result__isset {
  _CbmService_GetAdjLayerByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerByFields2_result__isset;

class CbmService_GetAdjLayerByFields2_result {
 public:

  CbmService_GetAdjLayerByFields2_result(const CbmService_GetAdjLayerByFields2_result&);
  CbmService_GetAdjLayerByFields2_result& operator=(const CbmService_GetAdjLayerByFields2_result&);
  CbmService_GetAdjLayerByFields2_result() {
  }

  virtual ~CbmService_GetAdjLayerByFields2_result() throw();
  AdjLayer success;

  _CbmService_GetAdjLayerByFields2_result__isset __isset;

  void __set_success(const AdjLayer& val);

  bool operator == (const CbmService_GetAdjLayerByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerByFields2_presult__isset {
  _CbmService_GetAdjLayerByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerByFields2_presult__isset;

class CbmService_GetAdjLayerByFields2_presult {
 public:


  virtual ~CbmService_GetAdjLayerByFields2_presult() throw();
  AdjLayer* success;

  _CbmService_GetAdjLayerByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAdjLayerListByFields_args__isset {
  _CbmService_GetAdjLayerListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetAdjLayerListByFields_args__isset;

class CbmService_GetAdjLayerListByFields_args {
 public:

  CbmService_GetAdjLayerListByFields_args(const CbmService_GetAdjLayerListByFields_args&);
  CbmService_GetAdjLayerListByFields_args& operator=(const CbmService_GetAdjLayerListByFields_args&);
  CbmService_GetAdjLayerListByFields_args() {
  }

  virtual ~CbmService_GetAdjLayerListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetAdjLayerListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetAdjLayerListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAdjLayerListByFields_pargs {
 public:


  virtual ~CbmService_GetAdjLayerListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerListByFields_result__isset {
  _CbmService_GetAdjLayerListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerListByFields_result__isset;

class CbmService_GetAdjLayerListByFields_result {
 public:

  CbmService_GetAdjLayerListByFields_result(const CbmService_GetAdjLayerListByFields_result&);
  CbmService_GetAdjLayerListByFields_result& operator=(const CbmService_GetAdjLayerListByFields_result&);
  CbmService_GetAdjLayerListByFields_result() {
  }

  virtual ~CbmService_GetAdjLayerListByFields_result() throw();
  std::vector<AdjLayer>  success;

  _CbmService_GetAdjLayerListByFields_result__isset __isset;

  void __set_success(const std::vector<AdjLayer> & val);

  bool operator == (const CbmService_GetAdjLayerListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerListByFields_presult__isset {
  _CbmService_GetAdjLayerListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerListByFields_presult__isset;

class CbmService_GetAdjLayerListByFields_presult {
 public:


  virtual ~CbmService_GetAdjLayerListByFields_presult() throw();
  std::vector<AdjLayer> * success;

  _CbmService_GetAdjLayerListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAdjLayerListByFields1_args__isset {
  _CbmService_GetAdjLayerListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetAdjLayerListByFields1_args__isset;

class CbmService_GetAdjLayerListByFields1_args {
 public:

  CbmService_GetAdjLayerListByFields1_args(const CbmService_GetAdjLayerListByFields1_args&);
  CbmService_GetAdjLayerListByFields1_args& operator=(const CbmService_GetAdjLayerListByFields1_args&);
  CbmService_GetAdjLayerListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetAdjLayerListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetAdjLayerListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetAdjLayerListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAdjLayerListByFields1_pargs {
 public:


  virtual ~CbmService_GetAdjLayerListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerListByFields1_result__isset {
  _CbmService_GetAdjLayerListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerListByFields1_result__isset;

class CbmService_GetAdjLayerListByFields1_result {
 public:

  CbmService_GetAdjLayerListByFields1_result(const CbmService_GetAdjLayerListByFields1_result&);
  CbmService_GetAdjLayerListByFields1_result& operator=(const CbmService_GetAdjLayerListByFields1_result&);
  CbmService_GetAdjLayerListByFields1_result() {
  }

  virtual ~CbmService_GetAdjLayerListByFields1_result() throw();
  std::vector<AdjLayer>  success;

  _CbmService_GetAdjLayerListByFields1_result__isset __isset;

  void __set_success(const std::vector<AdjLayer> & val);

  bool operator == (const CbmService_GetAdjLayerListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerListByFields1_presult__isset {
  _CbmService_GetAdjLayerListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerListByFields1_presult__isset;

class CbmService_GetAdjLayerListByFields1_presult {
 public:


  virtual ~CbmService_GetAdjLayerListByFields1_presult() throw();
  std::vector<AdjLayer> * success;

  _CbmService_GetAdjLayerListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetAdjLayerListByFields2_args__isset {
  _CbmService_GetAdjLayerListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetAdjLayerListByFields2_args__isset;

class CbmService_GetAdjLayerListByFields2_args {
 public:

  CbmService_GetAdjLayerListByFields2_args(const CbmService_GetAdjLayerListByFields2_args&);
  CbmService_GetAdjLayerListByFields2_args& operator=(const CbmService_GetAdjLayerListByFields2_args&);
  CbmService_GetAdjLayerListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetAdjLayerListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetAdjLayerListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetAdjLayerListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAdjLayerListByFields2_pargs {
 public:


  virtual ~CbmService_GetAdjLayerListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerListByFields2_result__isset {
  _CbmService_GetAdjLayerListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerListByFields2_result__isset;

class CbmService_GetAdjLayerListByFields2_result {
 public:

  CbmService_GetAdjLayerListByFields2_result(const CbmService_GetAdjLayerListByFields2_result&);
  CbmService_GetAdjLayerListByFields2_result& operator=(const CbmService_GetAdjLayerListByFields2_result&);
  CbmService_GetAdjLayerListByFields2_result() {
  }

  virtual ~CbmService_GetAdjLayerListByFields2_result() throw();
  std::vector<AdjLayer>  success;

  _CbmService_GetAdjLayerListByFields2_result__isset __isset;

  void __set_success(const std::vector<AdjLayer> & val);

  bool operator == (const CbmService_GetAdjLayerListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAdjLayerListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAdjLayerListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAdjLayerListByFields2_presult__isset {
  _CbmService_GetAdjLayerListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAdjLayerListByFields2_presult__isset;

class CbmService_GetAdjLayerListByFields2_presult {
 public:


  virtual ~CbmService_GetAdjLayerListByFields2_presult() throw();
  std::vector<AdjLayer> * success;

  _CbmService_GetAdjLayerListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddCoal_args__isset {
  _CbmService_AddCoal_args__isset() : coal(false) {}
  bool coal :1;
} _CbmService_AddCoal_args__isset;

class CbmService_AddCoal_args {
 public:

  CbmService_AddCoal_args(const CbmService_AddCoal_args&);
  CbmService_AddCoal_args& operator=(const CbmService_AddCoal_args&);
  CbmService_AddCoal_args() {
  }

  virtual ~CbmService_AddCoal_args() throw();
  Coal coal;

  _CbmService_AddCoal_args__isset __isset;

  void __set_coal(const Coal& val);

  bool operator == (const CbmService_AddCoal_args & rhs) const
  {
    if (!(coal == rhs.coal))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddCoal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddCoal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddCoal_pargs {
 public:


  virtual ~CbmService_AddCoal_pargs() throw();
  const Coal* coal;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddCoal_result__isset {
  _CbmService_AddCoal_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddCoal_result__isset;

class CbmService_AddCoal_result {
 public:

  CbmService_AddCoal_result(const CbmService_AddCoal_result&);
  CbmService_AddCoal_result& operator=(const CbmService_AddCoal_result&);
  CbmService_AddCoal_result() : success(0) {
  }

  virtual ~CbmService_AddCoal_result() throw();
  int32_t success;

  _CbmService_AddCoal_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddCoal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddCoal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddCoal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddCoal_presult__isset {
  _CbmService_AddCoal_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddCoal_presult__isset;

class CbmService_AddCoal_presult {
 public:


  virtual ~CbmService_AddCoal_presult() throw();
  int32_t* success;

  _CbmService_AddCoal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteCoal_args__isset {
  _CbmService_DeleteCoal_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteCoal_args__isset;

class CbmService_DeleteCoal_args {
 public:

  CbmService_DeleteCoal_args(const CbmService_DeleteCoal_args&);
  CbmService_DeleteCoal_args& operator=(const CbmService_DeleteCoal_args&);
  CbmService_DeleteCoal_args() : id(0) {
  }

  virtual ~CbmService_DeleteCoal_args() throw();
  int32_t id;

  _CbmService_DeleteCoal_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteCoal_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteCoal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteCoal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteCoal_pargs {
 public:


  virtual ~CbmService_DeleteCoal_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteCoal_result__isset {
  _CbmService_DeleteCoal_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteCoal_result__isset;

class CbmService_DeleteCoal_result {
 public:

  CbmService_DeleteCoal_result(const CbmService_DeleteCoal_result&);
  CbmService_DeleteCoal_result& operator=(const CbmService_DeleteCoal_result&);
  CbmService_DeleteCoal_result() : success(0) {
  }

  virtual ~CbmService_DeleteCoal_result() throw();
  bool success;

  _CbmService_DeleteCoal_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteCoal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteCoal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteCoal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteCoal_presult__isset {
  _CbmService_DeleteCoal_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteCoal_presult__isset;

class CbmService_DeleteCoal_presult {
 public:


  virtual ~CbmService_DeleteCoal_presult() throw();
  bool* success;

  _CbmService_DeleteCoal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateCoal_args__isset {
  _CbmService_UpdateCoal_args__isset() : coal(false) {}
  bool coal :1;
} _CbmService_UpdateCoal_args__isset;

class CbmService_UpdateCoal_args {
 public:

  CbmService_UpdateCoal_args(const CbmService_UpdateCoal_args&);
  CbmService_UpdateCoal_args& operator=(const CbmService_UpdateCoal_args&);
  CbmService_UpdateCoal_args() {
  }

  virtual ~CbmService_UpdateCoal_args() throw();
  Coal coal;

  _CbmService_UpdateCoal_args__isset __isset;

  void __set_coal(const Coal& val);

  bool operator == (const CbmService_UpdateCoal_args & rhs) const
  {
    if (!(coal == rhs.coal))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateCoal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateCoal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateCoal_pargs {
 public:


  virtual ~CbmService_UpdateCoal_pargs() throw();
  const Coal* coal;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateCoal_result__isset {
  _CbmService_UpdateCoal_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateCoal_result__isset;

class CbmService_UpdateCoal_result {
 public:

  CbmService_UpdateCoal_result(const CbmService_UpdateCoal_result&);
  CbmService_UpdateCoal_result& operator=(const CbmService_UpdateCoal_result&);
  CbmService_UpdateCoal_result() : success(0) {
  }

  virtual ~CbmService_UpdateCoal_result() throw();
  bool success;

  _CbmService_UpdateCoal_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateCoal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateCoal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateCoal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateCoal_presult__isset {
  _CbmService_UpdateCoal_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateCoal_presult__isset;

class CbmService_UpdateCoal_presult {
 public:


  virtual ~CbmService_UpdateCoal_presult() throw();
  bool* success;

  _CbmService_UpdateCoal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetCoalById_args__isset {
  _CbmService_GetCoalById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetCoalById_args__isset;

class CbmService_GetCoalById_args {
 public:

  CbmService_GetCoalById_args(const CbmService_GetCoalById_args&);
  CbmService_GetCoalById_args& operator=(const CbmService_GetCoalById_args&);
  CbmService_GetCoalById_args() : id(0) {
  }

  virtual ~CbmService_GetCoalById_args() throw();
  int32_t id;

  _CbmService_GetCoalById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetCoalById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalById_pargs {
 public:


  virtual ~CbmService_GetCoalById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalById_result__isset {
  _CbmService_GetCoalById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalById_result__isset;

class CbmService_GetCoalById_result {
 public:

  CbmService_GetCoalById_result(const CbmService_GetCoalById_result&);
  CbmService_GetCoalById_result& operator=(const CbmService_GetCoalById_result&);
  CbmService_GetCoalById_result() {
  }

  virtual ~CbmService_GetCoalById_result() throw();
  Coal success;

  _CbmService_GetCoalById_result__isset __isset;

  void __set_success(const Coal& val);

  bool operator == (const CbmService_GetCoalById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalById_presult__isset {
  _CbmService_GetCoalById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalById_presult__isset;

class CbmService_GetCoalById_presult {
 public:


  virtual ~CbmService_GetCoalById_presult() throw();
  Coal* success;

  _CbmService_GetCoalById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetCoalByForeignKey_args__isset {
  _CbmService_GetCoalByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetCoalByForeignKey_args__isset;

class CbmService_GetCoalByForeignKey_args {
 public:

  CbmService_GetCoalByForeignKey_args(const CbmService_GetCoalByForeignKey_args&);
  CbmService_GetCoalByForeignKey_args& operator=(const CbmService_GetCoalByForeignKey_args&);
  CbmService_GetCoalByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetCoalByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetCoalByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetCoalByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalByForeignKey_pargs {
 public:


  virtual ~CbmService_GetCoalByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalByForeignKey_result__isset {
  _CbmService_GetCoalByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalByForeignKey_result__isset;

class CbmService_GetCoalByForeignKey_result {
 public:

  CbmService_GetCoalByForeignKey_result(const CbmService_GetCoalByForeignKey_result&);
  CbmService_GetCoalByForeignKey_result& operator=(const CbmService_GetCoalByForeignKey_result&);
  CbmService_GetCoalByForeignKey_result() {
  }

  virtual ~CbmService_GetCoalByForeignKey_result() throw();
  Coal success;

  _CbmService_GetCoalByForeignKey_result__isset __isset;

  void __set_success(const Coal& val);

  bool operator == (const CbmService_GetCoalByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalByForeignKey_presult__isset {
  _CbmService_GetCoalByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalByForeignKey_presult__isset;

class CbmService_GetCoalByForeignKey_presult {
 public:


  virtual ~CbmService_GetCoalByForeignKey_presult() throw();
  Coal* success;

  _CbmService_GetCoalByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetCoalList_args {
 public:

  CbmService_GetCoalList_args(const CbmService_GetCoalList_args&);
  CbmService_GetCoalList_args& operator=(const CbmService_GetCoalList_args&);
  CbmService_GetCoalList_args() {
  }

  virtual ~CbmService_GetCoalList_args() throw();

  bool operator == (const CbmService_GetCoalList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetCoalList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalList_pargs {
 public:


  virtual ~CbmService_GetCoalList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalList_result__isset {
  _CbmService_GetCoalList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalList_result__isset;

class CbmService_GetCoalList_result {
 public:

  CbmService_GetCoalList_result(const CbmService_GetCoalList_result&);
  CbmService_GetCoalList_result& operator=(const CbmService_GetCoalList_result&);
  CbmService_GetCoalList_result() {
  }

  virtual ~CbmService_GetCoalList_result() throw();
  std::vector<Coal>  success;

  _CbmService_GetCoalList_result__isset __isset;

  void __set_success(const std::vector<Coal> & val);

  bool operator == (const CbmService_GetCoalList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalList_presult__isset {
  _CbmService_GetCoalList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalList_presult__isset;

class CbmService_GetCoalList_presult {
 public:


  virtual ~CbmService_GetCoalList_presult() throw();
  std::vector<Coal> * success;

  _CbmService_GetCoalList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetCoalIds_args {
 public:

  CbmService_GetCoalIds_args(const CbmService_GetCoalIds_args&);
  CbmService_GetCoalIds_args& operator=(const CbmService_GetCoalIds_args&);
  CbmService_GetCoalIds_args() {
  }

  virtual ~CbmService_GetCoalIds_args() throw();

  bool operator == (const CbmService_GetCoalIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetCoalIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalIds_pargs {
 public:


  virtual ~CbmService_GetCoalIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalIds_result__isset {
  _CbmService_GetCoalIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalIds_result__isset;

class CbmService_GetCoalIds_result {
 public:

  CbmService_GetCoalIds_result(const CbmService_GetCoalIds_result&);
  CbmService_GetCoalIds_result& operator=(const CbmService_GetCoalIds_result&);
  CbmService_GetCoalIds_result() {
  }

  virtual ~CbmService_GetCoalIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetCoalIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetCoalIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalIds_presult__isset {
  _CbmService_GetCoalIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalIds_presult__isset;

class CbmService_GetCoalIds_presult {
 public:


  virtual ~CbmService_GetCoalIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetCoalIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetCoalNames_args {
 public:

  CbmService_GetCoalNames_args(const CbmService_GetCoalNames_args&);
  CbmService_GetCoalNames_args& operator=(const CbmService_GetCoalNames_args&);
  CbmService_GetCoalNames_args() {
  }

  virtual ~CbmService_GetCoalNames_args() throw();

  bool operator == (const CbmService_GetCoalNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetCoalNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalNames_pargs {
 public:


  virtual ~CbmService_GetCoalNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalNames_result__isset {
  _CbmService_GetCoalNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalNames_result__isset;

class CbmService_GetCoalNames_result {
 public:

  CbmService_GetCoalNames_result(const CbmService_GetCoalNames_result&);
  CbmService_GetCoalNames_result& operator=(const CbmService_GetCoalNames_result&);
  CbmService_GetCoalNames_result() {
  }

  virtual ~CbmService_GetCoalNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetCoalNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetCoalNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalNames_presult__isset {
  _CbmService_GetCoalNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalNames_presult__isset;

class CbmService_GetCoalNames_presult {
 public:


  virtual ~CbmService_GetCoalNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetCoalNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreCoal_args__isset {
  _CbmService_AddMoreCoal_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreCoal_args__isset;

class CbmService_AddMoreCoal_args {
 public:

  CbmService_AddMoreCoal_args(const CbmService_AddMoreCoal_args&);
  CbmService_AddMoreCoal_args& operator=(const CbmService_AddMoreCoal_args&);
  CbmService_AddMoreCoal_args() {
  }

  virtual ~CbmService_AddMoreCoal_args() throw();
  std::vector<Coal>  objs;

  _CbmService_AddMoreCoal_args__isset __isset;

  void __set_objs(const std::vector<Coal> & val);

  bool operator == (const CbmService_AddMoreCoal_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreCoal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreCoal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreCoal_pargs {
 public:


  virtual ~CbmService_AddMoreCoal_pargs() throw();
  const std::vector<Coal> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreCoal_result {
 public:

  CbmService_AddMoreCoal_result(const CbmService_AddMoreCoal_result&);
  CbmService_AddMoreCoal_result& operator=(const CbmService_AddMoreCoal_result&);
  CbmService_AddMoreCoal_result() {
  }

  virtual ~CbmService_AddMoreCoal_result() throw();

  bool operator == (const CbmService_AddMoreCoal_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreCoal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreCoal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreCoal_presult {
 public:


  virtual ~CbmService_AddMoreCoal_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreCoal_args__isset {
  _CbmService_DeleteMoreCoal_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreCoal_args__isset;

class CbmService_DeleteMoreCoal_args {
 public:

  CbmService_DeleteMoreCoal_args(const CbmService_DeleteMoreCoal_args&);
  CbmService_DeleteMoreCoal_args& operator=(const CbmService_DeleteMoreCoal_args&);
  CbmService_DeleteMoreCoal_args() {
  }

  virtual ~CbmService_DeleteMoreCoal_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreCoal_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreCoal_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreCoal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreCoal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreCoal_pargs {
 public:


  virtual ~CbmService_DeleteMoreCoal_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreCoal_result {
 public:

  CbmService_DeleteMoreCoal_result(const CbmService_DeleteMoreCoal_result&);
  CbmService_DeleteMoreCoal_result& operator=(const CbmService_DeleteMoreCoal_result&);
  CbmService_DeleteMoreCoal_result() {
  }

  virtual ~CbmService_DeleteMoreCoal_result() throw();

  bool operator == (const CbmService_DeleteMoreCoal_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreCoal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreCoal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreCoal_presult {
 public:


  virtual ~CbmService_DeleteMoreCoal_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetCoalByFields_args__isset {
  _CbmService_GetCoalByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetCoalByFields_args__isset;

class CbmService_GetCoalByFields_args {
 public:

  CbmService_GetCoalByFields_args(const CbmService_GetCoalByFields_args&);
  CbmService_GetCoalByFields_args& operator=(const CbmService_GetCoalByFields_args&);
  CbmService_GetCoalByFields_args() {
  }

  virtual ~CbmService_GetCoalByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetCoalByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetCoalByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalByFields_pargs {
 public:


  virtual ~CbmService_GetCoalByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalByFields_result__isset {
  _CbmService_GetCoalByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalByFields_result__isset;

class CbmService_GetCoalByFields_result {
 public:

  CbmService_GetCoalByFields_result(const CbmService_GetCoalByFields_result&);
  CbmService_GetCoalByFields_result& operator=(const CbmService_GetCoalByFields_result&);
  CbmService_GetCoalByFields_result() {
  }

  virtual ~CbmService_GetCoalByFields_result() throw();
  Coal success;

  _CbmService_GetCoalByFields_result__isset __isset;

  void __set_success(const Coal& val);

  bool operator == (const CbmService_GetCoalByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalByFields_presult__isset {
  _CbmService_GetCoalByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalByFields_presult__isset;

class CbmService_GetCoalByFields_presult {
 public:


  virtual ~CbmService_GetCoalByFields_presult() throw();
  Coal* success;

  _CbmService_GetCoalByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetCoalByFields1_args__isset {
  _CbmService_GetCoalByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetCoalByFields1_args__isset;

class CbmService_GetCoalByFields1_args {
 public:

  CbmService_GetCoalByFields1_args(const CbmService_GetCoalByFields1_args&);
  CbmService_GetCoalByFields1_args& operator=(const CbmService_GetCoalByFields1_args&);
  CbmService_GetCoalByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetCoalByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetCoalByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetCoalByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalByFields1_pargs {
 public:


  virtual ~CbmService_GetCoalByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalByFields1_result__isset {
  _CbmService_GetCoalByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalByFields1_result__isset;

class CbmService_GetCoalByFields1_result {
 public:

  CbmService_GetCoalByFields1_result(const CbmService_GetCoalByFields1_result&);
  CbmService_GetCoalByFields1_result& operator=(const CbmService_GetCoalByFields1_result&);
  CbmService_GetCoalByFields1_result() {
  }

  virtual ~CbmService_GetCoalByFields1_result() throw();
  Coal success;

  _CbmService_GetCoalByFields1_result__isset __isset;

  void __set_success(const Coal& val);

  bool operator == (const CbmService_GetCoalByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalByFields1_presult__isset {
  _CbmService_GetCoalByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalByFields1_presult__isset;

class CbmService_GetCoalByFields1_presult {
 public:


  virtual ~CbmService_GetCoalByFields1_presult() throw();
  Coal* success;

  _CbmService_GetCoalByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetCoalByFields2_args__isset {
  _CbmService_GetCoalByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetCoalByFields2_args__isset;

class CbmService_GetCoalByFields2_args {
 public:

  CbmService_GetCoalByFields2_args(const CbmService_GetCoalByFields2_args&);
  CbmService_GetCoalByFields2_args& operator=(const CbmService_GetCoalByFields2_args&);
  CbmService_GetCoalByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetCoalByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetCoalByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetCoalByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalByFields2_pargs {
 public:


  virtual ~CbmService_GetCoalByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalByFields2_result__isset {
  _CbmService_GetCoalByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalByFields2_result__isset;

class CbmService_GetCoalByFields2_result {
 public:

  CbmService_GetCoalByFields2_result(const CbmService_GetCoalByFields2_result&);
  CbmService_GetCoalByFields2_result& operator=(const CbmService_GetCoalByFields2_result&);
  CbmService_GetCoalByFields2_result() {
  }

  virtual ~CbmService_GetCoalByFields2_result() throw();
  Coal success;

  _CbmService_GetCoalByFields2_result__isset __isset;

  void __set_success(const Coal& val);

  bool operator == (const CbmService_GetCoalByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalByFields2_presult__isset {
  _CbmService_GetCoalByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalByFields2_presult__isset;

class CbmService_GetCoalByFields2_presult {
 public:


  virtual ~CbmService_GetCoalByFields2_presult() throw();
  Coal* success;

  _CbmService_GetCoalByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetCoalListByFields_args__isset {
  _CbmService_GetCoalListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetCoalListByFields_args__isset;

class CbmService_GetCoalListByFields_args {
 public:

  CbmService_GetCoalListByFields_args(const CbmService_GetCoalListByFields_args&);
  CbmService_GetCoalListByFields_args& operator=(const CbmService_GetCoalListByFields_args&);
  CbmService_GetCoalListByFields_args() {
  }

  virtual ~CbmService_GetCoalListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetCoalListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetCoalListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalListByFields_pargs {
 public:


  virtual ~CbmService_GetCoalListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalListByFields_result__isset {
  _CbmService_GetCoalListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalListByFields_result__isset;

class CbmService_GetCoalListByFields_result {
 public:

  CbmService_GetCoalListByFields_result(const CbmService_GetCoalListByFields_result&);
  CbmService_GetCoalListByFields_result& operator=(const CbmService_GetCoalListByFields_result&);
  CbmService_GetCoalListByFields_result() {
  }

  virtual ~CbmService_GetCoalListByFields_result() throw();
  std::vector<Coal>  success;

  _CbmService_GetCoalListByFields_result__isset __isset;

  void __set_success(const std::vector<Coal> & val);

  bool operator == (const CbmService_GetCoalListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalListByFields_presult__isset {
  _CbmService_GetCoalListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalListByFields_presult__isset;

class CbmService_GetCoalListByFields_presult {
 public:


  virtual ~CbmService_GetCoalListByFields_presult() throw();
  std::vector<Coal> * success;

  _CbmService_GetCoalListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetCoalListByFields1_args__isset {
  _CbmService_GetCoalListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetCoalListByFields1_args__isset;

class CbmService_GetCoalListByFields1_args {
 public:

  CbmService_GetCoalListByFields1_args(const CbmService_GetCoalListByFields1_args&);
  CbmService_GetCoalListByFields1_args& operator=(const CbmService_GetCoalListByFields1_args&);
  CbmService_GetCoalListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetCoalListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetCoalListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetCoalListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalListByFields1_pargs {
 public:


  virtual ~CbmService_GetCoalListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalListByFields1_result__isset {
  _CbmService_GetCoalListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalListByFields1_result__isset;

class CbmService_GetCoalListByFields1_result {
 public:

  CbmService_GetCoalListByFields1_result(const CbmService_GetCoalListByFields1_result&);
  CbmService_GetCoalListByFields1_result& operator=(const CbmService_GetCoalListByFields1_result&);
  CbmService_GetCoalListByFields1_result() {
  }

  virtual ~CbmService_GetCoalListByFields1_result() throw();
  std::vector<Coal>  success;

  _CbmService_GetCoalListByFields1_result__isset __isset;

  void __set_success(const std::vector<Coal> & val);

  bool operator == (const CbmService_GetCoalListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalListByFields1_presult__isset {
  _CbmService_GetCoalListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalListByFields1_presult__isset;

class CbmService_GetCoalListByFields1_presult {
 public:


  virtual ~CbmService_GetCoalListByFields1_presult() throw();
  std::vector<Coal> * success;

  _CbmService_GetCoalListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetCoalListByFields2_args__isset {
  _CbmService_GetCoalListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetCoalListByFields2_args__isset;

class CbmService_GetCoalListByFields2_args {
 public:

  CbmService_GetCoalListByFields2_args(const CbmService_GetCoalListByFields2_args&);
  CbmService_GetCoalListByFields2_args& operator=(const CbmService_GetCoalListByFields2_args&);
  CbmService_GetCoalListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetCoalListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetCoalListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetCoalListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalListByFields2_pargs {
 public:


  virtual ~CbmService_GetCoalListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalListByFields2_result__isset {
  _CbmService_GetCoalListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalListByFields2_result__isset;

class CbmService_GetCoalListByFields2_result {
 public:

  CbmService_GetCoalListByFields2_result(const CbmService_GetCoalListByFields2_result&);
  CbmService_GetCoalListByFields2_result& operator=(const CbmService_GetCoalListByFields2_result&);
  CbmService_GetCoalListByFields2_result() {
  }

  virtual ~CbmService_GetCoalListByFields2_result() throw();
  std::vector<Coal>  success;

  _CbmService_GetCoalListByFields2_result__isset __isset;

  void __set_success(const std::vector<Coal> & val);

  bool operator == (const CbmService_GetCoalListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalListByFields2_presult__isset {
  _CbmService_GetCoalListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalListByFields2_presult__isset;

class CbmService_GetCoalListByFields2_presult {
 public:


  virtual ~CbmService_GetCoalListByFields2_presult() throw();
  std::vector<Coal> * success;

  _CbmService_GetCoalListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddComplexity_args__isset {
  _CbmService_AddComplexity_args__isset() : complexity(false) {}
  bool complexity :1;
} _CbmService_AddComplexity_args__isset;

class CbmService_AddComplexity_args {
 public:

  CbmService_AddComplexity_args(const CbmService_AddComplexity_args&);
  CbmService_AddComplexity_args& operator=(const CbmService_AddComplexity_args&);
  CbmService_AddComplexity_args() {
  }

  virtual ~CbmService_AddComplexity_args() throw();
  Complexity complexity;

  _CbmService_AddComplexity_args__isset __isset;

  void __set_complexity(const Complexity& val);

  bool operator == (const CbmService_AddComplexity_args & rhs) const
  {
    if (!(complexity == rhs.complexity))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddComplexity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddComplexity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddComplexity_pargs {
 public:


  virtual ~CbmService_AddComplexity_pargs() throw();
  const Complexity* complexity;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddComplexity_result__isset {
  _CbmService_AddComplexity_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddComplexity_result__isset;

class CbmService_AddComplexity_result {
 public:

  CbmService_AddComplexity_result(const CbmService_AddComplexity_result&);
  CbmService_AddComplexity_result& operator=(const CbmService_AddComplexity_result&);
  CbmService_AddComplexity_result() : success(0) {
  }

  virtual ~CbmService_AddComplexity_result() throw();
  int32_t success;

  _CbmService_AddComplexity_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddComplexity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddComplexity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddComplexity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddComplexity_presult__isset {
  _CbmService_AddComplexity_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddComplexity_presult__isset;

class CbmService_AddComplexity_presult {
 public:


  virtual ~CbmService_AddComplexity_presult() throw();
  int32_t* success;

  _CbmService_AddComplexity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteComplexity_args__isset {
  _CbmService_DeleteComplexity_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteComplexity_args__isset;

class CbmService_DeleteComplexity_args {
 public:

  CbmService_DeleteComplexity_args(const CbmService_DeleteComplexity_args&);
  CbmService_DeleteComplexity_args& operator=(const CbmService_DeleteComplexity_args&);
  CbmService_DeleteComplexity_args() : id(0) {
  }

  virtual ~CbmService_DeleteComplexity_args() throw();
  int32_t id;

  _CbmService_DeleteComplexity_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteComplexity_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteComplexity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteComplexity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteComplexity_pargs {
 public:


  virtual ~CbmService_DeleteComplexity_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteComplexity_result__isset {
  _CbmService_DeleteComplexity_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteComplexity_result__isset;

class CbmService_DeleteComplexity_result {
 public:

  CbmService_DeleteComplexity_result(const CbmService_DeleteComplexity_result&);
  CbmService_DeleteComplexity_result& operator=(const CbmService_DeleteComplexity_result&);
  CbmService_DeleteComplexity_result() : success(0) {
  }

  virtual ~CbmService_DeleteComplexity_result() throw();
  bool success;

  _CbmService_DeleteComplexity_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteComplexity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteComplexity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteComplexity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteComplexity_presult__isset {
  _CbmService_DeleteComplexity_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteComplexity_presult__isset;

class CbmService_DeleteComplexity_presult {
 public:


  virtual ~CbmService_DeleteComplexity_presult() throw();
  bool* success;

  _CbmService_DeleteComplexity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateComplexity_args__isset {
  _CbmService_UpdateComplexity_args__isset() : complexity(false) {}
  bool complexity :1;
} _CbmService_UpdateComplexity_args__isset;

class CbmService_UpdateComplexity_args {
 public:

  CbmService_UpdateComplexity_args(const CbmService_UpdateComplexity_args&);
  CbmService_UpdateComplexity_args& operator=(const CbmService_UpdateComplexity_args&);
  CbmService_UpdateComplexity_args() {
  }

  virtual ~CbmService_UpdateComplexity_args() throw();
  Complexity complexity;

  _CbmService_UpdateComplexity_args__isset __isset;

  void __set_complexity(const Complexity& val);

  bool operator == (const CbmService_UpdateComplexity_args & rhs) const
  {
    if (!(complexity == rhs.complexity))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateComplexity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateComplexity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateComplexity_pargs {
 public:


  virtual ~CbmService_UpdateComplexity_pargs() throw();
  const Complexity* complexity;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateComplexity_result__isset {
  _CbmService_UpdateComplexity_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateComplexity_result__isset;

class CbmService_UpdateComplexity_result {
 public:

  CbmService_UpdateComplexity_result(const CbmService_UpdateComplexity_result&);
  CbmService_UpdateComplexity_result& operator=(const CbmService_UpdateComplexity_result&);
  CbmService_UpdateComplexity_result() : success(0) {
  }

  virtual ~CbmService_UpdateComplexity_result() throw();
  bool success;

  _CbmService_UpdateComplexity_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateComplexity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateComplexity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateComplexity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateComplexity_presult__isset {
  _CbmService_UpdateComplexity_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateComplexity_presult__isset;

class CbmService_UpdateComplexity_presult {
 public:


  virtual ~CbmService_UpdateComplexity_presult() throw();
  bool* success;

  _CbmService_UpdateComplexity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetComplexityById_args__isset {
  _CbmService_GetComplexityById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetComplexityById_args__isset;

class CbmService_GetComplexityById_args {
 public:

  CbmService_GetComplexityById_args(const CbmService_GetComplexityById_args&);
  CbmService_GetComplexityById_args& operator=(const CbmService_GetComplexityById_args&);
  CbmService_GetComplexityById_args() : id(0) {
  }

  virtual ~CbmService_GetComplexityById_args() throw();
  int32_t id;

  _CbmService_GetComplexityById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetComplexityById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetComplexityById_pargs {
 public:


  virtual ~CbmService_GetComplexityById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityById_result__isset {
  _CbmService_GetComplexityById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityById_result__isset;

class CbmService_GetComplexityById_result {
 public:

  CbmService_GetComplexityById_result(const CbmService_GetComplexityById_result&);
  CbmService_GetComplexityById_result& operator=(const CbmService_GetComplexityById_result&);
  CbmService_GetComplexityById_result() {
  }

  virtual ~CbmService_GetComplexityById_result() throw();
  Complexity success;

  _CbmService_GetComplexityById_result__isset __isset;

  void __set_success(const Complexity& val);

  bool operator == (const CbmService_GetComplexityById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityById_presult__isset {
  _CbmService_GetComplexityById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityById_presult__isset;

class CbmService_GetComplexityById_presult {
 public:


  virtual ~CbmService_GetComplexityById_presult() throw();
  Complexity* success;

  _CbmService_GetComplexityById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetComplexityByForeignKey_args__isset {
  _CbmService_GetComplexityByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetComplexityByForeignKey_args__isset;

class CbmService_GetComplexityByForeignKey_args {
 public:

  CbmService_GetComplexityByForeignKey_args(const CbmService_GetComplexityByForeignKey_args&);
  CbmService_GetComplexityByForeignKey_args& operator=(const CbmService_GetComplexityByForeignKey_args&);
  CbmService_GetComplexityByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetComplexityByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetComplexityByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetComplexityByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetComplexityByForeignKey_pargs {
 public:


  virtual ~CbmService_GetComplexityByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityByForeignKey_result__isset {
  _CbmService_GetComplexityByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityByForeignKey_result__isset;

class CbmService_GetComplexityByForeignKey_result {
 public:

  CbmService_GetComplexityByForeignKey_result(const CbmService_GetComplexityByForeignKey_result&);
  CbmService_GetComplexityByForeignKey_result& operator=(const CbmService_GetComplexityByForeignKey_result&);
  CbmService_GetComplexityByForeignKey_result() {
  }

  virtual ~CbmService_GetComplexityByForeignKey_result() throw();
  Complexity success;

  _CbmService_GetComplexityByForeignKey_result__isset __isset;

  void __set_success(const Complexity& val);

  bool operator == (const CbmService_GetComplexityByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityByForeignKey_presult__isset {
  _CbmService_GetComplexityByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityByForeignKey_presult__isset;

class CbmService_GetComplexityByForeignKey_presult {
 public:


  virtual ~CbmService_GetComplexityByForeignKey_presult() throw();
  Complexity* success;

  _CbmService_GetComplexityByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetComplexityList_args {
 public:

  CbmService_GetComplexityList_args(const CbmService_GetComplexityList_args&);
  CbmService_GetComplexityList_args& operator=(const CbmService_GetComplexityList_args&);
  CbmService_GetComplexityList_args() {
  }

  virtual ~CbmService_GetComplexityList_args() throw();

  bool operator == (const CbmService_GetComplexityList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetComplexityList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetComplexityList_pargs {
 public:


  virtual ~CbmService_GetComplexityList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityList_result__isset {
  _CbmService_GetComplexityList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityList_result__isset;

class CbmService_GetComplexityList_result {
 public:

  CbmService_GetComplexityList_result(const CbmService_GetComplexityList_result&);
  CbmService_GetComplexityList_result& operator=(const CbmService_GetComplexityList_result&);
  CbmService_GetComplexityList_result() {
  }

  virtual ~CbmService_GetComplexityList_result() throw();
  std::vector<Complexity>  success;

  _CbmService_GetComplexityList_result__isset __isset;

  void __set_success(const std::vector<Complexity> & val);

  bool operator == (const CbmService_GetComplexityList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityList_presult__isset {
  _CbmService_GetComplexityList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityList_presult__isset;

class CbmService_GetComplexityList_presult {
 public:


  virtual ~CbmService_GetComplexityList_presult() throw();
  std::vector<Complexity> * success;

  _CbmService_GetComplexityList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetComplexityIds_args {
 public:

  CbmService_GetComplexityIds_args(const CbmService_GetComplexityIds_args&);
  CbmService_GetComplexityIds_args& operator=(const CbmService_GetComplexityIds_args&);
  CbmService_GetComplexityIds_args() {
  }

  virtual ~CbmService_GetComplexityIds_args() throw();

  bool operator == (const CbmService_GetComplexityIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetComplexityIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetComplexityIds_pargs {
 public:


  virtual ~CbmService_GetComplexityIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityIds_result__isset {
  _CbmService_GetComplexityIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityIds_result__isset;

class CbmService_GetComplexityIds_result {
 public:

  CbmService_GetComplexityIds_result(const CbmService_GetComplexityIds_result&);
  CbmService_GetComplexityIds_result& operator=(const CbmService_GetComplexityIds_result&);
  CbmService_GetComplexityIds_result() {
  }

  virtual ~CbmService_GetComplexityIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetComplexityIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetComplexityIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityIds_presult__isset {
  _CbmService_GetComplexityIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityIds_presult__isset;

class CbmService_GetComplexityIds_presult {
 public:


  virtual ~CbmService_GetComplexityIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetComplexityIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetComplexityNames_args {
 public:

  CbmService_GetComplexityNames_args(const CbmService_GetComplexityNames_args&);
  CbmService_GetComplexityNames_args& operator=(const CbmService_GetComplexityNames_args&);
  CbmService_GetComplexityNames_args() {
  }

  virtual ~CbmService_GetComplexityNames_args() throw();

  bool operator == (const CbmService_GetComplexityNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetComplexityNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetComplexityNames_pargs {
 public:


  virtual ~CbmService_GetComplexityNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityNames_result__isset {
  _CbmService_GetComplexityNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityNames_result__isset;

class CbmService_GetComplexityNames_result {
 public:

  CbmService_GetComplexityNames_result(const CbmService_GetComplexityNames_result&);
  CbmService_GetComplexityNames_result& operator=(const CbmService_GetComplexityNames_result&);
  CbmService_GetComplexityNames_result() {
  }

  virtual ~CbmService_GetComplexityNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetComplexityNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetComplexityNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityNames_presult__isset {
  _CbmService_GetComplexityNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityNames_presult__isset;

class CbmService_GetComplexityNames_presult {
 public:


  virtual ~CbmService_GetComplexityNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetComplexityNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreComplexity_args__isset {
  _CbmService_AddMoreComplexity_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreComplexity_args__isset;

class CbmService_AddMoreComplexity_args {
 public:

  CbmService_AddMoreComplexity_args(const CbmService_AddMoreComplexity_args&);
  CbmService_AddMoreComplexity_args& operator=(const CbmService_AddMoreComplexity_args&);
  CbmService_AddMoreComplexity_args() {
  }

  virtual ~CbmService_AddMoreComplexity_args() throw();
  std::vector<Complexity>  objs;

  _CbmService_AddMoreComplexity_args__isset __isset;

  void __set_objs(const std::vector<Complexity> & val);

  bool operator == (const CbmService_AddMoreComplexity_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreComplexity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreComplexity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreComplexity_pargs {
 public:


  virtual ~CbmService_AddMoreComplexity_pargs() throw();
  const std::vector<Complexity> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreComplexity_result {
 public:

  CbmService_AddMoreComplexity_result(const CbmService_AddMoreComplexity_result&);
  CbmService_AddMoreComplexity_result& operator=(const CbmService_AddMoreComplexity_result&);
  CbmService_AddMoreComplexity_result() {
  }

  virtual ~CbmService_AddMoreComplexity_result() throw();

  bool operator == (const CbmService_AddMoreComplexity_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreComplexity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreComplexity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreComplexity_presult {
 public:


  virtual ~CbmService_AddMoreComplexity_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreComplexity_args__isset {
  _CbmService_DeleteMoreComplexity_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreComplexity_args__isset;

class CbmService_DeleteMoreComplexity_args {
 public:

  CbmService_DeleteMoreComplexity_args(const CbmService_DeleteMoreComplexity_args&);
  CbmService_DeleteMoreComplexity_args& operator=(const CbmService_DeleteMoreComplexity_args&);
  CbmService_DeleteMoreComplexity_args() {
  }

  virtual ~CbmService_DeleteMoreComplexity_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreComplexity_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreComplexity_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreComplexity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreComplexity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreComplexity_pargs {
 public:


  virtual ~CbmService_DeleteMoreComplexity_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreComplexity_result {
 public:

  CbmService_DeleteMoreComplexity_result(const CbmService_DeleteMoreComplexity_result&);
  CbmService_DeleteMoreComplexity_result& operator=(const CbmService_DeleteMoreComplexity_result&);
  CbmService_DeleteMoreComplexity_result() {
  }

  virtual ~CbmService_DeleteMoreComplexity_result() throw();

  bool operator == (const CbmService_DeleteMoreComplexity_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreComplexity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreComplexity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreComplexity_presult {
 public:


  virtual ~CbmService_DeleteMoreComplexity_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetComplexityByFields_args__isset {
  _CbmService_GetComplexityByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetComplexityByFields_args__isset;

class CbmService_GetComplexityByFields_args {
 public:

  CbmService_GetComplexityByFields_args(const CbmService_GetComplexityByFields_args&);
  CbmService_GetComplexityByFields_args& operator=(const CbmService_GetComplexityByFields_args&);
  CbmService_GetComplexityByFields_args() {
  }

  virtual ~CbmService_GetComplexityByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetComplexityByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetComplexityByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetComplexityByFields_pargs {
 public:


  virtual ~CbmService_GetComplexityByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityByFields_result__isset {
  _CbmService_GetComplexityByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityByFields_result__isset;

class CbmService_GetComplexityByFields_result {
 public:

  CbmService_GetComplexityByFields_result(const CbmService_GetComplexityByFields_result&);
  CbmService_GetComplexityByFields_result& operator=(const CbmService_GetComplexityByFields_result&);
  CbmService_GetComplexityByFields_result() {
  }

  virtual ~CbmService_GetComplexityByFields_result() throw();
  Complexity success;

  _CbmService_GetComplexityByFields_result__isset __isset;

  void __set_success(const Complexity& val);

  bool operator == (const CbmService_GetComplexityByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityByFields_presult__isset {
  _CbmService_GetComplexityByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityByFields_presult__isset;

class CbmService_GetComplexityByFields_presult {
 public:


  virtual ~CbmService_GetComplexityByFields_presult() throw();
  Complexity* success;

  _CbmService_GetComplexityByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetComplexityByFields1_args__isset {
  _CbmService_GetComplexityByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetComplexityByFields1_args__isset;

class CbmService_GetComplexityByFields1_args {
 public:

  CbmService_GetComplexityByFields1_args(const CbmService_GetComplexityByFields1_args&);
  CbmService_GetComplexityByFields1_args& operator=(const CbmService_GetComplexityByFields1_args&);
  CbmService_GetComplexityByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetComplexityByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetComplexityByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetComplexityByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetComplexityByFields1_pargs {
 public:


  virtual ~CbmService_GetComplexityByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityByFields1_result__isset {
  _CbmService_GetComplexityByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityByFields1_result__isset;

class CbmService_GetComplexityByFields1_result {
 public:

  CbmService_GetComplexityByFields1_result(const CbmService_GetComplexityByFields1_result&);
  CbmService_GetComplexityByFields1_result& operator=(const CbmService_GetComplexityByFields1_result&);
  CbmService_GetComplexityByFields1_result() {
  }

  virtual ~CbmService_GetComplexityByFields1_result() throw();
  Complexity success;

  _CbmService_GetComplexityByFields1_result__isset __isset;

  void __set_success(const Complexity& val);

  bool operator == (const CbmService_GetComplexityByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityByFields1_presult__isset {
  _CbmService_GetComplexityByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityByFields1_presult__isset;

class CbmService_GetComplexityByFields1_presult {
 public:


  virtual ~CbmService_GetComplexityByFields1_presult() throw();
  Complexity* success;

  _CbmService_GetComplexityByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetComplexityByFields2_args__isset {
  _CbmService_GetComplexityByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetComplexityByFields2_args__isset;

class CbmService_GetComplexityByFields2_args {
 public:

  CbmService_GetComplexityByFields2_args(const CbmService_GetComplexityByFields2_args&);
  CbmService_GetComplexityByFields2_args& operator=(const CbmService_GetComplexityByFields2_args&);
  CbmService_GetComplexityByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetComplexityByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetComplexityByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetComplexityByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetComplexityByFields2_pargs {
 public:


  virtual ~CbmService_GetComplexityByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityByFields2_result__isset {
  _CbmService_GetComplexityByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityByFields2_result__isset;

class CbmService_GetComplexityByFields2_result {
 public:

  CbmService_GetComplexityByFields2_result(const CbmService_GetComplexityByFields2_result&);
  CbmService_GetComplexityByFields2_result& operator=(const CbmService_GetComplexityByFields2_result&);
  CbmService_GetComplexityByFields2_result() {
  }

  virtual ~CbmService_GetComplexityByFields2_result() throw();
  Complexity success;

  _CbmService_GetComplexityByFields2_result__isset __isset;

  void __set_success(const Complexity& val);

  bool operator == (const CbmService_GetComplexityByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityByFields2_presult__isset {
  _CbmService_GetComplexityByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityByFields2_presult__isset;

class CbmService_GetComplexityByFields2_presult {
 public:


  virtual ~CbmService_GetComplexityByFields2_presult() throw();
  Complexity* success;

  _CbmService_GetComplexityByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetComplexityListByFields_args__isset {
  _CbmService_GetComplexityListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetComplexityListByFields_args__isset;

class CbmService_GetComplexityListByFields_args {
 public:

  CbmService_GetComplexityListByFields_args(const CbmService_GetComplexityListByFields_args&);
  CbmService_GetComplexityListByFields_args& operator=(const CbmService_GetComplexityListByFields_args&);
  CbmService_GetComplexityListByFields_args() {
  }

  virtual ~CbmService_GetComplexityListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetComplexityListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetComplexityListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetComplexityListByFields_pargs {
 public:


  virtual ~CbmService_GetComplexityListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityListByFields_result__isset {
  _CbmService_GetComplexityListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityListByFields_result__isset;

class CbmService_GetComplexityListByFields_result {
 public:

  CbmService_GetComplexityListByFields_result(const CbmService_GetComplexityListByFields_result&);
  CbmService_GetComplexityListByFields_result& operator=(const CbmService_GetComplexityListByFields_result&);
  CbmService_GetComplexityListByFields_result() {
  }

  virtual ~CbmService_GetComplexityListByFields_result() throw();
  std::vector<Complexity>  success;

  _CbmService_GetComplexityListByFields_result__isset __isset;

  void __set_success(const std::vector<Complexity> & val);

  bool operator == (const CbmService_GetComplexityListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityListByFields_presult__isset {
  _CbmService_GetComplexityListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityListByFields_presult__isset;

class CbmService_GetComplexityListByFields_presult {
 public:


  virtual ~CbmService_GetComplexityListByFields_presult() throw();
  std::vector<Complexity> * success;

  _CbmService_GetComplexityListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetComplexityListByFields1_args__isset {
  _CbmService_GetComplexityListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetComplexityListByFields1_args__isset;

class CbmService_GetComplexityListByFields1_args {
 public:

  CbmService_GetComplexityListByFields1_args(const CbmService_GetComplexityListByFields1_args&);
  CbmService_GetComplexityListByFields1_args& operator=(const CbmService_GetComplexityListByFields1_args&);
  CbmService_GetComplexityListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetComplexityListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetComplexityListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetComplexityListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetComplexityListByFields1_pargs {
 public:


  virtual ~CbmService_GetComplexityListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityListByFields1_result__isset {
  _CbmService_GetComplexityListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityListByFields1_result__isset;

class CbmService_GetComplexityListByFields1_result {
 public:

  CbmService_GetComplexityListByFields1_result(const CbmService_GetComplexityListByFields1_result&);
  CbmService_GetComplexityListByFields1_result& operator=(const CbmService_GetComplexityListByFields1_result&);
  CbmService_GetComplexityListByFields1_result() {
  }

  virtual ~CbmService_GetComplexityListByFields1_result() throw();
  std::vector<Complexity>  success;

  _CbmService_GetComplexityListByFields1_result__isset __isset;

  void __set_success(const std::vector<Complexity> & val);

  bool operator == (const CbmService_GetComplexityListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityListByFields1_presult__isset {
  _CbmService_GetComplexityListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityListByFields1_presult__isset;

class CbmService_GetComplexityListByFields1_presult {
 public:


  virtual ~CbmService_GetComplexityListByFields1_presult() throw();
  std::vector<Complexity> * success;

  _CbmService_GetComplexityListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetComplexityListByFields2_args__isset {
  _CbmService_GetComplexityListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetComplexityListByFields2_args__isset;

class CbmService_GetComplexityListByFields2_args {
 public:

  CbmService_GetComplexityListByFields2_args(const CbmService_GetComplexityListByFields2_args&);
  CbmService_GetComplexityListByFields2_args& operator=(const CbmService_GetComplexityListByFields2_args&);
  CbmService_GetComplexityListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetComplexityListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetComplexityListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetComplexityListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetComplexityListByFields2_pargs {
 public:


  virtual ~CbmService_GetComplexityListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityListByFields2_result__isset {
  _CbmService_GetComplexityListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityListByFields2_result__isset;

class CbmService_GetComplexityListByFields2_result {
 public:

  CbmService_GetComplexityListByFields2_result(const CbmService_GetComplexityListByFields2_result&);
  CbmService_GetComplexityListByFields2_result& operator=(const CbmService_GetComplexityListByFields2_result&);
  CbmService_GetComplexityListByFields2_result() {
  }

  virtual ~CbmService_GetComplexityListByFields2_result() throw();
  std::vector<Complexity>  success;

  _CbmService_GetComplexityListByFields2_result__isset __isset;

  void __set_success(const std::vector<Complexity> & val);

  bool operator == (const CbmService_GetComplexityListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetComplexityListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetComplexityListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetComplexityListByFields2_presult__isset {
  _CbmService_GetComplexityListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetComplexityListByFields2_presult__isset;

class CbmService_GetComplexityListByFields2_presult {
 public:


  virtual ~CbmService_GetComplexityListByFields2_presult() throw();
  std::vector<Complexity> * success;

  _CbmService_GetComplexityListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddDesignDrillingSurfTechnology_args__isset {
  _CbmService_AddDesignDrillingSurfTechnology_args__isset() : design_drilling_surf_technology(false) {}
  bool design_drilling_surf_technology :1;
} _CbmService_AddDesignDrillingSurfTechnology_args__isset;

class CbmService_AddDesignDrillingSurfTechnology_args {
 public:

  CbmService_AddDesignDrillingSurfTechnology_args(const CbmService_AddDesignDrillingSurfTechnology_args&);
  CbmService_AddDesignDrillingSurfTechnology_args& operator=(const CbmService_AddDesignDrillingSurfTechnology_args&);
  CbmService_AddDesignDrillingSurfTechnology_args() {
  }

  virtual ~CbmService_AddDesignDrillingSurfTechnology_args() throw();
  DesignDrillingSurfTechnology design_drilling_surf_technology;

  _CbmService_AddDesignDrillingSurfTechnology_args__isset __isset;

  void __set_design_drilling_surf_technology(const DesignDrillingSurfTechnology& val);

  bool operator == (const CbmService_AddDesignDrillingSurfTechnology_args & rhs) const
  {
    if (!(design_drilling_surf_technology == rhs.design_drilling_surf_technology))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDesignDrillingSurfTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDesignDrillingSurfTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddDesignDrillingSurfTechnology_pargs {
 public:


  virtual ~CbmService_AddDesignDrillingSurfTechnology_pargs() throw();
  const DesignDrillingSurfTechnology* design_drilling_surf_technology;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDesignDrillingSurfTechnology_result__isset {
  _CbmService_AddDesignDrillingSurfTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDesignDrillingSurfTechnology_result__isset;

class CbmService_AddDesignDrillingSurfTechnology_result {
 public:

  CbmService_AddDesignDrillingSurfTechnology_result(const CbmService_AddDesignDrillingSurfTechnology_result&);
  CbmService_AddDesignDrillingSurfTechnology_result& operator=(const CbmService_AddDesignDrillingSurfTechnology_result&);
  CbmService_AddDesignDrillingSurfTechnology_result() : success(0) {
  }

  virtual ~CbmService_AddDesignDrillingSurfTechnology_result() throw();
  int32_t success;

  _CbmService_AddDesignDrillingSurfTechnology_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddDesignDrillingSurfTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDesignDrillingSurfTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDesignDrillingSurfTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDesignDrillingSurfTechnology_presult__isset {
  _CbmService_AddDesignDrillingSurfTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDesignDrillingSurfTechnology_presult__isset;

class CbmService_AddDesignDrillingSurfTechnology_presult {
 public:


  virtual ~CbmService_AddDesignDrillingSurfTechnology_presult() throw();
  int32_t* success;

  _CbmService_AddDesignDrillingSurfTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteDesignDrillingSurfTechnology_args__isset {
  _CbmService_DeleteDesignDrillingSurfTechnology_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteDesignDrillingSurfTechnology_args__isset;

class CbmService_DeleteDesignDrillingSurfTechnology_args {
 public:

  CbmService_DeleteDesignDrillingSurfTechnology_args(const CbmService_DeleteDesignDrillingSurfTechnology_args&);
  CbmService_DeleteDesignDrillingSurfTechnology_args& operator=(const CbmService_DeleteDesignDrillingSurfTechnology_args&);
  CbmService_DeleteDesignDrillingSurfTechnology_args() : id(0) {
  }

  virtual ~CbmService_DeleteDesignDrillingSurfTechnology_args() throw();
  int32_t id;

  _CbmService_DeleteDesignDrillingSurfTechnology_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteDesignDrillingSurfTechnology_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDesignDrillingSurfTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDesignDrillingSurfTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteDesignDrillingSurfTechnology_pargs {
 public:


  virtual ~CbmService_DeleteDesignDrillingSurfTechnology_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDesignDrillingSurfTechnology_result__isset {
  _CbmService_DeleteDesignDrillingSurfTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDesignDrillingSurfTechnology_result__isset;

class CbmService_DeleteDesignDrillingSurfTechnology_result {
 public:

  CbmService_DeleteDesignDrillingSurfTechnology_result(const CbmService_DeleteDesignDrillingSurfTechnology_result&);
  CbmService_DeleteDesignDrillingSurfTechnology_result& operator=(const CbmService_DeleteDesignDrillingSurfTechnology_result&);
  CbmService_DeleteDesignDrillingSurfTechnology_result() : success(0) {
  }

  virtual ~CbmService_DeleteDesignDrillingSurfTechnology_result() throw();
  bool success;

  _CbmService_DeleteDesignDrillingSurfTechnology_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteDesignDrillingSurfTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDesignDrillingSurfTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDesignDrillingSurfTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDesignDrillingSurfTechnology_presult__isset {
  _CbmService_DeleteDesignDrillingSurfTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDesignDrillingSurfTechnology_presult__isset;

class CbmService_DeleteDesignDrillingSurfTechnology_presult {
 public:


  virtual ~CbmService_DeleteDesignDrillingSurfTechnology_presult() throw();
  bool* success;

  _CbmService_DeleteDesignDrillingSurfTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateDesignDrillingSurfTechnology_args__isset {
  _CbmService_UpdateDesignDrillingSurfTechnology_args__isset() : design_drilling_surf_technology(false) {}
  bool design_drilling_surf_technology :1;
} _CbmService_UpdateDesignDrillingSurfTechnology_args__isset;

class CbmService_UpdateDesignDrillingSurfTechnology_args {
 public:

  CbmService_UpdateDesignDrillingSurfTechnology_args(const CbmService_UpdateDesignDrillingSurfTechnology_args&);
  CbmService_UpdateDesignDrillingSurfTechnology_args& operator=(const CbmService_UpdateDesignDrillingSurfTechnology_args&);
  CbmService_UpdateDesignDrillingSurfTechnology_args() {
  }

  virtual ~CbmService_UpdateDesignDrillingSurfTechnology_args() throw();
  DesignDrillingSurfTechnology design_drilling_surf_technology;

  _CbmService_UpdateDesignDrillingSurfTechnology_args__isset __isset;

  void __set_design_drilling_surf_technology(const DesignDrillingSurfTechnology& val);

  bool operator == (const CbmService_UpdateDesignDrillingSurfTechnology_args & rhs) const
  {
    if (!(design_drilling_surf_technology == rhs.design_drilling_surf_technology))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDesignDrillingSurfTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDesignDrillingSurfTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateDesignDrillingSurfTechnology_pargs {
 public:


  virtual ~CbmService_UpdateDesignDrillingSurfTechnology_pargs() throw();
  const DesignDrillingSurfTechnology* design_drilling_surf_technology;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDesignDrillingSurfTechnology_result__isset {
  _CbmService_UpdateDesignDrillingSurfTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDesignDrillingSurfTechnology_result__isset;

class CbmService_UpdateDesignDrillingSurfTechnology_result {
 public:

  CbmService_UpdateDesignDrillingSurfTechnology_result(const CbmService_UpdateDesignDrillingSurfTechnology_result&);
  CbmService_UpdateDesignDrillingSurfTechnology_result& operator=(const CbmService_UpdateDesignDrillingSurfTechnology_result&);
  CbmService_UpdateDesignDrillingSurfTechnology_result() : success(0) {
  }

  virtual ~CbmService_UpdateDesignDrillingSurfTechnology_result() throw();
  bool success;

  _CbmService_UpdateDesignDrillingSurfTechnology_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateDesignDrillingSurfTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDesignDrillingSurfTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDesignDrillingSurfTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDesignDrillingSurfTechnology_presult__isset {
  _CbmService_UpdateDesignDrillingSurfTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDesignDrillingSurfTechnology_presult__isset;

class CbmService_UpdateDesignDrillingSurfTechnology_presult {
 public:


  virtual ~CbmService_UpdateDesignDrillingSurfTechnology_presult() throw();
  bool* success;

  _CbmService_UpdateDesignDrillingSurfTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyById_args__isset {
  _CbmService_GetDesignDrillingSurfTechnologyById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetDesignDrillingSurfTechnologyById_args__isset;

class CbmService_GetDesignDrillingSurfTechnologyById_args {
 public:

  CbmService_GetDesignDrillingSurfTechnologyById_args(const CbmService_GetDesignDrillingSurfTechnologyById_args&);
  CbmService_GetDesignDrillingSurfTechnologyById_args& operator=(const CbmService_GetDesignDrillingSurfTechnologyById_args&);
  CbmService_GetDesignDrillingSurfTechnologyById_args() : id(0) {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyById_args() throw();
  int32_t id;

  _CbmService_GetDesignDrillingSurfTechnologyById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignDrillingSurfTechnologyById_pargs {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyById_result__isset {
  _CbmService_GetDesignDrillingSurfTechnologyById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyById_result__isset;

class CbmService_GetDesignDrillingSurfTechnologyById_result {
 public:

  CbmService_GetDesignDrillingSurfTechnologyById_result(const CbmService_GetDesignDrillingSurfTechnologyById_result&);
  CbmService_GetDesignDrillingSurfTechnologyById_result& operator=(const CbmService_GetDesignDrillingSurfTechnologyById_result&);
  CbmService_GetDesignDrillingSurfTechnologyById_result() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyById_result() throw();
  DesignDrillingSurfTechnology success;

  _CbmService_GetDesignDrillingSurfTechnologyById_result__isset __isset;

  void __set_success(const DesignDrillingSurfTechnology& val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyById_presult__isset {
  _CbmService_GetDesignDrillingSurfTechnologyById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyById_presult__isset;

class CbmService_GetDesignDrillingSurfTechnologyById_presult {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyById_presult() throw();
  DesignDrillingSurfTechnology* success;

  _CbmService_GetDesignDrillingSurfTechnologyById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args__isset {
  _CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args__isset;

class CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args {
 public:

  CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args(const CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args&);
  CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args& operator=(const CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args&);
  CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignDrillingSurfTechnologyByForeignKey_pargs {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result__isset {
  _CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result__isset;

class CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result {
 public:

  CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result(const CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result&);
  CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result& operator=(const CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result&);
  CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result() throw();
  DesignDrillingSurfTechnology success;

  _CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result__isset __isset;

  void __set_success(const DesignDrillingSurfTechnology& val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyByForeignKey_presult__isset {
  _CbmService_GetDesignDrillingSurfTechnologyByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyByForeignKey_presult__isset;

class CbmService_GetDesignDrillingSurfTechnologyByForeignKey_presult {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyByForeignKey_presult() throw();
  DesignDrillingSurfTechnology* success;

  _CbmService_GetDesignDrillingSurfTechnologyByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignDrillingSurfTechnologyList_args {
 public:

  CbmService_GetDesignDrillingSurfTechnologyList_args(const CbmService_GetDesignDrillingSurfTechnologyList_args&);
  CbmService_GetDesignDrillingSurfTechnologyList_args& operator=(const CbmService_GetDesignDrillingSurfTechnologyList_args&);
  CbmService_GetDesignDrillingSurfTechnologyList_args() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyList_args() throw();

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignDrillingSurfTechnologyList_pargs {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyList_result__isset {
  _CbmService_GetDesignDrillingSurfTechnologyList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyList_result__isset;

class CbmService_GetDesignDrillingSurfTechnologyList_result {
 public:

  CbmService_GetDesignDrillingSurfTechnologyList_result(const CbmService_GetDesignDrillingSurfTechnologyList_result&);
  CbmService_GetDesignDrillingSurfTechnologyList_result& operator=(const CbmService_GetDesignDrillingSurfTechnologyList_result&);
  CbmService_GetDesignDrillingSurfTechnologyList_result() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyList_result() throw();
  std::vector<DesignDrillingSurfTechnology>  success;

  _CbmService_GetDesignDrillingSurfTechnologyList_result__isset __isset;

  void __set_success(const std::vector<DesignDrillingSurfTechnology> & val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyList_presult__isset {
  _CbmService_GetDesignDrillingSurfTechnologyList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyList_presult__isset;

class CbmService_GetDesignDrillingSurfTechnologyList_presult {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyList_presult() throw();
  std::vector<DesignDrillingSurfTechnology> * success;

  _CbmService_GetDesignDrillingSurfTechnologyList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignDrillingSurfTechnologyIds_args {
 public:

  CbmService_GetDesignDrillingSurfTechnologyIds_args(const CbmService_GetDesignDrillingSurfTechnologyIds_args&);
  CbmService_GetDesignDrillingSurfTechnologyIds_args& operator=(const CbmService_GetDesignDrillingSurfTechnologyIds_args&);
  CbmService_GetDesignDrillingSurfTechnologyIds_args() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyIds_args() throw();

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignDrillingSurfTechnologyIds_pargs {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyIds_result__isset {
  _CbmService_GetDesignDrillingSurfTechnologyIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyIds_result__isset;

class CbmService_GetDesignDrillingSurfTechnologyIds_result {
 public:

  CbmService_GetDesignDrillingSurfTechnologyIds_result(const CbmService_GetDesignDrillingSurfTechnologyIds_result&);
  CbmService_GetDesignDrillingSurfTechnologyIds_result& operator=(const CbmService_GetDesignDrillingSurfTechnologyIds_result&);
  CbmService_GetDesignDrillingSurfTechnologyIds_result() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetDesignDrillingSurfTechnologyIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyIds_presult__isset {
  _CbmService_GetDesignDrillingSurfTechnologyIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyIds_presult__isset;

class CbmService_GetDesignDrillingSurfTechnologyIds_presult {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetDesignDrillingSurfTechnologyIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignDrillingSurfTechnologyNames_args {
 public:

  CbmService_GetDesignDrillingSurfTechnologyNames_args(const CbmService_GetDesignDrillingSurfTechnologyNames_args&);
  CbmService_GetDesignDrillingSurfTechnologyNames_args& operator=(const CbmService_GetDesignDrillingSurfTechnologyNames_args&);
  CbmService_GetDesignDrillingSurfTechnologyNames_args() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyNames_args() throw();

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignDrillingSurfTechnologyNames_pargs {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyNames_result__isset {
  _CbmService_GetDesignDrillingSurfTechnologyNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyNames_result__isset;

class CbmService_GetDesignDrillingSurfTechnologyNames_result {
 public:

  CbmService_GetDesignDrillingSurfTechnologyNames_result(const CbmService_GetDesignDrillingSurfTechnologyNames_result&);
  CbmService_GetDesignDrillingSurfTechnologyNames_result& operator=(const CbmService_GetDesignDrillingSurfTechnologyNames_result&);
  CbmService_GetDesignDrillingSurfTechnologyNames_result() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetDesignDrillingSurfTechnologyNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyNames_presult__isset {
  _CbmService_GetDesignDrillingSurfTechnologyNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyNames_presult__isset;

class CbmService_GetDesignDrillingSurfTechnologyNames_presult {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetDesignDrillingSurfTechnologyNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreDesignDrillingSurfTechnology_args__isset {
  _CbmService_AddMoreDesignDrillingSurfTechnology_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreDesignDrillingSurfTechnology_args__isset;

class CbmService_AddMoreDesignDrillingSurfTechnology_args {
 public:

  CbmService_AddMoreDesignDrillingSurfTechnology_args(const CbmService_AddMoreDesignDrillingSurfTechnology_args&);
  CbmService_AddMoreDesignDrillingSurfTechnology_args& operator=(const CbmService_AddMoreDesignDrillingSurfTechnology_args&);
  CbmService_AddMoreDesignDrillingSurfTechnology_args() {
  }

  virtual ~CbmService_AddMoreDesignDrillingSurfTechnology_args() throw();
  std::vector<DesignDrillingSurfTechnology>  objs;

  _CbmService_AddMoreDesignDrillingSurfTechnology_args__isset __isset;

  void __set_objs(const std::vector<DesignDrillingSurfTechnology> & val);

  bool operator == (const CbmService_AddMoreDesignDrillingSurfTechnology_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreDesignDrillingSurfTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDesignDrillingSurfTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignDrillingSurfTechnology_pargs {
 public:


  virtual ~CbmService_AddMoreDesignDrillingSurfTechnology_pargs() throw();
  const std::vector<DesignDrillingSurfTechnology> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignDrillingSurfTechnology_result {
 public:

  CbmService_AddMoreDesignDrillingSurfTechnology_result(const CbmService_AddMoreDesignDrillingSurfTechnology_result&);
  CbmService_AddMoreDesignDrillingSurfTechnology_result& operator=(const CbmService_AddMoreDesignDrillingSurfTechnology_result&);
  CbmService_AddMoreDesignDrillingSurfTechnology_result() {
  }

  virtual ~CbmService_AddMoreDesignDrillingSurfTechnology_result() throw();

  bool operator == (const CbmService_AddMoreDesignDrillingSurfTechnology_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreDesignDrillingSurfTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDesignDrillingSurfTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignDrillingSurfTechnology_presult {
 public:


  virtual ~CbmService_AddMoreDesignDrillingSurfTechnology_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreDesignDrillingSurfTechnology_args__isset {
  _CbmService_DeleteMoreDesignDrillingSurfTechnology_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreDesignDrillingSurfTechnology_args__isset;

class CbmService_DeleteMoreDesignDrillingSurfTechnology_args {
 public:

  CbmService_DeleteMoreDesignDrillingSurfTechnology_args(const CbmService_DeleteMoreDesignDrillingSurfTechnology_args&);
  CbmService_DeleteMoreDesignDrillingSurfTechnology_args& operator=(const CbmService_DeleteMoreDesignDrillingSurfTechnology_args&);
  CbmService_DeleteMoreDesignDrillingSurfTechnology_args() {
  }

  virtual ~CbmService_DeleteMoreDesignDrillingSurfTechnology_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreDesignDrillingSurfTechnology_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreDesignDrillingSurfTechnology_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDesignDrillingSurfTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDesignDrillingSurfTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignDrillingSurfTechnology_pargs {
 public:


  virtual ~CbmService_DeleteMoreDesignDrillingSurfTechnology_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignDrillingSurfTechnology_result {
 public:

  CbmService_DeleteMoreDesignDrillingSurfTechnology_result(const CbmService_DeleteMoreDesignDrillingSurfTechnology_result&);
  CbmService_DeleteMoreDesignDrillingSurfTechnology_result& operator=(const CbmService_DeleteMoreDesignDrillingSurfTechnology_result&);
  CbmService_DeleteMoreDesignDrillingSurfTechnology_result() {
  }

  virtual ~CbmService_DeleteMoreDesignDrillingSurfTechnology_result() throw();

  bool operator == (const CbmService_DeleteMoreDesignDrillingSurfTechnology_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDesignDrillingSurfTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDesignDrillingSurfTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignDrillingSurfTechnology_presult {
 public:


  virtual ~CbmService_DeleteMoreDesignDrillingSurfTechnology_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyByFields_args__isset {
  _CbmService_GetDesignDrillingSurfTechnologyByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDesignDrillingSurfTechnologyByFields_args__isset;

class CbmService_GetDesignDrillingSurfTechnologyByFields_args {
 public:

  CbmService_GetDesignDrillingSurfTechnologyByFields_args(const CbmService_GetDesignDrillingSurfTechnologyByFields_args&);
  CbmService_GetDesignDrillingSurfTechnologyByFields_args& operator=(const CbmService_GetDesignDrillingSurfTechnologyByFields_args&);
  CbmService_GetDesignDrillingSurfTechnologyByFields_args() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDesignDrillingSurfTechnologyByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignDrillingSurfTechnologyByFields_pargs {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyByFields_result__isset {
  _CbmService_GetDesignDrillingSurfTechnologyByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyByFields_result__isset;

class CbmService_GetDesignDrillingSurfTechnologyByFields_result {
 public:

  CbmService_GetDesignDrillingSurfTechnologyByFields_result(const CbmService_GetDesignDrillingSurfTechnologyByFields_result&);
  CbmService_GetDesignDrillingSurfTechnologyByFields_result& operator=(const CbmService_GetDesignDrillingSurfTechnologyByFields_result&);
  CbmService_GetDesignDrillingSurfTechnologyByFields_result() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyByFields_result() throw();
  DesignDrillingSurfTechnology success;

  _CbmService_GetDesignDrillingSurfTechnologyByFields_result__isset __isset;

  void __set_success(const DesignDrillingSurfTechnology& val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyByFields_presult__isset {
  _CbmService_GetDesignDrillingSurfTechnologyByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyByFields_presult__isset;

class CbmService_GetDesignDrillingSurfTechnologyByFields_presult {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyByFields_presult() throw();
  DesignDrillingSurfTechnology* success;

  _CbmService_GetDesignDrillingSurfTechnologyByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyByFields1_args__isset {
  _CbmService_GetDesignDrillingSurfTechnologyByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDesignDrillingSurfTechnologyByFields1_args__isset;

class CbmService_GetDesignDrillingSurfTechnologyByFields1_args {
 public:

  CbmService_GetDesignDrillingSurfTechnologyByFields1_args(const CbmService_GetDesignDrillingSurfTechnologyByFields1_args&);
  CbmService_GetDesignDrillingSurfTechnologyByFields1_args& operator=(const CbmService_GetDesignDrillingSurfTechnologyByFields1_args&);
  CbmService_GetDesignDrillingSurfTechnologyByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDesignDrillingSurfTechnologyByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignDrillingSurfTechnologyByFields1_pargs {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyByFields1_result__isset {
  _CbmService_GetDesignDrillingSurfTechnologyByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyByFields1_result__isset;

class CbmService_GetDesignDrillingSurfTechnologyByFields1_result {
 public:

  CbmService_GetDesignDrillingSurfTechnologyByFields1_result(const CbmService_GetDesignDrillingSurfTechnologyByFields1_result&);
  CbmService_GetDesignDrillingSurfTechnologyByFields1_result& operator=(const CbmService_GetDesignDrillingSurfTechnologyByFields1_result&);
  CbmService_GetDesignDrillingSurfTechnologyByFields1_result() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyByFields1_result() throw();
  DesignDrillingSurfTechnology success;

  _CbmService_GetDesignDrillingSurfTechnologyByFields1_result__isset __isset;

  void __set_success(const DesignDrillingSurfTechnology& val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyByFields1_presult__isset {
  _CbmService_GetDesignDrillingSurfTechnologyByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyByFields1_presult__isset;

class CbmService_GetDesignDrillingSurfTechnologyByFields1_presult {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyByFields1_presult() throw();
  DesignDrillingSurfTechnology* success;

  _CbmService_GetDesignDrillingSurfTechnologyByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyByFields2_args__isset {
  _CbmService_GetDesignDrillingSurfTechnologyByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDesignDrillingSurfTechnologyByFields2_args__isset;

class CbmService_GetDesignDrillingSurfTechnologyByFields2_args {
 public:

  CbmService_GetDesignDrillingSurfTechnologyByFields2_args(const CbmService_GetDesignDrillingSurfTechnologyByFields2_args&);
  CbmService_GetDesignDrillingSurfTechnologyByFields2_args& operator=(const CbmService_GetDesignDrillingSurfTechnologyByFields2_args&);
  CbmService_GetDesignDrillingSurfTechnologyByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDesignDrillingSurfTechnologyByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignDrillingSurfTechnologyByFields2_pargs {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyByFields2_result__isset {
  _CbmService_GetDesignDrillingSurfTechnologyByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyByFields2_result__isset;

class CbmService_GetDesignDrillingSurfTechnologyByFields2_result {
 public:

  CbmService_GetDesignDrillingSurfTechnologyByFields2_result(const CbmService_GetDesignDrillingSurfTechnologyByFields2_result&);
  CbmService_GetDesignDrillingSurfTechnologyByFields2_result& operator=(const CbmService_GetDesignDrillingSurfTechnologyByFields2_result&);
  CbmService_GetDesignDrillingSurfTechnologyByFields2_result() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyByFields2_result() throw();
  DesignDrillingSurfTechnology success;

  _CbmService_GetDesignDrillingSurfTechnologyByFields2_result__isset __isset;

  void __set_success(const DesignDrillingSurfTechnology& val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyByFields2_presult__isset {
  _CbmService_GetDesignDrillingSurfTechnologyByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyByFields2_presult__isset;

class CbmService_GetDesignDrillingSurfTechnologyByFields2_presult {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyByFields2_presult() throw();
  DesignDrillingSurfTechnology* success;

  _CbmService_GetDesignDrillingSurfTechnologyByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyListByFields_args__isset {
  _CbmService_GetDesignDrillingSurfTechnologyListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDesignDrillingSurfTechnologyListByFields_args__isset;

class CbmService_GetDesignDrillingSurfTechnologyListByFields_args {
 public:

  CbmService_GetDesignDrillingSurfTechnologyListByFields_args(const CbmService_GetDesignDrillingSurfTechnologyListByFields_args&);
  CbmService_GetDesignDrillingSurfTechnologyListByFields_args& operator=(const CbmService_GetDesignDrillingSurfTechnologyListByFields_args&);
  CbmService_GetDesignDrillingSurfTechnologyListByFields_args() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDesignDrillingSurfTechnologyListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignDrillingSurfTechnologyListByFields_pargs {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyListByFields_result__isset {
  _CbmService_GetDesignDrillingSurfTechnologyListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyListByFields_result__isset;

class CbmService_GetDesignDrillingSurfTechnologyListByFields_result {
 public:

  CbmService_GetDesignDrillingSurfTechnologyListByFields_result(const CbmService_GetDesignDrillingSurfTechnologyListByFields_result&);
  CbmService_GetDesignDrillingSurfTechnologyListByFields_result& operator=(const CbmService_GetDesignDrillingSurfTechnologyListByFields_result&);
  CbmService_GetDesignDrillingSurfTechnologyListByFields_result() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyListByFields_result() throw();
  std::vector<DesignDrillingSurfTechnology>  success;

  _CbmService_GetDesignDrillingSurfTechnologyListByFields_result__isset __isset;

  void __set_success(const std::vector<DesignDrillingSurfTechnology> & val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyListByFields_presult__isset {
  _CbmService_GetDesignDrillingSurfTechnologyListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyListByFields_presult__isset;

class CbmService_GetDesignDrillingSurfTechnologyListByFields_presult {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyListByFields_presult() throw();
  std::vector<DesignDrillingSurfTechnology> * success;

  _CbmService_GetDesignDrillingSurfTechnologyListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyListByFields1_args__isset {
  _CbmService_GetDesignDrillingSurfTechnologyListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDesignDrillingSurfTechnologyListByFields1_args__isset;

class CbmService_GetDesignDrillingSurfTechnologyListByFields1_args {
 public:

  CbmService_GetDesignDrillingSurfTechnologyListByFields1_args(const CbmService_GetDesignDrillingSurfTechnologyListByFields1_args&);
  CbmService_GetDesignDrillingSurfTechnologyListByFields1_args& operator=(const CbmService_GetDesignDrillingSurfTechnologyListByFields1_args&);
  CbmService_GetDesignDrillingSurfTechnologyListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDesignDrillingSurfTechnologyListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignDrillingSurfTechnologyListByFields1_pargs {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyListByFields1_result__isset {
  _CbmService_GetDesignDrillingSurfTechnologyListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyListByFields1_result__isset;

class CbmService_GetDesignDrillingSurfTechnologyListByFields1_result {
 public:

  CbmService_GetDesignDrillingSurfTechnologyListByFields1_result(const CbmService_GetDesignDrillingSurfTechnologyListByFields1_result&);
  CbmService_GetDesignDrillingSurfTechnologyListByFields1_result& operator=(const CbmService_GetDesignDrillingSurfTechnologyListByFields1_result&);
  CbmService_GetDesignDrillingSurfTechnologyListByFields1_result() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyListByFields1_result() throw();
  std::vector<DesignDrillingSurfTechnology>  success;

  _CbmService_GetDesignDrillingSurfTechnologyListByFields1_result__isset __isset;

  void __set_success(const std::vector<DesignDrillingSurfTechnology> & val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyListByFields1_presult__isset {
  _CbmService_GetDesignDrillingSurfTechnologyListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyListByFields1_presult__isset;

class CbmService_GetDesignDrillingSurfTechnologyListByFields1_presult {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyListByFields1_presult() throw();
  std::vector<DesignDrillingSurfTechnology> * success;

  _CbmService_GetDesignDrillingSurfTechnologyListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyListByFields2_args__isset {
  _CbmService_GetDesignDrillingSurfTechnologyListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDesignDrillingSurfTechnologyListByFields2_args__isset;

class CbmService_GetDesignDrillingSurfTechnologyListByFields2_args {
 public:

  CbmService_GetDesignDrillingSurfTechnologyListByFields2_args(const CbmService_GetDesignDrillingSurfTechnologyListByFields2_args&);
  CbmService_GetDesignDrillingSurfTechnologyListByFields2_args& operator=(const CbmService_GetDesignDrillingSurfTechnologyListByFields2_args&);
  CbmService_GetDesignDrillingSurfTechnologyListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDesignDrillingSurfTechnologyListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignDrillingSurfTechnologyListByFields2_pargs {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyListByFields2_result__isset {
  _CbmService_GetDesignDrillingSurfTechnologyListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyListByFields2_result__isset;

class CbmService_GetDesignDrillingSurfTechnologyListByFields2_result {
 public:

  CbmService_GetDesignDrillingSurfTechnologyListByFields2_result(const CbmService_GetDesignDrillingSurfTechnologyListByFields2_result&);
  CbmService_GetDesignDrillingSurfTechnologyListByFields2_result& operator=(const CbmService_GetDesignDrillingSurfTechnologyListByFields2_result&);
  CbmService_GetDesignDrillingSurfTechnologyListByFields2_result() {
  }

  virtual ~CbmService_GetDesignDrillingSurfTechnologyListByFields2_result() throw();
  std::vector<DesignDrillingSurfTechnology>  success;

  _CbmService_GetDesignDrillingSurfTechnologyListByFields2_result__isset __isset;

  void __set_success(const std::vector<DesignDrillingSurfTechnology> & val);

  bool operator == (const CbmService_GetDesignDrillingSurfTechnologyListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignDrillingSurfTechnologyListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignDrillingSurfTechnologyListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignDrillingSurfTechnologyListByFields2_presult__isset {
  _CbmService_GetDesignDrillingSurfTechnologyListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignDrillingSurfTechnologyListByFields2_presult__isset;

class CbmService_GetDesignDrillingSurfTechnologyListByFields2_presult {
 public:


  virtual ~CbmService_GetDesignDrillingSurfTechnologyListByFields2_presult() throw();
  std::vector<DesignDrillingSurfTechnology> * success;

  _CbmService_GetDesignDrillingSurfTechnologyListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddDesignGoafTechnology_args__isset {
  _CbmService_AddDesignGoafTechnology_args__isset() : design_goaf_technology(false) {}
  bool design_goaf_technology :1;
} _CbmService_AddDesignGoafTechnology_args__isset;

class CbmService_AddDesignGoafTechnology_args {
 public:

  CbmService_AddDesignGoafTechnology_args(const CbmService_AddDesignGoafTechnology_args&);
  CbmService_AddDesignGoafTechnology_args& operator=(const CbmService_AddDesignGoafTechnology_args&);
  CbmService_AddDesignGoafTechnology_args() {
  }

  virtual ~CbmService_AddDesignGoafTechnology_args() throw();
  DesignGoafTechnology design_goaf_technology;

  _CbmService_AddDesignGoafTechnology_args__isset __isset;

  void __set_design_goaf_technology(const DesignGoafTechnology& val);

  bool operator == (const CbmService_AddDesignGoafTechnology_args & rhs) const
  {
    if (!(design_goaf_technology == rhs.design_goaf_technology))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDesignGoafTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDesignGoafTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddDesignGoafTechnology_pargs {
 public:


  virtual ~CbmService_AddDesignGoafTechnology_pargs() throw();
  const DesignGoafTechnology* design_goaf_technology;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDesignGoafTechnology_result__isset {
  _CbmService_AddDesignGoafTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDesignGoafTechnology_result__isset;

class CbmService_AddDesignGoafTechnology_result {
 public:

  CbmService_AddDesignGoafTechnology_result(const CbmService_AddDesignGoafTechnology_result&);
  CbmService_AddDesignGoafTechnology_result& operator=(const CbmService_AddDesignGoafTechnology_result&);
  CbmService_AddDesignGoafTechnology_result() : success(0) {
  }

  virtual ~CbmService_AddDesignGoafTechnology_result() throw();
  int32_t success;

  _CbmService_AddDesignGoafTechnology_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddDesignGoafTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDesignGoafTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDesignGoafTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDesignGoafTechnology_presult__isset {
  _CbmService_AddDesignGoafTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDesignGoafTechnology_presult__isset;

class CbmService_AddDesignGoafTechnology_presult {
 public:


  virtual ~CbmService_AddDesignGoafTechnology_presult() throw();
  int32_t* success;

  _CbmService_AddDesignGoafTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteDesignGoafTechnology_args__isset {
  _CbmService_DeleteDesignGoafTechnology_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteDesignGoafTechnology_args__isset;

class CbmService_DeleteDesignGoafTechnology_args {
 public:

  CbmService_DeleteDesignGoafTechnology_args(const CbmService_DeleteDesignGoafTechnology_args&);
  CbmService_DeleteDesignGoafTechnology_args& operator=(const CbmService_DeleteDesignGoafTechnology_args&);
  CbmService_DeleteDesignGoafTechnology_args() : id(0) {
  }

  virtual ~CbmService_DeleteDesignGoafTechnology_args() throw();
  int32_t id;

  _CbmService_DeleteDesignGoafTechnology_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteDesignGoafTechnology_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDesignGoafTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDesignGoafTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteDesignGoafTechnology_pargs {
 public:


  virtual ~CbmService_DeleteDesignGoafTechnology_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDesignGoafTechnology_result__isset {
  _CbmService_DeleteDesignGoafTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDesignGoafTechnology_result__isset;

class CbmService_DeleteDesignGoafTechnology_result {
 public:

  CbmService_DeleteDesignGoafTechnology_result(const CbmService_DeleteDesignGoafTechnology_result&);
  CbmService_DeleteDesignGoafTechnology_result& operator=(const CbmService_DeleteDesignGoafTechnology_result&);
  CbmService_DeleteDesignGoafTechnology_result() : success(0) {
  }

  virtual ~CbmService_DeleteDesignGoafTechnology_result() throw();
  bool success;

  _CbmService_DeleteDesignGoafTechnology_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteDesignGoafTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDesignGoafTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDesignGoafTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDesignGoafTechnology_presult__isset {
  _CbmService_DeleteDesignGoafTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDesignGoafTechnology_presult__isset;

class CbmService_DeleteDesignGoafTechnology_presult {
 public:


  virtual ~CbmService_DeleteDesignGoafTechnology_presult() throw();
  bool* success;

  _CbmService_DeleteDesignGoafTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateDesignGoafTechnology_args__isset {
  _CbmService_UpdateDesignGoafTechnology_args__isset() : design_goaf_technology(false) {}
  bool design_goaf_technology :1;
} _CbmService_UpdateDesignGoafTechnology_args__isset;

class CbmService_UpdateDesignGoafTechnology_args {
 public:

  CbmService_UpdateDesignGoafTechnology_args(const CbmService_UpdateDesignGoafTechnology_args&);
  CbmService_UpdateDesignGoafTechnology_args& operator=(const CbmService_UpdateDesignGoafTechnology_args&);
  CbmService_UpdateDesignGoafTechnology_args() {
  }

  virtual ~CbmService_UpdateDesignGoafTechnology_args() throw();
  DesignGoafTechnology design_goaf_technology;

  _CbmService_UpdateDesignGoafTechnology_args__isset __isset;

  void __set_design_goaf_technology(const DesignGoafTechnology& val);

  bool operator == (const CbmService_UpdateDesignGoafTechnology_args & rhs) const
  {
    if (!(design_goaf_technology == rhs.design_goaf_technology))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDesignGoafTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDesignGoafTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateDesignGoafTechnology_pargs {
 public:


  virtual ~CbmService_UpdateDesignGoafTechnology_pargs() throw();
  const DesignGoafTechnology* design_goaf_technology;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDesignGoafTechnology_result__isset {
  _CbmService_UpdateDesignGoafTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDesignGoafTechnology_result__isset;

class CbmService_UpdateDesignGoafTechnology_result {
 public:

  CbmService_UpdateDesignGoafTechnology_result(const CbmService_UpdateDesignGoafTechnology_result&);
  CbmService_UpdateDesignGoafTechnology_result& operator=(const CbmService_UpdateDesignGoafTechnology_result&);
  CbmService_UpdateDesignGoafTechnology_result() : success(0) {
  }

  virtual ~CbmService_UpdateDesignGoafTechnology_result() throw();
  bool success;

  _CbmService_UpdateDesignGoafTechnology_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateDesignGoafTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDesignGoafTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDesignGoafTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDesignGoafTechnology_presult__isset {
  _CbmService_UpdateDesignGoafTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDesignGoafTechnology_presult__isset;

class CbmService_UpdateDesignGoafTechnology_presult {
 public:


  virtual ~CbmService_UpdateDesignGoafTechnology_presult() throw();
  bool* success;

  _CbmService_UpdateDesignGoafTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignGoafTechnologyById_args__isset {
  _CbmService_GetDesignGoafTechnologyById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetDesignGoafTechnologyById_args__isset;

class CbmService_GetDesignGoafTechnologyById_args {
 public:

  CbmService_GetDesignGoafTechnologyById_args(const CbmService_GetDesignGoafTechnologyById_args&);
  CbmService_GetDesignGoafTechnologyById_args& operator=(const CbmService_GetDesignGoafTechnologyById_args&);
  CbmService_GetDesignGoafTechnologyById_args() : id(0) {
  }

  virtual ~CbmService_GetDesignGoafTechnologyById_args() throw();
  int32_t id;

  _CbmService_GetDesignGoafTechnologyById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDesignGoafTechnologyById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignGoafTechnologyById_pargs {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyById_result__isset {
  _CbmService_GetDesignGoafTechnologyById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyById_result__isset;

class CbmService_GetDesignGoafTechnologyById_result {
 public:

  CbmService_GetDesignGoafTechnologyById_result(const CbmService_GetDesignGoafTechnologyById_result&);
  CbmService_GetDesignGoafTechnologyById_result& operator=(const CbmService_GetDesignGoafTechnologyById_result&);
  CbmService_GetDesignGoafTechnologyById_result() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyById_result() throw();
  DesignGoafTechnology success;

  _CbmService_GetDesignGoafTechnologyById_result__isset __isset;

  void __set_success(const DesignGoafTechnology& val);

  bool operator == (const CbmService_GetDesignGoafTechnologyById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyById_presult__isset {
  _CbmService_GetDesignGoafTechnologyById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyById_presult__isset;

class CbmService_GetDesignGoafTechnologyById_presult {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyById_presult() throw();
  DesignGoafTechnology* success;

  _CbmService_GetDesignGoafTechnologyById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignGoafTechnologyByForeignKey_args__isset {
  _CbmService_GetDesignGoafTechnologyByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetDesignGoafTechnologyByForeignKey_args__isset;

class CbmService_GetDesignGoafTechnologyByForeignKey_args {
 public:

  CbmService_GetDesignGoafTechnologyByForeignKey_args(const CbmService_GetDesignGoafTechnologyByForeignKey_args&);
  CbmService_GetDesignGoafTechnologyByForeignKey_args& operator=(const CbmService_GetDesignGoafTechnologyByForeignKey_args&);
  CbmService_GetDesignGoafTechnologyByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetDesignGoafTechnologyByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetDesignGoafTechnologyByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDesignGoafTechnologyByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignGoafTechnologyByForeignKey_pargs {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyByForeignKey_result__isset {
  _CbmService_GetDesignGoafTechnologyByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyByForeignKey_result__isset;

class CbmService_GetDesignGoafTechnologyByForeignKey_result {
 public:

  CbmService_GetDesignGoafTechnologyByForeignKey_result(const CbmService_GetDesignGoafTechnologyByForeignKey_result&);
  CbmService_GetDesignGoafTechnologyByForeignKey_result& operator=(const CbmService_GetDesignGoafTechnologyByForeignKey_result&);
  CbmService_GetDesignGoafTechnologyByForeignKey_result() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyByForeignKey_result() throw();
  DesignGoafTechnology success;

  _CbmService_GetDesignGoafTechnologyByForeignKey_result__isset __isset;

  void __set_success(const DesignGoafTechnology& val);

  bool operator == (const CbmService_GetDesignGoafTechnologyByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyByForeignKey_presult__isset {
  _CbmService_GetDesignGoafTechnologyByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyByForeignKey_presult__isset;

class CbmService_GetDesignGoafTechnologyByForeignKey_presult {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyByForeignKey_presult() throw();
  DesignGoafTechnology* success;

  _CbmService_GetDesignGoafTechnologyByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignGoafTechnologyList_args {
 public:

  CbmService_GetDesignGoafTechnologyList_args(const CbmService_GetDesignGoafTechnologyList_args&);
  CbmService_GetDesignGoafTechnologyList_args& operator=(const CbmService_GetDesignGoafTechnologyList_args&);
  CbmService_GetDesignGoafTechnologyList_args() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyList_args() throw();

  bool operator == (const CbmService_GetDesignGoafTechnologyList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignGoafTechnologyList_pargs {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyList_result__isset {
  _CbmService_GetDesignGoafTechnologyList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyList_result__isset;

class CbmService_GetDesignGoafTechnologyList_result {
 public:

  CbmService_GetDesignGoafTechnologyList_result(const CbmService_GetDesignGoafTechnologyList_result&);
  CbmService_GetDesignGoafTechnologyList_result& operator=(const CbmService_GetDesignGoafTechnologyList_result&);
  CbmService_GetDesignGoafTechnologyList_result() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyList_result() throw();
  std::vector<DesignGoafTechnology>  success;

  _CbmService_GetDesignGoafTechnologyList_result__isset __isset;

  void __set_success(const std::vector<DesignGoafTechnology> & val);

  bool operator == (const CbmService_GetDesignGoafTechnologyList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyList_presult__isset {
  _CbmService_GetDesignGoafTechnologyList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyList_presult__isset;

class CbmService_GetDesignGoafTechnologyList_presult {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyList_presult() throw();
  std::vector<DesignGoafTechnology> * success;

  _CbmService_GetDesignGoafTechnologyList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignGoafTechnologyIds_args {
 public:

  CbmService_GetDesignGoafTechnologyIds_args(const CbmService_GetDesignGoafTechnologyIds_args&);
  CbmService_GetDesignGoafTechnologyIds_args& operator=(const CbmService_GetDesignGoafTechnologyIds_args&);
  CbmService_GetDesignGoafTechnologyIds_args() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyIds_args() throw();

  bool operator == (const CbmService_GetDesignGoafTechnologyIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignGoafTechnologyIds_pargs {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyIds_result__isset {
  _CbmService_GetDesignGoafTechnologyIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyIds_result__isset;

class CbmService_GetDesignGoafTechnologyIds_result {
 public:

  CbmService_GetDesignGoafTechnologyIds_result(const CbmService_GetDesignGoafTechnologyIds_result&);
  CbmService_GetDesignGoafTechnologyIds_result& operator=(const CbmService_GetDesignGoafTechnologyIds_result&);
  CbmService_GetDesignGoafTechnologyIds_result() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetDesignGoafTechnologyIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetDesignGoafTechnologyIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyIds_presult__isset {
  _CbmService_GetDesignGoafTechnologyIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyIds_presult__isset;

class CbmService_GetDesignGoafTechnologyIds_presult {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetDesignGoafTechnologyIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignGoafTechnologyNames_args {
 public:

  CbmService_GetDesignGoafTechnologyNames_args(const CbmService_GetDesignGoafTechnologyNames_args&);
  CbmService_GetDesignGoafTechnologyNames_args& operator=(const CbmService_GetDesignGoafTechnologyNames_args&);
  CbmService_GetDesignGoafTechnologyNames_args() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyNames_args() throw();

  bool operator == (const CbmService_GetDesignGoafTechnologyNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignGoafTechnologyNames_pargs {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyNames_result__isset {
  _CbmService_GetDesignGoafTechnologyNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyNames_result__isset;

class CbmService_GetDesignGoafTechnologyNames_result {
 public:

  CbmService_GetDesignGoafTechnologyNames_result(const CbmService_GetDesignGoafTechnologyNames_result&);
  CbmService_GetDesignGoafTechnologyNames_result& operator=(const CbmService_GetDesignGoafTechnologyNames_result&);
  CbmService_GetDesignGoafTechnologyNames_result() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetDesignGoafTechnologyNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetDesignGoafTechnologyNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyNames_presult__isset {
  _CbmService_GetDesignGoafTechnologyNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyNames_presult__isset;

class CbmService_GetDesignGoafTechnologyNames_presult {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetDesignGoafTechnologyNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreDesignGoafTechnology_args__isset {
  _CbmService_AddMoreDesignGoafTechnology_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreDesignGoafTechnology_args__isset;

class CbmService_AddMoreDesignGoafTechnology_args {
 public:

  CbmService_AddMoreDesignGoafTechnology_args(const CbmService_AddMoreDesignGoafTechnology_args&);
  CbmService_AddMoreDesignGoafTechnology_args& operator=(const CbmService_AddMoreDesignGoafTechnology_args&);
  CbmService_AddMoreDesignGoafTechnology_args() {
  }

  virtual ~CbmService_AddMoreDesignGoafTechnology_args() throw();
  std::vector<DesignGoafTechnology>  objs;

  _CbmService_AddMoreDesignGoafTechnology_args__isset __isset;

  void __set_objs(const std::vector<DesignGoafTechnology> & val);

  bool operator == (const CbmService_AddMoreDesignGoafTechnology_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreDesignGoafTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDesignGoafTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignGoafTechnology_pargs {
 public:


  virtual ~CbmService_AddMoreDesignGoafTechnology_pargs() throw();
  const std::vector<DesignGoafTechnology> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignGoafTechnology_result {
 public:

  CbmService_AddMoreDesignGoafTechnology_result(const CbmService_AddMoreDesignGoafTechnology_result&);
  CbmService_AddMoreDesignGoafTechnology_result& operator=(const CbmService_AddMoreDesignGoafTechnology_result&);
  CbmService_AddMoreDesignGoafTechnology_result() {
  }

  virtual ~CbmService_AddMoreDesignGoafTechnology_result() throw();

  bool operator == (const CbmService_AddMoreDesignGoafTechnology_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreDesignGoafTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDesignGoafTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignGoafTechnology_presult {
 public:


  virtual ~CbmService_AddMoreDesignGoafTechnology_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreDesignGoafTechnology_args__isset {
  _CbmService_DeleteMoreDesignGoafTechnology_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreDesignGoafTechnology_args__isset;

class CbmService_DeleteMoreDesignGoafTechnology_args {
 public:

  CbmService_DeleteMoreDesignGoafTechnology_args(const CbmService_DeleteMoreDesignGoafTechnology_args&);
  CbmService_DeleteMoreDesignGoafTechnology_args& operator=(const CbmService_DeleteMoreDesignGoafTechnology_args&);
  CbmService_DeleteMoreDesignGoafTechnology_args() {
  }

  virtual ~CbmService_DeleteMoreDesignGoafTechnology_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreDesignGoafTechnology_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreDesignGoafTechnology_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDesignGoafTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDesignGoafTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignGoafTechnology_pargs {
 public:


  virtual ~CbmService_DeleteMoreDesignGoafTechnology_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignGoafTechnology_result {
 public:

  CbmService_DeleteMoreDesignGoafTechnology_result(const CbmService_DeleteMoreDesignGoafTechnology_result&);
  CbmService_DeleteMoreDesignGoafTechnology_result& operator=(const CbmService_DeleteMoreDesignGoafTechnology_result&);
  CbmService_DeleteMoreDesignGoafTechnology_result() {
  }

  virtual ~CbmService_DeleteMoreDesignGoafTechnology_result() throw();

  bool operator == (const CbmService_DeleteMoreDesignGoafTechnology_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDesignGoafTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDesignGoafTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignGoafTechnology_presult {
 public:


  virtual ~CbmService_DeleteMoreDesignGoafTechnology_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignGoafTechnologyByFields_args__isset {
  _CbmService_GetDesignGoafTechnologyByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDesignGoafTechnologyByFields_args__isset;

class CbmService_GetDesignGoafTechnologyByFields_args {
 public:

  CbmService_GetDesignGoafTechnologyByFields_args(const CbmService_GetDesignGoafTechnologyByFields_args&);
  CbmService_GetDesignGoafTechnologyByFields_args& operator=(const CbmService_GetDesignGoafTechnologyByFields_args&);
  CbmService_GetDesignGoafTechnologyByFields_args() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDesignGoafTechnologyByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDesignGoafTechnologyByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignGoafTechnologyByFields_pargs {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyByFields_result__isset {
  _CbmService_GetDesignGoafTechnologyByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyByFields_result__isset;

class CbmService_GetDesignGoafTechnologyByFields_result {
 public:

  CbmService_GetDesignGoafTechnologyByFields_result(const CbmService_GetDesignGoafTechnologyByFields_result&);
  CbmService_GetDesignGoafTechnologyByFields_result& operator=(const CbmService_GetDesignGoafTechnologyByFields_result&);
  CbmService_GetDesignGoafTechnologyByFields_result() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyByFields_result() throw();
  DesignGoafTechnology success;

  _CbmService_GetDesignGoafTechnologyByFields_result__isset __isset;

  void __set_success(const DesignGoafTechnology& val);

  bool operator == (const CbmService_GetDesignGoafTechnologyByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyByFields_presult__isset {
  _CbmService_GetDesignGoafTechnologyByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyByFields_presult__isset;

class CbmService_GetDesignGoafTechnologyByFields_presult {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyByFields_presult() throw();
  DesignGoafTechnology* success;

  _CbmService_GetDesignGoafTechnologyByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignGoafTechnologyByFields1_args__isset {
  _CbmService_GetDesignGoafTechnologyByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDesignGoafTechnologyByFields1_args__isset;

class CbmService_GetDesignGoafTechnologyByFields1_args {
 public:

  CbmService_GetDesignGoafTechnologyByFields1_args(const CbmService_GetDesignGoafTechnologyByFields1_args&);
  CbmService_GetDesignGoafTechnologyByFields1_args& operator=(const CbmService_GetDesignGoafTechnologyByFields1_args&);
  CbmService_GetDesignGoafTechnologyByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDesignGoafTechnologyByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDesignGoafTechnologyByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignGoafTechnologyByFields1_pargs {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyByFields1_result__isset {
  _CbmService_GetDesignGoafTechnologyByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyByFields1_result__isset;

class CbmService_GetDesignGoafTechnologyByFields1_result {
 public:

  CbmService_GetDesignGoafTechnologyByFields1_result(const CbmService_GetDesignGoafTechnologyByFields1_result&);
  CbmService_GetDesignGoafTechnologyByFields1_result& operator=(const CbmService_GetDesignGoafTechnologyByFields1_result&);
  CbmService_GetDesignGoafTechnologyByFields1_result() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyByFields1_result() throw();
  DesignGoafTechnology success;

  _CbmService_GetDesignGoafTechnologyByFields1_result__isset __isset;

  void __set_success(const DesignGoafTechnology& val);

  bool operator == (const CbmService_GetDesignGoafTechnologyByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyByFields1_presult__isset {
  _CbmService_GetDesignGoafTechnologyByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyByFields1_presult__isset;

class CbmService_GetDesignGoafTechnologyByFields1_presult {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyByFields1_presult() throw();
  DesignGoafTechnology* success;

  _CbmService_GetDesignGoafTechnologyByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignGoafTechnologyByFields2_args__isset {
  _CbmService_GetDesignGoafTechnologyByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDesignGoafTechnologyByFields2_args__isset;

class CbmService_GetDesignGoafTechnologyByFields2_args {
 public:

  CbmService_GetDesignGoafTechnologyByFields2_args(const CbmService_GetDesignGoafTechnologyByFields2_args&);
  CbmService_GetDesignGoafTechnologyByFields2_args& operator=(const CbmService_GetDesignGoafTechnologyByFields2_args&);
  CbmService_GetDesignGoafTechnologyByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDesignGoafTechnologyByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDesignGoafTechnologyByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignGoafTechnologyByFields2_pargs {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyByFields2_result__isset {
  _CbmService_GetDesignGoafTechnologyByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyByFields2_result__isset;

class CbmService_GetDesignGoafTechnologyByFields2_result {
 public:

  CbmService_GetDesignGoafTechnologyByFields2_result(const CbmService_GetDesignGoafTechnologyByFields2_result&);
  CbmService_GetDesignGoafTechnologyByFields2_result& operator=(const CbmService_GetDesignGoafTechnologyByFields2_result&);
  CbmService_GetDesignGoafTechnologyByFields2_result() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyByFields2_result() throw();
  DesignGoafTechnology success;

  _CbmService_GetDesignGoafTechnologyByFields2_result__isset __isset;

  void __set_success(const DesignGoafTechnology& val);

  bool operator == (const CbmService_GetDesignGoafTechnologyByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyByFields2_presult__isset {
  _CbmService_GetDesignGoafTechnologyByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyByFields2_presult__isset;

class CbmService_GetDesignGoafTechnologyByFields2_presult {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyByFields2_presult() throw();
  DesignGoafTechnology* success;

  _CbmService_GetDesignGoafTechnologyByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignGoafTechnologyListByFields_args__isset {
  _CbmService_GetDesignGoafTechnologyListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDesignGoafTechnologyListByFields_args__isset;

class CbmService_GetDesignGoafTechnologyListByFields_args {
 public:

  CbmService_GetDesignGoafTechnologyListByFields_args(const CbmService_GetDesignGoafTechnologyListByFields_args&);
  CbmService_GetDesignGoafTechnologyListByFields_args& operator=(const CbmService_GetDesignGoafTechnologyListByFields_args&);
  CbmService_GetDesignGoafTechnologyListByFields_args() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDesignGoafTechnologyListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDesignGoafTechnologyListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignGoafTechnologyListByFields_pargs {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyListByFields_result__isset {
  _CbmService_GetDesignGoafTechnologyListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyListByFields_result__isset;

class CbmService_GetDesignGoafTechnologyListByFields_result {
 public:

  CbmService_GetDesignGoafTechnologyListByFields_result(const CbmService_GetDesignGoafTechnologyListByFields_result&);
  CbmService_GetDesignGoafTechnologyListByFields_result& operator=(const CbmService_GetDesignGoafTechnologyListByFields_result&);
  CbmService_GetDesignGoafTechnologyListByFields_result() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyListByFields_result() throw();
  std::vector<DesignGoafTechnology>  success;

  _CbmService_GetDesignGoafTechnologyListByFields_result__isset __isset;

  void __set_success(const std::vector<DesignGoafTechnology> & val);

  bool operator == (const CbmService_GetDesignGoafTechnologyListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyListByFields_presult__isset {
  _CbmService_GetDesignGoafTechnologyListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyListByFields_presult__isset;

class CbmService_GetDesignGoafTechnologyListByFields_presult {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyListByFields_presult() throw();
  std::vector<DesignGoafTechnology> * success;

  _CbmService_GetDesignGoafTechnologyListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignGoafTechnologyListByFields1_args__isset {
  _CbmService_GetDesignGoafTechnologyListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDesignGoafTechnologyListByFields1_args__isset;

class CbmService_GetDesignGoafTechnologyListByFields1_args {
 public:

  CbmService_GetDesignGoafTechnologyListByFields1_args(const CbmService_GetDesignGoafTechnologyListByFields1_args&);
  CbmService_GetDesignGoafTechnologyListByFields1_args& operator=(const CbmService_GetDesignGoafTechnologyListByFields1_args&);
  CbmService_GetDesignGoafTechnologyListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDesignGoafTechnologyListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDesignGoafTechnologyListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignGoafTechnologyListByFields1_pargs {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyListByFields1_result__isset {
  _CbmService_GetDesignGoafTechnologyListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyListByFields1_result__isset;

class CbmService_GetDesignGoafTechnologyListByFields1_result {
 public:

  CbmService_GetDesignGoafTechnologyListByFields1_result(const CbmService_GetDesignGoafTechnologyListByFields1_result&);
  CbmService_GetDesignGoafTechnologyListByFields1_result& operator=(const CbmService_GetDesignGoafTechnologyListByFields1_result&);
  CbmService_GetDesignGoafTechnologyListByFields1_result() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyListByFields1_result() throw();
  std::vector<DesignGoafTechnology>  success;

  _CbmService_GetDesignGoafTechnologyListByFields1_result__isset __isset;

  void __set_success(const std::vector<DesignGoafTechnology> & val);

  bool operator == (const CbmService_GetDesignGoafTechnologyListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyListByFields1_presult__isset {
  _CbmService_GetDesignGoafTechnologyListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyListByFields1_presult__isset;

class CbmService_GetDesignGoafTechnologyListByFields1_presult {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyListByFields1_presult() throw();
  std::vector<DesignGoafTechnology> * success;

  _CbmService_GetDesignGoafTechnologyListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignGoafTechnologyListByFields2_args__isset {
  _CbmService_GetDesignGoafTechnologyListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDesignGoafTechnologyListByFields2_args__isset;

class CbmService_GetDesignGoafTechnologyListByFields2_args {
 public:

  CbmService_GetDesignGoafTechnologyListByFields2_args(const CbmService_GetDesignGoafTechnologyListByFields2_args&);
  CbmService_GetDesignGoafTechnologyListByFields2_args& operator=(const CbmService_GetDesignGoafTechnologyListByFields2_args&);
  CbmService_GetDesignGoafTechnologyListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDesignGoafTechnologyListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDesignGoafTechnologyListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignGoafTechnologyListByFields2_pargs {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyListByFields2_result__isset {
  _CbmService_GetDesignGoafTechnologyListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyListByFields2_result__isset;

class CbmService_GetDesignGoafTechnologyListByFields2_result {
 public:

  CbmService_GetDesignGoafTechnologyListByFields2_result(const CbmService_GetDesignGoafTechnologyListByFields2_result&);
  CbmService_GetDesignGoafTechnologyListByFields2_result& operator=(const CbmService_GetDesignGoafTechnologyListByFields2_result&);
  CbmService_GetDesignGoafTechnologyListByFields2_result() {
  }

  virtual ~CbmService_GetDesignGoafTechnologyListByFields2_result() throw();
  std::vector<DesignGoafTechnology>  success;

  _CbmService_GetDesignGoafTechnologyListByFields2_result__isset __isset;

  void __set_success(const std::vector<DesignGoafTechnology> & val);

  bool operator == (const CbmService_GetDesignGoafTechnologyListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignGoafTechnologyListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignGoafTechnologyListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignGoafTechnologyListByFields2_presult__isset {
  _CbmService_GetDesignGoafTechnologyListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignGoafTechnologyListByFields2_presult__isset;

class CbmService_GetDesignGoafTechnologyListByFields2_presult {
 public:


  virtual ~CbmService_GetDesignGoafTechnologyListByFields2_presult() throw();
  std::vector<DesignGoafTechnology> * success;

  _CbmService_GetDesignGoafTechnologyListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddDesignPore_args__isset {
  _CbmService_AddDesignPore_args__isset() : design_pore(false) {}
  bool design_pore :1;
} _CbmService_AddDesignPore_args__isset;

class CbmService_AddDesignPore_args {
 public:

  CbmService_AddDesignPore_args(const CbmService_AddDesignPore_args&);
  CbmService_AddDesignPore_args& operator=(const CbmService_AddDesignPore_args&);
  CbmService_AddDesignPore_args() {
  }

  virtual ~CbmService_AddDesignPore_args() throw();
  DesignPore design_pore;

  _CbmService_AddDesignPore_args__isset __isset;

  void __set_design_pore(const DesignPore& val);

  bool operator == (const CbmService_AddDesignPore_args & rhs) const
  {
    if (!(design_pore == rhs.design_pore))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDesignPore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDesignPore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddDesignPore_pargs {
 public:


  virtual ~CbmService_AddDesignPore_pargs() throw();
  const DesignPore* design_pore;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDesignPore_result__isset {
  _CbmService_AddDesignPore_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDesignPore_result__isset;

class CbmService_AddDesignPore_result {
 public:

  CbmService_AddDesignPore_result(const CbmService_AddDesignPore_result&);
  CbmService_AddDesignPore_result& operator=(const CbmService_AddDesignPore_result&);
  CbmService_AddDesignPore_result() : success(0) {
  }

  virtual ~CbmService_AddDesignPore_result() throw();
  int32_t success;

  _CbmService_AddDesignPore_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddDesignPore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDesignPore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDesignPore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDesignPore_presult__isset {
  _CbmService_AddDesignPore_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDesignPore_presult__isset;

class CbmService_AddDesignPore_presult {
 public:


  virtual ~CbmService_AddDesignPore_presult() throw();
  int32_t* success;

  _CbmService_AddDesignPore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteDesignPore_args__isset {
  _CbmService_DeleteDesignPore_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteDesignPore_args__isset;

class CbmService_DeleteDesignPore_args {
 public:

  CbmService_DeleteDesignPore_args(const CbmService_DeleteDesignPore_args&);
  CbmService_DeleteDesignPore_args& operator=(const CbmService_DeleteDesignPore_args&);
  CbmService_DeleteDesignPore_args() : id(0) {
  }

  virtual ~CbmService_DeleteDesignPore_args() throw();
  int32_t id;

  _CbmService_DeleteDesignPore_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteDesignPore_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDesignPore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDesignPore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteDesignPore_pargs {
 public:


  virtual ~CbmService_DeleteDesignPore_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDesignPore_result__isset {
  _CbmService_DeleteDesignPore_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDesignPore_result__isset;

class CbmService_DeleteDesignPore_result {
 public:

  CbmService_DeleteDesignPore_result(const CbmService_DeleteDesignPore_result&);
  CbmService_DeleteDesignPore_result& operator=(const CbmService_DeleteDesignPore_result&);
  CbmService_DeleteDesignPore_result() : success(0) {
  }

  virtual ~CbmService_DeleteDesignPore_result() throw();
  bool success;

  _CbmService_DeleteDesignPore_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteDesignPore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDesignPore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDesignPore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDesignPore_presult__isset {
  _CbmService_DeleteDesignPore_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDesignPore_presult__isset;

class CbmService_DeleteDesignPore_presult {
 public:


  virtual ~CbmService_DeleteDesignPore_presult() throw();
  bool* success;

  _CbmService_DeleteDesignPore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateDesignPore_args__isset {
  _CbmService_UpdateDesignPore_args__isset() : design_pore(false) {}
  bool design_pore :1;
} _CbmService_UpdateDesignPore_args__isset;

class CbmService_UpdateDesignPore_args {
 public:

  CbmService_UpdateDesignPore_args(const CbmService_UpdateDesignPore_args&);
  CbmService_UpdateDesignPore_args& operator=(const CbmService_UpdateDesignPore_args&);
  CbmService_UpdateDesignPore_args() {
  }

  virtual ~CbmService_UpdateDesignPore_args() throw();
  DesignPore design_pore;

  _CbmService_UpdateDesignPore_args__isset __isset;

  void __set_design_pore(const DesignPore& val);

  bool operator == (const CbmService_UpdateDesignPore_args & rhs) const
  {
    if (!(design_pore == rhs.design_pore))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDesignPore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDesignPore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateDesignPore_pargs {
 public:


  virtual ~CbmService_UpdateDesignPore_pargs() throw();
  const DesignPore* design_pore;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDesignPore_result__isset {
  _CbmService_UpdateDesignPore_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDesignPore_result__isset;

class CbmService_UpdateDesignPore_result {
 public:

  CbmService_UpdateDesignPore_result(const CbmService_UpdateDesignPore_result&);
  CbmService_UpdateDesignPore_result& operator=(const CbmService_UpdateDesignPore_result&);
  CbmService_UpdateDesignPore_result() : success(0) {
  }

  virtual ~CbmService_UpdateDesignPore_result() throw();
  bool success;

  _CbmService_UpdateDesignPore_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateDesignPore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDesignPore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDesignPore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDesignPore_presult__isset {
  _CbmService_UpdateDesignPore_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDesignPore_presult__isset;

class CbmService_UpdateDesignPore_presult {
 public:


  virtual ~CbmService_UpdateDesignPore_presult() throw();
  bool* success;

  _CbmService_UpdateDesignPore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignPoreById_args__isset {
  _CbmService_GetDesignPoreById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetDesignPoreById_args__isset;

class CbmService_GetDesignPoreById_args {
 public:

  CbmService_GetDesignPoreById_args(const CbmService_GetDesignPoreById_args&);
  CbmService_GetDesignPoreById_args& operator=(const CbmService_GetDesignPoreById_args&);
  CbmService_GetDesignPoreById_args() : id(0) {
  }

  virtual ~CbmService_GetDesignPoreById_args() throw();
  int32_t id;

  _CbmService_GetDesignPoreById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDesignPoreById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignPoreById_pargs {
 public:


  virtual ~CbmService_GetDesignPoreById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreById_result__isset {
  _CbmService_GetDesignPoreById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreById_result__isset;

class CbmService_GetDesignPoreById_result {
 public:

  CbmService_GetDesignPoreById_result(const CbmService_GetDesignPoreById_result&);
  CbmService_GetDesignPoreById_result& operator=(const CbmService_GetDesignPoreById_result&);
  CbmService_GetDesignPoreById_result() {
  }

  virtual ~CbmService_GetDesignPoreById_result() throw();
  DesignPore success;

  _CbmService_GetDesignPoreById_result__isset __isset;

  void __set_success(const DesignPore& val);

  bool operator == (const CbmService_GetDesignPoreById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreById_presult__isset {
  _CbmService_GetDesignPoreById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreById_presult__isset;

class CbmService_GetDesignPoreById_presult {
 public:


  virtual ~CbmService_GetDesignPoreById_presult() throw();
  DesignPore* success;

  _CbmService_GetDesignPoreById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignPoreByForeignKey_args__isset {
  _CbmService_GetDesignPoreByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetDesignPoreByForeignKey_args__isset;

class CbmService_GetDesignPoreByForeignKey_args {
 public:

  CbmService_GetDesignPoreByForeignKey_args(const CbmService_GetDesignPoreByForeignKey_args&);
  CbmService_GetDesignPoreByForeignKey_args& operator=(const CbmService_GetDesignPoreByForeignKey_args&);
  CbmService_GetDesignPoreByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetDesignPoreByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetDesignPoreByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDesignPoreByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignPoreByForeignKey_pargs {
 public:


  virtual ~CbmService_GetDesignPoreByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreByForeignKey_result__isset {
  _CbmService_GetDesignPoreByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreByForeignKey_result__isset;

class CbmService_GetDesignPoreByForeignKey_result {
 public:

  CbmService_GetDesignPoreByForeignKey_result(const CbmService_GetDesignPoreByForeignKey_result&);
  CbmService_GetDesignPoreByForeignKey_result& operator=(const CbmService_GetDesignPoreByForeignKey_result&);
  CbmService_GetDesignPoreByForeignKey_result() {
  }

  virtual ~CbmService_GetDesignPoreByForeignKey_result() throw();
  DesignPore success;

  _CbmService_GetDesignPoreByForeignKey_result__isset __isset;

  void __set_success(const DesignPore& val);

  bool operator == (const CbmService_GetDesignPoreByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreByForeignKey_presult__isset {
  _CbmService_GetDesignPoreByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreByForeignKey_presult__isset;

class CbmService_GetDesignPoreByForeignKey_presult {
 public:


  virtual ~CbmService_GetDesignPoreByForeignKey_presult() throw();
  DesignPore* success;

  _CbmService_GetDesignPoreByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignPoreList_args {
 public:

  CbmService_GetDesignPoreList_args(const CbmService_GetDesignPoreList_args&);
  CbmService_GetDesignPoreList_args& operator=(const CbmService_GetDesignPoreList_args&);
  CbmService_GetDesignPoreList_args() {
  }

  virtual ~CbmService_GetDesignPoreList_args() throw();

  bool operator == (const CbmService_GetDesignPoreList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignPoreList_pargs {
 public:


  virtual ~CbmService_GetDesignPoreList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreList_result__isset {
  _CbmService_GetDesignPoreList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreList_result__isset;

class CbmService_GetDesignPoreList_result {
 public:

  CbmService_GetDesignPoreList_result(const CbmService_GetDesignPoreList_result&);
  CbmService_GetDesignPoreList_result& operator=(const CbmService_GetDesignPoreList_result&);
  CbmService_GetDesignPoreList_result() {
  }

  virtual ~CbmService_GetDesignPoreList_result() throw();
  std::vector<DesignPore>  success;

  _CbmService_GetDesignPoreList_result__isset __isset;

  void __set_success(const std::vector<DesignPore> & val);

  bool operator == (const CbmService_GetDesignPoreList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreList_presult__isset {
  _CbmService_GetDesignPoreList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreList_presult__isset;

class CbmService_GetDesignPoreList_presult {
 public:


  virtual ~CbmService_GetDesignPoreList_presult() throw();
  std::vector<DesignPore> * success;

  _CbmService_GetDesignPoreList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignPoreIds_args {
 public:

  CbmService_GetDesignPoreIds_args(const CbmService_GetDesignPoreIds_args&);
  CbmService_GetDesignPoreIds_args& operator=(const CbmService_GetDesignPoreIds_args&);
  CbmService_GetDesignPoreIds_args() {
  }

  virtual ~CbmService_GetDesignPoreIds_args() throw();

  bool operator == (const CbmService_GetDesignPoreIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignPoreIds_pargs {
 public:


  virtual ~CbmService_GetDesignPoreIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreIds_result__isset {
  _CbmService_GetDesignPoreIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreIds_result__isset;

class CbmService_GetDesignPoreIds_result {
 public:

  CbmService_GetDesignPoreIds_result(const CbmService_GetDesignPoreIds_result&);
  CbmService_GetDesignPoreIds_result& operator=(const CbmService_GetDesignPoreIds_result&);
  CbmService_GetDesignPoreIds_result() {
  }

  virtual ~CbmService_GetDesignPoreIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetDesignPoreIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetDesignPoreIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreIds_presult__isset {
  _CbmService_GetDesignPoreIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreIds_presult__isset;

class CbmService_GetDesignPoreIds_presult {
 public:


  virtual ~CbmService_GetDesignPoreIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetDesignPoreIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignPoreNames_args {
 public:

  CbmService_GetDesignPoreNames_args(const CbmService_GetDesignPoreNames_args&);
  CbmService_GetDesignPoreNames_args& operator=(const CbmService_GetDesignPoreNames_args&);
  CbmService_GetDesignPoreNames_args() {
  }

  virtual ~CbmService_GetDesignPoreNames_args() throw();

  bool operator == (const CbmService_GetDesignPoreNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignPoreNames_pargs {
 public:


  virtual ~CbmService_GetDesignPoreNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreNames_result__isset {
  _CbmService_GetDesignPoreNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreNames_result__isset;

class CbmService_GetDesignPoreNames_result {
 public:

  CbmService_GetDesignPoreNames_result(const CbmService_GetDesignPoreNames_result&);
  CbmService_GetDesignPoreNames_result& operator=(const CbmService_GetDesignPoreNames_result&);
  CbmService_GetDesignPoreNames_result() {
  }

  virtual ~CbmService_GetDesignPoreNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetDesignPoreNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetDesignPoreNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreNames_presult__isset {
  _CbmService_GetDesignPoreNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreNames_presult__isset;

class CbmService_GetDesignPoreNames_presult {
 public:


  virtual ~CbmService_GetDesignPoreNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetDesignPoreNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreDesignPore_args__isset {
  _CbmService_AddMoreDesignPore_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreDesignPore_args__isset;

class CbmService_AddMoreDesignPore_args {
 public:

  CbmService_AddMoreDesignPore_args(const CbmService_AddMoreDesignPore_args&);
  CbmService_AddMoreDesignPore_args& operator=(const CbmService_AddMoreDesignPore_args&);
  CbmService_AddMoreDesignPore_args() {
  }

  virtual ~CbmService_AddMoreDesignPore_args() throw();
  std::vector<DesignPore>  objs;

  _CbmService_AddMoreDesignPore_args__isset __isset;

  void __set_objs(const std::vector<DesignPore> & val);

  bool operator == (const CbmService_AddMoreDesignPore_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreDesignPore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDesignPore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignPore_pargs {
 public:


  virtual ~CbmService_AddMoreDesignPore_pargs() throw();
  const std::vector<DesignPore> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignPore_result {
 public:

  CbmService_AddMoreDesignPore_result(const CbmService_AddMoreDesignPore_result&);
  CbmService_AddMoreDesignPore_result& operator=(const CbmService_AddMoreDesignPore_result&);
  CbmService_AddMoreDesignPore_result() {
  }

  virtual ~CbmService_AddMoreDesignPore_result() throw();

  bool operator == (const CbmService_AddMoreDesignPore_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreDesignPore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDesignPore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignPore_presult {
 public:


  virtual ~CbmService_AddMoreDesignPore_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreDesignPore_args__isset {
  _CbmService_DeleteMoreDesignPore_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreDesignPore_args__isset;

class CbmService_DeleteMoreDesignPore_args {
 public:

  CbmService_DeleteMoreDesignPore_args(const CbmService_DeleteMoreDesignPore_args&);
  CbmService_DeleteMoreDesignPore_args& operator=(const CbmService_DeleteMoreDesignPore_args&);
  CbmService_DeleteMoreDesignPore_args() {
  }

  virtual ~CbmService_DeleteMoreDesignPore_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreDesignPore_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreDesignPore_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDesignPore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDesignPore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignPore_pargs {
 public:


  virtual ~CbmService_DeleteMoreDesignPore_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignPore_result {
 public:

  CbmService_DeleteMoreDesignPore_result(const CbmService_DeleteMoreDesignPore_result&);
  CbmService_DeleteMoreDesignPore_result& operator=(const CbmService_DeleteMoreDesignPore_result&);
  CbmService_DeleteMoreDesignPore_result() {
  }

  virtual ~CbmService_DeleteMoreDesignPore_result() throw();

  bool operator == (const CbmService_DeleteMoreDesignPore_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDesignPore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDesignPore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignPore_presult {
 public:


  virtual ~CbmService_DeleteMoreDesignPore_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignPoreByFields_args__isset {
  _CbmService_GetDesignPoreByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDesignPoreByFields_args__isset;

class CbmService_GetDesignPoreByFields_args {
 public:

  CbmService_GetDesignPoreByFields_args(const CbmService_GetDesignPoreByFields_args&);
  CbmService_GetDesignPoreByFields_args& operator=(const CbmService_GetDesignPoreByFields_args&);
  CbmService_GetDesignPoreByFields_args() {
  }

  virtual ~CbmService_GetDesignPoreByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDesignPoreByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDesignPoreByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignPoreByFields_pargs {
 public:


  virtual ~CbmService_GetDesignPoreByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreByFields_result__isset {
  _CbmService_GetDesignPoreByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreByFields_result__isset;

class CbmService_GetDesignPoreByFields_result {
 public:

  CbmService_GetDesignPoreByFields_result(const CbmService_GetDesignPoreByFields_result&);
  CbmService_GetDesignPoreByFields_result& operator=(const CbmService_GetDesignPoreByFields_result&);
  CbmService_GetDesignPoreByFields_result() {
  }

  virtual ~CbmService_GetDesignPoreByFields_result() throw();
  DesignPore success;

  _CbmService_GetDesignPoreByFields_result__isset __isset;

  void __set_success(const DesignPore& val);

  bool operator == (const CbmService_GetDesignPoreByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreByFields_presult__isset {
  _CbmService_GetDesignPoreByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreByFields_presult__isset;

class CbmService_GetDesignPoreByFields_presult {
 public:


  virtual ~CbmService_GetDesignPoreByFields_presult() throw();
  DesignPore* success;

  _CbmService_GetDesignPoreByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignPoreByFields1_args__isset {
  _CbmService_GetDesignPoreByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDesignPoreByFields1_args__isset;

class CbmService_GetDesignPoreByFields1_args {
 public:

  CbmService_GetDesignPoreByFields1_args(const CbmService_GetDesignPoreByFields1_args&);
  CbmService_GetDesignPoreByFields1_args& operator=(const CbmService_GetDesignPoreByFields1_args&);
  CbmService_GetDesignPoreByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDesignPoreByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDesignPoreByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDesignPoreByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignPoreByFields1_pargs {
 public:


  virtual ~CbmService_GetDesignPoreByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreByFields1_result__isset {
  _CbmService_GetDesignPoreByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreByFields1_result__isset;

class CbmService_GetDesignPoreByFields1_result {
 public:

  CbmService_GetDesignPoreByFields1_result(const CbmService_GetDesignPoreByFields1_result&);
  CbmService_GetDesignPoreByFields1_result& operator=(const CbmService_GetDesignPoreByFields1_result&);
  CbmService_GetDesignPoreByFields1_result() {
  }

  virtual ~CbmService_GetDesignPoreByFields1_result() throw();
  DesignPore success;

  _CbmService_GetDesignPoreByFields1_result__isset __isset;

  void __set_success(const DesignPore& val);

  bool operator == (const CbmService_GetDesignPoreByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreByFields1_presult__isset {
  _CbmService_GetDesignPoreByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreByFields1_presult__isset;

class CbmService_GetDesignPoreByFields1_presult {
 public:


  virtual ~CbmService_GetDesignPoreByFields1_presult() throw();
  DesignPore* success;

  _CbmService_GetDesignPoreByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignPoreByFields2_args__isset {
  _CbmService_GetDesignPoreByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDesignPoreByFields2_args__isset;

class CbmService_GetDesignPoreByFields2_args {
 public:

  CbmService_GetDesignPoreByFields2_args(const CbmService_GetDesignPoreByFields2_args&);
  CbmService_GetDesignPoreByFields2_args& operator=(const CbmService_GetDesignPoreByFields2_args&);
  CbmService_GetDesignPoreByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDesignPoreByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDesignPoreByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDesignPoreByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignPoreByFields2_pargs {
 public:


  virtual ~CbmService_GetDesignPoreByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreByFields2_result__isset {
  _CbmService_GetDesignPoreByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreByFields2_result__isset;

class CbmService_GetDesignPoreByFields2_result {
 public:

  CbmService_GetDesignPoreByFields2_result(const CbmService_GetDesignPoreByFields2_result&);
  CbmService_GetDesignPoreByFields2_result& operator=(const CbmService_GetDesignPoreByFields2_result&);
  CbmService_GetDesignPoreByFields2_result() {
  }

  virtual ~CbmService_GetDesignPoreByFields2_result() throw();
  DesignPore success;

  _CbmService_GetDesignPoreByFields2_result__isset __isset;

  void __set_success(const DesignPore& val);

  bool operator == (const CbmService_GetDesignPoreByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreByFields2_presult__isset {
  _CbmService_GetDesignPoreByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreByFields2_presult__isset;

class CbmService_GetDesignPoreByFields2_presult {
 public:


  virtual ~CbmService_GetDesignPoreByFields2_presult() throw();
  DesignPore* success;

  _CbmService_GetDesignPoreByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignPoreListByFields_args__isset {
  _CbmService_GetDesignPoreListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDesignPoreListByFields_args__isset;

class CbmService_GetDesignPoreListByFields_args {
 public:

  CbmService_GetDesignPoreListByFields_args(const CbmService_GetDesignPoreListByFields_args&);
  CbmService_GetDesignPoreListByFields_args& operator=(const CbmService_GetDesignPoreListByFields_args&);
  CbmService_GetDesignPoreListByFields_args() {
  }

  virtual ~CbmService_GetDesignPoreListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDesignPoreListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDesignPoreListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignPoreListByFields_pargs {
 public:


  virtual ~CbmService_GetDesignPoreListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreListByFields_result__isset {
  _CbmService_GetDesignPoreListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreListByFields_result__isset;

class CbmService_GetDesignPoreListByFields_result {
 public:

  CbmService_GetDesignPoreListByFields_result(const CbmService_GetDesignPoreListByFields_result&);
  CbmService_GetDesignPoreListByFields_result& operator=(const CbmService_GetDesignPoreListByFields_result&);
  CbmService_GetDesignPoreListByFields_result() {
  }

  virtual ~CbmService_GetDesignPoreListByFields_result() throw();
  std::vector<DesignPore>  success;

  _CbmService_GetDesignPoreListByFields_result__isset __isset;

  void __set_success(const std::vector<DesignPore> & val);

  bool operator == (const CbmService_GetDesignPoreListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreListByFields_presult__isset {
  _CbmService_GetDesignPoreListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreListByFields_presult__isset;

class CbmService_GetDesignPoreListByFields_presult {
 public:


  virtual ~CbmService_GetDesignPoreListByFields_presult() throw();
  std::vector<DesignPore> * success;

  _CbmService_GetDesignPoreListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignPoreListByFields1_args__isset {
  _CbmService_GetDesignPoreListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDesignPoreListByFields1_args__isset;

class CbmService_GetDesignPoreListByFields1_args {
 public:

  CbmService_GetDesignPoreListByFields1_args(const CbmService_GetDesignPoreListByFields1_args&);
  CbmService_GetDesignPoreListByFields1_args& operator=(const CbmService_GetDesignPoreListByFields1_args&);
  CbmService_GetDesignPoreListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDesignPoreListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDesignPoreListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDesignPoreListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignPoreListByFields1_pargs {
 public:


  virtual ~CbmService_GetDesignPoreListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreListByFields1_result__isset {
  _CbmService_GetDesignPoreListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreListByFields1_result__isset;

class CbmService_GetDesignPoreListByFields1_result {
 public:

  CbmService_GetDesignPoreListByFields1_result(const CbmService_GetDesignPoreListByFields1_result&);
  CbmService_GetDesignPoreListByFields1_result& operator=(const CbmService_GetDesignPoreListByFields1_result&);
  CbmService_GetDesignPoreListByFields1_result() {
  }

  virtual ~CbmService_GetDesignPoreListByFields1_result() throw();
  std::vector<DesignPore>  success;

  _CbmService_GetDesignPoreListByFields1_result__isset __isset;

  void __set_success(const std::vector<DesignPore> & val);

  bool operator == (const CbmService_GetDesignPoreListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreListByFields1_presult__isset {
  _CbmService_GetDesignPoreListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreListByFields1_presult__isset;

class CbmService_GetDesignPoreListByFields1_presult {
 public:


  virtual ~CbmService_GetDesignPoreListByFields1_presult() throw();
  std::vector<DesignPore> * success;

  _CbmService_GetDesignPoreListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignPoreListByFields2_args__isset {
  _CbmService_GetDesignPoreListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDesignPoreListByFields2_args__isset;

class CbmService_GetDesignPoreListByFields2_args {
 public:

  CbmService_GetDesignPoreListByFields2_args(const CbmService_GetDesignPoreListByFields2_args&);
  CbmService_GetDesignPoreListByFields2_args& operator=(const CbmService_GetDesignPoreListByFields2_args&);
  CbmService_GetDesignPoreListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDesignPoreListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDesignPoreListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDesignPoreListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignPoreListByFields2_pargs {
 public:


  virtual ~CbmService_GetDesignPoreListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreListByFields2_result__isset {
  _CbmService_GetDesignPoreListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreListByFields2_result__isset;

class CbmService_GetDesignPoreListByFields2_result {
 public:

  CbmService_GetDesignPoreListByFields2_result(const CbmService_GetDesignPoreListByFields2_result&);
  CbmService_GetDesignPoreListByFields2_result& operator=(const CbmService_GetDesignPoreListByFields2_result&);
  CbmService_GetDesignPoreListByFields2_result() {
  }

  virtual ~CbmService_GetDesignPoreListByFields2_result() throw();
  std::vector<DesignPore>  success;

  _CbmService_GetDesignPoreListByFields2_result__isset __isset;

  void __set_success(const std::vector<DesignPore> & val);

  bool operator == (const CbmService_GetDesignPoreListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignPoreListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignPoreListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignPoreListByFields2_presult__isset {
  _CbmService_GetDesignPoreListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignPoreListByFields2_presult__isset;

class CbmService_GetDesignPoreListByFields2_presult {
 public:


  virtual ~CbmService_GetDesignPoreListByFields2_presult() throw();
  std::vector<DesignPore> * success;

  _CbmService_GetDesignPoreListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddDesignSite_args__isset {
  _CbmService_AddDesignSite_args__isset() : design_site(false) {}
  bool design_site :1;
} _CbmService_AddDesignSite_args__isset;

class CbmService_AddDesignSite_args {
 public:

  CbmService_AddDesignSite_args(const CbmService_AddDesignSite_args&);
  CbmService_AddDesignSite_args& operator=(const CbmService_AddDesignSite_args&);
  CbmService_AddDesignSite_args() {
  }

  virtual ~CbmService_AddDesignSite_args() throw();
  DesignSite design_site;

  _CbmService_AddDesignSite_args__isset __isset;

  void __set_design_site(const DesignSite& val);

  bool operator == (const CbmService_AddDesignSite_args & rhs) const
  {
    if (!(design_site == rhs.design_site))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDesignSite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDesignSite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddDesignSite_pargs {
 public:


  virtual ~CbmService_AddDesignSite_pargs() throw();
  const DesignSite* design_site;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDesignSite_result__isset {
  _CbmService_AddDesignSite_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDesignSite_result__isset;

class CbmService_AddDesignSite_result {
 public:

  CbmService_AddDesignSite_result(const CbmService_AddDesignSite_result&);
  CbmService_AddDesignSite_result& operator=(const CbmService_AddDesignSite_result&);
  CbmService_AddDesignSite_result() : success(0) {
  }

  virtual ~CbmService_AddDesignSite_result() throw();
  int32_t success;

  _CbmService_AddDesignSite_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddDesignSite_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDesignSite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDesignSite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDesignSite_presult__isset {
  _CbmService_AddDesignSite_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDesignSite_presult__isset;

class CbmService_AddDesignSite_presult {
 public:


  virtual ~CbmService_AddDesignSite_presult() throw();
  int32_t* success;

  _CbmService_AddDesignSite_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteDesignSite_args__isset {
  _CbmService_DeleteDesignSite_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteDesignSite_args__isset;

class CbmService_DeleteDesignSite_args {
 public:

  CbmService_DeleteDesignSite_args(const CbmService_DeleteDesignSite_args&);
  CbmService_DeleteDesignSite_args& operator=(const CbmService_DeleteDesignSite_args&);
  CbmService_DeleteDesignSite_args() : id(0) {
  }

  virtual ~CbmService_DeleteDesignSite_args() throw();
  int32_t id;

  _CbmService_DeleteDesignSite_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteDesignSite_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDesignSite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDesignSite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteDesignSite_pargs {
 public:


  virtual ~CbmService_DeleteDesignSite_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDesignSite_result__isset {
  _CbmService_DeleteDesignSite_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDesignSite_result__isset;

class CbmService_DeleteDesignSite_result {
 public:

  CbmService_DeleteDesignSite_result(const CbmService_DeleteDesignSite_result&);
  CbmService_DeleteDesignSite_result& operator=(const CbmService_DeleteDesignSite_result&);
  CbmService_DeleteDesignSite_result() : success(0) {
  }

  virtual ~CbmService_DeleteDesignSite_result() throw();
  bool success;

  _CbmService_DeleteDesignSite_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteDesignSite_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDesignSite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDesignSite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDesignSite_presult__isset {
  _CbmService_DeleteDesignSite_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDesignSite_presult__isset;

class CbmService_DeleteDesignSite_presult {
 public:


  virtual ~CbmService_DeleteDesignSite_presult() throw();
  bool* success;

  _CbmService_DeleteDesignSite_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateDesignSite_args__isset {
  _CbmService_UpdateDesignSite_args__isset() : design_site(false) {}
  bool design_site :1;
} _CbmService_UpdateDesignSite_args__isset;

class CbmService_UpdateDesignSite_args {
 public:

  CbmService_UpdateDesignSite_args(const CbmService_UpdateDesignSite_args&);
  CbmService_UpdateDesignSite_args& operator=(const CbmService_UpdateDesignSite_args&);
  CbmService_UpdateDesignSite_args() {
  }

  virtual ~CbmService_UpdateDesignSite_args() throw();
  DesignSite design_site;

  _CbmService_UpdateDesignSite_args__isset __isset;

  void __set_design_site(const DesignSite& val);

  bool operator == (const CbmService_UpdateDesignSite_args & rhs) const
  {
    if (!(design_site == rhs.design_site))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDesignSite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDesignSite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateDesignSite_pargs {
 public:


  virtual ~CbmService_UpdateDesignSite_pargs() throw();
  const DesignSite* design_site;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDesignSite_result__isset {
  _CbmService_UpdateDesignSite_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDesignSite_result__isset;

class CbmService_UpdateDesignSite_result {
 public:

  CbmService_UpdateDesignSite_result(const CbmService_UpdateDesignSite_result&);
  CbmService_UpdateDesignSite_result& operator=(const CbmService_UpdateDesignSite_result&);
  CbmService_UpdateDesignSite_result() : success(0) {
  }

  virtual ~CbmService_UpdateDesignSite_result() throw();
  bool success;

  _CbmService_UpdateDesignSite_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateDesignSite_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDesignSite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDesignSite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDesignSite_presult__isset {
  _CbmService_UpdateDesignSite_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDesignSite_presult__isset;

class CbmService_UpdateDesignSite_presult {
 public:


  virtual ~CbmService_UpdateDesignSite_presult() throw();
  bool* success;

  _CbmService_UpdateDesignSite_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignSiteById_args__isset {
  _CbmService_GetDesignSiteById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetDesignSiteById_args__isset;

class CbmService_GetDesignSiteById_args {
 public:

  CbmService_GetDesignSiteById_args(const CbmService_GetDesignSiteById_args&);
  CbmService_GetDesignSiteById_args& operator=(const CbmService_GetDesignSiteById_args&);
  CbmService_GetDesignSiteById_args() : id(0) {
  }

  virtual ~CbmService_GetDesignSiteById_args() throw();
  int32_t id;

  _CbmService_GetDesignSiteById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDesignSiteById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignSiteById_pargs {
 public:


  virtual ~CbmService_GetDesignSiteById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteById_result__isset {
  _CbmService_GetDesignSiteById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteById_result__isset;

class CbmService_GetDesignSiteById_result {
 public:

  CbmService_GetDesignSiteById_result(const CbmService_GetDesignSiteById_result&);
  CbmService_GetDesignSiteById_result& operator=(const CbmService_GetDesignSiteById_result&);
  CbmService_GetDesignSiteById_result() {
  }

  virtual ~CbmService_GetDesignSiteById_result() throw();
  DesignSite success;

  _CbmService_GetDesignSiteById_result__isset __isset;

  void __set_success(const DesignSite& val);

  bool operator == (const CbmService_GetDesignSiteById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteById_presult__isset {
  _CbmService_GetDesignSiteById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteById_presult__isset;

class CbmService_GetDesignSiteById_presult {
 public:


  virtual ~CbmService_GetDesignSiteById_presult() throw();
  DesignSite* success;

  _CbmService_GetDesignSiteById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignSiteByForeignKey_args__isset {
  _CbmService_GetDesignSiteByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetDesignSiteByForeignKey_args__isset;

class CbmService_GetDesignSiteByForeignKey_args {
 public:

  CbmService_GetDesignSiteByForeignKey_args(const CbmService_GetDesignSiteByForeignKey_args&);
  CbmService_GetDesignSiteByForeignKey_args& operator=(const CbmService_GetDesignSiteByForeignKey_args&);
  CbmService_GetDesignSiteByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetDesignSiteByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetDesignSiteByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDesignSiteByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignSiteByForeignKey_pargs {
 public:


  virtual ~CbmService_GetDesignSiteByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteByForeignKey_result__isset {
  _CbmService_GetDesignSiteByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteByForeignKey_result__isset;

class CbmService_GetDesignSiteByForeignKey_result {
 public:

  CbmService_GetDesignSiteByForeignKey_result(const CbmService_GetDesignSiteByForeignKey_result&);
  CbmService_GetDesignSiteByForeignKey_result& operator=(const CbmService_GetDesignSiteByForeignKey_result&);
  CbmService_GetDesignSiteByForeignKey_result() {
  }

  virtual ~CbmService_GetDesignSiteByForeignKey_result() throw();
  DesignSite success;

  _CbmService_GetDesignSiteByForeignKey_result__isset __isset;

  void __set_success(const DesignSite& val);

  bool operator == (const CbmService_GetDesignSiteByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteByForeignKey_presult__isset {
  _CbmService_GetDesignSiteByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteByForeignKey_presult__isset;

class CbmService_GetDesignSiteByForeignKey_presult {
 public:


  virtual ~CbmService_GetDesignSiteByForeignKey_presult() throw();
  DesignSite* success;

  _CbmService_GetDesignSiteByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignSiteList_args {
 public:

  CbmService_GetDesignSiteList_args(const CbmService_GetDesignSiteList_args&);
  CbmService_GetDesignSiteList_args& operator=(const CbmService_GetDesignSiteList_args&);
  CbmService_GetDesignSiteList_args() {
  }

  virtual ~CbmService_GetDesignSiteList_args() throw();

  bool operator == (const CbmService_GetDesignSiteList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignSiteList_pargs {
 public:


  virtual ~CbmService_GetDesignSiteList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteList_result__isset {
  _CbmService_GetDesignSiteList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteList_result__isset;

class CbmService_GetDesignSiteList_result {
 public:

  CbmService_GetDesignSiteList_result(const CbmService_GetDesignSiteList_result&);
  CbmService_GetDesignSiteList_result& operator=(const CbmService_GetDesignSiteList_result&);
  CbmService_GetDesignSiteList_result() {
  }

  virtual ~CbmService_GetDesignSiteList_result() throw();
  std::vector<DesignSite>  success;

  _CbmService_GetDesignSiteList_result__isset __isset;

  void __set_success(const std::vector<DesignSite> & val);

  bool operator == (const CbmService_GetDesignSiteList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteList_presult__isset {
  _CbmService_GetDesignSiteList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteList_presult__isset;

class CbmService_GetDesignSiteList_presult {
 public:


  virtual ~CbmService_GetDesignSiteList_presult() throw();
  std::vector<DesignSite> * success;

  _CbmService_GetDesignSiteList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignSiteIds_args {
 public:

  CbmService_GetDesignSiteIds_args(const CbmService_GetDesignSiteIds_args&);
  CbmService_GetDesignSiteIds_args& operator=(const CbmService_GetDesignSiteIds_args&);
  CbmService_GetDesignSiteIds_args() {
  }

  virtual ~CbmService_GetDesignSiteIds_args() throw();

  bool operator == (const CbmService_GetDesignSiteIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignSiteIds_pargs {
 public:


  virtual ~CbmService_GetDesignSiteIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteIds_result__isset {
  _CbmService_GetDesignSiteIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteIds_result__isset;

class CbmService_GetDesignSiteIds_result {
 public:

  CbmService_GetDesignSiteIds_result(const CbmService_GetDesignSiteIds_result&);
  CbmService_GetDesignSiteIds_result& operator=(const CbmService_GetDesignSiteIds_result&);
  CbmService_GetDesignSiteIds_result() {
  }

  virtual ~CbmService_GetDesignSiteIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetDesignSiteIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetDesignSiteIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteIds_presult__isset {
  _CbmService_GetDesignSiteIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteIds_presult__isset;

class CbmService_GetDesignSiteIds_presult {
 public:


  virtual ~CbmService_GetDesignSiteIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetDesignSiteIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignSiteNames_args {
 public:

  CbmService_GetDesignSiteNames_args(const CbmService_GetDesignSiteNames_args&);
  CbmService_GetDesignSiteNames_args& operator=(const CbmService_GetDesignSiteNames_args&);
  CbmService_GetDesignSiteNames_args() {
  }

  virtual ~CbmService_GetDesignSiteNames_args() throw();

  bool operator == (const CbmService_GetDesignSiteNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignSiteNames_pargs {
 public:


  virtual ~CbmService_GetDesignSiteNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteNames_result__isset {
  _CbmService_GetDesignSiteNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteNames_result__isset;

class CbmService_GetDesignSiteNames_result {
 public:

  CbmService_GetDesignSiteNames_result(const CbmService_GetDesignSiteNames_result&);
  CbmService_GetDesignSiteNames_result& operator=(const CbmService_GetDesignSiteNames_result&);
  CbmService_GetDesignSiteNames_result() {
  }

  virtual ~CbmService_GetDesignSiteNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetDesignSiteNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetDesignSiteNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteNames_presult__isset {
  _CbmService_GetDesignSiteNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteNames_presult__isset;

class CbmService_GetDesignSiteNames_presult {
 public:


  virtual ~CbmService_GetDesignSiteNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetDesignSiteNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreDesignSite_args__isset {
  _CbmService_AddMoreDesignSite_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreDesignSite_args__isset;

class CbmService_AddMoreDesignSite_args {
 public:

  CbmService_AddMoreDesignSite_args(const CbmService_AddMoreDesignSite_args&);
  CbmService_AddMoreDesignSite_args& operator=(const CbmService_AddMoreDesignSite_args&);
  CbmService_AddMoreDesignSite_args() {
  }

  virtual ~CbmService_AddMoreDesignSite_args() throw();
  std::vector<DesignSite>  objs;

  _CbmService_AddMoreDesignSite_args__isset __isset;

  void __set_objs(const std::vector<DesignSite> & val);

  bool operator == (const CbmService_AddMoreDesignSite_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreDesignSite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDesignSite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignSite_pargs {
 public:


  virtual ~CbmService_AddMoreDesignSite_pargs() throw();
  const std::vector<DesignSite> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignSite_result {
 public:

  CbmService_AddMoreDesignSite_result(const CbmService_AddMoreDesignSite_result&);
  CbmService_AddMoreDesignSite_result& operator=(const CbmService_AddMoreDesignSite_result&);
  CbmService_AddMoreDesignSite_result() {
  }

  virtual ~CbmService_AddMoreDesignSite_result() throw();

  bool operator == (const CbmService_AddMoreDesignSite_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreDesignSite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDesignSite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignSite_presult {
 public:


  virtual ~CbmService_AddMoreDesignSite_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreDesignSite_args__isset {
  _CbmService_DeleteMoreDesignSite_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreDesignSite_args__isset;

class CbmService_DeleteMoreDesignSite_args {
 public:

  CbmService_DeleteMoreDesignSite_args(const CbmService_DeleteMoreDesignSite_args&);
  CbmService_DeleteMoreDesignSite_args& operator=(const CbmService_DeleteMoreDesignSite_args&);
  CbmService_DeleteMoreDesignSite_args() {
  }

  virtual ~CbmService_DeleteMoreDesignSite_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreDesignSite_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreDesignSite_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDesignSite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDesignSite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignSite_pargs {
 public:


  virtual ~CbmService_DeleteMoreDesignSite_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignSite_result {
 public:

  CbmService_DeleteMoreDesignSite_result(const CbmService_DeleteMoreDesignSite_result&);
  CbmService_DeleteMoreDesignSite_result& operator=(const CbmService_DeleteMoreDesignSite_result&);
  CbmService_DeleteMoreDesignSite_result() {
  }

  virtual ~CbmService_DeleteMoreDesignSite_result() throw();

  bool operator == (const CbmService_DeleteMoreDesignSite_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDesignSite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDesignSite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignSite_presult {
 public:


  virtual ~CbmService_DeleteMoreDesignSite_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignSiteByFields_args__isset {
  _CbmService_GetDesignSiteByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDesignSiteByFields_args__isset;

class CbmService_GetDesignSiteByFields_args {
 public:

  CbmService_GetDesignSiteByFields_args(const CbmService_GetDesignSiteByFields_args&);
  CbmService_GetDesignSiteByFields_args& operator=(const CbmService_GetDesignSiteByFields_args&);
  CbmService_GetDesignSiteByFields_args() {
  }

  virtual ~CbmService_GetDesignSiteByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDesignSiteByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDesignSiteByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignSiteByFields_pargs {
 public:


  virtual ~CbmService_GetDesignSiteByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteByFields_result__isset {
  _CbmService_GetDesignSiteByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteByFields_result__isset;

class CbmService_GetDesignSiteByFields_result {
 public:

  CbmService_GetDesignSiteByFields_result(const CbmService_GetDesignSiteByFields_result&);
  CbmService_GetDesignSiteByFields_result& operator=(const CbmService_GetDesignSiteByFields_result&);
  CbmService_GetDesignSiteByFields_result() {
  }

  virtual ~CbmService_GetDesignSiteByFields_result() throw();
  DesignSite success;

  _CbmService_GetDesignSiteByFields_result__isset __isset;

  void __set_success(const DesignSite& val);

  bool operator == (const CbmService_GetDesignSiteByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteByFields_presult__isset {
  _CbmService_GetDesignSiteByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteByFields_presult__isset;

class CbmService_GetDesignSiteByFields_presult {
 public:


  virtual ~CbmService_GetDesignSiteByFields_presult() throw();
  DesignSite* success;

  _CbmService_GetDesignSiteByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignSiteByFields1_args__isset {
  _CbmService_GetDesignSiteByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDesignSiteByFields1_args__isset;

class CbmService_GetDesignSiteByFields1_args {
 public:

  CbmService_GetDesignSiteByFields1_args(const CbmService_GetDesignSiteByFields1_args&);
  CbmService_GetDesignSiteByFields1_args& operator=(const CbmService_GetDesignSiteByFields1_args&);
  CbmService_GetDesignSiteByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDesignSiteByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDesignSiteByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDesignSiteByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignSiteByFields1_pargs {
 public:


  virtual ~CbmService_GetDesignSiteByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteByFields1_result__isset {
  _CbmService_GetDesignSiteByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteByFields1_result__isset;

class CbmService_GetDesignSiteByFields1_result {
 public:

  CbmService_GetDesignSiteByFields1_result(const CbmService_GetDesignSiteByFields1_result&);
  CbmService_GetDesignSiteByFields1_result& operator=(const CbmService_GetDesignSiteByFields1_result&);
  CbmService_GetDesignSiteByFields1_result() {
  }

  virtual ~CbmService_GetDesignSiteByFields1_result() throw();
  DesignSite success;

  _CbmService_GetDesignSiteByFields1_result__isset __isset;

  void __set_success(const DesignSite& val);

  bool operator == (const CbmService_GetDesignSiteByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteByFields1_presult__isset {
  _CbmService_GetDesignSiteByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteByFields1_presult__isset;

class CbmService_GetDesignSiteByFields1_presult {
 public:


  virtual ~CbmService_GetDesignSiteByFields1_presult() throw();
  DesignSite* success;

  _CbmService_GetDesignSiteByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignSiteByFields2_args__isset {
  _CbmService_GetDesignSiteByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDesignSiteByFields2_args__isset;

class CbmService_GetDesignSiteByFields2_args {
 public:

  CbmService_GetDesignSiteByFields2_args(const CbmService_GetDesignSiteByFields2_args&);
  CbmService_GetDesignSiteByFields2_args& operator=(const CbmService_GetDesignSiteByFields2_args&);
  CbmService_GetDesignSiteByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDesignSiteByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDesignSiteByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDesignSiteByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignSiteByFields2_pargs {
 public:


  virtual ~CbmService_GetDesignSiteByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteByFields2_result__isset {
  _CbmService_GetDesignSiteByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteByFields2_result__isset;

class CbmService_GetDesignSiteByFields2_result {
 public:

  CbmService_GetDesignSiteByFields2_result(const CbmService_GetDesignSiteByFields2_result&);
  CbmService_GetDesignSiteByFields2_result& operator=(const CbmService_GetDesignSiteByFields2_result&);
  CbmService_GetDesignSiteByFields2_result() {
  }

  virtual ~CbmService_GetDesignSiteByFields2_result() throw();
  DesignSite success;

  _CbmService_GetDesignSiteByFields2_result__isset __isset;

  void __set_success(const DesignSite& val);

  bool operator == (const CbmService_GetDesignSiteByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteByFields2_presult__isset {
  _CbmService_GetDesignSiteByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteByFields2_presult__isset;

class CbmService_GetDesignSiteByFields2_presult {
 public:


  virtual ~CbmService_GetDesignSiteByFields2_presult() throw();
  DesignSite* success;

  _CbmService_GetDesignSiteByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignSiteListByFields_args__isset {
  _CbmService_GetDesignSiteListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDesignSiteListByFields_args__isset;

class CbmService_GetDesignSiteListByFields_args {
 public:

  CbmService_GetDesignSiteListByFields_args(const CbmService_GetDesignSiteListByFields_args&);
  CbmService_GetDesignSiteListByFields_args& operator=(const CbmService_GetDesignSiteListByFields_args&);
  CbmService_GetDesignSiteListByFields_args() {
  }

  virtual ~CbmService_GetDesignSiteListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDesignSiteListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDesignSiteListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignSiteListByFields_pargs {
 public:


  virtual ~CbmService_GetDesignSiteListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteListByFields_result__isset {
  _CbmService_GetDesignSiteListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteListByFields_result__isset;

class CbmService_GetDesignSiteListByFields_result {
 public:

  CbmService_GetDesignSiteListByFields_result(const CbmService_GetDesignSiteListByFields_result&);
  CbmService_GetDesignSiteListByFields_result& operator=(const CbmService_GetDesignSiteListByFields_result&);
  CbmService_GetDesignSiteListByFields_result() {
  }

  virtual ~CbmService_GetDesignSiteListByFields_result() throw();
  std::vector<DesignSite>  success;

  _CbmService_GetDesignSiteListByFields_result__isset __isset;

  void __set_success(const std::vector<DesignSite> & val);

  bool operator == (const CbmService_GetDesignSiteListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteListByFields_presult__isset {
  _CbmService_GetDesignSiteListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteListByFields_presult__isset;

class CbmService_GetDesignSiteListByFields_presult {
 public:


  virtual ~CbmService_GetDesignSiteListByFields_presult() throw();
  std::vector<DesignSite> * success;

  _CbmService_GetDesignSiteListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignSiteListByFields1_args__isset {
  _CbmService_GetDesignSiteListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDesignSiteListByFields1_args__isset;

class CbmService_GetDesignSiteListByFields1_args {
 public:

  CbmService_GetDesignSiteListByFields1_args(const CbmService_GetDesignSiteListByFields1_args&);
  CbmService_GetDesignSiteListByFields1_args& operator=(const CbmService_GetDesignSiteListByFields1_args&);
  CbmService_GetDesignSiteListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDesignSiteListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDesignSiteListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDesignSiteListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignSiteListByFields1_pargs {
 public:


  virtual ~CbmService_GetDesignSiteListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteListByFields1_result__isset {
  _CbmService_GetDesignSiteListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteListByFields1_result__isset;

class CbmService_GetDesignSiteListByFields1_result {
 public:

  CbmService_GetDesignSiteListByFields1_result(const CbmService_GetDesignSiteListByFields1_result&);
  CbmService_GetDesignSiteListByFields1_result& operator=(const CbmService_GetDesignSiteListByFields1_result&);
  CbmService_GetDesignSiteListByFields1_result() {
  }

  virtual ~CbmService_GetDesignSiteListByFields1_result() throw();
  std::vector<DesignSite>  success;

  _CbmService_GetDesignSiteListByFields1_result__isset __isset;

  void __set_success(const std::vector<DesignSite> & val);

  bool operator == (const CbmService_GetDesignSiteListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteListByFields1_presult__isset {
  _CbmService_GetDesignSiteListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteListByFields1_presult__isset;

class CbmService_GetDesignSiteListByFields1_presult {
 public:


  virtual ~CbmService_GetDesignSiteListByFields1_presult() throw();
  std::vector<DesignSite> * success;

  _CbmService_GetDesignSiteListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignSiteListByFields2_args__isset {
  _CbmService_GetDesignSiteListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDesignSiteListByFields2_args__isset;

class CbmService_GetDesignSiteListByFields2_args {
 public:

  CbmService_GetDesignSiteListByFields2_args(const CbmService_GetDesignSiteListByFields2_args&);
  CbmService_GetDesignSiteListByFields2_args& operator=(const CbmService_GetDesignSiteListByFields2_args&);
  CbmService_GetDesignSiteListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDesignSiteListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDesignSiteListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDesignSiteListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignSiteListByFields2_pargs {
 public:


  virtual ~CbmService_GetDesignSiteListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteListByFields2_result__isset {
  _CbmService_GetDesignSiteListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteListByFields2_result__isset;

class CbmService_GetDesignSiteListByFields2_result {
 public:

  CbmService_GetDesignSiteListByFields2_result(const CbmService_GetDesignSiteListByFields2_result&);
  CbmService_GetDesignSiteListByFields2_result& operator=(const CbmService_GetDesignSiteListByFields2_result&);
  CbmService_GetDesignSiteListByFields2_result() {
  }

  virtual ~CbmService_GetDesignSiteListByFields2_result() throw();
  std::vector<DesignSite>  success;

  _CbmService_GetDesignSiteListByFields2_result__isset __isset;

  void __set_success(const std::vector<DesignSite> & val);

  bool operator == (const CbmService_GetDesignSiteListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignSiteListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignSiteListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignSiteListByFields2_presult__isset {
  _CbmService_GetDesignSiteListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignSiteListByFields2_presult__isset;

class CbmService_GetDesignSiteListByFields2_presult {
 public:


  virtual ~CbmService_GetDesignSiteListByFields2_presult() throw();
  std::vector<DesignSite> * success;

  _CbmService_GetDesignSiteListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddDesignTechnology_args__isset {
  _CbmService_AddDesignTechnology_args__isset() : design_technology(false) {}
  bool design_technology :1;
} _CbmService_AddDesignTechnology_args__isset;

class CbmService_AddDesignTechnology_args {
 public:

  CbmService_AddDesignTechnology_args(const CbmService_AddDesignTechnology_args&);
  CbmService_AddDesignTechnology_args& operator=(const CbmService_AddDesignTechnology_args&);
  CbmService_AddDesignTechnology_args() {
  }

  virtual ~CbmService_AddDesignTechnology_args() throw();
  DesignTechnology design_technology;

  _CbmService_AddDesignTechnology_args__isset __isset;

  void __set_design_technology(const DesignTechnology& val);

  bool operator == (const CbmService_AddDesignTechnology_args & rhs) const
  {
    if (!(design_technology == rhs.design_technology))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDesignTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDesignTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddDesignTechnology_pargs {
 public:


  virtual ~CbmService_AddDesignTechnology_pargs() throw();
  const DesignTechnology* design_technology;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDesignTechnology_result__isset {
  _CbmService_AddDesignTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDesignTechnology_result__isset;

class CbmService_AddDesignTechnology_result {
 public:

  CbmService_AddDesignTechnology_result(const CbmService_AddDesignTechnology_result&);
  CbmService_AddDesignTechnology_result& operator=(const CbmService_AddDesignTechnology_result&);
  CbmService_AddDesignTechnology_result() : success(0) {
  }

  virtual ~CbmService_AddDesignTechnology_result() throw();
  int32_t success;

  _CbmService_AddDesignTechnology_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddDesignTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDesignTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDesignTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDesignTechnology_presult__isset {
  _CbmService_AddDesignTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDesignTechnology_presult__isset;

class CbmService_AddDesignTechnology_presult {
 public:


  virtual ~CbmService_AddDesignTechnology_presult() throw();
  int32_t* success;

  _CbmService_AddDesignTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteDesignTechnology_args__isset {
  _CbmService_DeleteDesignTechnology_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteDesignTechnology_args__isset;

class CbmService_DeleteDesignTechnology_args {
 public:

  CbmService_DeleteDesignTechnology_args(const CbmService_DeleteDesignTechnology_args&);
  CbmService_DeleteDesignTechnology_args& operator=(const CbmService_DeleteDesignTechnology_args&);
  CbmService_DeleteDesignTechnology_args() : id(0) {
  }

  virtual ~CbmService_DeleteDesignTechnology_args() throw();
  int32_t id;

  _CbmService_DeleteDesignTechnology_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteDesignTechnology_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDesignTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDesignTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteDesignTechnology_pargs {
 public:


  virtual ~CbmService_DeleteDesignTechnology_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDesignTechnology_result__isset {
  _CbmService_DeleteDesignTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDesignTechnology_result__isset;

class CbmService_DeleteDesignTechnology_result {
 public:

  CbmService_DeleteDesignTechnology_result(const CbmService_DeleteDesignTechnology_result&);
  CbmService_DeleteDesignTechnology_result& operator=(const CbmService_DeleteDesignTechnology_result&);
  CbmService_DeleteDesignTechnology_result() : success(0) {
  }

  virtual ~CbmService_DeleteDesignTechnology_result() throw();
  bool success;

  _CbmService_DeleteDesignTechnology_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteDesignTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDesignTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDesignTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDesignTechnology_presult__isset {
  _CbmService_DeleteDesignTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDesignTechnology_presult__isset;

class CbmService_DeleteDesignTechnology_presult {
 public:


  virtual ~CbmService_DeleteDesignTechnology_presult() throw();
  bool* success;

  _CbmService_DeleteDesignTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateDesignTechnology_args__isset {
  _CbmService_UpdateDesignTechnology_args__isset() : design_technology(false) {}
  bool design_technology :1;
} _CbmService_UpdateDesignTechnology_args__isset;

class CbmService_UpdateDesignTechnology_args {
 public:

  CbmService_UpdateDesignTechnology_args(const CbmService_UpdateDesignTechnology_args&);
  CbmService_UpdateDesignTechnology_args& operator=(const CbmService_UpdateDesignTechnology_args&);
  CbmService_UpdateDesignTechnology_args() {
  }

  virtual ~CbmService_UpdateDesignTechnology_args() throw();
  DesignTechnology design_technology;

  _CbmService_UpdateDesignTechnology_args__isset __isset;

  void __set_design_technology(const DesignTechnology& val);

  bool operator == (const CbmService_UpdateDesignTechnology_args & rhs) const
  {
    if (!(design_technology == rhs.design_technology))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDesignTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDesignTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateDesignTechnology_pargs {
 public:


  virtual ~CbmService_UpdateDesignTechnology_pargs() throw();
  const DesignTechnology* design_technology;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDesignTechnology_result__isset {
  _CbmService_UpdateDesignTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDesignTechnology_result__isset;

class CbmService_UpdateDesignTechnology_result {
 public:

  CbmService_UpdateDesignTechnology_result(const CbmService_UpdateDesignTechnology_result&);
  CbmService_UpdateDesignTechnology_result& operator=(const CbmService_UpdateDesignTechnology_result&);
  CbmService_UpdateDesignTechnology_result() : success(0) {
  }

  virtual ~CbmService_UpdateDesignTechnology_result() throw();
  bool success;

  _CbmService_UpdateDesignTechnology_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateDesignTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDesignTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDesignTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDesignTechnology_presult__isset {
  _CbmService_UpdateDesignTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDesignTechnology_presult__isset;

class CbmService_UpdateDesignTechnology_presult {
 public:


  virtual ~CbmService_UpdateDesignTechnology_presult() throw();
  bool* success;

  _CbmService_UpdateDesignTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignTechnologyById_args__isset {
  _CbmService_GetDesignTechnologyById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetDesignTechnologyById_args__isset;

class CbmService_GetDesignTechnologyById_args {
 public:

  CbmService_GetDesignTechnologyById_args(const CbmService_GetDesignTechnologyById_args&);
  CbmService_GetDesignTechnologyById_args& operator=(const CbmService_GetDesignTechnologyById_args&);
  CbmService_GetDesignTechnologyById_args() : id(0) {
  }

  virtual ~CbmService_GetDesignTechnologyById_args() throw();
  int32_t id;

  _CbmService_GetDesignTechnologyById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDesignTechnologyById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignTechnologyById_pargs {
 public:


  virtual ~CbmService_GetDesignTechnologyById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyById_result__isset {
  _CbmService_GetDesignTechnologyById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyById_result__isset;

class CbmService_GetDesignTechnologyById_result {
 public:

  CbmService_GetDesignTechnologyById_result(const CbmService_GetDesignTechnologyById_result&);
  CbmService_GetDesignTechnologyById_result& operator=(const CbmService_GetDesignTechnologyById_result&);
  CbmService_GetDesignTechnologyById_result() {
  }

  virtual ~CbmService_GetDesignTechnologyById_result() throw();
  DesignTechnology success;

  _CbmService_GetDesignTechnologyById_result__isset __isset;

  void __set_success(const DesignTechnology& val);

  bool operator == (const CbmService_GetDesignTechnologyById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyById_presult__isset {
  _CbmService_GetDesignTechnologyById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyById_presult__isset;

class CbmService_GetDesignTechnologyById_presult {
 public:


  virtual ~CbmService_GetDesignTechnologyById_presult() throw();
  DesignTechnology* success;

  _CbmService_GetDesignTechnologyById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignTechnologyByForeignKey_args__isset {
  _CbmService_GetDesignTechnologyByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetDesignTechnologyByForeignKey_args__isset;

class CbmService_GetDesignTechnologyByForeignKey_args {
 public:

  CbmService_GetDesignTechnologyByForeignKey_args(const CbmService_GetDesignTechnologyByForeignKey_args&);
  CbmService_GetDesignTechnologyByForeignKey_args& operator=(const CbmService_GetDesignTechnologyByForeignKey_args&);
  CbmService_GetDesignTechnologyByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetDesignTechnologyByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetDesignTechnologyByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDesignTechnologyByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignTechnologyByForeignKey_pargs {
 public:


  virtual ~CbmService_GetDesignTechnologyByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyByForeignKey_result__isset {
  _CbmService_GetDesignTechnologyByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyByForeignKey_result__isset;

class CbmService_GetDesignTechnologyByForeignKey_result {
 public:

  CbmService_GetDesignTechnologyByForeignKey_result(const CbmService_GetDesignTechnologyByForeignKey_result&);
  CbmService_GetDesignTechnologyByForeignKey_result& operator=(const CbmService_GetDesignTechnologyByForeignKey_result&);
  CbmService_GetDesignTechnologyByForeignKey_result() {
  }

  virtual ~CbmService_GetDesignTechnologyByForeignKey_result() throw();
  DesignTechnology success;

  _CbmService_GetDesignTechnologyByForeignKey_result__isset __isset;

  void __set_success(const DesignTechnology& val);

  bool operator == (const CbmService_GetDesignTechnologyByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyByForeignKey_presult__isset {
  _CbmService_GetDesignTechnologyByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyByForeignKey_presult__isset;

class CbmService_GetDesignTechnologyByForeignKey_presult {
 public:


  virtual ~CbmService_GetDesignTechnologyByForeignKey_presult() throw();
  DesignTechnology* success;

  _CbmService_GetDesignTechnologyByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignTechnologyList_args {
 public:

  CbmService_GetDesignTechnologyList_args(const CbmService_GetDesignTechnologyList_args&);
  CbmService_GetDesignTechnologyList_args& operator=(const CbmService_GetDesignTechnologyList_args&);
  CbmService_GetDesignTechnologyList_args() {
  }

  virtual ~CbmService_GetDesignTechnologyList_args() throw();

  bool operator == (const CbmService_GetDesignTechnologyList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignTechnologyList_pargs {
 public:


  virtual ~CbmService_GetDesignTechnologyList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyList_result__isset {
  _CbmService_GetDesignTechnologyList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyList_result__isset;

class CbmService_GetDesignTechnologyList_result {
 public:

  CbmService_GetDesignTechnologyList_result(const CbmService_GetDesignTechnologyList_result&);
  CbmService_GetDesignTechnologyList_result& operator=(const CbmService_GetDesignTechnologyList_result&);
  CbmService_GetDesignTechnologyList_result() {
  }

  virtual ~CbmService_GetDesignTechnologyList_result() throw();
  std::vector<DesignTechnology>  success;

  _CbmService_GetDesignTechnologyList_result__isset __isset;

  void __set_success(const std::vector<DesignTechnology> & val);

  bool operator == (const CbmService_GetDesignTechnologyList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyList_presult__isset {
  _CbmService_GetDesignTechnologyList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyList_presult__isset;

class CbmService_GetDesignTechnologyList_presult {
 public:


  virtual ~CbmService_GetDesignTechnologyList_presult() throw();
  std::vector<DesignTechnology> * success;

  _CbmService_GetDesignTechnologyList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignTechnologyIds_args {
 public:

  CbmService_GetDesignTechnologyIds_args(const CbmService_GetDesignTechnologyIds_args&);
  CbmService_GetDesignTechnologyIds_args& operator=(const CbmService_GetDesignTechnologyIds_args&);
  CbmService_GetDesignTechnologyIds_args() {
  }

  virtual ~CbmService_GetDesignTechnologyIds_args() throw();

  bool operator == (const CbmService_GetDesignTechnologyIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignTechnologyIds_pargs {
 public:


  virtual ~CbmService_GetDesignTechnologyIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyIds_result__isset {
  _CbmService_GetDesignTechnologyIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyIds_result__isset;

class CbmService_GetDesignTechnologyIds_result {
 public:

  CbmService_GetDesignTechnologyIds_result(const CbmService_GetDesignTechnologyIds_result&);
  CbmService_GetDesignTechnologyIds_result& operator=(const CbmService_GetDesignTechnologyIds_result&);
  CbmService_GetDesignTechnologyIds_result() {
  }

  virtual ~CbmService_GetDesignTechnologyIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetDesignTechnologyIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetDesignTechnologyIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyIds_presult__isset {
  _CbmService_GetDesignTechnologyIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyIds_presult__isset;

class CbmService_GetDesignTechnologyIds_presult {
 public:


  virtual ~CbmService_GetDesignTechnologyIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetDesignTechnologyIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignTechnologyNames_args {
 public:

  CbmService_GetDesignTechnologyNames_args(const CbmService_GetDesignTechnologyNames_args&);
  CbmService_GetDesignTechnologyNames_args& operator=(const CbmService_GetDesignTechnologyNames_args&);
  CbmService_GetDesignTechnologyNames_args() {
  }

  virtual ~CbmService_GetDesignTechnologyNames_args() throw();

  bool operator == (const CbmService_GetDesignTechnologyNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignTechnologyNames_pargs {
 public:


  virtual ~CbmService_GetDesignTechnologyNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyNames_result__isset {
  _CbmService_GetDesignTechnologyNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyNames_result__isset;

class CbmService_GetDesignTechnologyNames_result {
 public:

  CbmService_GetDesignTechnologyNames_result(const CbmService_GetDesignTechnologyNames_result&);
  CbmService_GetDesignTechnologyNames_result& operator=(const CbmService_GetDesignTechnologyNames_result&);
  CbmService_GetDesignTechnologyNames_result() {
  }

  virtual ~CbmService_GetDesignTechnologyNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetDesignTechnologyNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetDesignTechnologyNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyNames_presult__isset {
  _CbmService_GetDesignTechnologyNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyNames_presult__isset;

class CbmService_GetDesignTechnologyNames_presult {
 public:


  virtual ~CbmService_GetDesignTechnologyNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetDesignTechnologyNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreDesignTechnology_args__isset {
  _CbmService_AddMoreDesignTechnology_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreDesignTechnology_args__isset;

class CbmService_AddMoreDesignTechnology_args {
 public:

  CbmService_AddMoreDesignTechnology_args(const CbmService_AddMoreDesignTechnology_args&);
  CbmService_AddMoreDesignTechnology_args& operator=(const CbmService_AddMoreDesignTechnology_args&);
  CbmService_AddMoreDesignTechnology_args() {
  }

  virtual ~CbmService_AddMoreDesignTechnology_args() throw();
  std::vector<DesignTechnology>  objs;

  _CbmService_AddMoreDesignTechnology_args__isset __isset;

  void __set_objs(const std::vector<DesignTechnology> & val);

  bool operator == (const CbmService_AddMoreDesignTechnology_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreDesignTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDesignTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignTechnology_pargs {
 public:


  virtual ~CbmService_AddMoreDesignTechnology_pargs() throw();
  const std::vector<DesignTechnology> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignTechnology_result {
 public:

  CbmService_AddMoreDesignTechnology_result(const CbmService_AddMoreDesignTechnology_result&);
  CbmService_AddMoreDesignTechnology_result& operator=(const CbmService_AddMoreDesignTechnology_result&);
  CbmService_AddMoreDesignTechnology_result() {
  }

  virtual ~CbmService_AddMoreDesignTechnology_result() throw();

  bool operator == (const CbmService_AddMoreDesignTechnology_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreDesignTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDesignTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignTechnology_presult {
 public:


  virtual ~CbmService_AddMoreDesignTechnology_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreDesignTechnology_args__isset {
  _CbmService_DeleteMoreDesignTechnology_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreDesignTechnology_args__isset;

class CbmService_DeleteMoreDesignTechnology_args {
 public:

  CbmService_DeleteMoreDesignTechnology_args(const CbmService_DeleteMoreDesignTechnology_args&);
  CbmService_DeleteMoreDesignTechnology_args& operator=(const CbmService_DeleteMoreDesignTechnology_args&);
  CbmService_DeleteMoreDesignTechnology_args() {
  }

  virtual ~CbmService_DeleteMoreDesignTechnology_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreDesignTechnology_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreDesignTechnology_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDesignTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDesignTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignTechnology_pargs {
 public:


  virtual ~CbmService_DeleteMoreDesignTechnology_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignTechnology_result {
 public:

  CbmService_DeleteMoreDesignTechnology_result(const CbmService_DeleteMoreDesignTechnology_result&);
  CbmService_DeleteMoreDesignTechnology_result& operator=(const CbmService_DeleteMoreDesignTechnology_result&);
  CbmService_DeleteMoreDesignTechnology_result() {
  }

  virtual ~CbmService_DeleteMoreDesignTechnology_result() throw();

  bool operator == (const CbmService_DeleteMoreDesignTechnology_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDesignTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDesignTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignTechnology_presult {
 public:


  virtual ~CbmService_DeleteMoreDesignTechnology_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignTechnologyByFields_args__isset {
  _CbmService_GetDesignTechnologyByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDesignTechnologyByFields_args__isset;

class CbmService_GetDesignTechnologyByFields_args {
 public:

  CbmService_GetDesignTechnologyByFields_args(const CbmService_GetDesignTechnologyByFields_args&);
  CbmService_GetDesignTechnologyByFields_args& operator=(const CbmService_GetDesignTechnologyByFields_args&);
  CbmService_GetDesignTechnologyByFields_args() {
  }

  virtual ~CbmService_GetDesignTechnologyByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDesignTechnologyByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDesignTechnologyByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignTechnologyByFields_pargs {
 public:


  virtual ~CbmService_GetDesignTechnologyByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyByFields_result__isset {
  _CbmService_GetDesignTechnologyByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyByFields_result__isset;

class CbmService_GetDesignTechnologyByFields_result {
 public:

  CbmService_GetDesignTechnologyByFields_result(const CbmService_GetDesignTechnologyByFields_result&);
  CbmService_GetDesignTechnologyByFields_result& operator=(const CbmService_GetDesignTechnologyByFields_result&);
  CbmService_GetDesignTechnologyByFields_result() {
  }

  virtual ~CbmService_GetDesignTechnologyByFields_result() throw();
  DesignTechnology success;

  _CbmService_GetDesignTechnologyByFields_result__isset __isset;

  void __set_success(const DesignTechnology& val);

  bool operator == (const CbmService_GetDesignTechnologyByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyByFields_presult__isset {
  _CbmService_GetDesignTechnologyByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyByFields_presult__isset;

class CbmService_GetDesignTechnologyByFields_presult {
 public:


  virtual ~CbmService_GetDesignTechnologyByFields_presult() throw();
  DesignTechnology* success;

  _CbmService_GetDesignTechnologyByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignTechnologyByFields1_args__isset {
  _CbmService_GetDesignTechnologyByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDesignTechnologyByFields1_args__isset;

class CbmService_GetDesignTechnologyByFields1_args {
 public:

  CbmService_GetDesignTechnologyByFields1_args(const CbmService_GetDesignTechnologyByFields1_args&);
  CbmService_GetDesignTechnologyByFields1_args& operator=(const CbmService_GetDesignTechnologyByFields1_args&);
  CbmService_GetDesignTechnologyByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDesignTechnologyByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDesignTechnologyByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDesignTechnologyByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignTechnologyByFields1_pargs {
 public:


  virtual ~CbmService_GetDesignTechnologyByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyByFields1_result__isset {
  _CbmService_GetDesignTechnologyByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyByFields1_result__isset;

class CbmService_GetDesignTechnologyByFields1_result {
 public:

  CbmService_GetDesignTechnologyByFields1_result(const CbmService_GetDesignTechnologyByFields1_result&);
  CbmService_GetDesignTechnologyByFields1_result& operator=(const CbmService_GetDesignTechnologyByFields1_result&);
  CbmService_GetDesignTechnologyByFields1_result() {
  }

  virtual ~CbmService_GetDesignTechnologyByFields1_result() throw();
  DesignTechnology success;

  _CbmService_GetDesignTechnologyByFields1_result__isset __isset;

  void __set_success(const DesignTechnology& val);

  bool operator == (const CbmService_GetDesignTechnologyByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyByFields1_presult__isset {
  _CbmService_GetDesignTechnologyByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyByFields1_presult__isset;

class CbmService_GetDesignTechnologyByFields1_presult {
 public:


  virtual ~CbmService_GetDesignTechnologyByFields1_presult() throw();
  DesignTechnology* success;

  _CbmService_GetDesignTechnologyByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignTechnologyByFields2_args__isset {
  _CbmService_GetDesignTechnologyByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDesignTechnologyByFields2_args__isset;

class CbmService_GetDesignTechnologyByFields2_args {
 public:

  CbmService_GetDesignTechnologyByFields2_args(const CbmService_GetDesignTechnologyByFields2_args&);
  CbmService_GetDesignTechnologyByFields2_args& operator=(const CbmService_GetDesignTechnologyByFields2_args&);
  CbmService_GetDesignTechnologyByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDesignTechnologyByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDesignTechnologyByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDesignTechnologyByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignTechnologyByFields2_pargs {
 public:


  virtual ~CbmService_GetDesignTechnologyByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyByFields2_result__isset {
  _CbmService_GetDesignTechnologyByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyByFields2_result__isset;

class CbmService_GetDesignTechnologyByFields2_result {
 public:

  CbmService_GetDesignTechnologyByFields2_result(const CbmService_GetDesignTechnologyByFields2_result&);
  CbmService_GetDesignTechnologyByFields2_result& operator=(const CbmService_GetDesignTechnologyByFields2_result&);
  CbmService_GetDesignTechnologyByFields2_result() {
  }

  virtual ~CbmService_GetDesignTechnologyByFields2_result() throw();
  DesignTechnology success;

  _CbmService_GetDesignTechnologyByFields2_result__isset __isset;

  void __set_success(const DesignTechnology& val);

  bool operator == (const CbmService_GetDesignTechnologyByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyByFields2_presult__isset {
  _CbmService_GetDesignTechnologyByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyByFields2_presult__isset;

class CbmService_GetDesignTechnologyByFields2_presult {
 public:


  virtual ~CbmService_GetDesignTechnologyByFields2_presult() throw();
  DesignTechnology* success;

  _CbmService_GetDesignTechnologyByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignTechnologyListByFields_args__isset {
  _CbmService_GetDesignTechnologyListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDesignTechnologyListByFields_args__isset;

class CbmService_GetDesignTechnologyListByFields_args {
 public:

  CbmService_GetDesignTechnologyListByFields_args(const CbmService_GetDesignTechnologyListByFields_args&);
  CbmService_GetDesignTechnologyListByFields_args& operator=(const CbmService_GetDesignTechnologyListByFields_args&);
  CbmService_GetDesignTechnologyListByFields_args() {
  }

  virtual ~CbmService_GetDesignTechnologyListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDesignTechnologyListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDesignTechnologyListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignTechnologyListByFields_pargs {
 public:


  virtual ~CbmService_GetDesignTechnologyListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyListByFields_result__isset {
  _CbmService_GetDesignTechnologyListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyListByFields_result__isset;

class CbmService_GetDesignTechnologyListByFields_result {
 public:

  CbmService_GetDesignTechnologyListByFields_result(const CbmService_GetDesignTechnologyListByFields_result&);
  CbmService_GetDesignTechnologyListByFields_result& operator=(const CbmService_GetDesignTechnologyListByFields_result&);
  CbmService_GetDesignTechnologyListByFields_result() {
  }

  virtual ~CbmService_GetDesignTechnologyListByFields_result() throw();
  std::vector<DesignTechnology>  success;

  _CbmService_GetDesignTechnologyListByFields_result__isset __isset;

  void __set_success(const std::vector<DesignTechnology> & val);

  bool operator == (const CbmService_GetDesignTechnologyListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyListByFields_presult__isset {
  _CbmService_GetDesignTechnologyListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyListByFields_presult__isset;

class CbmService_GetDesignTechnologyListByFields_presult {
 public:


  virtual ~CbmService_GetDesignTechnologyListByFields_presult() throw();
  std::vector<DesignTechnology> * success;

  _CbmService_GetDesignTechnologyListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignTechnologyListByFields1_args__isset {
  _CbmService_GetDesignTechnologyListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDesignTechnologyListByFields1_args__isset;

class CbmService_GetDesignTechnologyListByFields1_args {
 public:

  CbmService_GetDesignTechnologyListByFields1_args(const CbmService_GetDesignTechnologyListByFields1_args&);
  CbmService_GetDesignTechnologyListByFields1_args& operator=(const CbmService_GetDesignTechnologyListByFields1_args&);
  CbmService_GetDesignTechnologyListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDesignTechnologyListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDesignTechnologyListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDesignTechnologyListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignTechnologyListByFields1_pargs {
 public:


  virtual ~CbmService_GetDesignTechnologyListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyListByFields1_result__isset {
  _CbmService_GetDesignTechnologyListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyListByFields1_result__isset;

class CbmService_GetDesignTechnologyListByFields1_result {
 public:

  CbmService_GetDesignTechnologyListByFields1_result(const CbmService_GetDesignTechnologyListByFields1_result&);
  CbmService_GetDesignTechnologyListByFields1_result& operator=(const CbmService_GetDesignTechnologyListByFields1_result&);
  CbmService_GetDesignTechnologyListByFields1_result() {
  }

  virtual ~CbmService_GetDesignTechnologyListByFields1_result() throw();
  std::vector<DesignTechnology>  success;

  _CbmService_GetDesignTechnologyListByFields1_result__isset __isset;

  void __set_success(const std::vector<DesignTechnology> & val);

  bool operator == (const CbmService_GetDesignTechnologyListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyListByFields1_presult__isset {
  _CbmService_GetDesignTechnologyListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyListByFields1_presult__isset;

class CbmService_GetDesignTechnologyListByFields1_presult {
 public:


  virtual ~CbmService_GetDesignTechnologyListByFields1_presult() throw();
  std::vector<DesignTechnology> * success;

  _CbmService_GetDesignTechnologyListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignTechnologyListByFields2_args__isset {
  _CbmService_GetDesignTechnologyListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDesignTechnologyListByFields2_args__isset;

class CbmService_GetDesignTechnologyListByFields2_args {
 public:

  CbmService_GetDesignTechnologyListByFields2_args(const CbmService_GetDesignTechnologyListByFields2_args&);
  CbmService_GetDesignTechnologyListByFields2_args& operator=(const CbmService_GetDesignTechnologyListByFields2_args&);
  CbmService_GetDesignTechnologyListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDesignTechnologyListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDesignTechnologyListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDesignTechnologyListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignTechnologyListByFields2_pargs {
 public:


  virtual ~CbmService_GetDesignTechnologyListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyListByFields2_result__isset {
  _CbmService_GetDesignTechnologyListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyListByFields2_result__isset;

class CbmService_GetDesignTechnologyListByFields2_result {
 public:

  CbmService_GetDesignTechnologyListByFields2_result(const CbmService_GetDesignTechnologyListByFields2_result&);
  CbmService_GetDesignTechnologyListByFields2_result& operator=(const CbmService_GetDesignTechnologyListByFields2_result&);
  CbmService_GetDesignTechnologyListByFields2_result() {
  }

  virtual ~CbmService_GetDesignTechnologyListByFields2_result() throw();
  std::vector<DesignTechnology>  success;

  _CbmService_GetDesignTechnologyListByFields2_result__isset __isset;

  void __set_success(const std::vector<DesignTechnology> & val);

  bool operator == (const CbmService_GetDesignTechnologyListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignTechnologyListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignTechnologyListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignTechnologyListByFields2_presult__isset {
  _CbmService_GetDesignTechnologyListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignTechnologyListByFields2_presult__isset;

class CbmService_GetDesignTechnologyListByFields2_presult {
 public:


  virtual ~CbmService_GetDesignTechnologyListByFields2_presult() throw();
  std::vector<DesignTechnology> * success;

  _CbmService_GetDesignTechnologyListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddDesignWorkSurfTechnology_args__isset {
  _CbmService_AddDesignWorkSurfTechnology_args__isset() : design_work_surf_technology(false) {}
  bool design_work_surf_technology :1;
} _CbmService_AddDesignWorkSurfTechnology_args__isset;

class CbmService_AddDesignWorkSurfTechnology_args {
 public:

  CbmService_AddDesignWorkSurfTechnology_args(const CbmService_AddDesignWorkSurfTechnology_args&);
  CbmService_AddDesignWorkSurfTechnology_args& operator=(const CbmService_AddDesignWorkSurfTechnology_args&);
  CbmService_AddDesignWorkSurfTechnology_args() {
  }

  virtual ~CbmService_AddDesignWorkSurfTechnology_args() throw();
  DesignWorkSurfTechnology design_work_surf_technology;

  _CbmService_AddDesignWorkSurfTechnology_args__isset __isset;

  void __set_design_work_surf_technology(const DesignWorkSurfTechnology& val);

  bool operator == (const CbmService_AddDesignWorkSurfTechnology_args & rhs) const
  {
    if (!(design_work_surf_technology == rhs.design_work_surf_technology))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDesignWorkSurfTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDesignWorkSurfTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddDesignWorkSurfTechnology_pargs {
 public:


  virtual ~CbmService_AddDesignWorkSurfTechnology_pargs() throw();
  const DesignWorkSurfTechnology* design_work_surf_technology;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDesignWorkSurfTechnology_result__isset {
  _CbmService_AddDesignWorkSurfTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDesignWorkSurfTechnology_result__isset;

class CbmService_AddDesignWorkSurfTechnology_result {
 public:

  CbmService_AddDesignWorkSurfTechnology_result(const CbmService_AddDesignWorkSurfTechnology_result&);
  CbmService_AddDesignWorkSurfTechnology_result& operator=(const CbmService_AddDesignWorkSurfTechnology_result&);
  CbmService_AddDesignWorkSurfTechnology_result() : success(0) {
  }

  virtual ~CbmService_AddDesignWorkSurfTechnology_result() throw();
  int32_t success;

  _CbmService_AddDesignWorkSurfTechnology_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddDesignWorkSurfTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDesignWorkSurfTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDesignWorkSurfTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDesignWorkSurfTechnology_presult__isset {
  _CbmService_AddDesignWorkSurfTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDesignWorkSurfTechnology_presult__isset;

class CbmService_AddDesignWorkSurfTechnology_presult {
 public:


  virtual ~CbmService_AddDesignWorkSurfTechnology_presult() throw();
  int32_t* success;

  _CbmService_AddDesignWorkSurfTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteDesignWorkSurfTechnology_args__isset {
  _CbmService_DeleteDesignWorkSurfTechnology_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteDesignWorkSurfTechnology_args__isset;

class CbmService_DeleteDesignWorkSurfTechnology_args {
 public:

  CbmService_DeleteDesignWorkSurfTechnology_args(const CbmService_DeleteDesignWorkSurfTechnology_args&);
  CbmService_DeleteDesignWorkSurfTechnology_args& operator=(const CbmService_DeleteDesignWorkSurfTechnology_args&);
  CbmService_DeleteDesignWorkSurfTechnology_args() : id(0) {
  }

  virtual ~CbmService_DeleteDesignWorkSurfTechnology_args() throw();
  int32_t id;

  _CbmService_DeleteDesignWorkSurfTechnology_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteDesignWorkSurfTechnology_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDesignWorkSurfTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDesignWorkSurfTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteDesignWorkSurfTechnology_pargs {
 public:


  virtual ~CbmService_DeleteDesignWorkSurfTechnology_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDesignWorkSurfTechnology_result__isset {
  _CbmService_DeleteDesignWorkSurfTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDesignWorkSurfTechnology_result__isset;

class CbmService_DeleteDesignWorkSurfTechnology_result {
 public:

  CbmService_DeleteDesignWorkSurfTechnology_result(const CbmService_DeleteDesignWorkSurfTechnology_result&);
  CbmService_DeleteDesignWorkSurfTechnology_result& operator=(const CbmService_DeleteDesignWorkSurfTechnology_result&);
  CbmService_DeleteDesignWorkSurfTechnology_result() : success(0) {
  }

  virtual ~CbmService_DeleteDesignWorkSurfTechnology_result() throw();
  bool success;

  _CbmService_DeleteDesignWorkSurfTechnology_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteDesignWorkSurfTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDesignWorkSurfTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDesignWorkSurfTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDesignWorkSurfTechnology_presult__isset {
  _CbmService_DeleteDesignWorkSurfTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDesignWorkSurfTechnology_presult__isset;

class CbmService_DeleteDesignWorkSurfTechnology_presult {
 public:


  virtual ~CbmService_DeleteDesignWorkSurfTechnology_presult() throw();
  bool* success;

  _CbmService_DeleteDesignWorkSurfTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateDesignWorkSurfTechnology_args__isset {
  _CbmService_UpdateDesignWorkSurfTechnology_args__isset() : design_work_surf_technology(false) {}
  bool design_work_surf_technology :1;
} _CbmService_UpdateDesignWorkSurfTechnology_args__isset;

class CbmService_UpdateDesignWorkSurfTechnology_args {
 public:

  CbmService_UpdateDesignWorkSurfTechnology_args(const CbmService_UpdateDesignWorkSurfTechnology_args&);
  CbmService_UpdateDesignWorkSurfTechnology_args& operator=(const CbmService_UpdateDesignWorkSurfTechnology_args&);
  CbmService_UpdateDesignWorkSurfTechnology_args() {
  }

  virtual ~CbmService_UpdateDesignWorkSurfTechnology_args() throw();
  DesignWorkSurfTechnology design_work_surf_technology;

  _CbmService_UpdateDesignWorkSurfTechnology_args__isset __isset;

  void __set_design_work_surf_technology(const DesignWorkSurfTechnology& val);

  bool operator == (const CbmService_UpdateDesignWorkSurfTechnology_args & rhs) const
  {
    if (!(design_work_surf_technology == rhs.design_work_surf_technology))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDesignWorkSurfTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDesignWorkSurfTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateDesignWorkSurfTechnology_pargs {
 public:


  virtual ~CbmService_UpdateDesignWorkSurfTechnology_pargs() throw();
  const DesignWorkSurfTechnology* design_work_surf_technology;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDesignWorkSurfTechnology_result__isset {
  _CbmService_UpdateDesignWorkSurfTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDesignWorkSurfTechnology_result__isset;

class CbmService_UpdateDesignWorkSurfTechnology_result {
 public:

  CbmService_UpdateDesignWorkSurfTechnology_result(const CbmService_UpdateDesignWorkSurfTechnology_result&);
  CbmService_UpdateDesignWorkSurfTechnology_result& operator=(const CbmService_UpdateDesignWorkSurfTechnology_result&);
  CbmService_UpdateDesignWorkSurfTechnology_result() : success(0) {
  }

  virtual ~CbmService_UpdateDesignWorkSurfTechnology_result() throw();
  bool success;

  _CbmService_UpdateDesignWorkSurfTechnology_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateDesignWorkSurfTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDesignWorkSurfTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDesignWorkSurfTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDesignWorkSurfTechnology_presult__isset {
  _CbmService_UpdateDesignWorkSurfTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDesignWorkSurfTechnology_presult__isset;

class CbmService_UpdateDesignWorkSurfTechnology_presult {
 public:


  virtual ~CbmService_UpdateDesignWorkSurfTechnology_presult() throw();
  bool* success;

  _CbmService_UpdateDesignWorkSurfTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyById_args__isset {
  _CbmService_GetDesignWorkSurfTechnologyById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetDesignWorkSurfTechnologyById_args__isset;

class CbmService_GetDesignWorkSurfTechnologyById_args {
 public:

  CbmService_GetDesignWorkSurfTechnologyById_args(const CbmService_GetDesignWorkSurfTechnologyById_args&);
  CbmService_GetDesignWorkSurfTechnologyById_args& operator=(const CbmService_GetDesignWorkSurfTechnologyById_args&);
  CbmService_GetDesignWorkSurfTechnologyById_args() : id(0) {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyById_args() throw();
  int32_t id;

  _CbmService_GetDesignWorkSurfTechnologyById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignWorkSurfTechnologyById_pargs {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyById_result__isset {
  _CbmService_GetDesignWorkSurfTechnologyById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyById_result__isset;

class CbmService_GetDesignWorkSurfTechnologyById_result {
 public:

  CbmService_GetDesignWorkSurfTechnologyById_result(const CbmService_GetDesignWorkSurfTechnologyById_result&);
  CbmService_GetDesignWorkSurfTechnologyById_result& operator=(const CbmService_GetDesignWorkSurfTechnologyById_result&);
  CbmService_GetDesignWorkSurfTechnologyById_result() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyById_result() throw();
  DesignWorkSurfTechnology success;

  _CbmService_GetDesignWorkSurfTechnologyById_result__isset __isset;

  void __set_success(const DesignWorkSurfTechnology& val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyById_presult__isset {
  _CbmService_GetDesignWorkSurfTechnologyById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyById_presult__isset;

class CbmService_GetDesignWorkSurfTechnologyById_presult {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyById_presult() throw();
  DesignWorkSurfTechnology* success;

  _CbmService_GetDesignWorkSurfTechnologyById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyByForeignKey_args__isset {
  _CbmService_GetDesignWorkSurfTechnologyByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetDesignWorkSurfTechnologyByForeignKey_args__isset;

class CbmService_GetDesignWorkSurfTechnologyByForeignKey_args {
 public:

  CbmService_GetDesignWorkSurfTechnologyByForeignKey_args(const CbmService_GetDesignWorkSurfTechnologyByForeignKey_args&);
  CbmService_GetDesignWorkSurfTechnologyByForeignKey_args& operator=(const CbmService_GetDesignWorkSurfTechnologyByForeignKey_args&);
  CbmService_GetDesignWorkSurfTechnologyByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetDesignWorkSurfTechnologyByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignWorkSurfTechnologyByForeignKey_pargs {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyByForeignKey_result__isset {
  _CbmService_GetDesignWorkSurfTechnologyByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyByForeignKey_result__isset;

class CbmService_GetDesignWorkSurfTechnologyByForeignKey_result {
 public:

  CbmService_GetDesignWorkSurfTechnologyByForeignKey_result(const CbmService_GetDesignWorkSurfTechnologyByForeignKey_result&);
  CbmService_GetDesignWorkSurfTechnologyByForeignKey_result& operator=(const CbmService_GetDesignWorkSurfTechnologyByForeignKey_result&);
  CbmService_GetDesignWorkSurfTechnologyByForeignKey_result() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyByForeignKey_result() throw();
  DesignWorkSurfTechnology success;

  _CbmService_GetDesignWorkSurfTechnologyByForeignKey_result__isset __isset;

  void __set_success(const DesignWorkSurfTechnology& val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyByForeignKey_presult__isset {
  _CbmService_GetDesignWorkSurfTechnologyByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyByForeignKey_presult__isset;

class CbmService_GetDesignWorkSurfTechnologyByForeignKey_presult {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyByForeignKey_presult() throw();
  DesignWorkSurfTechnology* success;

  _CbmService_GetDesignWorkSurfTechnologyByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignWorkSurfTechnologyList_args {
 public:

  CbmService_GetDesignWorkSurfTechnologyList_args(const CbmService_GetDesignWorkSurfTechnologyList_args&);
  CbmService_GetDesignWorkSurfTechnologyList_args& operator=(const CbmService_GetDesignWorkSurfTechnologyList_args&);
  CbmService_GetDesignWorkSurfTechnologyList_args() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyList_args() throw();

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignWorkSurfTechnologyList_pargs {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyList_result__isset {
  _CbmService_GetDesignWorkSurfTechnologyList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyList_result__isset;

class CbmService_GetDesignWorkSurfTechnologyList_result {
 public:

  CbmService_GetDesignWorkSurfTechnologyList_result(const CbmService_GetDesignWorkSurfTechnologyList_result&);
  CbmService_GetDesignWorkSurfTechnologyList_result& operator=(const CbmService_GetDesignWorkSurfTechnologyList_result&);
  CbmService_GetDesignWorkSurfTechnologyList_result() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyList_result() throw();
  std::vector<DesignWorkSurfTechnology>  success;

  _CbmService_GetDesignWorkSurfTechnologyList_result__isset __isset;

  void __set_success(const std::vector<DesignWorkSurfTechnology> & val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyList_presult__isset {
  _CbmService_GetDesignWorkSurfTechnologyList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyList_presult__isset;

class CbmService_GetDesignWorkSurfTechnologyList_presult {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyList_presult() throw();
  std::vector<DesignWorkSurfTechnology> * success;

  _CbmService_GetDesignWorkSurfTechnologyList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignWorkSurfTechnologyIds_args {
 public:

  CbmService_GetDesignWorkSurfTechnologyIds_args(const CbmService_GetDesignWorkSurfTechnologyIds_args&);
  CbmService_GetDesignWorkSurfTechnologyIds_args& operator=(const CbmService_GetDesignWorkSurfTechnologyIds_args&);
  CbmService_GetDesignWorkSurfTechnologyIds_args() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyIds_args() throw();

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignWorkSurfTechnologyIds_pargs {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyIds_result__isset {
  _CbmService_GetDesignWorkSurfTechnologyIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyIds_result__isset;

class CbmService_GetDesignWorkSurfTechnologyIds_result {
 public:

  CbmService_GetDesignWorkSurfTechnologyIds_result(const CbmService_GetDesignWorkSurfTechnologyIds_result&);
  CbmService_GetDesignWorkSurfTechnologyIds_result& operator=(const CbmService_GetDesignWorkSurfTechnologyIds_result&);
  CbmService_GetDesignWorkSurfTechnologyIds_result() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetDesignWorkSurfTechnologyIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyIds_presult__isset {
  _CbmService_GetDesignWorkSurfTechnologyIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyIds_presult__isset;

class CbmService_GetDesignWorkSurfTechnologyIds_presult {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetDesignWorkSurfTechnologyIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDesignWorkSurfTechnologyNames_args {
 public:

  CbmService_GetDesignWorkSurfTechnologyNames_args(const CbmService_GetDesignWorkSurfTechnologyNames_args&);
  CbmService_GetDesignWorkSurfTechnologyNames_args& operator=(const CbmService_GetDesignWorkSurfTechnologyNames_args&);
  CbmService_GetDesignWorkSurfTechnologyNames_args() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyNames_args() throw();

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignWorkSurfTechnologyNames_pargs {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyNames_result__isset {
  _CbmService_GetDesignWorkSurfTechnologyNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyNames_result__isset;

class CbmService_GetDesignWorkSurfTechnologyNames_result {
 public:

  CbmService_GetDesignWorkSurfTechnologyNames_result(const CbmService_GetDesignWorkSurfTechnologyNames_result&);
  CbmService_GetDesignWorkSurfTechnologyNames_result& operator=(const CbmService_GetDesignWorkSurfTechnologyNames_result&);
  CbmService_GetDesignWorkSurfTechnologyNames_result() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetDesignWorkSurfTechnologyNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyNames_presult__isset {
  _CbmService_GetDesignWorkSurfTechnologyNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyNames_presult__isset;

class CbmService_GetDesignWorkSurfTechnologyNames_presult {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetDesignWorkSurfTechnologyNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreDesignWorkSurfTechnology_args__isset {
  _CbmService_AddMoreDesignWorkSurfTechnology_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreDesignWorkSurfTechnology_args__isset;

class CbmService_AddMoreDesignWorkSurfTechnology_args {
 public:

  CbmService_AddMoreDesignWorkSurfTechnology_args(const CbmService_AddMoreDesignWorkSurfTechnology_args&);
  CbmService_AddMoreDesignWorkSurfTechnology_args& operator=(const CbmService_AddMoreDesignWorkSurfTechnology_args&);
  CbmService_AddMoreDesignWorkSurfTechnology_args() {
  }

  virtual ~CbmService_AddMoreDesignWorkSurfTechnology_args() throw();
  std::vector<DesignWorkSurfTechnology>  objs;

  _CbmService_AddMoreDesignWorkSurfTechnology_args__isset __isset;

  void __set_objs(const std::vector<DesignWorkSurfTechnology> & val);

  bool operator == (const CbmService_AddMoreDesignWorkSurfTechnology_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreDesignWorkSurfTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDesignWorkSurfTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignWorkSurfTechnology_pargs {
 public:


  virtual ~CbmService_AddMoreDesignWorkSurfTechnology_pargs() throw();
  const std::vector<DesignWorkSurfTechnology> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignWorkSurfTechnology_result {
 public:

  CbmService_AddMoreDesignWorkSurfTechnology_result(const CbmService_AddMoreDesignWorkSurfTechnology_result&);
  CbmService_AddMoreDesignWorkSurfTechnology_result& operator=(const CbmService_AddMoreDesignWorkSurfTechnology_result&);
  CbmService_AddMoreDesignWorkSurfTechnology_result() {
  }

  virtual ~CbmService_AddMoreDesignWorkSurfTechnology_result() throw();

  bool operator == (const CbmService_AddMoreDesignWorkSurfTechnology_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreDesignWorkSurfTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDesignWorkSurfTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDesignWorkSurfTechnology_presult {
 public:


  virtual ~CbmService_AddMoreDesignWorkSurfTechnology_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreDesignWorkSurfTechnology_args__isset {
  _CbmService_DeleteMoreDesignWorkSurfTechnology_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreDesignWorkSurfTechnology_args__isset;

class CbmService_DeleteMoreDesignWorkSurfTechnology_args {
 public:

  CbmService_DeleteMoreDesignWorkSurfTechnology_args(const CbmService_DeleteMoreDesignWorkSurfTechnology_args&);
  CbmService_DeleteMoreDesignWorkSurfTechnology_args& operator=(const CbmService_DeleteMoreDesignWorkSurfTechnology_args&);
  CbmService_DeleteMoreDesignWorkSurfTechnology_args() {
  }

  virtual ~CbmService_DeleteMoreDesignWorkSurfTechnology_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreDesignWorkSurfTechnology_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreDesignWorkSurfTechnology_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDesignWorkSurfTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDesignWorkSurfTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignWorkSurfTechnology_pargs {
 public:


  virtual ~CbmService_DeleteMoreDesignWorkSurfTechnology_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignWorkSurfTechnology_result {
 public:

  CbmService_DeleteMoreDesignWorkSurfTechnology_result(const CbmService_DeleteMoreDesignWorkSurfTechnology_result&);
  CbmService_DeleteMoreDesignWorkSurfTechnology_result& operator=(const CbmService_DeleteMoreDesignWorkSurfTechnology_result&);
  CbmService_DeleteMoreDesignWorkSurfTechnology_result() {
  }

  virtual ~CbmService_DeleteMoreDesignWorkSurfTechnology_result() throw();

  bool operator == (const CbmService_DeleteMoreDesignWorkSurfTechnology_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDesignWorkSurfTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDesignWorkSurfTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDesignWorkSurfTechnology_presult {
 public:


  virtual ~CbmService_DeleteMoreDesignWorkSurfTechnology_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyByFields_args__isset {
  _CbmService_GetDesignWorkSurfTechnologyByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDesignWorkSurfTechnologyByFields_args__isset;

class CbmService_GetDesignWorkSurfTechnologyByFields_args {
 public:

  CbmService_GetDesignWorkSurfTechnologyByFields_args(const CbmService_GetDesignWorkSurfTechnologyByFields_args&);
  CbmService_GetDesignWorkSurfTechnologyByFields_args& operator=(const CbmService_GetDesignWorkSurfTechnologyByFields_args&);
  CbmService_GetDesignWorkSurfTechnologyByFields_args() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDesignWorkSurfTechnologyByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignWorkSurfTechnologyByFields_pargs {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyByFields_result__isset {
  _CbmService_GetDesignWorkSurfTechnologyByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyByFields_result__isset;

class CbmService_GetDesignWorkSurfTechnologyByFields_result {
 public:

  CbmService_GetDesignWorkSurfTechnologyByFields_result(const CbmService_GetDesignWorkSurfTechnologyByFields_result&);
  CbmService_GetDesignWorkSurfTechnologyByFields_result& operator=(const CbmService_GetDesignWorkSurfTechnologyByFields_result&);
  CbmService_GetDesignWorkSurfTechnologyByFields_result() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyByFields_result() throw();
  DesignWorkSurfTechnology success;

  _CbmService_GetDesignWorkSurfTechnologyByFields_result__isset __isset;

  void __set_success(const DesignWorkSurfTechnology& val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyByFields_presult__isset {
  _CbmService_GetDesignWorkSurfTechnologyByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyByFields_presult__isset;

class CbmService_GetDesignWorkSurfTechnologyByFields_presult {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyByFields_presult() throw();
  DesignWorkSurfTechnology* success;

  _CbmService_GetDesignWorkSurfTechnologyByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyByFields1_args__isset {
  _CbmService_GetDesignWorkSurfTechnologyByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDesignWorkSurfTechnologyByFields1_args__isset;

class CbmService_GetDesignWorkSurfTechnologyByFields1_args {
 public:

  CbmService_GetDesignWorkSurfTechnologyByFields1_args(const CbmService_GetDesignWorkSurfTechnologyByFields1_args&);
  CbmService_GetDesignWorkSurfTechnologyByFields1_args& operator=(const CbmService_GetDesignWorkSurfTechnologyByFields1_args&);
  CbmService_GetDesignWorkSurfTechnologyByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDesignWorkSurfTechnologyByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignWorkSurfTechnologyByFields1_pargs {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyByFields1_result__isset {
  _CbmService_GetDesignWorkSurfTechnologyByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyByFields1_result__isset;

class CbmService_GetDesignWorkSurfTechnologyByFields1_result {
 public:

  CbmService_GetDesignWorkSurfTechnologyByFields1_result(const CbmService_GetDesignWorkSurfTechnologyByFields1_result&);
  CbmService_GetDesignWorkSurfTechnologyByFields1_result& operator=(const CbmService_GetDesignWorkSurfTechnologyByFields1_result&);
  CbmService_GetDesignWorkSurfTechnologyByFields1_result() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyByFields1_result() throw();
  DesignWorkSurfTechnology success;

  _CbmService_GetDesignWorkSurfTechnologyByFields1_result__isset __isset;

  void __set_success(const DesignWorkSurfTechnology& val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyByFields1_presult__isset {
  _CbmService_GetDesignWorkSurfTechnologyByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyByFields1_presult__isset;

class CbmService_GetDesignWorkSurfTechnologyByFields1_presult {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyByFields1_presult() throw();
  DesignWorkSurfTechnology* success;

  _CbmService_GetDesignWorkSurfTechnologyByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyByFields2_args__isset {
  _CbmService_GetDesignWorkSurfTechnologyByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDesignWorkSurfTechnologyByFields2_args__isset;

class CbmService_GetDesignWorkSurfTechnologyByFields2_args {
 public:

  CbmService_GetDesignWorkSurfTechnologyByFields2_args(const CbmService_GetDesignWorkSurfTechnologyByFields2_args&);
  CbmService_GetDesignWorkSurfTechnologyByFields2_args& operator=(const CbmService_GetDesignWorkSurfTechnologyByFields2_args&);
  CbmService_GetDesignWorkSurfTechnologyByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDesignWorkSurfTechnologyByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignWorkSurfTechnologyByFields2_pargs {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyByFields2_result__isset {
  _CbmService_GetDesignWorkSurfTechnologyByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyByFields2_result__isset;

class CbmService_GetDesignWorkSurfTechnologyByFields2_result {
 public:

  CbmService_GetDesignWorkSurfTechnologyByFields2_result(const CbmService_GetDesignWorkSurfTechnologyByFields2_result&);
  CbmService_GetDesignWorkSurfTechnologyByFields2_result& operator=(const CbmService_GetDesignWorkSurfTechnologyByFields2_result&);
  CbmService_GetDesignWorkSurfTechnologyByFields2_result() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyByFields2_result() throw();
  DesignWorkSurfTechnology success;

  _CbmService_GetDesignWorkSurfTechnologyByFields2_result__isset __isset;

  void __set_success(const DesignWorkSurfTechnology& val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyByFields2_presult__isset {
  _CbmService_GetDesignWorkSurfTechnologyByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyByFields2_presult__isset;

class CbmService_GetDesignWorkSurfTechnologyByFields2_presult {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyByFields2_presult() throw();
  DesignWorkSurfTechnology* success;

  _CbmService_GetDesignWorkSurfTechnologyByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyListByFields_args__isset {
  _CbmService_GetDesignWorkSurfTechnologyListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDesignWorkSurfTechnologyListByFields_args__isset;

class CbmService_GetDesignWorkSurfTechnologyListByFields_args {
 public:

  CbmService_GetDesignWorkSurfTechnologyListByFields_args(const CbmService_GetDesignWorkSurfTechnologyListByFields_args&);
  CbmService_GetDesignWorkSurfTechnologyListByFields_args& operator=(const CbmService_GetDesignWorkSurfTechnologyListByFields_args&);
  CbmService_GetDesignWorkSurfTechnologyListByFields_args() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDesignWorkSurfTechnologyListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignWorkSurfTechnologyListByFields_pargs {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyListByFields_result__isset {
  _CbmService_GetDesignWorkSurfTechnologyListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyListByFields_result__isset;

class CbmService_GetDesignWorkSurfTechnologyListByFields_result {
 public:

  CbmService_GetDesignWorkSurfTechnologyListByFields_result(const CbmService_GetDesignWorkSurfTechnologyListByFields_result&);
  CbmService_GetDesignWorkSurfTechnologyListByFields_result& operator=(const CbmService_GetDesignWorkSurfTechnologyListByFields_result&);
  CbmService_GetDesignWorkSurfTechnologyListByFields_result() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyListByFields_result() throw();
  std::vector<DesignWorkSurfTechnology>  success;

  _CbmService_GetDesignWorkSurfTechnologyListByFields_result__isset __isset;

  void __set_success(const std::vector<DesignWorkSurfTechnology> & val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyListByFields_presult__isset {
  _CbmService_GetDesignWorkSurfTechnologyListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyListByFields_presult__isset;

class CbmService_GetDesignWorkSurfTechnologyListByFields_presult {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyListByFields_presult() throw();
  std::vector<DesignWorkSurfTechnology> * success;

  _CbmService_GetDesignWorkSurfTechnologyListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyListByFields1_args__isset {
  _CbmService_GetDesignWorkSurfTechnologyListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDesignWorkSurfTechnologyListByFields1_args__isset;

class CbmService_GetDesignWorkSurfTechnologyListByFields1_args {
 public:

  CbmService_GetDesignWorkSurfTechnologyListByFields1_args(const CbmService_GetDesignWorkSurfTechnologyListByFields1_args&);
  CbmService_GetDesignWorkSurfTechnologyListByFields1_args& operator=(const CbmService_GetDesignWorkSurfTechnologyListByFields1_args&);
  CbmService_GetDesignWorkSurfTechnologyListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDesignWorkSurfTechnologyListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignWorkSurfTechnologyListByFields1_pargs {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyListByFields1_result__isset {
  _CbmService_GetDesignWorkSurfTechnologyListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyListByFields1_result__isset;

class CbmService_GetDesignWorkSurfTechnologyListByFields1_result {
 public:

  CbmService_GetDesignWorkSurfTechnologyListByFields1_result(const CbmService_GetDesignWorkSurfTechnologyListByFields1_result&);
  CbmService_GetDesignWorkSurfTechnologyListByFields1_result& operator=(const CbmService_GetDesignWorkSurfTechnologyListByFields1_result&);
  CbmService_GetDesignWorkSurfTechnologyListByFields1_result() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyListByFields1_result() throw();
  std::vector<DesignWorkSurfTechnology>  success;

  _CbmService_GetDesignWorkSurfTechnologyListByFields1_result__isset __isset;

  void __set_success(const std::vector<DesignWorkSurfTechnology> & val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyListByFields1_presult__isset {
  _CbmService_GetDesignWorkSurfTechnologyListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyListByFields1_presult__isset;

class CbmService_GetDesignWorkSurfTechnologyListByFields1_presult {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyListByFields1_presult() throw();
  std::vector<DesignWorkSurfTechnology> * success;

  _CbmService_GetDesignWorkSurfTechnologyListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyListByFields2_args__isset {
  _CbmService_GetDesignWorkSurfTechnologyListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDesignWorkSurfTechnologyListByFields2_args__isset;

class CbmService_GetDesignWorkSurfTechnologyListByFields2_args {
 public:

  CbmService_GetDesignWorkSurfTechnologyListByFields2_args(const CbmService_GetDesignWorkSurfTechnologyListByFields2_args&);
  CbmService_GetDesignWorkSurfTechnologyListByFields2_args& operator=(const CbmService_GetDesignWorkSurfTechnologyListByFields2_args&);
  CbmService_GetDesignWorkSurfTechnologyListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDesignWorkSurfTechnologyListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDesignWorkSurfTechnologyListByFields2_pargs {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyListByFields2_result__isset {
  _CbmService_GetDesignWorkSurfTechnologyListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyListByFields2_result__isset;

class CbmService_GetDesignWorkSurfTechnologyListByFields2_result {
 public:

  CbmService_GetDesignWorkSurfTechnologyListByFields2_result(const CbmService_GetDesignWorkSurfTechnologyListByFields2_result&);
  CbmService_GetDesignWorkSurfTechnologyListByFields2_result& operator=(const CbmService_GetDesignWorkSurfTechnologyListByFields2_result&);
  CbmService_GetDesignWorkSurfTechnologyListByFields2_result() {
  }

  virtual ~CbmService_GetDesignWorkSurfTechnologyListByFields2_result() throw();
  std::vector<DesignWorkSurfTechnology>  success;

  _CbmService_GetDesignWorkSurfTechnologyListByFields2_result__isset __isset;

  void __set_success(const std::vector<DesignWorkSurfTechnology> & val);

  bool operator == (const CbmService_GetDesignWorkSurfTechnologyListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDesignWorkSurfTechnologyListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDesignWorkSurfTechnologyListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDesignWorkSurfTechnologyListByFields2_presult__isset {
  _CbmService_GetDesignWorkSurfTechnologyListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDesignWorkSurfTechnologyListByFields2_presult__isset;

class CbmService_GetDesignWorkSurfTechnologyListByFields2_presult {
 public:


  virtual ~CbmService_GetDesignWorkSurfTechnologyListByFields2_presult() throw();
  std::vector<DesignWorkSurfTechnology> * success;

  _CbmService_GetDesignWorkSurfTechnologyListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddDrillingRadiusParam_args__isset {
  _CbmService_AddDrillingRadiusParam_args__isset() : drilling_radius_param(false) {}
  bool drilling_radius_param :1;
} _CbmService_AddDrillingRadiusParam_args__isset;

class CbmService_AddDrillingRadiusParam_args {
 public:

  CbmService_AddDrillingRadiusParam_args(const CbmService_AddDrillingRadiusParam_args&);
  CbmService_AddDrillingRadiusParam_args& operator=(const CbmService_AddDrillingRadiusParam_args&);
  CbmService_AddDrillingRadiusParam_args() {
  }

  virtual ~CbmService_AddDrillingRadiusParam_args() throw();
  DrillingRadiusParam drilling_radius_param;

  _CbmService_AddDrillingRadiusParam_args__isset __isset;

  void __set_drilling_radius_param(const DrillingRadiusParam& val);

  bool operator == (const CbmService_AddDrillingRadiusParam_args & rhs) const
  {
    if (!(drilling_radius_param == rhs.drilling_radius_param))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDrillingRadiusParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDrillingRadiusParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddDrillingRadiusParam_pargs {
 public:


  virtual ~CbmService_AddDrillingRadiusParam_pargs() throw();
  const DrillingRadiusParam* drilling_radius_param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDrillingRadiusParam_result__isset {
  _CbmService_AddDrillingRadiusParam_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDrillingRadiusParam_result__isset;

class CbmService_AddDrillingRadiusParam_result {
 public:

  CbmService_AddDrillingRadiusParam_result(const CbmService_AddDrillingRadiusParam_result&);
  CbmService_AddDrillingRadiusParam_result& operator=(const CbmService_AddDrillingRadiusParam_result&);
  CbmService_AddDrillingRadiusParam_result() : success(0) {
  }

  virtual ~CbmService_AddDrillingRadiusParam_result() throw();
  int32_t success;

  _CbmService_AddDrillingRadiusParam_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddDrillingRadiusParam_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDrillingRadiusParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDrillingRadiusParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDrillingRadiusParam_presult__isset {
  _CbmService_AddDrillingRadiusParam_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDrillingRadiusParam_presult__isset;

class CbmService_AddDrillingRadiusParam_presult {
 public:


  virtual ~CbmService_AddDrillingRadiusParam_presult() throw();
  int32_t* success;

  _CbmService_AddDrillingRadiusParam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteDrillingRadiusParam_args__isset {
  _CbmService_DeleteDrillingRadiusParam_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteDrillingRadiusParam_args__isset;

class CbmService_DeleteDrillingRadiusParam_args {
 public:

  CbmService_DeleteDrillingRadiusParam_args(const CbmService_DeleteDrillingRadiusParam_args&);
  CbmService_DeleteDrillingRadiusParam_args& operator=(const CbmService_DeleteDrillingRadiusParam_args&);
  CbmService_DeleteDrillingRadiusParam_args() : id(0) {
  }

  virtual ~CbmService_DeleteDrillingRadiusParam_args() throw();
  int32_t id;

  _CbmService_DeleteDrillingRadiusParam_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteDrillingRadiusParam_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDrillingRadiusParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDrillingRadiusParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteDrillingRadiusParam_pargs {
 public:


  virtual ~CbmService_DeleteDrillingRadiusParam_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDrillingRadiusParam_result__isset {
  _CbmService_DeleteDrillingRadiusParam_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDrillingRadiusParam_result__isset;

class CbmService_DeleteDrillingRadiusParam_result {
 public:

  CbmService_DeleteDrillingRadiusParam_result(const CbmService_DeleteDrillingRadiusParam_result&);
  CbmService_DeleteDrillingRadiusParam_result& operator=(const CbmService_DeleteDrillingRadiusParam_result&);
  CbmService_DeleteDrillingRadiusParam_result() : success(0) {
  }

  virtual ~CbmService_DeleteDrillingRadiusParam_result() throw();
  bool success;

  _CbmService_DeleteDrillingRadiusParam_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteDrillingRadiusParam_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDrillingRadiusParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDrillingRadiusParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDrillingRadiusParam_presult__isset {
  _CbmService_DeleteDrillingRadiusParam_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDrillingRadiusParam_presult__isset;

class CbmService_DeleteDrillingRadiusParam_presult {
 public:


  virtual ~CbmService_DeleteDrillingRadiusParam_presult() throw();
  bool* success;

  _CbmService_DeleteDrillingRadiusParam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateDrillingRadiusParam_args__isset {
  _CbmService_UpdateDrillingRadiusParam_args__isset() : drilling_radius_param(false) {}
  bool drilling_radius_param :1;
} _CbmService_UpdateDrillingRadiusParam_args__isset;

class CbmService_UpdateDrillingRadiusParam_args {
 public:

  CbmService_UpdateDrillingRadiusParam_args(const CbmService_UpdateDrillingRadiusParam_args&);
  CbmService_UpdateDrillingRadiusParam_args& operator=(const CbmService_UpdateDrillingRadiusParam_args&);
  CbmService_UpdateDrillingRadiusParam_args() {
  }

  virtual ~CbmService_UpdateDrillingRadiusParam_args() throw();
  DrillingRadiusParam drilling_radius_param;

  _CbmService_UpdateDrillingRadiusParam_args__isset __isset;

  void __set_drilling_radius_param(const DrillingRadiusParam& val);

  bool operator == (const CbmService_UpdateDrillingRadiusParam_args & rhs) const
  {
    if (!(drilling_radius_param == rhs.drilling_radius_param))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDrillingRadiusParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDrillingRadiusParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateDrillingRadiusParam_pargs {
 public:


  virtual ~CbmService_UpdateDrillingRadiusParam_pargs() throw();
  const DrillingRadiusParam* drilling_radius_param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDrillingRadiusParam_result__isset {
  _CbmService_UpdateDrillingRadiusParam_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDrillingRadiusParam_result__isset;

class CbmService_UpdateDrillingRadiusParam_result {
 public:

  CbmService_UpdateDrillingRadiusParam_result(const CbmService_UpdateDrillingRadiusParam_result&);
  CbmService_UpdateDrillingRadiusParam_result& operator=(const CbmService_UpdateDrillingRadiusParam_result&);
  CbmService_UpdateDrillingRadiusParam_result() : success(0) {
  }

  virtual ~CbmService_UpdateDrillingRadiusParam_result() throw();
  bool success;

  _CbmService_UpdateDrillingRadiusParam_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateDrillingRadiusParam_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDrillingRadiusParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDrillingRadiusParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDrillingRadiusParam_presult__isset {
  _CbmService_UpdateDrillingRadiusParam_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDrillingRadiusParam_presult__isset;

class CbmService_UpdateDrillingRadiusParam_presult {
 public:


  virtual ~CbmService_UpdateDrillingRadiusParam_presult() throw();
  bool* success;

  _CbmService_UpdateDrillingRadiusParam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingRadiusParamById_args__isset {
  _CbmService_GetDrillingRadiusParamById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetDrillingRadiusParamById_args__isset;

class CbmService_GetDrillingRadiusParamById_args {
 public:

  CbmService_GetDrillingRadiusParamById_args(const CbmService_GetDrillingRadiusParamById_args&);
  CbmService_GetDrillingRadiusParamById_args& operator=(const CbmService_GetDrillingRadiusParamById_args&);
  CbmService_GetDrillingRadiusParamById_args() : id(0) {
  }

  virtual ~CbmService_GetDrillingRadiusParamById_args() throw();
  int32_t id;

  _CbmService_GetDrillingRadiusParamById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDrillingRadiusParamById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingRadiusParamById_pargs {
 public:


  virtual ~CbmService_GetDrillingRadiusParamById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamById_result__isset {
  _CbmService_GetDrillingRadiusParamById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamById_result__isset;

class CbmService_GetDrillingRadiusParamById_result {
 public:

  CbmService_GetDrillingRadiusParamById_result(const CbmService_GetDrillingRadiusParamById_result&);
  CbmService_GetDrillingRadiusParamById_result& operator=(const CbmService_GetDrillingRadiusParamById_result&);
  CbmService_GetDrillingRadiusParamById_result() {
  }

  virtual ~CbmService_GetDrillingRadiusParamById_result() throw();
  DrillingRadiusParam success;

  _CbmService_GetDrillingRadiusParamById_result__isset __isset;

  void __set_success(const DrillingRadiusParam& val);

  bool operator == (const CbmService_GetDrillingRadiusParamById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamById_presult__isset {
  _CbmService_GetDrillingRadiusParamById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamById_presult__isset;

class CbmService_GetDrillingRadiusParamById_presult {
 public:


  virtual ~CbmService_GetDrillingRadiusParamById_presult() throw();
  DrillingRadiusParam* success;

  _CbmService_GetDrillingRadiusParamById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingRadiusParamByForeignKey_args__isset {
  _CbmService_GetDrillingRadiusParamByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetDrillingRadiusParamByForeignKey_args__isset;

class CbmService_GetDrillingRadiusParamByForeignKey_args {
 public:

  CbmService_GetDrillingRadiusParamByForeignKey_args(const CbmService_GetDrillingRadiusParamByForeignKey_args&);
  CbmService_GetDrillingRadiusParamByForeignKey_args& operator=(const CbmService_GetDrillingRadiusParamByForeignKey_args&);
  CbmService_GetDrillingRadiusParamByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetDrillingRadiusParamByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetDrillingRadiusParamByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDrillingRadiusParamByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingRadiusParamByForeignKey_pargs {
 public:


  virtual ~CbmService_GetDrillingRadiusParamByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamByForeignKey_result__isset {
  _CbmService_GetDrillingRadiusParamByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamByForeignKey_result__isset;

class CbmService_GetDrillingRadiusParamByForeignKey_result {
 public:

  CbmService_GetDrillingRadiusParamByForeignKey_result(const CbmService_GetDrillingRadiusParamByForeignKey_result&);
  CbmService_GetDrillingRadiusParamByForeignKey_result& operator=(const CbmService_GetDrillingRadiusParamByForeignKey_result&);
  CbmService_GetDrillingRadiusParamByForeignKey_result() {
  }

  virtual ~CbmService_GetDrillingRadiusParamByForeignKey_result() throw();
  DrillingRadiusParam success;

  _CbmService_GetDrillingRadiusParamByForeignKey_result__isset __isset;

  void __set_success(const DrillingRadiusParam& val);

  bool operator == (const CbmService_GetDrillingRadiusParamByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamByForeignKey_presult__isset {
  _CbmService_GetDrillingRadiusParamByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamByForeignKey_presult__isset;

class CbmService_GetDrillingRadiusParamByForeignKey_presult {
 public:


  virtual ~CbmService_GetDrillingRadiusParamByForeignKey_presult() throw();
  DrillingRadiusParam* success;

  _CbmService_GetDrillingRadiusParamByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDrillingRadiusParamList_args {
 public:

  CbmService_GetDrillingRadiusParamList_args(const CbmService_GetDrillingRadiusParamList_args&);
  CbmService_GetDrillingRadiusParamList_args& operator=(const CbmService_GetDrillingRadiusParamList_args&);
  CbmService_GetDrillingRadiusParamList_args() {
  }

  virtual ~CbmService_GetDrillingRadiusParamList_args() throw();

  bool operator == (const CbmService_GetDrillingRadiusParamList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingRadiusParamList_pargs {
 public:


  virtual ~CbmService_GetDrillingRadiusParamList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamList_result__isset {
  _CbmService_GetDrillingRadiusParamList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamList_result__isset;

class CbmService_GetDrillingRadiusParamList_result {
 public:

  CbmService_GetDrillingRadiusParamList_result(const CbmService_GetDrillingRadiusParamList_result&);
  CbmService_GetDrillingRadiusParamList_result& operator=(const CbmService_GetDrillingRadiusParamList_result&);
  CbmService_GetDrillingRadiusParamList_result() {
  }

  virtual ~CbmService_GetDrillingRadiusParamList_result() throw();
  std::vector<DrillingRadiusParam>  success;

  _CbmService_GetDrillingRadiusParamList_result__isset __isset;

  void __set_success(const std::vector<DrillingRadiusParam> & val);

  bool operator == (const CbmService_GetDrillingRadiusParamList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamList_presult__isset {
  _CbmService_GetDrillingRadiusParamList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamList_presult__isset;

class CbmService_GetDrillingRadiusParamList_presult {
 public:


  virtual ~CbmService_GetDrillingRadiusParamList_presult() throw();
  std::vector<DrillingRadiusParam> * success;

  _CbmService_GetDrillingRadiusParamList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDrillingRadiusParamIds_args {
 public:

  CbmService_GetDrillingRadiusParamIds_args(const CbmService_GetDrillingRadiusParamIds_args&);
  CbmService_GetDrillingRadiusParamIds_args& operator=(const CbmService_GetDrillingRadiusParamIds_args&);
  CbmService_GetDrillingRadiusParamIds_args() {
  }

  virtual ~CbmService_GetDrillingRadiusParamIds_args() throw();

  bool operator == (const CbmService_GetDrillingRadiusParamIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingRadiusParamIds_pargs {
 public:


  virtual ~CbmService_GetDrillingRadiusParamIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamIds_result__isset {
  _CbmService_GetDrillingRadiusParamIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamIds_result__isset;

class CbmService_GetDrillingRadiusParamIds_result {
 public:

  CbmService_GetDrillingRadiusParamIds_result(const CbmService_GetDrillingRadiusParamIds_result&);
  CbmService_GetDrillingRadiusParamIds_result& operator=(const CbmService_GetDrillingRadiusParamIds_result&);
  CbmService_GetDrillingRadiusParamIds_result() {
  }

  virtual ~CbmService_GetDrillingRadiusParamIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetDrillingRadiusParamIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetDrillingRadiusParamIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamIds_presult__isset {
  _CbmService_GetDrillingRadiusParamIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamIds_presult__isset;

class CbmService_GetDrillingRadiusParamIds_presult {
 public:


  virtual ~CbmService_GetDrillingRadiusParamIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetDrillingRadiusParamIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDrillingRadiusParamNames_args {
 public:

  CbmService_GetDrillingRadiusParamNames_args(const CbmService_GetDrillingRadiusParamNames_args&);
  CbmService_GetDrillingRadiusParamNames_args& operator=(const CbmService_GetDrillingRadiusParamNames_args&);
  CbmService_GetDrillingRadiusParamNames_args() {
  }

  virtual ~CbmService_GetDrillingRadiusParamNames_args() throw();

  bool operator == (const CbmService_GetDrillingRadiusParamNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingRadiusParamNames_pargs {
 public:


  virtual ~CbmService_GetDrillingRadiusParamNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamNames_result__isset {
  _CbmService_GetDrillingRadiusParamNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamNames_result__isset;

class CbmService_GetDrillingRadiusParamNames_result {
 public:

  CbmService_GetDrillingRadiusParamNames_result(const CbmService_GetDrillingRadiusParamNames_result&);
  CbmService_GetDrillingRadiusParamNames_result& operator=(const CbmService_GetDrillingRadiusParamNames_result&);
  CbmService_GetDrillingRadiusParamNames_result() {
  }

  virtual ~CbmService_GetDrillingRadiusParamNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetDrillingRadiusParamNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetDrillingRadiusParamNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamNames_presult__isset {
  _CbmService_GetDrillingRadiusParamNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamNames_presult__isset;

class CbmService_GetDrillingRadiusParamNames_presult {
 public:


  virtual ~CbmService_GetDrillingRadiusParamNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetDrillingRadiusParamNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreDrillingRadiusParam_args__isset {
  _CbmService_AddMoreDrillingRadiusParam_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreDrillingRadiusParam_args__isset;

class CbmService_AddMoreDrillingRadiusParam_args {
 public:

  CbmService_AddMoreDrillingRadiusParam_args(const CbmService_AddMoreDrillingRadiusParam_args&);
  CbmService_AddMoreDrillingRadiusParam_args& operator=(const CbmService_AddMoreDrillingRadiusParam_args&);
  CbmService_AddMoreDrillingRadiusParam_args() {
  }

  virtual ~CbmService_AddMoreDrillingRadiusParam_args() throw();
  std::vector<DrillingRadiusParam>  objs;

  _CbmService_AddMoreDrillingRadiusParam_args__isset __isset;

  void __set_objs(const std::vector<DrillingRadiusParam> & val);

  bool operator == (const CbmService_AddMoreDrillingRadiusParam_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreDrillingRadiusParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDrillingRadiusParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDrillingRadiusParam_pargs {
 public:


  virtual ~CbmService_AddMoreDrillingRadiusParam_pargs() throw();
  const std::vector<DrillingRadiusParam> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDrillingRadiusParam_result {
 public:

  CbmService_AddMoreDrillingRadiusParam_result(const CbmService_AddMoreDrillingRadiusParam_result&);
  CbmService_AddMoreDrillingRadiusParam_result& operator=(const CbmService_AddMoreDrillingRadiusParam_result&);
  CbmService_AddMoreDrillingRadiusParam_result() {
  }

  virtual ~CbmService_AddMoreDrillingRadiusParam_result() throw();

  bool operator == (const CbmService_AddMoreDrillingRadiusParam_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreDrillingRadiusParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDrillingRadiusParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDrillingRadiusParam_presult {
 public:


  virtual ~CbmService_AddMoreDrillingRadiusParam_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreDrillingRadiusParam_args__isset {
  _CbmService_DeleteMoreDrillingRadiusParam_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreDrillingRadiusParam_args__isset;

class CbmService_DeleteMoreDrillingRadiusParam_args {
 public:

  CbmService_DeleteMoreDrillingRadiusParam_args(const CbmService_DeleteMoreDrillingRadiusParam_args&);
  CbmService_DeleteMoreDrillingRadiusParam_args& operator=(const CbmService_DeleteMoreDrillingRadiusParam_args&);
  CbmService_DeleteMoreDrillingRadiusParam_args() {
  }

  virtual ~CbmService_DeleteMoreDrillingRadiusParam_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreDrillingRadiusParam_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreDrillingRadiusParam_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDrillingRadiusParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDrillingRadiusParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDrillingRadiusParam_pargs {
 public:


  virtual ~CbmService_DeleteMoreDrillingRadiusParam_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDrillingRadiusParam_result {
 public:

  CbmService_DeleteMoreDrillingRadiusParam_result(const CbmService_DeleteMoreDrillingRadiusParam_result&);
  CbmService_DeleteMoreDrillingRadiusParam_result& operator=(const CbmService_DeleteMoreDrillingRadiusParam_result&);
  CbmService_DeleteMoreDrillingRadiusParam_result() {
  }

  virtual ~CbmService_DeleteMoreDrillingRadiusParam_result() throw();

  bool operator == (const CbmService_DeleteMoreDrillingRadiusParam_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDrillingRadiusParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDrillingRadiusParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDrillingRadiusParam_presult {
 public:


  virtual ~CbmService_DeleteMoreDrillingRadiusParam_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingRadiusParamByFields_args__isset {
  _CbmService_GetDrillingRadiusParamByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDrillingRadiusParamByFields_args__isset;

class CbmService_GetDrillingRadiusParamByFields_args {
 public:

  CbmService_GetDrillingRadiusParamByFields_args(const CbmService_GetDrillingRadiusParamByFields_args&);
  CbmService_GetDrillingRadiusParamByFields_args& operator=(const CbmService_GetDrillingRadiusParamByFields_args&);
  CbmService_GetDrillingRadiusParamByFields_args() {
  }

  virtual ~CbmService_GetDrillingRadiusParamByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDrillingRadiusParamByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDrillingRadiusParamByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingRadiusParamByFields_pargs {
 public:


  virtual ~CbmService_GetDrillingRadiusParamByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamByFields_result__isset {
  _CbmService_GetDrillingRadiusParamByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamByFields_result__isset;

class CbmService_GetDrillingRadiusParamByFields_result {
 public:

  CbmService_GetDrillingRadiusParamByFields_result(const CbmService_GetDrillingRadiusParamByFields_result&);
  CbmService_GetDrillingRadiusParamByFields_result& operator=(const CbmService_GetDrillingRadiusParamByFields_result&);
  CbmService_GetDrillingRadiusParamByFields_result() {
  }

  virtual ~CbmService_GetDrillingRadiusParamByFields_result() throw();
  DrillingRadiusParam success;

  _CbmService_GetDrillingRadiusParamByFields_result__isset __isset;

  void __set_success(const DrillingRadiusParam& val);

  bool operator == (const CbmService_GetDrillingRadiusParamByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamByFields_presult__isset {
  _CbmService_GetDrillingRadiusParamByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamByFields_presult__isset;

class CbmService_GetDrillingRadiusParamByFields_presult {
 public:


  virtual ~CbmService_GetDrillingRadiusParamByFields_presult() throw();
  DrillingRadiusParam* success;

  _CbmService_GetDrillingRadiusParamByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingRadiusParamByFields1_args__isset {
  _CbmService_GetDrillingRadiusParamByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDrillingRadiusParamByFields1_args__isset;

class CbmService_GetDrillingRadiusParamByFields1_args {
 public:

  CbmService_GetDrillingRadiusParamByFields1_args(const CbmService_GetDrillingRadiusParamByFields1_args&);
  CbmService_GetDrillingRadiusParamByFields1_args& operator=(const CbmService_GetDrillingRadiusParamByFields1_args&);
  CbmService_GetDrillingRadiusParamByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDrillingRadiusParamByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDrillingRadiusParamByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDrillingRadiusParamByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingRadiusParamByFields1_pargs {
 public:


  virtual ~CbmService_GetDrillingRadiusParamByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamByFields1_result__isset {
  _CbmService_GetDrillingRadiusParamByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamByFields1_result__isset;

class CbmService_GetDrillingRadiusParamByFields1_result {
 public:

  CbmService_GetDrillingRadiusParamByFields1_result(const CbmService_GetDrillingRadiusParamByFields1_result&);
  CbmService_GetDrillingRadiusParamByFields1_result& operator=(const CbmService_GetDrillingRadiusParamByFields1_result&);
  CbmService_GetDrillingRadiusParamByFields1_result() {
  }

  virtual ~CbmService_GetDrillingRadiusParamByFields1_result() throw();
  DrillingRadiusParam success;

  _CbmService_GetDrillingRadiusParamByFields1_result__isset __isset;

  void __set_success(const DrillingRadiusParam& val);

  bool operator == (const CbmService_GetDrillingRadiusParamByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamByFields1_presult__isset {
  _CbmService_GetDrillingRadiusParamByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamByFields1_presult__isset;

class CbmService_GetDrillingRadiusParamByFields1_presult {
 public:


  virtual ~CbmService_GetDrillingRadiusParamByFields1_presult() throw();
  DrillingRadiusParam* success;

  _CbmService_GetDrillingRadiusParamByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingRadiusParamByFields2_args__isset {
  _CbmService_GetDrillingRadiusParamByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDrillingRadiusParamByFields2_args__isset;

class CbmService_GetDrillingRadiusParamByFields2_args {
 public:

  CbmService_GetDrillingRadiusParamByFields2_args(const CbmService_GetDrillingRadiusParamByFields2_args&);
  CbmService_GetDrillingRadiusParamByFields2_args& operator=(const CbmService_GetDrillingRadiusParamByFields2_args&);
  CbmService_GetDrillingRadiusParamByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDrillingRadiusParamByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDrillingRadiusParamByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDrillingRadiusParamByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingRadiusParamByFields2_pargs {
 public:


  virtual ~CbmService_GetDrillingRadiusParamByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamByFields2_result__isset {
  _CbmService_GetDrillingRadiusParamByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamByFields2_result__isset;

class CbmService_GetDrillingRadiusParamByFields2_result {
 public:

  CbmService_GetDrillingRadiusParamByFields2_result(const CbmService_GetDrillingRadiusParamByFields2_result&);
  CbmService_GetDrillingRadiusParamByFields2_result& operator=(const CbmService_GetDrillingRadiusParamByFields2_result&);
  CbmService_GetDrillingRadiusParamByFields2_result() {
  }

  virtual ~CbmService_GetDrillingRadiusParamByFields2_result() throw();
  DrillingRadiusParam success;

  _CbmService_GetDrillingRadiusParamByFields2_result__isset __isset;

  void __set_success(const DrillingRadiusParam& val);

  bool operator == (const CbmService_GetDrillingRadiusParamByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamByFields2_presult__isset {
  _CbmService_GetDrillingRadiusParamByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamByFields2_presult__isset;

class CbmService_GetDrillingRadiusParamByFields2_presult {
 public:


  virtual ~CbmService_GetDrillingRadiusParamByFields2_presult() throw();
  DrillingRadiusParam* success;

  _CbmService_GetDrillingRadiusParamByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingRadiusParamListByFields_args__isset {
  _CbmService_GetDrillingRadiusParamListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDrillingRadiusParamListByFields_args__isset;

class CbmService_GetDrillingRadiusParamListByFields_args {
 public:

  CbmService_GetDrillingRadiusParamListByFields_args(const CbmService_GetDrillingRadiusParamListByFields_args&);
  CbmService_GetDrillingRadiusParamListByFields_args& operator=(const CbmService_GetDrillingRadiusParamListByFields_args&);
  CbmService_GetDrillingRadiusParamListByFields_args() {
  }

  virtual ~CbmService_GetDrillingRadiusParamListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDrillingRadiusParamListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDrillingRadiusParamListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingRadiusParamListByFields_pargs {
 public:


  virtual ~CbmService_GetDrillingRadiusParamListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamListByFields_result__isset {
  _CbmService_GetDrillingRadiusParamListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamListByFields_result__isset;

class CbmService_GetDrillingRadiusParamListByFields_result {
 public:

  CbmService_GetDrillingRadiusParamListByFields_result(const CbmService_GetDrillingRadiusParamListByFields_result&);
  CbmService_GetDrillingRadiusParamListByFields_result& operator=(const CbmService_GetDrillingRadiusParamListByFields_result&);
  CbmService_GetDrillingRadiusParamListByFields_result() {
  }

  virtual ~CbmService_GetDrillingRadiusParamListByFields_result() throw();
  std::vector<DrillingRadiusParam>  success;

  _CbmService_GetDrillingRadiusParamListByFields_result__isset __isset;

  void __set_success(const std::vector<DrillingRadiusParam> & val);

  bool operator == (const CbmService_GetDrillingRadiusParamListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamListByFields_presult__isset {
  _CbmService_GetDrillingRadiusParamListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamListByFields_presult__isset;

class CbmService_GetDrillingRadiusParamListByFields_presult {
 public:


  virtual ~CbmService_GetDrillingRadiusParamListByFields_presult() throw();
  std::vector<DrillingRadiusParam> * success;

  _CbmService_GetDrillingRadiusParamListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingRadiusParamListByFields1_args__isset {
  _CbmService_GetDrillingRadiusParamListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDrillingRadiusParamListByFields1_args__isset;

class CbmService_GetDrillingRadiusParamListByFields1_args {
 public:

  CbmService_GetDrillingRadiusParamListByFields1_args(const CbmService_GetDrillingRadiusParamListByFields1_args&);
  CbmService_GetDrillingRadiusParamListByFields1_args& operator=(const CbmService_GetDrillingRadiusParamListByFields1_args&);
  CbmService_GetDrillingRadiusParamListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDrillingRadiusParamListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDrillingRadiusParamListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDrillingRadiusParamListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingRadiusParamListByFields1_pargs {
 public:


  virtual ~CbmService_GetDrillingRadiusParamListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamListByFields1_result__isset {
  _CbmService_GetDrillingRadiusParamListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamListByFields1_result__isset;

class CbmService_GetDrillingRadiusParamListByFields1_result {
 public:

  CbmService_GetDrillingRadiusParamListByFields1_result(const CbmService_GetDrillingRadiusParamListByFields1_result&);
  CbmService_GetDrillingRadiusParamListByFields1_result& operator=(const CbmService_GetDrillingRadiusParamListByFields1_result&);
  CbmService_GetDrillingRadiusParamListByFields1_result() {
  }

  virtual ~CbmService_GetDrillingRadiusParamListByFields1_result() throw();
  std::vector<DrillingRadiusParam>  success;

  _CbmService_GetDrillingRadiusParamListByFields1_result__isset __isset;

  void __set_success(const std::vector<DrillingRadiusParam> & val);

  bool operator == (const CbmService_GetDrillingRadiusParamListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamListByFields1_presult__isset {
  _CbmService_GetDrillingRadiusParamListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamListByFields1_presult__isset;

class CbmService_GetDrillingRadiusParamListByFields1_presult {
 public:


  virtual ~CbmService_GetDrillingRadiusParamListByFields1_presult() throw();
  std::vector<DrillingRadiusParam> * success;

  _CbmService_GetDrillingRadiusParamListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingRadiusParamListByFields2_args__isset {
  _CbmService_GetDrillingRadiusParamListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDrillingRadiusParamListByFields2_args__isset;

class CbmService_GetDrillingRadiusParamListByFields2_args {
 public:

  CbmService_GetDrillingRadiusParamListByFields2_args(const CbmService_GetDrillingRadiusParamListByFields2_args&);
  CbmService_GetDrillingRadiusParamListByFields2_args& operator=(const CbmService_GetDrillingRadiusParamListByFields2_args&);
  CbmService_GetDrillingRadiusParamListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDrillingRadiusParamListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDrillingRadiusParamListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDrillingRadiusParamListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingRadiusParamListByFields2_pargs {
 public:


  virtual ~CbmService_GetDrillingRadiusParamListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamListByFields2_result__isset {
  _CbmService_GetDrillingRadiusParamListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamListByFields2_result__isset;

class CbmService_GetDrillingRadiusParamListByFields2_result {
 public:

  CbmService_GetDrillingRadiusParamListByFields2_result(const CbmService_GetDrillingRadiusParamListByFields2_result&);
  CbmService_GetDrillingRadiusParamListByFields2_result& operator=(const CbmService_GetDrillingRadiusParamListByFields2_result&);
  CbmService_GetDrillingRadiusParamListByFields2_result() {
  }

  virtual ~CbmService_GetDrillingRadiusParamListByFields2_result() throw();
  std::vector<DrillingRadiusParam>  success;

  _CbmService_GetDrillingRadiusParamListByFields2_result__isset __isset;

  void __set_success(const std::vector<DrillingRadiusParam> & val);

  bool operator == (const CbmService_GetDrillingRadiusParamListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingRadiusParamListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingRadiusParamListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingRadiusParamListByFields2_presult__isset {
  _CbmService_GetDrillingRadiusParamListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingRadiusParamListByFields2_presult__isset;

class CbmService_GetDrillingRadiusParamListByFields2_presult {
 public:


  virtual ~CbmService_GetDrillingRadiusParamListByFields2_presult() throw();
  std::vector<DrillingRadiusParam> * success;

  _CbmService_GetDrillingRadiusParamListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddDrillingSurf_args__isset {
  _CbmService_AddDrillingSurf_args__isset() : drilling_surf(false) {}
  bool drilling_surf :1;
} _CbmService_AddDrillingSurf_args__isset;

class CbmService_AddDrillingSurf_args {
 public:

  CbmService_AddDrillingSurf_args(const CbmService_AddDrillingSurf_args&);
  CbmService_AddDrillingSurf_args& operator=(const CbmService_AddDrillingSurf_args&);
  CbmService_AddDrillingSurf_args() {
  }

  virtual ~CbmService_AddDrillingSurf_args() throw();
  DrillingSurf drilling_surf;

  _CbmService_AddDrillingSurf_args__isset __isset;

  void __set_drilling_surf(const DrillingSurf& val);

  bool operator == (const CbmService_AddDrillingSurf_args & rhs) const
  {
    if (!(drilling_surf == rhs.drilling_surf))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDrillingSurf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDrillingSurf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddDrillingSurf_pargs {
 public:


  virtual ~CbmService_AddDrillingSurf_pargs() throw();
  const DrillingSurf* drilling_surf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDrillingSurf_result__isset {
  _CbmService_AddDrillingSurf_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDrillingSurf_result__isset;

class CbmService_AddDrillingSurf_result {
 public:

  CbmService_AddDrillingSurf_result(const CbmService_AddDrillingSurf_result&);
  CbmService_AddDrillingSurf_result& operator=(const CbmService_AddDrillingSurf_result&);
  CbmService_AddDrillingSurf_result() : success(0) {
  }

  virtual ~CbmService_AddDrillingSurf_result() throw();
  int32_t success;

  _CbmService_AddDrillingSurf_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddDrillingSurf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddDrillingSurf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddDrillingSurf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddDrillingSurf_presult__isset {
  _CbmService_AddDrillingSurf_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddDrillingSurf_presult__isset;

class CbmService_AddDrillingSurf_presult {
 public:


  virtual ~CbmService_AddDrillingSurf_presult() throw();
  int32_t* success;

  _CbmService_AddDrillingSurf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteDrillingSurf_args__isset {
  _CbmService_DeleteDrillingSurf_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteDrillingSurf_args__isset;

class CbmService_DeleteDrillingSurf_args {
 public:

  CbmService_DeleteDrillingSurf_args(const CbmService_DeleteDrillingSurf_args&);
  CbmService_DeleteDrillingSurf_args& operator=(const CbmService_DeleteDrillingSurf_args&);
  CbmService_DeleteDrillingSurf_args() : id(0) {
  }

  virtual ~CbmService_DeleteDrillingSurf_args() throw();
  int32_t id;

  _CbmService_DeleteDrillingSurf_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteDrillingSurf_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDrillingSurf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDrillingSurf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteDrillingSurf_pargs {
 public:


  virtual ~CbmService_DeleteDrillingSurf_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDrillingSurf_result__isset {
  _CbmService_DeleteDrillingSurf_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDrillingSurf_result__isset;

class CbmService_DeleteDrillingSurf_result {
 public:

  CbmService_DeleteDrillingSurf_result(const CbmService_DeleteDrillingSurf_result&);
  CbmService_DeleteDrillingSurf_result& operator=(const CbmService_DeleteDrillingSurf_result&);
  CbmService_DeleteDrillingSurf_result() : success(0) {
  }

  virtual ~CbmService_DeleteDrillingSurf_result() throw();
  bool success;

  _CbmService_DeleteDrillingSurf_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteDrillingSurf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteDrillingSurf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteDrillingSurf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteDrillingSurf_presult__isset {
  _CbmService_DeleteDrillingSurf_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteDrillingSurf_presult__isset;

class CbmService_DeleteDrillingSurf_presult {
 public:


  virtual ~CbmService_DeleteDrillingSurf_presult() throw();
  bool* success;

  _CbmService_DeleteDrillingSurf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateDrillingSurf_args__isset {
  _CbmService_UpdateDrillingSurf_args__isset() : drilling_surf(false) {}
  bool drilling_surf :1;
} _CbmService_UpdateDrillingSurf_args__isset;

class CbmService_UpdateDrillingSurf_args {
 public:

  CbmService_UpdateDrillingSurf_args(const CbmService_UpdateDrillingSurf_args&);
  CbmService_UpdateDrillingSurf_args& operator=(const CbmService_UpdateDrillingSurf_args&);
  CbmService_UpdateDrillingSurf_args() {
  }

  virtual ~CbmService_UpdateDrillingSurf_args() throw();
  DrillingSurf drilling_surf;

  _CbmService_UpdateDrillingSurf_args__isset __isset;

  void __set_drilling_surf(const DrillingSurf& val);

  bool operator == (const CbmService_UpdateDrillingSurf_args & rhs) const
  {
    if (!(drilling_surf == rhs.drilling_surf))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDrillingSurf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDrillingSurf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateDrillingSurf_pargs {
 public:


  virtual ~CbmService_UpdateDrillingSurf_pargs() throw();
  const DrillingSurf* drilling_surf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDrillingSurf_result__isset {
  _CbmService_UpdateDrillingSurf_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDrillingSurf_result__isset;

class CbmService_UpdateDrillingSurf_result {
 public:

  CbmService_UpdateDrillingSurf_result(const CbmService_UpdateDrillingSurf_result&);
  CbmService_UpdateDrillingSurf_result& operator=(const CbmService_UpdateDrillingSurf_result&);
  CbmService_UpdateDrillingSurf_result() : success(0) {
  }

  virtual ~CbmService_UpdateDrillingSurf_result() throw();
  bool success;

  _CbmService_UpdateDrillingSurf_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateDrillingSurf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateDrillingSurf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateDrillingSurf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateDrillingSurf_presult__isset {
  _CbmService_UpdateDrillingSurf_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateDrillingSurf_presult__isset;

class CbmService_UpdateDrillingSurf_presult {
 public:


  virtual ~CbmService_UpdateDrillingSurf_presult() throw();
  bool* success;

  _CbmService_UpdateDrillingSurf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingSurfById_args__isset {
  _CbmService_GetDrillingSurfById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetDrillingSurfById_args__isset;

class CbmService_GetDrillingSurfById_args {
 public:

  CbmService_GetDrillingSurfById_args(const CbmService_GetDrillingSurfById_args&);
  CbmService_GetDrillingSurfById_args& operator=(const CbmService_GetDrillingSurfById_args&);
  CbmService_GetDrillingSurfById_args() : id(0) {
  }

  virtual ~CbmService_GetDrillingSurfById_args() throw();
  int32_t id;

  _CbmService_GetDrillingSurfById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDrillingSurfById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfById_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfById_result__isset {
  _CbmService_GetDrillingSurfById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfById_result__isset;

class CbmService_GetDrillingSurfById_result {
 public:

  CbmService_GetDrillingSurfById_result(const CbmService_GetDrillingSurfById_result&);
  CbmService_GetDrillingSurfById_result& operator=(const CbmService_GetDrillingSurfById_result&);
  CbmService_GetDrillingSurfById_result() {
  }

  virtual ~CbmService_GetDrillingSurfById_result() throw();
  DrillingSurf success;

  _CbmService_GetDrillingSurfById_result__isset __isset;

  void __set_success(const DrillingSurf& val);

  bool operator == (const CbmService_GetDrillingSurfById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfById_presult__isset {
  _CbmService_GetDrillingSurfById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfById_presult__isset;

class CbmService_GetDrillingSurfById_presult {
 public:


  virtual ~CbmService_GetDrillingSurfById_presult() throw();
  DrillingSurf* success;

  _CbmService_GetDrillingSurfById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingSurfByForeignKey_args__isset {
  _CbmService_GetDrillingSurfByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetDrillingSurfByForeignKey_args__isset;

class CbmService_GetDrillingSurfByForeignKey_args {
 public:

  CbmService_GetDrillingSurfByForeignKey_args(const CbmService_GetDrillingSurfByForeignKey_args&);
  CbmService_GetDrillingSurfByForeignKey_args& operator=(const CbmService_GetDrillingSurfByForeignKey_args&);
  CbmService_GetDrillingSurfByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetDrillingSurfByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetDrillingSurfByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetDrillingSurfByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfByForeignKey_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfByForeignKey_result__isset {
  _CbmService_GetDrillingSurfByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfByForeignKey_result__isset;

class CbmService_GetDrillingSurfByForeignKey_result {
 public:

  CbmService_GetDrillingSurfByForeignKey_result(const CbmService_GetDrillingSurfByForeignKey_result&);
  CbmService_GetDrillingSurfByForeignKey_result& operator=(const CbmService_GetDrillingSurfByForeignKey_result&);
  CbmService_GetDrillingSurfByForeignKey_result() {
  }

  virtual ~CbmService_GetDrillingSurfByForeignKey_result() throw();
  DrillingSurf success;

  _CbmService_GetDrillingSurfByForeignKey_result__isset __isset;

  void __set_success(const DrillingSurf& val);

  bool operator == (const CbmService_GetDrillingSurfByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfByForeignKey_presult__isset {
  _CbmService_GetDrillingSurfByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfByForeignKey_presult__isset;

class CbmService_GetDrillingSurfByForeignKey_presult {
 public:


  virtual ~CbmService_GetDrillingSurfByForeignKey_presult() throw();
  DrillingSurf* success;

  _CbmService_GetDrillingSurfByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDrillingSurfList_args {
 public:

  CbmService_GetDrillingSurfList_args(const CbmService_GetDrillingSurfList_args&);
  CbmService_GetDrillingSurfList_args& operator=(const CbmService_GetDrillingSurfList_args&);
  CbmService_GetDrillingSurfList_args() {
  }

  virtual ~CbmService_GetDrillingSurfList_args() throw();

  bool operator == (const CbmService_GetDrillingSurfList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfList_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfList_result__isset {
  _CbmService_GetDrillingSurfList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfList_result__isset;

class CbmService_GetDrillingSurfList_result {
 public:

  CbmService_GetDrillingSurfList_result(const CbmService_GetDrillingSurfList_result&);
  CbmService_GetDrillingSurfList_result& operator=(const CbmService_GetDrillingSurfList_result&);
  CbmService_GetDrillingSurfList_result() {
  }

  virtual ~CbmService_GetDrillingSurfList_result() throw();
  std::vector<DrillingSurf>  success;

  _CbmService_GetDrillingSurfList_result__isset __isset;

  void __set_success(const std::vector<DrillingSurf> & val);

  bool operator == (const CbmService_GetDrillingSurfList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfList_presult__isset {
  _CbmService_GetDrillingSurfList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfList_presult__isset;

class CbmService_GetDrillingSurfList_presult {
 public:


  virtual ~CbmService_GetDrillingSurfList_presult() throw();
  std::vector<DrillingSurf> * success;

  _CbmService_GetDrillingSurfList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDrillingSurfIds_args {
 public:

  CbmService_GetDrillingSurfIds_args(const CbmService_GetDrillingSurfIds_args&);
  CbmService_GetDrillingSurfIds_args& operator=(const CbmService_GetDrillingSurfIds_args&);
  CbmService_GetDrillingSurfIds_args() {
  }

  virtual ~CbmService_GetDrillingSurfIds_args() throw();

  bool operator == (const CbmService_GetDrillingSurfIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfIds_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfIds_result__isset {
  _CbmService_GetDrillingSurfIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfIds_result__isset;

class CbmService_GetDrillingSurfIds_result {
 public:

  CbmService_GetDrillingSurfIds_result(const CbmService_GetDrillingSurfIds_result&);
  CbmService_GetDrillingSurfIds_result& operator=(const CbmService_GetDrillingSurfIds_result&);
  CbmService_GetDrillingSurfIds_result() {
  }

  virtual ~CbmService_GetDrillingSurfIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetDrillingSurfIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetDrillingSurfIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfIds_presult__isset {
  _CbmService_GetDrillingSurfIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfIds_presult__isset;

class CbmService_GetDrillingSurfIds_presult {
 public:


  virtual ~CbmService_GetDrillingSurfIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetDrillingSurfIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetDrillingSurfNames_args {
 public:

  CbmService_GetDrillingSurfNames_args(const CbmService_GetDrillingSurfNames_args&);
  CbmService_GetDrillingSurfNames_args& operator=(const CbmService_GetDrillingSurfNames_args&);
  CbmService_GetDrillingSurfNames_args() {
  }

  virtual ~CbmService_GetDrillingSurfNames_args() throw();

  bool operator == (const CbmService_GetDrillingSurfNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfNames_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfNames_result__isset {
  _CbmService_GetDrillingSurfNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfNames_result__isset;

class CbmService_GetDrillingSurfNames_result {
 public:

  CbmService_GetDrillingSurfNames_result(const CbmService_GetDrillingSurfNames_result&);
  CbmService_GetDrillingSurfNames_result& operator=(const CbmService_GetDrillingSurfNames_result&);
  CbmService_GetDrillingSurfNames_result() {
  }

  virtual ~CbmService_GetDrillingSurfNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetDrillingSurfNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetDrillingSurfNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfNames_presult__isset {
  _CbmService_GetDrillingSurfNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfNames_presult__isset;

class CbmService_GetDrillingSurfNames_presult {
 public:


  virtual ~CbmService_GetDrillingSurfNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetDrillingSurfNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreDrillingSurf_args__isset {
  _CbmService_AddMoreDrillingSurf_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreDrillingSurf_args__isset;

class CbmService_AddMoreDrillingSurf_args {
 public:

  CbmService_AddMoreDrillingSurf_args(const CbmService_AddMoreDrillingSurf_args&);
  CbmService_AddMoreDrillingSurf_args& operator=(const CbmService_AddMoreDrillingSurf_args&);
  CbmService_AddMoreDrillingSurf_args() {
  }

  virtual ~CbmService_AddMoreDrillingSurf_args() throw();
  std::vector<DrillingSurf>  objs;

  _CbmService_AddMoreDrillingSurf_args__isset __isset;

  void __set_objs(const std::vector<DrillingSurf> & val);

  bool operator == (const CbmService_AddMoreDrillingSurf_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreDrillingSurf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDrillingSurf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDrillingSurf_pargs {
 public:


  virtual ~CbmService_AddMoreDrillingSurf_pargs() throw();
  const std::vector<DrillingSurf> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDrillingSurf_result {
 public:

  CbmService_AddMoreDrillingSurf_result(const CbmService_AddMoreDrillingSurf_result&);
  CbmService_AddMoreDrillingSurf_result& operator=(const CbmService_AddMoreDrillingSurf_result&);
  CbmService_AddMoreDrillingSurf_result() {
  }

  virtual ~CbmService_AddMoreDrillingSurf_result() throw();

  bool operator == (const CbmService_AddMoreDrillingSurf_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreDrillingSurf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreDrillingSurf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreDrillingSurf_presult {
 public:


  virtual ~CbmService_AddMoreDrillingSurf_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreDrillingSurf_args__isset {
  _CbmService_DeleteMoreDrillingSurf_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreDrillingSurf_args__isset;

class CbmService_DeleteMoreDrillingSurf_args {
 public:

  CbmService_DeleteMoreDrillingSurf_args(const CbmService_DeleteMoreDrillingSurf_args&);
  CbmService_DeleteMoreDrillingSurf_args& operator=(const CbmService_DeleteMoreDrillingSurf_args&);
  CbmService_DeleteMoreDrillingSurf_args() {
  }

  virtual ~CbmService_DeleteMoreDrillingSurf_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreDrillingSurf_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreDrillingSurf_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDrillingSurf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDrillingSurf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDrillingSurf_pargs {
 public:


  virtual ~CbmService_DeleteMoreDrillingSurf_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDrillingSurf_result {
 public:

  CbmService_DeleteMoreDrillingSurf_result(const CbmService_DeleteMoreDrillingSurf_result&);
  CbmService_DeleteMoreDrillingSurf_result& operator=(const CbmService_DeleteMoreDrillingSurf_result&);
  CbmService_DeleteMoreDrillingSurf_result() {
  }

  virtual ~CbmService_DeleteMoreDrillingSurf_result() throw();

  bool operator == (const CbmService_DeleteMoreDrillingSurf_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreDrillingSurf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreDrillingSurf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreDrillingSurf_presult {
 public:


  virtual ~CbmService_DeleteMoreDrillingSurf_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingSurfByFields_args__isset {
  _CbmService_GetDrillingSurfByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDrillingSurfByFields_args__isset;

class CbmService_GetDrillingSurfByFields_args {
 public:

  CbmService_GetDrillingSurfByFields_args(const CbmService_GetDrillingSurfByFields_args&);
  CbmService_GetDrillingSurfByFields_args& operator=(const CbmService_GetDrillingSurfByFields_args&);
  CbmService_GetDrillingSurfByFields_args() {
  }

  virtual ~CbmService_GetDrillingSurfByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDrillingSurfByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDrillingSurfByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfByFields_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfByFields_result__isset {
  _CbmService_GetDrillingSurfByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfByFields_result__isset;

class CbmService_GetDrillingSurfByFields_result {
 public:

  CbmService_GetDrillingSurfByFields_result(const CbmService_GetDrillingSurfByFields_result&);
  CbmService_GetDrillingSurfByFields_result& operator=(const CbmService_GetDrillingSurfByFields_result&);
  CbmService_GetDrillingSurfByFields_result() {
  }

  virtual ~CbmService_GetDrillingSurfByFields_result() throw();
  DrillingSurf success;

  _CbmService_GetDrillingSurfByFields_result__isset __isset;

  void __set_success(const DrillingSurf& val);

  bool operator == (const CbmService_GetDrillingSurfByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfByFields_presult__isset {
  _CbmService_GetDrillingSurfByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfByFields_presult__isset;

class CbmService_GetDrillingSurfByFields_presult {
 public:


  virtual ~CbmService_GetDrillingSurfByFields_presult() throw();
  DrillingSurf* success;

  _CbmService_GetDrillingSurfByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingSurfByFields1_args__isset {
  _CbmService_GetDrillingSurfByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDrillingSurfByFields1_args__isset;

class CbmService_GetDrillingSurfByFields1_args {
 public:

  CbmService_GetDrillingSurfByFields1_args(const CbmService_GetDrillingSurfByFields1_args&);
  CbmService_GetDrillingSurfByFields1_args& operator=(const CbmService_GetDrillingSurfByFields1_args&);
  CbmService_GetDrillingSurfByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDrillingSurfByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDrillingSurfByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDrillingSurfByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfByFields1_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfByFields1_result__isset {
  _CbmService_GetDrillingSurfByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfByFields1_result__isset;

class CbmService_GetDrillingSurfByFields1_result {
 public:

  CbmService_GetDrillingSurfByFields1_result(const CbmService_GetDrillingSurfByFields1_result&);
  CbmService_GetDrillingSurfByFields1_result& operator=(const CbmService_GetDrillingSurfByFields1_result&);
  CbmService_GetDrillingSurfByFields1_result() {
  }

  virtual ~CbmService_GetDrillingSurfByFields1_result() throw();
  DrillingSurf success;

  _CbmService_GetDrillingSurfByFields1_result__isset __isset;

  void __set_success(const DrillingSurf& val);

  bool operator == (const CbmService_GetDrillingSurfByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfByFields1_presult__isset {
  _CbmService_GetDrillingSurfByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfByFields1_presult__isset;

class CbmService_GetDrillingSurfByFields1_presult {
 public:


  virtual ~CbmService_GetDrillingSurfByFields1_presult() throw();
  DrillingSurf* success;

  _CbmService_GetDrillingSurfByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingSurfByFields2_args__isset {
  _CbmService_GetDrillingSurfByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDrillingSurfByFields2_args__isset;

class CbmService_GetDrillingSurfByFields2_args {
 public:

  CbmService_GetDrillingSurfByFields2_args(const CbmService_GetDrillingSurfByFields2_args&);
  CbmService_GetDrillingSurfByFields2_args& operator=(const CbmService_GetDrillingSurfByFields2_args&);
  CbmService_GetDrillingSurfByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDrillingSurfByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDrillingSurfByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDrillingSurfByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfByFields2_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfByFields2_result__isset {
  _CbmService_GetDrillingSurfByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfByFields2_result__isset;

class CbmService_GetDrillingSurfByFields2_result {
 public:

  CbmService_GetDrillingSurfByFields2_result(const CbmService_GetDrillingSurfByFields2_result&);
  CbmService_GetDrillingSurfByFields2_result& operator=(const CbmService_GetDrillingSurfByFields2_result&);
  CbmService_GetDrillingSurfByFields2_result() {
  }

  virtual ~CbmService_GetDrillingSurfByFields2_result() throw();
  DrillingSurf success;

  _CbmService_GetDrillingSurfByFields2_result__isset __isset;

  void __set_success(const DrillingSurf& val);

  bool operator == (const CbmService_GetDrillingSurfByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfByFields2_presult__isset {
  _CbmService_GetDrillingSurfByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfByFields2_presult__isset;

class CbmService_GetDrillingSurfByFields2_presult {
 public:


  virtual ~CbmService_GetDrillingSurfByFields2_presult() throw();
  DrillingSurf* success;

  _CbmService_GetDrillingSurfByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingSurfListByFields_args__isset {
  _CbmService_GetDrillingSurfListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetDrillingSurfListByFields_args__isset;

class CbmService_GetDrillingSurfListByFields_args {
 public:

  CbmService_GetDrillingSurfListByFields_args(const CbmService_GetDrillingSurfListByFields_args&);
  CbmService_GetDrillingSurfListByFields_args& operator=(const CbmService_GetDrillingSurfListByFields_args&);
  CbmService_GetDrillingSurfListByFields_args() {
  }

  virtual ~CbmService_GetDrillingSurfListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetDrillingSurfListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetDrillingSurfListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfListByFields_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfListByFields_result__isset {
  _CbmService_GetDrillingSurfListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfListByFields_result__isset;

class CbmService_GetDrillingSurfListByFields_result {
 public:

  CbmService_GetDrillingSurfListByFields_result(const CbmService_GetDrillingSurfListByFields_result&);
  CbmService_GetDrillingSurfListByFields_result& operator=(const CbmService_GetDrillingSurfListByFields_result&);
  CbmService_GetDrillingSurfListByFields_result() {
  }

  virtual ~CbmService_GetDrillingSurfListByFields_result() throw();
  std::vector<DrillingSurf>  success;

  _CbmService_GetDrillingSurfListByFields_result__isset __isset;

  void __set_success(const std::vector<DrillingSurf> & val);

  bool operator == (const CbmService_GetDrillingSurfListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfListByFields_presult__isset {
  _CbmService_GetDrillingSurfListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfListByFields_presult__isset;

class CbmService_GetDrillingSurfListByFields_presult {
 public:


  virtual ~CbmService_GetDrillingSurfListByFields_presult() throw();
  std::vector<DrillingSurf> * success;

  _CbmService_GetDrillingSurfListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingSurfListByFields1_args__isset {
  _CbmService_GetDrillingSurfListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetDrillingSurfListByFields1_args__isset;

class CbmService_GetDrillingSurfListByFields1_args {
 public:

  CbmService_GetDrillingSurfListByFields1_args(const CbmService_GetDrillingSurfListByFields1_args&);
  CbmService_GetDrillingSurfListByFields1_args& operator=(const CbmService_GetDrillingSurfListByFields1_args&);
  CbmService_GetDrillingSurfListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetDrillingSurfListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetDrillingSurfListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetDrillingSurfListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfListByFields1_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfListByFields1_result__isset {
  _CbmService_GetDrillingSurfListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfListByFields1_result__isset;

class CbmService_GetDrillingSurfListByFields1_result {
 public:

  CbmService_GetDrillingSurfListByFields1_result(const CbmService_GetDrillingSurfListByFields1_result&);
  CbmService_GetDrillingSurfListByFields1_result& operator=(const CbmService_GetDrillingSurfListByFields1_result&);
  CbmService_GetDrillingSurfListByFields1_result() {
  }

  virtual ~CbmService_GetDrillingSurfListByFields1_result() throw();
  std::vector<DrillingSurf>  success;

  _CbmService_GetDrillingSurfListByFields1_result__isset __isset;

  void __set_success(const std::vector<DrillingSurf> & val);

  bool operator == (const CbmService_GetDrillingSurfListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfListByFields1_presult__isset {
  _CbmService_GetDrillingSurfListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfListByFields1_presult__isset;

class CbmService_GetDrillingSurfListByFields1_presult {
 public:


  virtual ~CbmService_GetDrillingSurfListByFields1_presult() throw();
  std::vector<DrillingSurf> * success;

  _CbmService_GetDrillingSurfListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingSurfListByFields2_args__isset {
  _CbmService_GetDrillingSurfListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetDrillingSurfListByFields2_args__isset;

class CbmService_GetDrillingSurfListByFields2_args {
 public:

  CbmService_GetDrillingSurfListByFields2_args(const CbmService_GetDrillingSurfListByFields2_args&);
  CbmService_GetDrillingSurfListByFields2_args& operator=(const CbmService_GetDrillingSurfListByFields2_args&);
  CbmService_GetDrillingSurfListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetDrillingSurfListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetDrillingSurfListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetDrillingSurfListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfListByFields2_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfListByFields2_result__isset {
  _CbmService_GetDrillingSurfListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfListByFields2_result__isset;

class CbmService_GetDrillingSurfListByFields2_result {
 public:

  CbmService_GetDrillingSurfListByFields2_result(const CbmService_GetDrillingSurfListByFields2_result&);
  CbmService_GetDrillingSurfListByFields2_result& operator=(const CbmService_GetDrillingSurfListByFields2_result&);
  CbmService_GetDrillingSurfListByFields2_result() {
  }

  virtual ~CbmService_GetDrillingSurfListByFields2_result() throw();
  std::vector<DrillingSurf>  success;

  _CbmService_GetDrillingSurfListByFields2_result__isset __isset;

  void __set_success(const std::vector<DrillingSurf> & val);

  bool operator == (const CbmService_GetDrillingSurfListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfListByFields2_presult__isset {
  _CbmService_GetDrillingSurfListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfListByFields2_presult__isset;

class CbmService_GetDrillingSurfListByFields2_presult {
 public:


  virtual ~CbmService_GetDrillingSurfListByFields2_presult() throw();
  std::vector<DrillingSurf> * success;

  _CbmService_GetDrillingSurfListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddEvalUnit_args__isset {
  _CbmService_AddEvalUnit_args__isset() : eval_unit(false) {}
  bool eval_unit :1;
} _CbmService_AddEvalUnit_args__isset;

class CbmService_AddEvalUnit_args {
 public:

  CbmService_AddEvalUnit_args(const CbmService_AddEvalUnit_args&);
  CbmService_AddEvalUnit_args& operator=(const CbmService_AddEvalUnit_args&);
  CbmService_AddEvalUnit_args() {
  }

  virtual ~CbmService_AddEvalUnit_args() throw();
  EvalUnit eval_unit;

  _CbmService_AddEvalUnit_args__isset __isset;

  void __set_eval_unit(const EvalUnit& val);

  bool operator == (const CbmService_AddEvalUnit_args & rhs) const
  {
    if (!(eval_unit == rhs.eval_unit))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddEvalUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddEvalUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddEvalUnit_pargs {
 public:


  virtual ~CbmService_AddEvalUnit_pargs() throw();
  const EvalUnit* eval_unit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddEvalUnit_result__isset {
  _CbmService_AddEvalUnit_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddEvalUnit_result__isset;

class CbmService_AddEvalUnit_result {
 public:

  CbmService_AddEvalUnit_result(const CbmService_AddEvalUnit_result&);
  CbmService_AddEvalUnit_result& operator=(const CbmService_AddEvalUnit_result&);
  CbmService_AddEvalUnit_result() : success(0) {
  }

  virtual ~CbmService_AddEvalUnit_result() throw();
  int32_t success;

  _CbmService_AddEvalUnit_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddEvalUnit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddEvalUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddEvalUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddEvalUnit_presult__isset {
  _CbmService_AddEvalUnit_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddEvalUnit_presult__isset;

class CbmService_AddEvalUnit_presult {
 public:


  virtual ~CbmService_AddEvalUnit_presult() throw();
  int32_t* success;

  _CbmService_AddEvalUnit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteEvalUnit_args__isset {
  _CbmService_DeleteEvalUnit_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteEvalUnit_args__isset;

class CbmService_DeleteEvalUnit_args {
 public:

  CbmService_DeleteEvalUnit_args(const CbmService_DeleteEvalUnit_args&);
  CbmService_DeleteEvalUnit_args& operator=(const CbmService_DeleteEvalUnit_args&);
  CbmService_DeleteEvalUnit_args() : id(0) {
  }

  virtual ~CbmService_DeleteEvalUnit_args() throw();
  int32_t id;

  _CbmService_DeleteEvalUnit_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteEvalUnit_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteEvalUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteEvalUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteEvalUnit_pargs {
 public:


  virtual ~CbmService_DeleteEvalUnit_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteEvalUnit_result__isset {
  _CbmService_DeleteEvalUnit_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteEvalUnit_result__isset;

class CbmService_DeleteEvalUnit_result {
 public:

  CbmService_DeleteEvalUnit_result(const CbmService_DeleteEvalUnit_result&);
  CbmService_DeleteEvalUnit_result& operator=(const CbmService_DeleteEvalUnit_result&);
  CbmService_DeleteEvalUnit_result() : success(0) {
  }

  virtual ~CbmService_DeleteEvalUnit_result() throw();
  bool success;

  _CbmService_DeleteEvalUnit_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteEvalUnit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteEvalUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteEvalUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteEvalUnit_presult__isset {
  _CbmService_DeleteEvalUnit_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteEvalUnit_presult__isset;

class CbmService_DeleteEvalUnit_presult {
 public:


  virtual ~CbmService_DeleteEvalUnit_presult() throw();
  bool* success;

  _CbmService_DeleteEvalUnit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateEvalUnit_args__isset {
  _CbmService_UpdateEvalUnit_args__isset() : eval_unit(false) {}
  bool eval_unit :1;
} _CbmService_UpdateEvalUnit_args__isset;

class CbmService_UpdateEvalUnit_args {
 public:

  CbmService_UpdateEvalUnit_args(const CbmService_UpdateEvalUnit_args&);
  CbmService_UpdateEvalUnit_args& operator=(const CbmService_UpdateEvalUnit_args&);
  CbmService_UpdateEvalUnit_args() {
  }

  virtual ~CbmService_UpdateEvalUnit_args() throw();
  EvalUnit eval_unit;

  _CbmService_UpdateEvalUnit_args__isset __isset;

  void __set_eval_unit(const EvalUnit& val);

  bool operator == (const CbmService_UpdateEvalUnit_args & rhs) const
  {
    if (!(eval_unit == rhs.eval_unit))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateEvalUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateEvalUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateEvalUnit_pargs {
 public:


  virtual ~CbmService_UpdateEvalUnit_pargs() throw();
  const EvalUnit* eval_unit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateEvalUnit_result__isset {
  _CbmService_UpdateEvalUnit_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateEvalUnit_result__isset;

class CbmService_UpdateEvalUnit_result {
 public:

  CbmService_UpdateEvalUnit_result(const CbmService_UpdateEvalUnit_result&);
  CbmService_UpdateEvalUnit_result& operator=(const CbmService_UpdateEvalUnit_result&);
  CbmService_UpdateEvalUnit_result() : success(0) {
  }

  virtual ~CbmService_UpdateEvalUnit_result() throw();
  bool success;

  _CbmService_UpdateEvalUnit_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateEvalUnit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateEvalUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateEvalUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateEvalUnit_presult__isset {
  _CbmService_UpdateEvalUnit_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateEvalUnit_presult__isset;

class CbmService_UpdateEvalUnit_presult {
 public:


  virtual ~CbmService_UpdateEvalUnit_presult() throw();
  bool* success;

  _CbmService_UpdateEvalUnit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetEvalUnitById_args__isset {
  _CbmService_GetEvalUnitById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetEvalUnitById_args__isset;

class CbmService_GetEvalUnitById_args {
 public:

  CbmService_GetEvalUnitById_args(const CbmService_GetEvalUnitById_args&);
  CbmService_GetEvalUnitById_args& operator=(const CbmService_GetEvalUnitById_args&);
  CbmService_GetEvalUnitById_args() : id(0) {
  }

  virtual ~CbmService_GetEvalUnitById_args() throw();
  int32_t id;

  _CbmService_GetEvalUnitById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetEvalUnitById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetEvalUnitById_pargs {
 public:


  virtual ~CbmService_GetEvalUnitById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitById_result__isset {
  _CbmService_GetEvalUnitById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitById_result__isset;

class CbmService_GetEvalUnitById_result {
 public:

  CbmService_GetEvalUnitById_result(const CbmService_GetEvalUnitById_result&);
  CbmService_GetEvalUnitById_result& operator=(const CbmService_GetEvalUnitById_result&);
  CbmService_GetEvalUnitById_result() {
  }

  virtual ~CbmService_GetEvalUnitById_result() throw();
  EvalUnit success;

  _CbmService_GetEvalUnitById_result__isset __isset;

  void __set_success(const EvalUnit& val);

  bool operator == (const CbmService_GetEvalUnitById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitById_presult__isset {
  _CbmService_GetEvalUnitById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitById_presult__isset;

class CbmService_GetEvalUnitById_presult {
 public:


  virtual ~CbmService_GetEvalUnitById_presult() throw();
  EvalUnit* success;

  _CbmService_GetEvalUnitById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetEvalUnitByForeignKey_args__isset {
  _CbmService_GetEvalUnitByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetEvalUnitByForeignKey_args__isset;

class CbmService_GetEvalUnitByForeignKey_args {
 public:

  CbmService_GetEvalUnitByForeignKey_args(const CbmService_GetEvalUnitByForeignKey_args&);
  CbmService_GetEvalUnitByForeignKey_args& operator=(const CbmService_GetEvalUnitByForeignKey_args&);
  CbmService_GetEvalUnitByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetEvalUnitByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetEvalUnitByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetEvalUnitByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetEvalUnitByForeignKey_pargs {
 public:


  virtual ~CbmService_GetEvalUnitByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitByForeignKey_result__isset {
  _CbmService_GetEvalUnitByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitByForeignKey_result__isset;

class CbmService_GetEvalUnitByForeignKey_result {
 public:

  CbmService_GetEvalUnitByForeignKey_result(const CbmService_GetEvalUnitByForeignKey_result&);
  CbmService_GetEvalUnitByForeignKey_result& operator=(const CbmService_GetEvalUnitByForeignKey_result&);
  CbmService_GetEvalUnitByForeignKey_result() {
  }

  virtual ~CbmService_GetEvalUnitByForeignKey_result() throw();
  EvalUnit success;

  _CbmService_GetEvalUnitByForeignKey_result__isset __isset;

  void __set_success(const EvalUnit& val);

  bool operator == (const CbmService_GetEvalUnitByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitByForeignKey_presult__isset {
  _CbmService_GetEvalUnitByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitByForeignKey_presult__isset;

class CbmService_GetEvalUnitByForeignKey_presult {
 public:


  virtual ~CbmService_GetEvalUnitByForeignKey_presult() throw();
  EvalUnit* success;

  _CbmService_GetEvalUnitByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetEvalUnitList_args {
 public:

  CbmService_GetEvalUnitList_args(const CbmService_GetEvalUnitList_args&);
  CbmService_GetEvalUnitList_args& operator=(const CbmService_GetEvalUnitList_args&);
  CbmService_GetEvalUnitList_args() {
  }

  virtual ~CbmService_GetEvalUnitList_args() throw();

  bool operator == (const CbmService_GetEvalUnitList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetEvalUnitList_pargs {
 public:


  virtual ~CbmService_GetEvalUnitList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitList_result__isset {
  _CbmService_GetEvalUnitList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitList_result__isset;

class CbmService_GetEvalUnitList_result {
 public:

  CbmService_GetEvalUnitList_result(const CbmService_GetEvalUnitList_result&);
  CbmService_GetEvalUnitList_result& operator=(const CbmService_GetEvalUnitList_result&);
  CbmService_GetEvalUnitList_result() {
  }

  virtual ~CbmService_GetEvalUnitList_result() throw();
  std::vector<EvalUnit>  success;

  _CbmService_GetEvalUnitList_result__isset __isset;

  void __set_success(const std::vector<EvalUnit> & val);

  bool operator == (const CbmService_GetEvalUnitList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitList_presult__isset {
  _CbmService_GetEvalUnitList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitList_presult__isset;

class CbmService_GetEvalUnitList_presult {
 public:


  virtual ~CbmService_GetEvalUnitList_presult() throw();
  std::vector<EvalUnit> * success;

  _CbmService_GetEvalUnitList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetEvalUnitIds_args {
 public:

  CbmService_GetEvalUnitIds_args(const CbmService_GetEvalUnitIds_args&);
  CbmService_GetEvalUnitIds_args& operator=(const CbmService_GetEvalUnitIds_args&);
  CbmService_GetEvalUnitIds_args() {
  }

  virtual ~CbmService_GetEvalUnitIds_args() throw();

  bool operator == (const CbmService_GetEvalUnitIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetEvalUnitIds_pargs {
 public:


  virtual ~CbmService_GetEvalUnitIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitIds_result__isset {
  _CbmService_GetEvalUnitIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitIds_result__isset;

class CbmService_GetEvalUnitIds_result {
 public:

  CbmService_GetEvalUnitIds_result(const CbmService_GetEvalUnitIds_result&);
  CbmService_GetEvalUnitIds_result& operator=(const CbmService_GetEvalUnitIds_result&);
  CbmService_GetEvalUnitIds_result() {
  }

  virtual ~CbmService_GetEvalUnitIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetEvalUnitIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetEvalUnitIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitIds_presult__isset {
  _CbmService_GetEvalUnitIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitIds_presult__isset;

class CbmService_GetEvalUnitIds_presult {
 public:


  virtual ~CbmService_GetEvalUnitIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetEvalUnitIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetEvalUnitNames_args {
 public:

  CbmService_GetEvalUnitNames_args(const CbmService_GetEvalUnitNames_args&);
  CbmService_GetEvalUnitNames_args& operator=(const CbmService_GetEvalUnitNames_args&);
  CbmService_GetEvalUnitNames_args() {
  }

  virtual ~CbmService_GetEvalUnitNames_args() throw();

  bool operator == (const CbmService_GetEvalUnitNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetEvalUnitNames_pargs {
 public:


  virtual ~CbmService_GetEvalUnitNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitNames_result__isset {
  _CbmService_GetEvalUnitNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitNames_result__isset;

class CbmService_GetEvalUnitNames_result {
 public:

  CbmService_GetEvalUnitNames_result(const CbmService_GetEvalUnitNames_result&);
  CbmService_GetEvalUnitNames_result& operator=(const CbmService_GetEvalUnitNames_result&);
  CbmService_GetEvalUnitNames_result() {
  }

  virtual ~CbmService_GetEvalUnitNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetEvalUnitNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetEvalUnitNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitNames_presult__isset {
  _CbmService_GetEvalUnitNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitNames_presult__isset;

class CbmService_GetEvalUnitNames_presult {
 public:


  virtual ~CbmService_GetEvalUnitNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetEvalUnitNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreEvalUnit_args__isset {
  _CbmService_AddMoreEvalUnit_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreEvalUnit_args__isset;

class CbmService_AddMoreEvalUnit_args {
 public:

  CbmService_AddMoreEvalUnit_args(const CbmService_AddMoreEvalUnit_args&);
  CbmService_AddMoreEvalUnit_args& operator=(const CbmService_AddMoreEvalUnit_args&);
  CbmService_AddMoreEvalUnit_args() {
  }

  virtual ~CbmService_AddMoreEvalUnit_args() throw();
  std::vector<EvalUnit>  objs;

  _CbmService_AddMoreEvalUnit_args__isset __isset;

  void __set_objs(const std::vector<EvalUnit> & val);

  bool operator == (const CbmService_AddMoreEvalUnit_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreEvalUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreEvalUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreEvalUnit_pargs {
 public:


  virtual ~CbmService_AddMoreEvalUnit_pargs() throw();
  const std::vector<EvalUnit> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreEvalUnit_result {
 public:

  CbmService_AddMoreEvalUnit_result(const CbmService_AddMoreEvalUnit_result&);
  CbmService_AddMoreEvalUnit_result& operator=(const CbmService_AddMoreEvalUnit_result&);
  CbmService_AddMoreEvalUnit_result() {
  }

  virtual ~CbmService_AddMoreEvalUnit_result() throw();

  bool operator == (const CbmService_AddMoreEvalUnit_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreEvalUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreEvalUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreEvalUnit_presult {
 public:


  virtual ~CbmService_AddMoreEvalUnit_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreEvalUnit_args__isset {
  _CbmService_DeleteMoreEvalUnit_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreEvalUnit_args__isset;

class CbmService_DeleteMoreEvalUnit_args {
 public:

  CbmService_DeleteMoreEvalUnit_args(const CbmService_DeleteMoreEvalUnit_args&);
  CbmService_DeleteMoreEvalUnit_args& operator=(const CbmService_DeleteMoreEvalUnit_args&);
  CbmService_DeleteMoreEvalUnit_args() {
  }

  virtual ~CbmService_DeleteMoreEvalUnit_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreEvalUnit_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreEvalUnit_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreEvalUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreEvalUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreEvalUnit_pargs {
 public:


  virtual ~CbmService_DeleteMoreEvalUnit_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreEvalUnit_result {
 public:

  CbmService_DeleteMoreEvalUnit_result(const CbmService_DeleteMoreEvalUnit_result&);
  CbmService_DeleteMoreEvalUnit_result& operator=(const CbmService_DeleteMoreEvalUnit_result&);
  CbmService_DeleteMoreEvalUnit_result() {
  }

  virtual ~CbmService_DeleteMoreEvalUnit_result() throw();

  bool operator == (const CbmService_DeleteMoreEvalUnit_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreEvalUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreEvalUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreEvalUnit_presult {
 public:


  virtual ~CbmService_DeleteMoreEvalUnit_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetEvalUnitByFields_args__isset {
  _CbmService_GetEvalUnitByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetEvalUnitByFields_args__isset;

class CbmService_GetEvalUnitByFields_args {
 public:

  CbmService_GetEvalUnitByFields_args(const CbmService_GetEvalUnitByFields_args&);
  CbmService_GetEvalUnitByFields_args& operator=(const CbmService_GetEvalUnitByFields_args&);
  CbmService_GetEvalUnitByFields_args() {
  }

  virtual ~CbmService_GetEvalUnitByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetEvalUnitByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetEvalUnitByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetEvalUnitByFields_pargs {
 public:


  virtual ~CbmService_GetEvalUnitByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitByFields_result__isset {
  _CbmService_GetEvalUnitByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitByFields_result__isset;

class CbmService_GetEvalUnitByFields_result {
 public:

  CbmService_GetEvalUnitByFields_result(const CbmService_GetEvalUnitByFields_result&);
  CbmService_GetEvalUnitByFields_result& operator=(const CbmService_GetEvalUnitByFields_result&);
  CbmService_GetEvalUnitByFields_result() {
  }

  virtual ~CbmService_GetEvalUnitByFields_result() throw();
  EvalUnit success;

  _CbmService_GetEvalUnitByFields_result__isset __isset;

  void __set_success(const EvalUnit& val);

  bool operator == (const CbmService_GetEvalUnitByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitByFields_presult__isset {
  _CbmService_GetEvalUnitByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitByFields_presult__isset;

class CbmService_GetEvalUnitByFields_presult {
 public:


  virtual ~CbmService_GetEvalUnitByFields_presult() throw();
  EvalUnit* success;

  _CbmService_GetEvalUnitByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetEvalUnitByFields1_args__isset {
  _CbmService_GetEvalUnitByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetEvalUnitByFields1_args__isset;

class CbmService_GetEvalUnitByFields1_args {
 public:

  CbmService_GetEvalUnitByFields1_args(const CbmService_GetEvalUnitByFields1_args&);
  CbmService_GetEvalUnitByFields1_args& operator=(const CbmService_GetEvalUnitByFields1_args&);
  CbmService_GetEvalUnitByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetEvalUnitByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetEvalUnitByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetEvalUnitByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetEvalUnitByFields1_pargs {
 public:


  virtual ~CbmService_GetEvalUnitByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitByFields1_result__isset {
  _CbmService_GetEvalUnitByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitByFields1_result__isset;

class CbmService_GetEvalUnitByFields1_result {
 public:

  CbmService_GetEvalUnitByFields1_result(const CbmService_GetEvalUnitByFields1_result&);
  CbmService_GetEvalUnitByFields1_result& operator=(const CbmService_GetEvalUnitByFields1_result&);
  CbmService_GetEvalUnitByFields1_result() {
  }

  virtual ~CbmService_GetEvalUnitByFields1_result() throw();
  EvalUnit success;

  _CbmService_GetEvalUnitByFields1_result__isset __isset;

  void __set_success(const EvalUnit& val);

  bool operator == (const CbmService_GetEvalUnitByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitByFields1_presult__isset {
  _CbmService_GetEvalUnitByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitByFields1_presult__isset;

class CbmService_GetEvalUnitByFields1_presult {
 public:


  virtual ~CbmService_GetEvalUnitByFields1_presult() throw();
  EvalUnit* success;

  _CbmService_GetEvalUnitByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetEvalUnitByFields2_args__isset {
  _CbmService_GetEvalUnitByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetEvalUnitByFields2_args__isset;

class CbmService_GetEvalUnitByFields2_args {
 public:

  CbmService_GetEvalUnitByFields2_args(const CbmService_GetEvalUnitByFields2_args&);
  CbmService_GetEvalUnitByFields2_args& operator=(const CbmService_GetEvalUnitByFields2_args&);
  CbmService_GetEvalUnitByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetEvalUnitByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetEvalUnitByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetEvalUnitByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetEvalUnitByFields2_pargs {
 public:


  virtual ~CbmService_GetEvalUnitByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitByFields2_result__isset {
  _CbmService_GetEvalUnitByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitByFields2_result__isset;

class CbmService_GetEvalUnitByFields2_result {
 public:

  CbmService_GetEvalUnitByFields2_result(const CbmService_GetEvalUnitByFields2_result&);
  CbmService_GetEvalUnitByFields2_result& operator=(const CbmService_GetEvalUnitByFields2_result&);
  CbmService_GetEvalUnitByFields2_result() {
  }

  virtual ~CbmService_GetEvalUnitByFields2_result() throw();
  EvalUnit success;

  _CbmService_GetEvalUnitByFields2_result__isset __isset;

  void __set_success(const EvalUnit& val);

  bool operator == (const CbmService_GetEvalUnitByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitByFields2_presult__isset {
  _CbmService_GetEvalUnitByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitByFields2_presult__isset;

class CbmService_GetEvalUnitByFields2_presult {
 public:


  virtual ~CbmService_GetEvalUnitByFields2_presult() throw();
  EvalUnit* success;

  _CbmService_GetEvalUnitByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetEvalUnitListByFields_args__isset {
  _CbmService_GetEvalUnitListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetEvalUnitListByFields_args__isset;

class CbmService_GetEvalUnitListByFields_args {
 public:

  CbmService_GetEvalUnitListByFields_args(const CbmService_GetEvalUnitListByFields_args&);
  CbmService_GetEvalUnitListByFields_args& operator=(const CbmService_GetEvalUnitListByFields_args&);
  CbmService_GetEvalUnitListByFields_args() {
  }

  virtual ~CbmService_GetEvalUnitListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetEvalUnitListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetEvalUnitListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetEvalUnitListByFields_pargs {
 public:


  virtual ~CbmService_GetEvalUnitListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitListByFields_result__isset {
  _CbmService_GetEvalUnitListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitListByFields_result__isset;

class CbmService_GetEvalUnitListByFields_result {
 public:

  CbmService_GetEvalUnitListByFields_result(const CbmService_GetEvalUnitListByFields_result&);
  CbmService_GetEvalUnitListByFields_result& operator=(const CbmService_GetEvalUnitListByFields_result&);
  CbmService_GetEvalUnitListByFields_result() {
  }

  virtual ~CbmService_GetEvalUnitListByFields_result() throw();
  std::vector<EvalUnit>  success;

  _CbmService_GetEvalUnitListByFields_result__isset __isset;

  void __set_success(const std::vector<EvalUnit> & val);

  bool operator == (const CbmService_GetEvalUnitListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitListByFields_presult__isset {
  _CbmService_GetEvalUnitListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitListByFields_presult__isset;

class CbmService_GetEvalUnitListByFields_presult {
 public:


  virtual ~CbmService_GetEvalUnitListByFields_presult() throw();
  std::vector<EvalUnit> * success;

  _CbmService_GetEvalUnitListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetEvalUnitListByFields1_args__isset {
  _CbmService_GetEvalUnitListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetEvalUnitListByFields1_args__isset;

class CbmService_GetEvalUnitListByFields1_args {
 public:

  CbmService_GetEvalUnitListByFields1_args(const CbmService_GetEvalUnitListByFields1_args&);
  CbmService_GetEvalUnitListByFields1_args& operator=(const CbmService_GetEvalUnitListByFields1_args&);
  CbmService_GetEvalUnitListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetEvalUnitListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetEvalUnitListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetEvalUnitListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetEvalUnitListByFields1_pargs {
 public:


  virtual ~CbmService_GetEvalUnitListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitListByFields1_result__isset {
  _CbmService_GetEvalUnitListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitListByFields1_result__isset;

class CbmService_GetEvalUnitListByFields1_result {
 public:

  CbmService_GetEvalUnitListByFields1_result(const CbmService_GetEvalUnitListByFields1_result&);
  CbmService_GetEvalUnitListByFields1_result& operator=(const CbmService_GetEvalUnitListByFields1_result&);
  CbmService_GetEvalUnitListByFields1_result() {
  }

  virtual ~CbmService_GetEvalUnitListByFields1_result() throw();
  std::vector<EvalUnit>  success;

  _CbmService_GetEvalUnitListByFields1_result__isset __isset;

  void __set_success(const std::vector<EvalUnit> & val);

  bool operator == (const CbmService_GetEvalUnitListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitListByFields1_presult__isset {
  _CbmService_GetEvalUnitListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitListByFields1_presult__isset;

class CbmService_GetEvalUnitListByFields1_presult {
 public:


  virtual ~CbmService_GetEvalUnitListByFields1_presult() throw();
  std::vector<EvalUnit> * success;

  _CbmService_GetEvalUnitListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetEvalUnitListByFields2_args__isset {
  _CbmService_GetEvalUnitListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetEvalUnitListByFields2_args__isset;

class CbmService_GetEvalUnitListByFields2_args {
 public:

  CbmService_GetEvalUnitListByFields2_args(const CbmService_GetEvalUnitListByFields2_args&);
  CbmService_GetEvalUnitListByFields2_args& operator=(const CbmService_GetEvalUnitListByFields2_args&);
  CbmService_GetEvalUnitListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetEvalUnitListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetEvalUnitListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetEvalUnitListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetEvalUnitListByFields2_pargs {
 public:


  virtual ~CbmService_GetEvalUnitListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitListByFields2_result__isset {
  _CbmService_GetEvalUnitListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitListByFields2_result__isset;

class CbmService_GetEvalUnitListByFields2_result {
 public:

  CbmService_GetEvalUnitListByFields2_result(const CbmService_GetEvalUnitListByFields2_result&);
  CbmService_GetEvalUnitListByFields2_result& operator=(const CbmService_GetEvalUnitListByFields2_result&);
  CbmService_GetEvalUnitListByFields2_result() {
  }

  virtual ~CbmService_GetEvalUnitListByFields2_result() throw();
  std::vector<EvalUnit>  success;

  _CbmService_GetEvalUnitListByFields2_result__isset __isset;

  void __set_success(const std::vector<EvalUnit> & val);

  bool operator == (const CbmService_GetEvalUnitListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetEvalUnitListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetEvalUnitListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetEvalUnitListByFields2_presult__isset {
  _CbmService_GetEvalUnitListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetEvalUnitListByFields2_presult__isset;

class CbmService_GetEvalUnitListByFields2_presult {
 public:


  virtual ~CbmService_GetEvalUnitListByFields2_presult() throw();
  std::vector<EvalUnit> * success;

  _CbmService_GetEvalUnitListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddHighDrillingPore_args__isset {
  _CbmService_AddHighDrillingPore_args__isset() : high_drilling_pore(false) {}
  bool high_drilling_pore :1;
} _CbmService_AddHighDrillingPore_args__isset;

class CbmService_AddHighDrillingPore_args {
 public:

  CbmService_AddHighDrillingPore_args(const CbmService_AddHighDrillingPore_args&);
  CbmService_AddHighDrillingPore_args& operator=(const CbmService_AddHighDrillingPore_args&);
  CbmService_AddHighDrillingPore_args() {
  }

  virtual ~CbmService_AddHighDrillingPore_args() throw();
  HighDrillingPore high_drilling_pore;

  _CbmService_AddHighDrillingPore_args__isset __isset;

  void __set_high_drilling_pore(const HighDrillingPore& val);

  bool operator == (const CbmService_AddHighDrillingPore_args & rhs) const
  {
    if (!(high_drilling_pore == rhs.high_drilling_pore))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddHighDrillingPore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddHighDrillingPore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddHighDrillingPore_pargs {
 public:


  virtual ~CbmService_AddHighDrillingPore_pargs() throw();
  const HighDrillingPore* high_drilling_pore;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddHighDrillingPore_result__isset {
  _CbmService_AddHighDrillingPore_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddHighDrillingPore_result__isset;

class CbmService_AddHighDrillingPore_result {
 public:

  CbmService_AddHighDrillingPore_result(const CbmService_AddHighDrillingPore_result&);
  CbmService_AddHighDrillingPore_result& operator=(const CbmService_AddHighDrillingPore_result&);
  CbmService_AddHighDrillingPore_result() : success(0) {
  }

  virtual ~CbmService_AddHighDrillingPore_result() throw();
  int32_t success;

  _CbmService_AddHighDrillingPore_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddHighDrillingPore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddHighDrillingPore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddHighDrillingPore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddHighDrillingPore_presult__isset {
  _CbmService_AddHighDrillingPore_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddHighDrillingPore_presult__isset;

class CbmService_AddHighDrillingPore_presult {
 public:


  virtual ~CbmService_AddHighDrillingPore_presult() throw();
  int32_t* success;

  _CbmService_AddHighDrillingPore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteHighDrillingPore_args__isset {
  _CbmService_DeleteHighDrillingPore_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteHighDrillingPore_args__isset;

class CbmService_DeleteHighDrillingPore_args {
 public:

  CbmService_DeleteHighDrillingPore_args(const CbmService_DeleteHighDrillingPore_args&);
  CbmService_DeleteHighDrillingPore_args& operator=(const CbmService_DeleteHighDrillingPore_args&);
  CbmService_DeleteHighDrillingPore_args() : id(0) {
  }

  virtual ~CbmService_DeleteHighDrillingPore_args() throw();
  int32_t id;

  _CbmService_DeleteHighDrillingPore_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteHighDrillingPore_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteHighDrillingPore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteHighDrillingPore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteHighDrillingPore_pargs {
 public:


  virtual ~CbmService_DeleteHighDrillingPore_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteHighDrillingPore_result__isset {
  _CbmService_DeleteHighDrillingPore_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteHighDrillingPore_result__isset;

class CbmService_DeleteHighDrillingPore_result {
 public:

  CbmService_DeleteHighDrillingPore_result(const CbmService_DeleteHighDrillingPore_result&);
  CbmService_DeleteHighDrillingPore_result& operator=(const CbmService_DeleteHighDrillingPore_result&);
  CbmService_DeleteHighDrillingPore_result() : success(0) {
  }

  virtual ~CbmService_DeleteHighDrillingPore_result() throw();
  bool success;

  _CbmService_DeleteHighDrillingPore_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteHighDrillingPore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteHighDrillingPore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteHighDrillingPore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteHighDrillingPore_presult__isset {
  _CbmService_DeleteHighDrillingPore_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteHighDrillingPore_presult__isset;

class CbmService_DeleteHighDrillingPore_presult {
 public:


  virtual ~CbmService_DeleteHighDrillingPore_presult() throw();
  bool* success;

  _CbmService_DeleteHighDrillingPore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateHighDrillingPore_args__isset {
  _CbmService_UpdateHighDrillingPore_args__isset() : high_drilling_pore(false) {}
  bool high_drilling_pore :1;
} _CbmService_UpdateHighDrillingPore_args__isset;

class CbmService_UpdateHighDrillingPore_args {
 public:

  CbmService_UpdateHighDrillingPore_args(const CbmService_UpdateHighDrillingPore_args&);
  CbmService_UpdateHighDrillingPore_args& operator=(const CbmService_UpdateHighDrillingPore_args&);
  CbmService_UpdateHighDrillingPore_args() {
  }

  virtual ~CbmService_UpdateHighDrillingPore_args() throw();
  HighDrillingPore high_drilling_pore;

  _CbmService_UpdateHighDrillingPore_args__isset __isset;

  void __set_high_drilling_pore(const HighDrillingPore& val);

  bool operator == (const CbmService_UpdateHighDrillingPore_args & rhs) const
  {
    if (!(high_drilling_pore == rhs.high_drilling_pore))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateHighDrillingPore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateHighDrillingPore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateHighDrillingPore_pargs {
 public:


  virtual ~CbmService_UpdateHighDrillingPore_pargs() throw();
  const HighDrillingPore* high_drilling_pore;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateHighDrillingPore_result__isset {
  _CbmService_UpdateHighDrillingPore_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateHighDrillingPore_result__isset;

class CbmService_UpdateHighDrillingPore_result {
 public:

  CbmService_UpdateHighDrillingPore_result(const CbmService_UpdateHighDrillingPore_result&);
  CbmService_UpdateHighDrillingPore_result& operator=(const CbmService_UpdateHighDrillingPore_result&);
  CbmService_UpdateHighDrillingPore_result() : success(0) {
  }

  virtual ~CbmService_UpdateHighDrillingPore_result() throw();
  bool success;

  _CbmService_UpdateHighDrillingPore_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateHighDrillingPore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateHighDrillingPore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateHighDrillingPore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateHighDrillingPore_presult__isset {
  _CbmService_UpdateHighDrillingPore_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateHighDrillingPore_presult__isset;

class CbmService_UpdateHighDrillingPore_presult {
 public:


  virtual ~CbmService_UpdateHighDrillingPore_presult() throw();
  bool* success;

  _CbmService_UpdateHighDrillingPore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreById_args__isset {
  _CbmService_GetHighDrillingPoreById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetHighDrillingPoreById_args__isset;

class CbmService_GetHighDrillingPoreById_args {
 public:

  CbmService_GetHighDrillingPoreById_args(const CbmService_GetHighDrillingPoreById_args&);
  CbmService_GetHighDrillingPoreById_args& operator=(const CbmService_GetHighDrillingPoreById_args&);
  CbmService_GetHighDrillingPoreById_args() : id(0) {
  }

  virtual ~CbmService_GetHighDrillingPoreById_args() throw();
  int32_t id;

  _CbmService_GetHighDrillingPoreById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetHighDrillingPoreById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreById_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreById_result__isset {
  _CbmService_GetHighDrillingPoreById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreById_result__isset;

class CbmService_GetHighDrillingPoreById_result {
 public:

  CbmService_GetHighDrillingPoreById_result(const CbmService_GetHighDrillingPoreById_result&);
  CbmService_GetHighDrillingPoreById_result& operator=(const CbmService_GetHighDrillingPoreById_result&);
  CbmService_GetHighDrillingPoreById_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreById_result() throw();
  HighDrillingPore success;

  _CbmService_GetHighDrillingPoreById_result__isset __isset;

  void __set_success(const HighDrillingPore& val);

  bool operator == (const CbmService_GetHighDrillingPoreById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreById_presult__isset {
  _CbmService_GetHighDrillingPoreById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreById_presult__isset;

class CbmService_GetHighDrillingPoreById_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreById_presult() throw();
  HighDrillingPore* success;

  _CbmService_GetHighDrillingPoreById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreByForeignKey_args__isset {
  _CbmService_GetHighDrillingPoreByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetHighDrillingPoreByForeignKey_args__isset;

class CbmService_GetHighDrillingPoreByForeignKey_args {
 public:

  CbmService_GetHighDrillingPoreByForeignKey_args(const CbmService_GetHighDrillingPoreByForeignKey_args&);
  CbmService_GetHighDrillingPoreByForeignKey_args& operator=(const CbmService_GetHighDrillingPoreByForeignKey_args&);
  CbmService_GetHighDrillingPoreByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetHighDrillingPoreByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetHighDrillingPoreByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetHighDrillingPoreByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreByForeignKey_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreByForeignKey_result__isset {
  _CbmService_GetHighDrillingPoreByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreByForeignKey_result__isset;

class CbmService_GetHighDrillingPoreByForeignKey_result {
 public:

  CbmService_GetHighDrillingPoreByForeignKey_result(const CbmService_GetHighDrillingPoreByForeignKey_result&);
  CbmService_GetHighDrillingPoreByForeignKey_result& operator=(const CbmService_GetHighDrillingPoreByForeignKey_result&);
  CbmService_GetHighDrillingPoreByForeignKey_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreByForeignKey_result() throw();
  HighDrillingPore success;

  _CbmService_GetHighDrillingPoreByForeignKey_result__isset __isset;

  void __set_success(const HighDrillingPore& val);

  bool operator == (const CbmService_GetHighDrillingPoreByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreByForeignKey_presult__isset {
  _CbmService_GetHighDrillingPoreByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreByForeignKey_presult__isset;

class CbmService_GetHighDrillingPoreByForeignKey_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreByForeignKey_presult() throw();
  HighDrillingPore* success;

  _CbmService_GetHighDrillingPoreByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHighDrillingPoreList_args {
 public:

  CbmService_GetHighDrillingPoreList_args(const CbmService_GetHighDrillingPoreList_args&);
  CbmService_GetHighDrillingPoreList_args& operator=(const CbmService_GetHighDrillingPoreList_args&);
  CbmService_GetHighDrillingPoreList_args() {
  }

  virtual ~CbmService_GetHighDrillingPoreList_args() throw();

  bool operator == (const CbmService_GetHighDrillingPoreList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreList_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreList_result__isset {
  _CbmService_GetHighDrillingPoreList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreList_result__isset;

class CbmService_GetHighDrillingPoreList_result {
 public:

  CbmService_GetHighDrillingPoreList_result(const CbmService_GetHighDrillingPoreList_result&);
  CbmService_GetHighDrillingPoreList_result& operator=(const CbmService_GetHighDrillingPoreList_result&);
  CbmService_GetHighDrillingPoreList_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreList_result() throw();
  std::vector<HighDrillingPore>  success;

  _CbmService_GetHighDrillingPoreList_result__isset __isset;

  void __set_success(const std::vector<HighDrillingPore> & val);

  bool operator == (const CbmService_GetHighDrillingPoreList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreList_presult__isset {
  _CbmService_GetHighDrillingPoreList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreList_presult__isset;

class CbmService_GetHighDrillingPoreList_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreList_presult() throw();
  std::vector<HighDrillingPore> * success;

  _CbmService_GetHighDrillingPoreList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHighDrillingPoreIds_args {
 public:

  CbmService_GetHighDrillingPoreIds_args(const CbmService_GetHighDrillingPoreIds_args&);
  CbmService_GetHighDrillingPoreIds_args& operator=(const CbmService_GetHighDrillingPoreIds_args&);
  CbmService_GetHighDrillingPoreIds_args() {
  }

  virtual ~CbmService_GetHighDrillingPoreIds_args() throw();

  bool operator == (const CbmService_GetHighDrillingPoreIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreIds_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreIds_result__isset {
  _CbmService_GetHighDrillingPoreIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreIds_result__isset;

class CbmService_GetHighDrillingPoreIds_result {
 public:

  CbmService_GetHighDrillingPoreIds_result(const CbmService_GetHighDrillingPoreIds_result&);
  CbmService_GetHighDrillingPoreIds_result& operator=(const CbmService_GetHighDrillingPoreIds_result&);
  CbmService_GetHighDrillingPoreIds_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetHighDrillingPoreIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetHighDrillingPoreIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreIds_presult__isset {
  _CbmService_GetHighDrillingPoreIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreIds_presult__isset;

class CbmService_GetHighDrillingPoreIds_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetHighDrillingPoreIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHighDrillingPoreNames_args {
 public:

  CbmService_GetHighDrillingPoreNames_args(const CbmService_GetHighDrillingPoreNames_args&);
  CbmService_GetHighDrillingPoreNames_args& operator=(const CbmService_GetHighDrillingPoreNames_args&);
  CbmService_GetHighDrillingPoreNames_args() {
  }

  virtual ~CbmService_GetHighDrillingPoreNames_args() throw();

  bool operator == (const CbmService_GetHighDrillingPoreNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreNames_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreNames_result__isset {
  _CbmService_GetHighDrillingPoreNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreNames_result__isset;

class CbmService_GetHighDrillingPoreNames_result {
 public:

  CbmService_GetHighDrillingPoreNames_result(const CbmService_GetHighDrillingPoreNames_result&);
  CbmService_GetHighDrillingPoreNames_result& operator=(const CbmService_GetHighDrillingPoreNames_result&);
  CbmService_GetHighDrillingPoreNames_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetHighDrillingPoreNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetHighDrillingPoreNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreNames_presult__isset {
  _CbmService_GetHighDrillingPoreNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreNames_presult__isset;

class CbmService_GetHighDrillingPoreNames_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetHighDrillingPoreNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreHighDrillingPore_args__isset {
  _CbmService_AddMoreHighDrillingPore_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreHighDrillingPore_args__isset;

class CbmService_AddMoreHighDrillingPore_args {
 public:

  CbmService_AddMoreHighDrillingPore_args(const CbmService_AddMoreHighDrillingPore_args&);
  CbmService_AddMoreHighDrillingPore_args& operator=(const CbmService_AddMoreHighDrillingPore_args&);
  CbmService_AddMoreHighDrillingPore_args() {
  }

  virtual ~CbmService_AddMoreHighDrillingPore_args() throw();
  std::vector<HighDrillingPore>  objs;

  _CbmService_AddMoreHighDrillingPore_args__isset __isset;

  void __set_objs(const std::vector<HighDrillingPore> & val);

  bool operator == (const CbmService_AddMoreHighDrillingPore_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreHighDrillingPore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreHighDrillingPore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHighDrillingPore_pargs {
 public:


  virtual ~CbmService_AddMoreHighDrillingPore_pargs() throw();
  const std::vector<HighDrillingPore> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHighDrillingPore_result {
 public:

  CbmService_AddMoreHighDrillingPore_result(const CbmService_AddMoreHighDrillingPore_result&);
  CbmService_AddMoreHighDrillingPore_result& operator=(const CbmService_AddMoreHighDrillingPore_result&);
  CbmService_AddMoreHighDrillingPore_result() {
  }

  virtual ~CbmService_AddMoreHighDrillingPore_result() throw();

  bool operator == (const CbmService_AddMoreHighDrillingPore_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreHighDrillingPore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreHighDrillingPore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHighDrillingPore_presult {
 public:


  virtual ~CbmService_AddMoreHighDrillingPore_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreHighDrillingPore_args__isset {
  _CbmService_DeleteMoreHighDrillingPore_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreHighDrillingPore_args__isset;

class CbmService_DeleteMoreHighDrillingPore_args {
 public:

  CbmService_DeleteMoreHighDrillingPore_args(const CbmService_DeleteMoreHighDrillingPore_args&);
  CbmService_DeleteMoreHighDrillingPore_args& operator=(const CbmService_DeleteMoreHighDrillingPore_args&);
  CbmService_DeleteMoreHighDrillingPore_args() {
  }

  virtual ~CbmService_DeleteMoreHighDrillingPore_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreHighDrillingPore_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreHighDrillingPore_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreHighDrillingPore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreHighDrillingPore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHighDrillingPore_pargs {
 public:


  virtual ~CbmService_DeleteMoreHighDrillingPore_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHighDrillingPore_result {
 public:

  CbmService_DeleteMoreHighDrillingPore_result(const CbmService_DeleteMoreHighDrillingPore_result&);
  CbmService_DeleteMoreHighDrillingPore_result& operator=(const CbmService_DeleteMoreHighDrillingPore_result&);
  CbmService_DeleteMoreHighDrillingPore_result() {
  }

  virtual ~CbmService_DeleteMoreHighDrillingPore_result() throw();

  bool operator == (const CbmService_DeleteMoreHighDrillingPore_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreHighDrillingPore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreHighDrillingPore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHighDrillingPore_presult {
 public:


  virtual ~CbmService_DeleteMoreHighDrillingPore_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreByFields_args__isset {
  _CbmService_GetHighDrillingPoreByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetHighDrillingPoreByFields_args__isset;

class CbmService_GetHighDrillingPoreByFields_args {
 public:

  CbmService_GetHighDrillingPoreByFields_args(const CbmService_GetHighDrillingPoreByFields_args&);
  CbmService_GetHighDrillingPoreByFields_args& operator=(const CbmService_GetHighDrillingPoreByFields_args&);
  CbmService_GetHighDrillingPoreByFields_args() {
  }

  virtual ~CbmService_GetHighDrillingPoreByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetHighDrillingPoreByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetHighDrillingPoreByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreByFields_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreByFields_result__isset {
  _CbmService_GetHighDrillingPoreByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreByFields_result__isset;

class CbmService_GetHighDrillingPoreByFields_result {
 public:

  CbmService_GetHighDrillingPoreByFields_result(const CbmService_GetHighDrillingPoreByFields_result&);
  CbmService_GetHighDrillingPoreByFields_result& operator=(const CbmService_GetHighDrillingPoreByFields_result&);
  CbmService_GetHighDrillingPoreByFields_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreByFields_result() throw();
  HighDrillingPore success;

  _CbmService_GetHighDrillingPoreByFields_result__isset __isset;

  void __set_success(const HighDrillingPore& val);

  bool operator == (const CbmService_GetHighDrillingPoreByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreByFields_presult__isset {
  _CbmService_GetHighDrillingPoreByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreByFields_presult__isset;

class CbmService_GetHighDrillingPoreByFields_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreByFields_presult() throw();
  HighDrillingPore* success;

  _CbmService_GetHighDrillingPoreByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreByFields1_args__isset {
  _CbmService_GetHighDrillingPoreByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetHighDrillingPoreByFields1_args__isset;

class CbmService_GetHighDrillingPoreByFields1_args {
 public:

  CbmService_GetHighDrillingPoreByFields1_args(const CbmService_GetHighDrillingPoreByFields1_args&);
  CbmService_GetHighDrillingPoreByFields1_args& operator=(const CbmService_GetHighDrillingPoreByFields1_args&);
  CbmService_GetHighDrillingPoreByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetHighDrillingPoreByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetHighDrillingPoreByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingPoreByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreByFields1_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreByFields1_result__isset {
  _CbmService_GetHighDrillingPoreByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreByFields1_result__isset;

class CbmService_GetHighDrillingPoreByFields1_result {
 public:

  CbmService_GetHighDrillingPoreByFields1_result(const CbmService_GetHighDrillingPoreByFields1_result&);
  CbmService_GetHighDrillingPoreByFields1_result& operator=(const CbmService_GetHighDrillingPoreByFields1_result&);
  CbmService_GetHighDrillingPoreByFields1_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreByFields1_result() throw();
  HighDrillingPore success;

  _CbmService_GetHighDrillingPoreByFields1_result__isset __isset;

  void __set_success(const HighDrillingPore& val);

  bool operator == (const CbmService_GetHighDrillingPoreByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreByFields1_presult__isset {
  _CbmService_GetHighDrillingPoreByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreByFields1_presult__isset;

class CbmService_GetHighDrillingPoreByFields1_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreByFields1_presult() throw();
  HighDrillingPore* success;

  _CbmService_GetHighDrillingPoreByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreByFields2_args__isset {
  _CbmService_GetHighDrillingPoreByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetHighDrillingPoreByFields2_args__isset;

class CbmService_GetHighDrillingPoreByFields2_args {
 public:

  CbmService_GetHighDrillingPoreByFields2_args(const CbmService_GetHighDrillingPoreByFields2_args&);
  CbmService_GetHighDrillingPoreByFields2_args& operator=(const CbmService_GetHighDrillingPoreByFields2_args&);
  CbmService_GetHighDrillingPoreByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetHighDrillingPoreByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetHighDrillingPoreByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingPoreByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreByFields2_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreByFields2_result__isset {
  _CbmService_GetHighDrillingPoreByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreByFields2_result__isset;

class CbmService_GetHighDrillingPoreByFields2_result {
 public:

  CbmService_GetHighDrillingPoreByFields2_result(const CbmService_GetHighDrillingPoreByFields2_result&);
  CbmService_GetHighDrillingPoreByFields2_result& operator=(const CbmService_GetHighDrillingPoreByFields2_result&);
  CbmService_GetHighDrillingPoreByFields2_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreByFields2_result() throw();
  HighDrillingPore success;

  _CbmService_GetHighDrillingPoreByFields2_result__isset __isset;

  void __set_success(const HighDrillingPore& val);

  bool operator == (const CbmService_GetHighDrillingPoreByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreByFields2_presult__isset {
  _CbmService_GetHighDrillingPoreByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreByFields2_presult__isset;

class CbmService_GetHighDrillingPoreByFields2_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreByFields2_presult() throw();
  HighDrillingPore* success;

  _CbmService_GetHighDrillingPoreByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreListByFields_args__isset {
  _CbmService_GetHighDrillingPoreListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetHighDrillingPoreListByFields_args__isset;

class CbmService_GetHighDrillingPoreListByFields_args {
 public:

  CbmService_GetHighDrillingPoreListByFields_args(const CbmService_GetHighDrillingPoreListByFields_args&);
  CbmService_GetHighDrillingPoreListByFields_args& operator=(const CbmService_GetHighDrillingPoreListByFields_args&);
  CbmService_GetHighDrillingPoreListByFields_args() {
  }

  virtual ~CbmService_GetHighDrillingPoreListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetHighDrillingPoreListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetHighDrillingPoreListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreListByFields_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreListByFields_result__isset {
  _CbmService_GetHighDrillingPoreListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreListByFields_result__isset;

class CbmService_GetHighDrillingPoreListByFields_result {
 public:

  CbmService_GetHighDrillingPoreListByFields_result(const CbmService_GetHighDrillingPoreListByFields_result&);
  CbmService_GetHighDrillingPoreListByFields_result& operator=(const CbmService_GetHighDrillingPoreListByFields_result&);
  CbmService_GetHighDrillingPoreListByFields_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreListByFields_result() throw();
  std::vector<HighDrillingPore>  success;

  _CbmService_GetHighDrillingPoreListByFields_result__isset __isset;

  void __set_success(const std::vector<HighDrillingPore> & val);

  bool operator == (const CbmService_GetHighDrillingPoreListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreListByFields_presult__isset {
  _CbmService_GetHighDrillingPoreListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreListByFields_presult__isset;

class CbmService_GetHighDrillingPoreListByFields_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreListByFields_presult() throw();
  std::vector<HighDrillingPore> * success;

  _CbmService_GetHighDrillingPoreListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreListByFields1_args__isset {
  _CbmService_GetHighDrillingPoreListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetHighDrillingPoreListByFields1_args__isset;

class CbmService_GetHighDrillingPoreListByFields1_args {
 public:

  CbmService_GetHighDrillingPoreListByFields1_args(const CbmService_GetHighDrillingPoreListByFields1_args&);
  CbmService_GetHighDrillingPoreListByFields1_args& operator=(const CbmService_GetHighDrillingPoreListByFields1_args&);
  CbmService_GetHighDrillingPoreListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetHighDrillingPoreListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetHighDrillingPoreListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingPoreListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreListByFields1_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreListByFields1_result__isset {
  _CbmService_GetHighDrillingPoreListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreListByFields1_result__isset;

class CbmService_GetHighDrillingPoreListByFields1_result {
 public:

  CbmService_GetHighDrillingPoreListByFields1_result(const CbmService_GetHighDrillingPoreListByFields1_result&);
  CbmService_GetHighDrillingPoreListByFields1_result& operator=(const CbmService_GetHighDrillingPoreListByFields1_result&);
  CbmService_GetHighDrillingPoreListByFields1_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreListByFields1_result() throw();
  std::vector<HighDrillingPore>  success;

  _CbmService_GetHighDrillingPoreListByFields1_result__isset __isset;

  void __set_success(const std::vector<HighDrillingPore> & val);

  bool operator == (const CbmService_GetHighDrillingPoreListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreListByFields1_presult__isset {
  _CbmService_GetHighDrillingPoreListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreListByFields1_presult__isset;

class CbmService_GetHighDrillingPoreListByFields1_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreListByFields1_presult() throw();
  std::vector<HighDrillingPore> * success;

  _CbmService_GetHighDrillingPoreListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreListByFields2_args__isset {
  _CbmService_GetHighDrillingPoreListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetHighDrillingPoreListByFields2_args__isset;

class CbmService_GetHighDrillingPoreListByFields2_args {
 public:

  CbmService_GetHighDrillingPoreListByFields2_args(const CbmService_GetHighDrillingPoreListByFields2_args&);
  CbmService_GetHighDrillingPoreListByFields2_args& operator=(const CbmService_GetHighDrillingPoreListByFields2_args&);
  CbmService_GetHighDrillingPoreListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetHighDrillingPoreListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetHighDrillingPoreListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingPoreListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreListByFields2_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreListByFields2_result__isset {
  _CbmService_GetHighDrillingPoreListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreListByFields2_result__isset;

class CbmService_GetHighDrillingPoreListByFields2_result {
 public:

  CbmService_GetHighDrillingPoreListByFields2_result(const CbmService_GetHighDrillingPoreListByFields2_result&);
  CbmService_GetHighDrillingPoreListByFields2_result& operator=(const CbmService_GetHighDrillingPoreListByFields2_result&);
  CbmService_GetHighDrillingPoreListByFields2_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreListByFields2_result() throw();
  std::vector<HighDrillingPore>  success;

  _CbmService_GetHighDrillingPoreListByFields2_result__isset __isset;

  void __set_success(const std::vector<HighDrillingPore> & val);

  bool operator == (const CbmService_GetHighDrillingPoreListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreListByFields2_presult__isset {
  _CbmService_GetHighDrillingPoreListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreListByFields2_presult__isset;

class CbmService_GetHighDrillingPoreListByFields2_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreListByFields2_presult() throw();
  std::vector<HighDrillingPore> * success;

  _CbmService_GetHighDrillingPoreListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddHighDrillingPoreParam_args__isset {
  _CbmService_AddHighDrillingPoreParam_args__isset() : high_drilling_pore_param(false) {}
  bool high_drilling_pore_param :1;
} _CbmService_AddHighDrillingPoreParam_args__isset;

class CbmService_AddHighDrillingPoreParam_args {
 public:

  CbmService_AddHighDrillingPoreParam_args(const CbmService_AddHighDrillingPoreParam_args&);
  CbmService_AddHighDrillingPoreParam_args& operator=(const CbmService_AddHighDrillingPoreParam_args&);
  CbmService_AddHighDrillingPoreParam_args() {
  }

  virtual ~CbmService_AddHighDrillingPoreParam_args() throw();
  HighDrillingPoreParam high_drilling_pore_param;

  _CbmService_AddHighDrillingPoreParam_args__isset __isset;

  void __set_high_drilling_pore_param(const HighDrillingPoreParam& val);

  bool operator == (const CbmService_AddHighDrillingPoreParam_args & rhs) const
  {
    if (!(high_drilling_pore_param == rhs.high_drilling_pore_param))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddHighDrillingPoreParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddHighDrillingPoreParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddHighDrillingPoreParam_pargs {
 public:


  virtual ~CbmService_AddHighDrillingPoreParam_pargs() throw();
  const HighDrillingPoreParam* high_drilling_pore_param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddHighDrillingPoreParam_result__isset {
  _CbmService_AddHighDrillingPoreParam_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddHighDrillingPoreParam_result__isset;

class CbmService_AddHighDrillingPoreParam_result {
 public:

  CbmService_AddHighDrillingPoreParam_result(const CbmService_AddHighDrillingPoreParam_result&);
  CbmService_AddHighDrillingPoreParam_result& operator=(const CbmService_AddHighDrillingPoreParam_result&);
  CbmService_AddHighDrillingPoreParam_result() : success(0) {
  }

  virtual ~CbmService_AddHighDrillingPoreParam_result() throw();
  int32_t success;

  _CbmService_AddHighDrillingPoreParam_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddHighDrillingPoreParam_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddHighDrillingPoreParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddHighDrillingPoreParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddHighDrillingPoreParam_presult__isset {
  _CbmService_AddHighDrillingPoreParam_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddHighDrillingPoreParam_presult__isset;

class CbmService_AddHighDrillingPoreParam_presult {
 public:


  virtual ~CbmService_AddHighDrillingPoreParam_presult() throw();
  int32_t* success;

  _CbmService_AddHighDrillingPoreParam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteHighDrillingPoreParam_args__isset {
  _CbmService_DeleteHighDrillingPoreParam_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteHighDrillingPoreParam_args__isset;

class CbmService_DeleteHighDrillingPoreParam_args {
 public:

  CbmService_DeleteHighDrillingPoreParam_args(const CbmService_DeleteHighDrillingPoreParam_args&);
  CbmService_DeleteHighDrillingPoreParam_args& operator=(const CbmService_DeleteHighDrillingPoreParam_args&);
  CbmService_DeleteHighDrillingPoreParam_args() : id(0) {
  }

  virtual ~CbmService_DeleteHighDrillingPoreParam_args() throw();
  int32_t id;

  _CbmService_DeleteHighDrillingPoreParam_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteHighDrillingPoreParam_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteHighDrillingPoreParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteHighDrillingPoreParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteHighDrillingPoreParam_pargs {
 public:


  virtual ~CbmService_DeleteHighDrillingPoreParam_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteHighDrillingPoreParam_result__isset {
  _CbmService_DeleteHighDrillingPoreParam_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteHighDrillingPoreParam_result__isset;

class CbmService_DeleteHighDrillingPoreParam_result {
 public:

  CbmService_DeleteHighDrillingPoreParam_result(const CbmService_DeleteHighDrillingPoreParam_result&);
  CbmService_DeleteHighDrillingPoreParam_result& operator=(const CbmService_DeleteHighDrillingPoreParam_result&);
  CbmService_DeleteHighDrillingPoreParam_result() : success(0) {
  }

  virtual ~CbmService_DeleteHighDrillingPoreParam_result() throw();
  bool success;

  _CbmService_DeleteHighDrillingPoreParam_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteHighDrillingPoreParam_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteHighDrillingPoreParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteHighDrillingPoreParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteHighDrillingPoreParam_presult__isset {
  _CbmService_DeleteHighDrillingPoreParam_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteHighDrillingPoreParam_presult__isset;

class CbmService_DeleteHighDrillingPoreParam_presult {
 public:


  virtual ~CbmService_DeleteHighDrillingPoreParam_presult() throw();
  bool* success;

  _CbmService_DeleteHighDrillingPoreParam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateHighDrillingPoreParam_args__isset {
  _CbmService_UpdateHighDrillingPoreParam_args__isset() : high_drilling_pore_param(false) {}
  bool high_drilling_pore_param :1;
} _CbmService_UpdateHighDrillingPoreParam_args__isset;

class CbmService_UpdateHighDrillingPoreParam_args {
 public:

  CbmService_UpdateHighDrillingPoreParam_args(const CbmService_UpdateHighDrillingPoreParam_args&);
  CbmService_UpdateHighDrillingPoreParam_args& operator=(const CbmService_UpdateHighDrillingPoreParam_args&);
  CbmService_UpdateHighDrillingPoreParam_args() {
  }

  virtual ~CbmService_UpdateHighDrillingPoreParam_args() throw();
  HighDrillingPoreParam high_drilling_pore_param;

  _CbmService_UpdateHighDrillingPoreParam_args__isset __isset;

  void __set_high_drilling_pore_param(const HighDrillingPoreParam& val);

  bool operator == (const CbmService_UpdateHighDrillingPoreParam_args & rhs) const
  {
    if (!(high_drilling_pore_param == rhs.high_drilling_pore_param))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateHighDrillingPoreParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateHighDrillingPoreParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateHighDrillingPoreParam_pargs {
 public:


  virtual ~CbmService_UpdateHighDrillingPoreParam_pargs() throw();
  const HighDrillingPoreParam* high_drilling_pore_param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateHighDrillingPoreParam_result__isset {
  _CbmService_UpdateHighDrillingPoreParam_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateHighDrillingPoreParam_result__isset;

class CbmService_UpdateHighDrillingPoreParam_result {
 public:

  CbmService_UpdateHighDrillingPoreParam_result(const CbmService_UpdateHighDrillingPoreParam_result&);
  CbmService_UpdateHighDrillingPoreParam_result& operator=(const CbmService_UpdateHighDrillingPoreParam_result&);
  CbmService_UpdateHighDrillingPoreParam_result() : success(0) {
  }

  virtual ~CbmService_UpdateHighDrillingPoreParam_result() throw();
  bool success;

  _CbmService_UpdateHighDrillingPoreParam_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateHighDrillingPoreParam_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateHighDrillingPoreParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateHighDrillingPoreParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateHighDrillingPoreParam_presult__isset {
  _CbmService_UpdateHighDrillingPoreParam_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateHighDrillingPoreParam_presult__isset;

class CbmService_UpdateHighDrillingPoreParam_presult {
 public:


  virtual ~CbmService_UpdateHighDrillingPoreParam_presult() throw();
  bool* success;

  _CbmService_UpdateHighDrillingPoreParam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreParamById_args__isset {
  _CbmService_GetHighDrillingPoreParamById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetHighDrillingPoreParamById_args__isset;

class CbmService_GetHighDrillingPoreParamById_args {
 public:

  CbmService_GetHighDrillingPoreParamById_args(const CbmService_GetHighDrillingPoreParamById_args&);
  CbmService_GetHighDrillingPoreParamById_args& operator=(const CbmService_GetHighDrillingPoreParamById_args&);
  CbmService_GetHighDrillingPoreParamById_args() : id(0) {
  }

  virtual ~CbmService_GetHighDrillingPoreParamById_args() throw();
  int32_t id;

  _CbmService_GetHighDrillingPoreParamById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetHighDrillingPoreParamById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreParamById_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamById_result__isset {
  _CbmService_GetHighDrillingPoreParamById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamById_result__isset;

class CbmService_GetHighDrillingPoreParamById_result {
 public:

  CbmService_GetHighDrillingPoreParamById_result(const CbmService_GetHighDrillingPoreParamById_result&);
  CbmService_GetHighDrillingPoreParamById_result& operator=(const CbmService_GetHighDrillingPoreParamById_result&);
  CbmService_GetHighDrillingPoreParamById_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamById_result() throw();
  HighDrillingPoreParam success;

  _CbmService_GetHighDrillingPoreParamById_result__isset __isset;

  void __set_success(const HighDrillingPoreParam& val);

  bool operator == (const CbmService_GetHighDrillingPoreParamById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamById_presult__isset {
  _CbmService_GetHighDrillingPoreParamById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamById_presult__isset;

class CbmService_GetHighDrillingPoreParamById_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamById_presult() throw();
  HighDrillingPoreParam* success;

  _CbmService_GetHighDrillingPoreParamById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreParamByForeignKey_args__isset {
  _CbmService_GetHighDrillingPoreParamByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetHighDrillingPoreParamByForeignKey_args__isset;

class CbmService_GetHighDrillingPoreParamByForeignKey_args {
 public:

  CbmService_GetHighDrillingPoreParamByForeignKey_args(const CbmService_GetHighDrillingPoreParamByForeignKey_args&);
  CbmService_GetHighDrillingPoreParamByForeignKey_args& operator=(const CbmService_GetHighDrillingPoreParamByForeignKey_args&);
  CbmService_GetHighDrillingPoreParamByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetHighDrillingPoreParamByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetHighDrillingPoreParamByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetHighDrillingPoreParamByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreParamByForeignKey_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamByForeignKey_result__isset {
  _CbmService_GetHighDrillingPoreParamByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamByForeignKey_result__isset;

class CbmService_GetHighDrillingPoreParamByForeignKey_result {
 public:

  CbmService_GetHighDrillingPoreParamByForeignKey_result(const CbmService_GetHighDrillingPoreParamByForeignKey_result&);
  CbmService_GetHighDrillingPoreParamByForeignKey_result& operator=(const CbmService_GetHighDrillingPoreParamByForeignKey_result&);
  CbmService_GetHighDrillingPoreParamByForeignKey_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamByForeignKey_result() throw();
  HighDrillingPoreParam success;

  _CbmService_GetHighDrillingPoreParamByForeignKey_result__isset __isset;

  void __set_success(const HighDrillingPoreParam& val);

  bool operator == (const CbmService_GetHighDrillingPoreParamByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamByForeignKey_presult__isset {
  _CbmService_GetHighDrillingPoreParamByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamByForeignKey_presult__isset;

class CbmService_GetHighDrillingPoreParamByForeignKey_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamByForeignKey_presult() throw();
  HighDrillingPoreParam* success;

  _CbmService_GetHighDrillingPoreParamByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHighDrillingPoreParamList_args {
 public:

  CbmService_GetHighDrillingPoreParamList_args(const CbmService_GetHighDrillingPoreParamList_args&);
  CbmService_GetHighDrillingPoreParamList_args& operator=(const CbmService_GetHighDrillingPoreParamList_args&);
  CbmService_GetHighDrillingPoreParamList_args() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamList_args() throw();

  bool operator == (const CbmService_GetHighDrillingPoreParamList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreParamList_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamList_result__isset {
  _CbmService_GetHighDrillingPoreParamList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamList_result__isset;

class CbmService_GetHighDrillingPoreParamList_result {
 public:

  CbmService_GetHighDrillingPoreParamList_result(const CbmService_GetHighDrillingPoreParamList_result&);
  CbmService_GetHighDrillingPoreParamList_result& operator=(const CbmService_GetHighDrillingPoreParamList_result&);
  CbmService_GetHighDrillingPoreParamList_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamList_result() throw();
  std::vector<HighDrillingPoreParam>  success;

  _CbmService_GetHighDrillingPoreParamList_result__isset __isset;

  void __set_success(const std::vector<HighDrillingPoreParam> & val);

  bool operator == (const CbmService_GetHighDrillingPoreParamList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamList_presult__isset {
  _CbmService_GetHighDrillingPoreParamList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamList_presult__isset;

class CbmService_GetHighDrillingPoreParamList_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamList_presult() throw();
  std::vector<HighDrillingPoreParam> * success;

  _CbmService_GetHighDrillingPoreParamList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHighDrillingPoreParamIds_args {
 public:

  CbmService_GetHighDrillingPoreParamIds_args(const CbmService_GetHighDrillingPoreParamIds_args&);
  CbmService_GetHighDrillingPoreParamIds_args& operator=(const CbmService_GetHighDrillingPoreParamIds_args&);
  CbmService_GetHighDrillingPoreParamIds_args() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamIds_args() throw();

  bool operator == (const CbmService_GetHighDrillingPoreParamIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreParamIds_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamIds_result__isset {
  _CbmService_GetHighDrillingPoreParamIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamIds_result__isset;

class CbmService_GetHighDrillingPoreParamIds_result {
 public:

  CbmService_GetHighDrillingPoreParamIds_result(const CbmService_GetHighDrillingPoreParamIds_result&);
  CbmService_GetHighDrillingPoreParamIds_result& operator=(const CbmService_GetHighDrillingPoreParamIds_result&);
  CbmService_GetHighDrillingPoreParamIds_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetHighDrillingPoreParamIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetHighDrillingPoreParamIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamIds_presult__isset {
  _CbmService_GetHighDrillingPoreParamIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamIds_presult__isset;

class CbmService_GetHighDrillingPoreParamIds_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetHighDrillingPoreParamIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHighDrillingPoreParamNames_args {
 public:

  CbmService_GetHighDrillingPoreParamNames_args(const CbmService_GetHighDrillingPoreParamNames_args&);
  CbmService_GetHighDrillingPoreParamNames_args& operator=(const CbmService_GetHighDrillingPoreParamNames_args&);
  CbmService_GetHighDrillingPoreParamNames_args() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamNames_args() throw();

  bool operator == (const CbmService_GetHighDrillingPoreParamNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreParamNames_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamNames_result__isset {
  _CbmService_GetHighDrillingPoreParamNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamNames_result__isset;

class CbmService_GetHighDrillingPoreParamNames_result {
 public:

  CbmService_GetHighDrillingPoreParamNames_result(const CbmService_GetHighDrillingPoreParamNames_result&);
  CbmService_GetHighDrillingPoreParamNames_result& operator=(const CbmService_GetHighDrillingPoreParamNames_result&);
  CbmService_GetHighDrillingPoreParamNames_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetHighDrillingPoreParamNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetHighDrillingPoreParamNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamNames_presult__isset {
  _CbmService_GetHighDrillingPoreParamNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamNames_presult__isset;

class CbmService_GetHighDrillingPoreParamNames_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetHighDrillingPoreParamNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreHighDrillingPoreParam_args__isset {
  _CbmService_AddMoreHighDrillingPoreParam_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreHighDrillingPoreParam_args__isset;

class CbmService_AddMoreHighDrillingPoreParam_args {
 public:

  CbmService_AddMoreHighDrillingPoreParam_args(const CbmService_AddMoreHighDrillingPoreParam_args&);
  CbmService_AddMoreHighDrillingPoreParam_args& operator=(const CbmService_AddMoreHighDrillingPoreParam_args&);
  CbmService_AddMoreHighDrillingPoreParam_args() {
  }

  virtual ~CbmService_AddMoreHighDrillingPoreParam_args() throw();
  std::vector<HighDrillingPoreParam>  objs;

  _CbmService_AddMoreHighDrillingPoreParam_args__isset __isset;

  void __set_objs(const std::vector<HighDrillingPoreParam> & val);

  bool operator == (const CbmService_AddMoreHighDrillingPoreParam_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreHighDrillingPoreParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreHighDrillingPoreParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHighDrillingPoreParam_pargs {
 public:


  virtual ~CbmService_AddMoreHighDrillingPoreParam_pargs() throw();
  const std::vector<HighDrillingPoreParam> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHighDrillingPoreParam_result {
 public:

  CbmService_AddMoreHighDrillingPoreParam_result(const CbmService_AddMoreHighDrillingPoreParam_result&);
  CbmService_AddMoreHighDrillingPoreParam_result& operator=(const CbmService_AddMoreHighDrillingPoreParam_result&);
  CbmService_AddMoreHighDrillingPoreParam_result() {
  }

  virtual ~CbmService_AddMoreHighDrillingPoreParam_result() throw();

  bool operator == (const CbmService_AddMoreHighDrillingPoreParam_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreHighDrillingPoreParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreHighDrillingPoreParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHighDrillingPoreParam_presult {
 public:


  virtual ~CbmService_AddMoreHighDrillingPoreParam_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreHighDrillingPoreParam_args__isset {
  _CbmService_DeleteMoreHighDrillingPoreParam_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreHighDrillingPoreParam_args__isset;

class CbmService_DeleteMoreHighDrillingPoreParam_args {
 public:

  CbmService_DeleteMoreHighDrillingPoreParam_args(const CbmService_DeleteMoreHighDrillingPoreParam_args&);
  CbmService_DeleteMoreHighDrillingPoreParam_args& operator=(const CbmService_DeleteMoreHighDrillingPoreParam_args&);
  CbmService_DeleteMoreHighDrillingPoreParam_args() {
  }

  virtual ~CbmService_DeleteMoreHighDrillingPoreParam_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreHighDrillingPoreParam_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreHighDrillingPoreParam_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreHighDrillingPoreParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreHighDrillingPoreParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHighDrillingPoreParam_pargs {
 public:


  virtual ~CbmService_DeleteMoreHighDrillingPoreParam_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHighDrillingPoreParam_result {
 public:

  CbmService_DeleteMoreHighDrillingPoreParam_result(const CbmService_DeleteMoreHighDrillingPoreParam_result&);
  CbmService_DeleteMoreHighDrillingPoreParam_result& operator=(const CbmService_DeleteMoreHighDrillingPoreParam_result&);
  CbmService_DeleteMoreHighDrillingPoreParam_result() {
  }

  virtual ~CbmService_DeleteMoreHighDrillingPoreParam_result() throw();

  bool operator == (const CbmService_DeleteMoreHighDrillingPoreParam_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreHighDrillingPoreParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreHighDrillingPoreParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHighDrillingPoreParam_presult {
 public:


  virtual ~CbmService_DeleteMoreHighDrillingPoreParam_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreParamByFields_args__isset {
  _CbmService_GetHighDrillingPoreParamByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetHighDrillingPoreParamByFields_args__isset;

class CbmService_GetHighDrillingPoreParamByFields_args {
 public:

  CbmService_GetHighDrillingPoreParamByFields_args(const CbmService_GetHighDrillingPoreParamByFields_args&);
  CbmService_GetHighDrillingPoreParamByFields_args& operator=(const CbmService_GetHighDrillingPoreParamByFields_args&);
  CbmService_GetHighDrillingPoreParamByFields_args() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetHighDrillingPoreParamByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetHighDrillingPoreParamByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreParamByFields_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamByFields_result__isset {
  _CbmService_GetHighDrillingPoreParamByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamByFields_result__isset;

class CbmService_GetHighDrillingPoreParamByFields_result {
 public:

  CbmService_GetHighDrillingPoreParamByFields_result(const CbmService_GetHighDrillingPoreParamByFields_result&);
  CbmService_GetHighDrillingPoreParamByFields_result& operator=(const CbmService_GetHighDrillingPoreParamByFields_result&);
  CbmService_GetHighDrillingPoreParamByFields_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamByFields_result() throw();
  HighDrillingPoreParam success;

  _CbmService_GetHighDrillingPoreParamByFields_result__isset __isset;

  void __set_success(const HighDrillingPoreParam& val);

  bool operator == (const CbmService_GetHighDrillingPoreParamByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamByFields_presult__isset {
  _CbmService_GetHighDrillingPoreParamByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamByFields_presult__isset;

class CbmService_GetHighDrillingPoreParamByFields_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamByFields_presult() throw();
  HighDrillingPoreParam* success;

  _CbmService_GetHighDrillingPoreParamByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreParamByFields1_args__isset {
  _CbmService_GetHighDrillingPoreParamByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetHighDrillingPoreParamByFields1_args__isset;

class CbmService_GetHighDrillingPoreParamByFields1_args {
 public:

  CbmService_GetHighDrillingPoreParamByFields1_args(const CbmService_GetHighDrillingPoreParamByFields1_args&);
  CbmService_GetHighDrillingPoreParamByFields1_args& operator=(const CbmService_GetHighDrillingPoreParamByFields1_args&);
  CbmService_GetHighDrillingPoreParamByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetHighDrillingPoreParamByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingPoreParamByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreParamByFields1_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamByFields1_result__isset {
  _CbmService_GetHighDrillingPoreParamByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamByFields1_result__isset;

class CbmService_GetHighDrillingPoreParamByFields1_result {
 public:

  CbmService_GetHighDrillingPoreParamByFields1_result(const CbmService_GetHighDrillingPoreParamByFields1_result&);
  CbmService_GetHighDrillingPoreParamByFields1_result& operator=(const CbmService_GetHighDrillingPoreParamByFields1_result&);
  CbmService_GetHighDrillingPoreParamByFields1_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamByFields1_result() throw();
  HighDrillingPoreParam success;

  _CbmService_GetHighDrillingPoreParamByFields1_result__isset __isset;

  void __set_success(const HighDrillingPoreParam& val);

  bool operator == (const CbmService_GetHighDrillingPoreParamByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamByFields1_presult__isset {
  _CbmService_GetHighDrillingPoreParamByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamByFields1_presult__isset;

class CbmService_GetHighDrillingPoreParamByFields1_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamByFields1_presult() throw();
  HighDrillingPoreParam* success;

  _CbmService_GetHighDrillingPoreParamByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreParamByFields2_args__isset {
  _CbmService_GetHighDrillingPoreParamByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetHighDrillingPoreParamByFields2_args__isset;

class CbmService_GetHighDrillingPoreParamByFields2_args {
 public:

  CbmService_GetHighDrillingPoreParamByFields2_args(const CbmService_GetHighDrillingPoreParamByFields2_args&);
  CbmService_GetHighDrillingPoreParamByFields2_args& operator=(const CbmService_GetHighDrillingPoreParamByFields2_args&);
  CbmService_GetHighDrillingPoreParamByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetHighDrillingPoreParamByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingPoreParamByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreParamByFields2_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamByFields2_result__isset {
  _CbmService_GetHighDrillingPoreParamByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamByFields2_result__isset;

class CbmService_GetHighDrillingPoreParamByFields2_result {
 public:

  CbmService_GetHighDrillingPoreParamByFields2_result(const CbmService_GetHighDrillingPoreParamByFields2_result&);
  CbmService_GetHighDrillingPoreParamByFields2_result& operator=(const CbmService_GetHighDrillingPoreParamByFields2_result&);
  CbmService_GetHighDrillingPoreParamByFields2_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamByFields2_result() throw();
  HighDrillingPoreParam success;

  _CbmService_GetHighDrillingPoreParamByFields2_result__isset __isset;

  void __set_success(const HighDrillingPoreParam& val);

  bool operator == (const CbmService_GetHighDrillingPoreParamByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamByFields2_presult__isset {
  _CbmService_GetHighDrillingPoreParamByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamByFields2_presult__isset;

class CbmService_GetHighDrillingPoreParamByFields2_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamByFields2_presult() throw();
  HighDrillingPoreParam* success;

  _CbmService_GetHighDrillingPoreParamByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreParamListByFields_args__isset {
  _CbmService_GetHighDrillingPoreParamListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetHighDrillingPoreParamListByFields_args__isset;

class CbmService_GetHighDrillingPoreParamListByFields_args {
 public:

  CbmService_GetHighDrillingPoreParamListByFields_args(const CbmService_GetHighDrillingPoreParamListByFields_args&);
  CbmService_GetHighDrillingPoreParamListByFields_args& operator=(const CbmService_GetHighDrillingPoreParamListByFields_args&);
  CbmService_GetHighDrillingPoreParamListByFields_args() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetHighDrillingPoreParamListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetHighDrillingPoreParamListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreParamListByFields_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamListByFields_result__isset {
  _CbmService_GetHighDrillingPoreParamListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamListByFields_result__isset;

class CbmService_GetHighDrillingPoreParamListByFields_result {
 public:

  CbmService_GetHighDrillingPoreParamListByFields_result(const CbmService_GetHighDrillingPoreParamListByFields_result&);
  CbmService_GetHighDrillingPoreParamListByFields_result& operator=(const CbmService_GetHighDrillingPoreParamListByFields_result&);
  CbmService_GetHighDrillingPoreParamListByFields_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamListByFields_result() throw();
  std::vector<HighDrillingPoreParam>  success;

  _CbmService_GetHighDrillingPoreParamListByFields_result__isset __isset;

  void __set_success(const std::vector<HighDrillingPoreParam> & val);

  bool operator == (const CbmService_GetHighDrillingPoreParamListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamListByFields_presult__isset {
  _CbmService_GetHighDrillingPoreParamListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamListByFields_presult__isset;

class CbmService_GetHighDrillingPoreParamListByFields_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamListByFields_presult() throw();
  std::vector<HighDrillingPoreParam> * success;

  _CbmService_GetHighDrillingPoreParamListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreParamListByFields1_args__isset {
  _CbmService_GetHighDrillingPoreParamListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetHighDrillingPoreParamListByFields1_args__isset;

class CbmService_GetHighDrillingPoreParamListByFields1_args {
 public:

  CbmService_GetHighDrillingPoreParamListByFields1_args(const CbmService_GetHighDrillingPoreParamListByFields1_args&);
  CbmService_GetHighDrillingPoreParamListByFields1_args& operator=(const CbmService_GetHighDrillingPoreParamListByFields1_args&);
  CbmService_GetHighDrillingPoreParamListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetHighDrillingPoreParamListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingPoreParamListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreParamListByFields1_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamListByFields1_result__isset {
  _CbmService_GetHighDrillingPoreParamListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamListByFields1_result__isset;

class CbmService_GetHighDrillingPoreParamListByFields1_result {
 public:

  CbmService_GetHighDrillingPoreParamListByFields1_result(const CbmService_GetHighDrillingPoreParamListByFields1_result&);
  CbmService_GetHighDrillingPoreParamListByFields1_result& operator=(const CbmService_GetHighDrillingPoreParamListByFields1_result&);
  CbmService_GetHighDrillingPoreParamListByFields1_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamListByFields1_result() throw();
  std::vector<HighDrillingPoreParam>  success;

  _CbmService_GetHighDrillingPoreParamListByFields1_result__isset __isset;

  void __set_success(const std::vector<HighDrillingPoreParam> & val);

  bool operator == (const CbmService_GetHighDrillingPoreParamListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamListByFields1_presult__isset {
  _CbmService_GetHighDrillingPoreParamListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamListByFields1_presult__isset;

class CbmService_GetHighDrillingPoreParamListByFields1_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamListByFields1_presult() throw();
  std::vector<HighDrillingPoreParam> * success;

  _CbmService_GetHighDrillingPoreParamListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingPoreParamListByFields2_args__isset {
  _CbmService_GetHighDrillingPoreParamListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetHighDrillingPoreParamListByFields2_args__isset;

class CbmService_GetHighDrillingPoreParamListByFields2_args {
 public:

  CbmService_GetHighDrillingPoreParamListByFields2_args(const CbmService_GetHighDrillingPoreParamListByFields2_args&);
  CbmService_GetHighDrillingPoreParamListByFields2_args& operator=(const CbmService_GetHighDrillingPoreParamListByFields2_args&);
  CbmService_GetHighDrillingPoreParamListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetHighDrillingPoreParamListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingPoreParamListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingPoreParamListByFields2_pargs {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamListByFields2_result__isset {
  _CbmService_GetHighDrillingPoreParamListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamListByFields2_result__isset;

class CbmService_GetHighDrillingPoreParamListByFields2_result {
 public:

  CbmService_GetHighDrillingPoreParamListByFields2_result(const CbmService_GetHighDrillingPoreParamListByFields2_result&);
  CbmService_GetHighDrillingPoreParamListByFields2_result& operator=(const CbmService_GetHighDrillingPoreParamListByFields2_result&);
  CbmService_GetHighDrillingPoreParamListByFields2_result() {
  }

  virtual ~CbmService_GetHighDrillingPoreParamListByFields2_result() throw();
  std::vector<HighDrillingPoreParam>  success;

  _CbmService_GetHighDrillingPoreParamListByFields2_result__isset __isset;

  void __set_success(const std::vector<HighDrillingPoreParam> & val);

  bool operator == (const CbmService_GetHighDrillingPoreParamListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingPoreParamListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingPoreParamListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingPoreParamListByFields2_presult__isset {
  _CbmService_GetHighDrillingPoreParamListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingPoreParamListByFields2_presult__isset;

class CbmService_GetHighDrillingPoreParamListByFields2_presult {
 public:


  virtual ~CbmService_GetHighDrillingPoreParamListByFields2_presult() throw();
  std::vector<HighDrillingPoreParam> * success;

  _CbmService_GetHighDrillingPoreParamListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddHighDrillingSiteParam_args__isset {
  _CbmService_AddHighDrillingSiteParam_args__isset() : high_drilling_site_param(false) {}
  bool high_drilling_site_param :1;
} _CbmService_AddHighDrillingSiteParam_args__isset;

class CbmService_AddHighDrillingSiteParam_args {
 public:

  CbmService_AddHighDrillingSiteParam_args(const CbmService_AddHighDrillingSiteParam_args&);
  CbmService_AddHighDrillingSiteParam_args& operator=(const CbmService_AddHighDrillingSiteParam_args&);
  CbmService_AddHighDrillingSiteParam_args() {
  }

  virtual ~CbmService_AddHighDrillingSiteParam_args() throw();
  HighDrillingSiteParam high_drilling_site_param;

  _CbmService_AddHighDrillingSiteParam_args__isset __isset;

  void __set_high_drilling_site_param(const HighDrillingSiteParam& val);

  bool operator == (const CbmService_AddHighDrillingSiteParam_args & rhs) const
  {
    if (!(high_drilling_site_param == rhs.high_drilling_site_param))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddHighDrillingSiteParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddHighDrillingSiteParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddHighDrillingSiteParam_pargs {
 public:


  virtual ~CbmService_AddHighDrillingSiteParam_pargs() throw();
  const HighDrillingSiteParam* high_drilling_site_param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddHighDrillingSiteParam_result__isset {
  _CbmService_AddHighDrillingSiteParam_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddHighDrillingSiteParam_result__isset;

class CbmService_AddHighDrillingSiteParam_result {
 public:

  CbmService_AddHighDrillingSiteParam_result(const CbmService_AddHighDrillingSiteParam_result&);
  CbmService_AddHighDrillingSiteParam_result& operator=(const CbmService_AddHighDrillingSiteParam_result&);
  CbmService_AddHighDrillingSiteParam_result() : success(0) {
  }

  virtual ~CbmService_AddHighDrillingSiteParam_result() throw();
  int32_t success;

  _CbmService_AddHighDrillingSiteParam_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddHighDrillingSiteParam_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddHighDrillingSiteParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddHighDrillingSiteParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddHighDrillingSiteParam_presult__isset {
  _CbmService_AddHighDrillingSiteParam_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddHighDrillingSiteParam_presult__isset;

class CbmService_AddHighDrillingSiteParam_presult {
 public:


  virtual ~CbmService_AddHighDrillingSiteParam_presult() throw();
  int32_t* success;

  _CbmService_AddHighDrillingSiteParam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteHighDrillingSiteParam_args__isset {
  _CbmService_DeleteHighDrillingSiteParam_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteHighDrillingSiteParam_args__isset;

class CbmService_DeleteHighDrillingSiteParam_args {
 public:

  CbmService_DeleteHighDrillingSiteParam_args(const CbmService_DeleteHighDrillingSiteParam_args&);
  CbmService_DeleteHighDrillingSiteParam_args& operator=(const CbmService_DeleteHighDrillingSiteParam_args&);
  CbmService_DeleteHighDrillingSiteParam_args() : id(0) {
  }

  virtual ~CbmService_DeleteHighDrillingSiteParam_args() throw();
  int32_t id;

  _CbmService_DeleteHighDrillingSiteParam_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteHighDrillingSiteParam_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteHighDrillingSiteParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteHighDrillingSiteParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteHighDrillingSiteParam_pargs {
 public:


  virtual ~CbmService_DeleteHighDrillingSiteParam_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteHighDrillingSiteParam_result__isset {
  _CbmService_DeleteHighDrillingSiteParam_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteHighDrillingSiteParam_result__isset;

class CbmService_DeleteHighDrillingSiteParam_result {
 public:

  CbmService_DeleteHighDrillingSiteParam_result(const CbmService_DeleteHighDrillingSiteParam_result&);
  CbmService_DeleteHighDrillingSiteParam_result& operator=(const CbmService_DeleteHighDrillingSiteParam_result&);
  CbmService_DeleteHighDrillingSiteParam_result() : success(0) {
  }

  virtual ~CbmService_DeleteHighDrillingSiteParam_result() throw();
  bool success;

  _CbmService_DeleteHighDrillingSiteParam_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteHighDrillingSiteParam_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteHighDrillingSiteParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteHighDrillingSiteParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteHighDrillingSiteParam_presult__isset {
  _CbmService_DeleteHighDrillingSiteParam_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteHighDrillingSiteParam_presult__isset;

class CbmService_DeleteHighDrillingSiteParam_presult {
 public:


  virtual ~CbmService_DeleteHighDrillingSiteParam_presult() throw();
  bool* success;

  _CbmService_DeleteHighDrillingSiteParam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateHighDrillingSiteParam_args__isset {
  _CbmService_UpdateHighDrillingSiteParam_args__isset() : high_drilling_site_param(false) {}
  bool high_drilling_site_param :1;
} _CbmService_UpdateHighDrillingSiteParam_args__isset;

class CbmService_UpdateHighDrillingSiteParam_args {
 public:

  CbmService_UpdateHighDrillingSiteParam_args(const CbmService_UpdateHighDrillingSiteParam_args&);
  CbmService_UpdateHighDrillingSiteParam_args& operator=(const CbmService_UpdateHighDrillingSiteParam_args&);
  CbmService_UpdateHighDrillingSiteParam_args() {
  }

  virtual ~CbmService_UpdateHighDrillingSiteParam_args() throw();
  HighDrillingSiteParam high_drilling_site_param;

  _CbmService_UpdateHighDrillingSiteParam_args__isset __isset;

  void __set_high_drilling_site_param(const HighDrillingSiteParam& val);

  bool operator == (const CbmService_UpdateHighDrillingSiteParam_args & rhs) const
  {
    if (!(high_drilling_site_param == rhs.high_drilling_site_param))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateHighDrillingSiteParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateHighDrillingSiteParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateHighDrillingSiteParam_pargs {
 public:


  virtual ~CbmService_UpdateHighDrillingSiteParam_pargs() throw();
  const HighDrillingSiteParam* high_drilling_site_param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateHighDrillingSiteParam_result__isset {
  _CbmService_UpdateHighDrillingSiteParam_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateHighDrillingSiteParam_result__isset;

class CbmService_UpdateHighDrillingSiteParam_result {
 public:

  CbmService_UpdateHighDrillingSiteParam_result(const CbmService_UpdateHighDrillingSiteParam_result&);
  CbmService_UpdateHighDrillingSiteParam_result& operator=(const CbmService_UpdateHighDrillingSiteParam_result&);
  CbmService_UpdateHighDrillingSiteParam_result() : success(0) {
  }

  virtual ~CbmService_UpdateHighDrillingSiteParam_result() throw();
  bool success;

  _CbmService_UpdateHighDrillingSiteParam_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateHighDrillingSiteParam_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateHighDrillingSiteParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateHighDrillingSiteParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateHighDrillingSiteParam_presult__isset {
  _CbmService_UpdateHighDrillingSiteParam_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateHighDrillingSiteParam_presult__isset;

class CbmService_UpdateHighDrillingSiteParam_presult {
 public:


  virtual ~CbmService_UpdateHighDrillingSiteParam_presult() throw();
  bool* success;

  _CbmService_UpdateHighDrillingSiteParam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingSiteParamById_args__isset {
  _CbmService_GetHighDrillingSiteParamById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetHighDrillingSiteParamById_args__isset;

class CbmService_GetHighDrillingSiteParamById_args {
 public:

  CbmService_GetHighDrillingSiteParamById_args(const CbmService_GetHighDrillingSiteParamById_args&);
  CbmService_GetHighDrillingSiteParamById_args& operator=(const CbmService_GetHighDrillingSiteParamById_args&);
  CbmService_GetHighDrillingSiteParamById_args() : id(0) {
  }

  virtual ~CbmService_GetHighDrillingSiteParamById_args() throw();
  int32_t id;

  _CbmService_GetHighDrillingSiteParamById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetHighDrillingSiteParamById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingSiteParamById_pargs {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamById_result__isset {
  _CbmService_GetHighDrillingSiteParamById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamById_result__isset;

class CbmService_GetHighDrillingSiteParamById_result {
 public:

  CbmService_GetHighDrillingSiteParamById_result(const CbmService_GetHighDrillingSiteParamById_result&);
  CbmService_GetHighDrillingSiteParamById_result& operator=(const CbmService_GetHighDrillingSiteParamById_result&);
  CbmService_GetHighDrillingSiteParamById_result() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamById_result() throw();
  HighDrillingSiteParam success;

  _CbmService_GetHighDrillingSiteParamById_result__isset __isset;

  void __set_success(const HighDrillingSiteParam& val);

  bool operator == (const CbmService_GetHighDrillingSiteParamById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamById_presult__isset {
  _CbmService_GetHighDrillingSiteParamById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamById_presult__isset;

class CbmService_GetHighDrillingSiteParamById_presult {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamById_presult() throw();
  HighDrillingSiteParam* success;

  _CbmService_GetHighDrillingSiteParamById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingSiteParamByForeignKey_args__isset {
  _CbmService_GetHighDrillingSiteParamByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetHighDrillingSiteParamByForeignKey_args__isset;

class CbmService_GetHighDrillingSiteParamByForeignKey_args {
 public:

  CbmService_GetHighDrillingSiteParamByForeignKey_args(const CbmService_GetHighDrillingSiteParamByForeignKey_args&);
  CbmService_GetHighDrillingSiteParamByForeignKey_args& operator=(const CbmService_GetHighDrillingSiteParamByForeignKey_args&);
  CbmService_GetHighDrillingSiteParamByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetHighDrillingSiteParamByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetHighDrillingSiteParamByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetHighDrillingSiteParamByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingSiteParamByForeignKey_pargs {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamByForeignKey_result__isset {
  _CbmService_GetHighDrillingSiteParamByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamByForeignKey_result__isset;

class CbmService_GetHighDrillingSiteParamByForeignKey_result {
 public:

  CbmService_GetHighDrillingSiteParamByForeignKey_result(const CbmService_GetHighDrillingSiteParamByForeignKey_result&);
  CbmService_GetHighDrillingSiteParamByForeignKey_result& operator=(const CbmService_GetHighDrillingSiteParamByForeignKey_result&);
  CbmService_GetHighDrillingSiteParamByForeignKey_result() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamByForeignKey_result() throw();
  HighDrillingSiteParam success;

  _CbmService_GetHighDrillingSiteParamByForeignKey_result__isset __isset;

  void __set_success(const HighDrillingSiteParam& val);

  bool operator == (const CbmService_GetHighDrillingSiteParamByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamByForeignKey_presult__isset {
  _CbmService_GetHighDrillingSiteParamByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamByForeignKey_presult__isset;

class CbmService_GetHighDrillingSiteParamByForeignKey_presult {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamByForeignKey_presult() throw();
  HighDrillingSiteParam* success;

  _CbmService_GetHighDrillingSiteParamByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHighDrillingSiteParamList_args {
 public:

  CbmService_GetHighDrillingSiteParamList_args(const CbmService_GetHighDrillingSiteParamList_args&);
  CbmService_GetHighDrillingSiteParamList_args& operator=(const CbmService_GetHighDrillingSiteParamList_args&);
  CbmService_GetHighDrillingSiteParamList_args() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamList_args() throw();

  bool operator == (const CbmService_GetHighDrillingSiteParamList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingSiteParamList_pargs {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamList_result__isset {
  _CbmService_GetHighDrillingSiteParamList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamList_result__isset;

class CbmService_GetHighDrillingSiteParamList_result {
 public:

  CbmService_GetHighDrillingSiteParamList_result(const CbmService_GetHighDrillingSiteParamList_result&);
  CbmService_GetHighDrillingSiteParamList_result& operator=(const CbmService_GetHighDrillingSiteParamList_result&);
  CbmService_GetHighDrillingSiteParamList_result() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamList_result() throw();
  std::vector<HighDrillingSiteParam>  success;

  _CbmService_GetHighDrillingSiteParamList_result__isset __isset;

  void __set_success(const std::vector<HighDrillingSiteParam> & val);

  bool operator == (const CbmService_GetHighDrillingSiteParamList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamList_presult__isset {
  _CbmService_GetHighDrillingSiteParamList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamList_presult__isset;

class CbmService_GetHighDrillingSiteParamList_presult {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamList_presult() throw();
  std::vector<HighDrillingSiteParam> * success;

  _CbmService_GetHighDrillingSiteParamList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHighDrillingSiteParamIds_args {
 public:

  CbmService_GetHighDrillingSiteParamIds_args(const CbmService_GetHighDrillingSiteParamIds_args&);
  CbmService_GetHighDrillingSiteParamIds_args& operator=(const CbmService_GetHighDrillingSiteParamIds_args&);
  CbmService_GetHighDrillingSiteParamIds_args() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamIds_args() throw();

  bool operator == (const CbmService_GetHighDrillingSiteParamIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingSiteParamIds_pargs {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamIds_result__isset {
  _CbmService_GetHighDrillingSiteParamIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamIds_result__isset;

class CbmService_GetHighDrillingSiteParamIds_result {
 public:

  CbmService_GetHighDrillingSiteParamIds_result(const CbmService_GetHighDrillingSiteParamIds_result&);
  CbmService_GetHighDrillingSiteParamIds_result& operator=(const CbmService_GetHighDrillingSiteParamIds_result&);
  CbmService_GetHighDrillingSiteParamIds_result() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetHighDrillingSiteParamIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetHighDrillingSiteParamIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamIds_presult__isset {
  _CbmService_GetHighDrillingSiteParamIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamIds_presult__isset;

class CbmService_GetHighDrillingSiteParamIds_presult {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetHighDrillingSiteParamIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHighDrillingSiteParamNames_args {
 public:

  CbmService_GetHighDrillingSiteParamNames_args(const CbmService_GetHighDrillingSiteParamNames_args&);
  CbmService_GetHighDrillingSiteParamNames_args& operator=(const CbmService_GetHighDrillingSiteParamNames_args&);
  CbmService_GetHighDrillingSiteParamNames_args() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamNames_args() throw();

  bool operator == (const CbmService_GetHighDrillingSiteParamNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingSiteParamNames_pargs {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamNames_result__isset {
  _CbmService_GetHighDrillingSiteParamNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamNames_result__isset;

class CbmService_GetHighDrillingSiteParamNames_result {
 public:

  CbmService_GetHighDrillingSiteParamNames_result(const CbmService_GetHighDrillingSiteParamNames_result&);
  CbmService_GetHighDrillingSiteParamNames_result& operator=(const CbmService_GetHighDrillingSiteParamNames_result&);
  CbmService_GetHighDrillingSiteParamNames_result() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetHighDrillingSiteParamNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetHighDrillingSiteParamNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamNames_presult__isset {
  _CbmService_GetHighDrillingSiteParamNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamNames_presult__isset;

class CbmService_GetHighDrillingSiteParamNames_presult {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetHighDrillingSiteParamNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreHighDrillingSiteParam_args__isset {
  _CbmService_AddMoreHighDrillingSiteParam_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreHighDrillingSiteParam_args__isset;

class CbmService_AddMoreHighDrillingSiteParam_args {
 public:

  CbmService_AddMoreHighDrillingSiteParam_args(const CbmService_AddMoreHighDrillingSiteParam_args&);
  CbmService_AddMoreHighDrillingSiteParam_args& operator=(const CbmService_AddMoreHighDrillingSiteParam_args&);
  CbmService_AddMoreHighDrillingSiteParam_args() {
  }

  virtual ~CbmService_AddMoreHighDrillingSiteParam_args() throw();
  std::vector<HighDrillingSiteParam>  objs;

  _CbmService_AddMoreHighDrillingSiteParam_args__isset __isset;

  void __set_objs(const std::vector<HighDrillingSiteParam> & val);

  bool operator == (const CbmService_AddMoreHighDrillingSiteParam_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreHighDrillingSiteParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreHighDrillingSiteParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHighDrillingSiteParam_pargs {
 public:


  virtual ~CbmService_AddMoreHighDrillingSiteParam_pargs() throw();
  const std::vector<HighDrillingSiteParam> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHighDrillingSiteParam_result {
 public:

  CbmService_AddMoreHighDrillingSiteParam_result(const CbmService_AddMoreHighDrillingSiteParam_result&);
  CbmService_AddMoreHighDrillingSiteParam_result& operator=(const CbmService_AddMoreHighDrillingSiteParam_result&);
  CbmService_AddMoreHighDrillingSiteParam_result() {
  }

  virtual ~CbmService_AddMoreHighDrillingSiteParam_result() throw();

  bool operator == (const CbmService_AddMoreHighDrillingSiteParam_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreHighDrillingSiteParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreHighDrillingSiteParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHighDrillingSiteParam_presult {
 public:


  virtual ~CbmService_AddMoreHighDrillingSiteParam_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreHighDrillingSiteParam_args__isset {
  _CbmService_DeleteMoreHighDrillingSiteParam_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreHighDrillingSiteParam_args__isset;

class CbmService_DeleteMoreHighDrillingSiteParam_args {
 public:

  CbmService_DeleteMoreHighDrillingSiteParam_args(const CbmService_DeleteMoreHighDrillingSiteParam_args&);
  CbmService_DeleteMoreHighDrillingSiteParam_args& operator=(const CbmService_DeleteMoreHighDrillingSiteParam_args&);
  CbmService_DeleteMoreHighDrillingSiteParam_args() {
  }

  virtual ~CbmService_DeleteMoreHighDrillingSiteParam_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreHighDrillingSiteParam_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreHighDrillingSiteParam_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreHighDrillingSiteParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreHighDrillingSiteParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHighDrillingSiteParam_pargs {
 public:


  virtual ~CbmService_DeleteMoreHighDrillingSiteParam_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHighDrillingSiteParam_result {
 public:

  CbmService_DeleteMoreHighDrillingSiteParam_result(const CbmService_DeleteMoreHighDrillingSiteParam_result&);
  CbmService_DeleteMoreHighDrillingSiteParam_result& operator=(const CbmService_DeleteMoreHighDrillingSiteParam_result&);
  CbmService_DeleteMoreHighDrillingSiteParam_result() {
  }

  virtual ~CbmService_DeleteMoreHighDrillingSiteParam_result() throw();

  bool operator == (const CbmService_DeleteMoreHighDrillingSiteParam_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreHighDrillingSiteParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreHighDrillingSiteParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHighDrillingSiteParam_presult {
 public:


  virtual ~CbmService_DeleteMoreHighDrillingSiteParam_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingSiteParamByFields_args__isset {
  _CbmService_GetHighDrillingSiteParamByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetHighDrillingSiteParamByFields_args__isset;

class CbmService_GetHighDrillingSiteParamByFields_args {
 public:

  CbmService_GetHighDrillingSiteParamByFields_args(const CbmService_GetHighDrillingSiteParamByFields_args&);
  CbmService_GetHighDrillingSiteParamByFields_args& operator=(const CbmService_GetHighDrillingSiteParamByFields_args&);
  CbmService_GetHighDrillingSiteParamByFields_args() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetHighDrillingSiteParamByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetHighDrillingSiteParamByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingSiteParamByFields_pargs {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamByFields_result__isset {
  _CbmService_GetHighDrillingSiteParamByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamByFields_result__isset;

class CbmService_GetHighDrillingSiteParamByFields_result {
 public:

  CbmService_GetHighDrillingSiteParamByFields_result(const CbmService_GetHighDrillingSiteParamByFields_result&);
  CbmService_GetHighDrillingSiteParamByFields_result& operator=(const CbmService_GetHighDrillingSiteParamByFields_result&);
  CbmService_GetHighDrillingSiteParamByFields_result() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamByFields_result() throw();
  HighDrillingSiteParam success;

  _CbmService_GetHighDrillingSiteParamByFields_result__isset __isset;

  void __set_success(const HighDrillingSiteParam& val);

  bool operator == (const CbmService_GetHighDrillingSiteParamByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamByFields_presult__isset {
  _CbmService_GetHighDrillingSiteParamByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamByFields_presult__isset;

class CbmService_GetHighDrillingSiteParamByFields_presult {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamByFields_presult() throw();
  HighDrillingSiteParam* success;

  _CbmService_GetHighDrillingSiteParamByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingSiteParamByFields1_args__isset {
  _CbmService_GetHighDrillingSiteParamByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetHighDrillingSiteParamByFields1_args__isset;

class CbmService_GetHighDrillingSiteParamByFields1_args {
 public:

  CbmService_GetHighDrillingSiteParamByFields1_args(const CbmService_GetHighDrillingSiteParamByFields1_args&);
  CbmService_GetHighDrillingSiteParamByFields1_args& operator=(const CbmService_GetHighDrillingSiteParamByFields1_args&);
  CbmService_GetHighDrillingSiteParamByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetHighDrillingSiteParamByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingSiteParamByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingSiteParamByFields1_pargs {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamByFields1_result__isset {
  _CbmService_GetHighDrillingSiteParamByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamByFields1_result__isset;

class CbmService_GetHighDrillingSiteParamByFields1_result {
 public:

  CbmService_GetHighDrillingSiteParamByFields1_result(const CbmService_GetHighDrillingSiteParamByFields1_result&);
  CbmService_GetHighDrillingSiteParamByFields1_result& operator=(const CbmService_GetHighDrillingSiteParamByFields1_result&);
  CbmService_GetHighDrillingSiteParamByFields1_result() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamByFields1_result() throw();
  HighDrillingSiteParam success;

  _CbmService_GetHighDrillingSiteParamByFields1_result__isset __isset;

  void __set_success(const HighDrillingSiteParam& val);

  bool operator == (const CbmService_GetHighDrillingSiteParamByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamByFields1_presult__isset {
  _CbmService_GetHighDrillingSiteParamByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamByFields1_presult__isset;

class CbmService_GetHighDrillingSiteParamByFields1_presult {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamByFields1_presult() throw();
  HighDrillingSiteParam* success;

  _CbmService_GetHighDrillingSiteParamByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingSiteParamByFields2_args__isset {
  _CbmService_GetHighDrillingSiteParamByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetHighDrillingSiteParamByFields2_args__isset;

class CbmService_GetHighDrillingSiteParamByFields2_args {
 public:

  CbmService_GetHighDrillingSiteParamByFields2_args(const CbmService_GetHighDrillingSiteParamByFields2_args&);
  CbmService_GetHighDrillingSiteParamByFields2_args& operator=(const CbmService_GetHighDrillingSiteParamByFields2_args&);
  CbmService_GetHighDrillingSiteParamByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetHighDrillingSiteParamByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingSiteParamByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingSiteParamByFields2_pargs {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamByFields2_result__isset {
  _CbmService_GetHighDrillingSiteParamByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamByFields2_result__isset;

class CbmService_GetHighDrillingSiteParamByFields2_result {
 public:

  CbmService_GetHighDrillingSiteParamByFields2_result(const CbmService_GetHighDrillingSiteParamByFields2_result&);
  CbmService_GetHighDrillingSiteParamByFields2_result& operator=(const CbmService_GetHighDrillingSiteParamByFields2_result&);
  CbmService_GetHighDrillingSiteParamByFields2_result() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamByFields2_result() throw();
  HighDrillingSiteParam success;

  _CbmService_GetHighDrillingSiteParamByFields2_result__isset __isset;

  void __set_success(const HighDrillingSiteParam& val);

  bool operator == (const CbmService_GetHighDrillingSiteParamByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamByFields2_presult__isset {
  _CbmService_GetHighDrillingSiteParamByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamByFields2_presult__isset;

class CbmService_GetHighDrillingSiteParamByFields2_presult {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamByFields2_presult() throw();
  HighDrillingSiteParam* success;

  _CbmService_GetHighDrillingSiteParamByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingSiteParamListByFields_args__isset {
  _CbmService_GetHighDrillingSiteParamListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetHighDrillingSiteParamListByFields_args__isset;

class CbmService_GetHighDrillingSiteParamListByFields_args {
 public:

  CbmService_GetHighDrillingSiteParamListByFields_args(const CbmService_GetHighDrillingSiteParamListByFields_args&);
  CbmService_GetHighDrillingSiteParamListByFields_args& operator=(const CbmService_GetHighDrillingSiteParamListByFields_args&);
  CbmService_GetHighDrillingSiteParamListByFields_args() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetHighDrillingSiteParamListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetHighDrillingSiteParamListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingSiteParamListByFields_pargs {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamListByFields_result__isset {
  _CbmService_GetHighDrillingSiteParamListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamListByFields_result__isset;

class CbmService_GetHighDrillingSiteParamListByFields_result {
 public:

  CbmService_GetHighDrillingSiteParamListByFields_result(const CbmService_GetHighDrillingSiteParamListByFields_result&);
  CbmService_GetHighDrillingSiteParamListByFields_result& operator=(const CbmService_GetHighDrillingSiteParamListByFields_result&);
  CbmService_GetHighDrillingSiteParamListByFields_result() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamListByFields_result() throw();
  std::vector<HighDrillingSiteParam>  success;

  _CbmService_GetHighDrillingSiteParamListByFields_result__isset __isset;

  void __set_success(const std::vector<HighDrillingSiteParam> & val);

  bool operator == (const CbmService_GetHighDrillingSiteParamListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamListByFields_presult__isset {
  _CbmService_GetHighDrillingSiteParamListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamListByFields_presult__isset;

class CbmService_GetHighDrillingSiteParamListByFields_presult {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamListByFields_presult() throw();
  std::vector<HighDrillingSiteParam> * success;

  _CbmService_GetHighDrillingSiteParamListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingSiteParamListByFields1_args__isset {
  _CbmService_GetHighDrillingSiteParamListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetHighDrillingSiteParamListByFields1_args__isset;

class CbmService_GetHighDrillingSiteParamListByFields1_args {
 public:

  CbmService_GetHighDrillingSiteParamListByFields1_args(const CbmService_GetHighDrillingSiteParamListByFields1_args&);
  CbmService_GetHighDrillingSiteParamListByFields1_args& operator=(const CbmService_GetHighDrillingSiteParamListByFields1_args&);
  CbmService_GetHighDrillingSiteParamListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetHighDrillingSiteParamListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingSiteParamListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingSiteParamListByFields1_pargs {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamListByFields1_result__isset {
  _CbmService_GetHighDrillingSiteParamListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamListByFields1_result__isset;

class CbmService_GetHighDrillingSiteParamListByFields1_result {
 public:

  CbmService_GetHighDrillingSiteParamListByFields1_result(const CbmService_GetHighDrillingSiteParamListByFields1_result&);
  CbmService_GetHighDrillingSiteParamListByFields1_result& operator=(const CbmService_GetHighDrillingSiteParamListByFields1_result&);
  CbmService_GetHighDrillingSiteParamListByFields1_result() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamListByFields1_result() throw();
  std::vector<HighDrillingSiteParam>  success;

  _CbmService_GetHighDrillingSiteParamListByFields1_result__isset __isset;

  void __set_success(const std::vector<HighDrillingSiteParam> & val);

  bool operator == (const CbmService_GetHighDrillingSiteParamListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamListByFields1_presult__isset {
  _CbmService_GetHighDrillingSiteParamListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamListByFields1_presult__isset;

class CbmService_GetHighDrillingSiteParamListByFields1_presult {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamListByFields1_presult() throw();
  std::vector<HighDrillingSiteParam> * success;

  _CbmService_GetHighDrillingSiteParamListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingSiteParamListByFields2_args__isset {
  _CbmService_GetHighDrillingSiteParamListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetHighDrillingSiteParamListByFields2_args__isset;

class CbmService_GetHighDrillingSiteParamListByFields2_args {
 public:

  CbmService_GetHighDrillingSiteParamListByFields2_args(const CbmService_GetHighDrillingSiteParamListByFields2_args&);
  CbmService_GetHighDrillingSiteParamListByFields2_args& operator=(const CbmService_GetHighDrillingSiteParamListByFields2_args&);
  CbmService_GetHighDrillingSiteParamListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetHighDrillingSiteParamListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingSiteParamListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingSiteParamListByFields2_pargs {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamListByFields2_result__isset {
  _CbmService_GetHighDrillingSiteParamListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamListByFields2_result__isset;

class CbmService_GetHighDrillingSiteParamListByFields2_result {
 public:

  CbmService_GetHighDrillingSiteParamListByFields2_result(const CbmService_GetHighDrillingSiteParamListByFields2_result&);
  CbmService_GetHighDrillingSiteParamListByFields2_result& operator=(const CbmService_GetHighDrillingSiteParamListByFields2_result&);
  CbmService_GetHighDrillingSiteParamListByFields2_result() {
  }

  virtual ~CbmService_GetHighDrillingSiteParamListByFields2_result() throw();
  std::vector<HighDrillingSiteParam>  success;

  _CbmService_GetHighDrillingSiteParamListByFields2_result__isset __isset;

  void __set_success(const std::vector<HighDrillingSiteParam> & val);

  bool operator == (const CbmService_GetHighDrillingSiteParamListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingSiteParamListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingSiteParamListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingSiteParamListByFields2_presult__isset {
  _CbmService_GetHighDrillingSiteParamListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingSiteParamListByFields2_presult__isset;

class CbmService_GetHighDrillingSiteParamListByFields2_presult {
 public:


  virtual ~CbmService_GetHighDrillingSiteParamListByFields2_presult() throw();
  std::vector<HighDrillingSiteParam> * success;

  _CbmService_GetHighDrillingSiteParamListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddHighDrillingTunnel_args__isset {
  _CbmService_AddHighDrillingTunnel_args__isset() : high_drilling_tunnel(false) {}
  bool high_drilling_tunnel :1;
} _CbmService_AddHighDrillingTunnel_args__isset;

class CbmService_AddHighDrillingTunnel_args {
 public:

  CbmService_AddHighDrillingTunnel_args(const CbmService_AddHighDrillingTunnel_args&);
  CbmService_AddHighDrillingTunnel_args& operator=(const CbmService_AddHighDrillingTunnel_args&);
  CbmService_AddHighDrillingTunnel_args() {
  }

  virtual ~CbmService_AddHighDrillingTunnel_args() throw();
  HighDrillingTunnel high_drilling_tunnel;

  _CbmService_AddHighDrillingTunnel_args__isset __isset;

  void __set_high_drilling_tunnel(const HighDrillingTunnel& val);

  bool operator == (const CbmService_AddHighDrillingTunnel_args & rhs) const
  {
    if (!(high_drilling_tunnel == rhs.high_drilling_tunnel))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddHighDrillingTunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddHighDrillingTunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddHighDrillingTunnel_pargs {
 public:


  virtual ~CbmService_AddHighDrillingTunnel_pargs() throw();
  const HighDrillingTunnel* high_drilling_tunnel;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddHighDrillingTunnel_result__isset {
  _CbmService_AddHighDrillingTunnel_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddHighDrillingTunnel_result__isset;

class CbmService_AddHighDrillingTunnel_result {
 public:

  CbmService_AddHighDrillingTunnel_result(const CbmService_AddHighDrillingTunnel_result&);
  CbmService_AddHighDrillingTunnel_result& operator=(const CbmService_AddHighDrillingTunnel_result&);
  CbmService_AddHighDrillingTunnel_result() : success(0) {
  }

  virtual ~CbmService_AddHighDrillingTunnel_result() throw();
  int32_t success;

  _CbmService_AddHighDrillingTunnel_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddHighDrillingTunnel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddHighDrillingTunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddHighDrillingTunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddHighDrillingTunnel_presult__isset {
  _CbmService_AddHighDrillingTunnel_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddHighDrillingTunnel_presult__isset;

class CbmService_AddHighDrillingTunnel_presult {
 public:


  virtual ~CbmService_AddHighDrillingTunnel_presult() throw();
  int32_t* success;

  _CbmService_AddHighDrillingTunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteHighDrillingTunnel_args__isset {
  _CbmService_DeleteHighDrillingTunnel_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteHighDrillingTunnel_args__isset;

class CbmService_DeleteHighDrillingTunnel_args {
 public:

  CbmService_DeleteHighDrillingTunnel_args(const CbmService_DeleteHighDrillingTunnel_args&);
  CbmService_DeleteHighDrillingTunnel_args& operator=(const CbmService_DeleteHighDrillingTunnel_args&);
  CbmService_DeleteHighDrillingTunnel_args() : id(0) {
  }

  virtual ~CbmService_DeleteHighDrillingTunnel_args() throw();
  int32_t id;

  _CbmService_DeleteHighDrillingTunnel_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteHighDrillingTunnel_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteHighDrillingTunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteHighDrillingTunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteHighDrillingTunnel_pargs {
 public:


  virtual ~CbmService_DeleteHighDrillingTunnel_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteHighDrillingTunnel_result__isset {
  _CbmService_DeleteHighDrillingTunnel_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteHighDrillingTunnel_result__isset;

class CbmService_DeleteHighDrillingTunnel_result {
 public:

  CbmService_DeleteHighDrillingTunnel_result(const CbmService_DeleteHighDrillingTunnel_result&);
  CbmService_DeleteHighDrillingTunnel_result& operator=(const CbmService_DeleteHighDrillingTunnel_result&);
  CbmService_DeleteHighDrillingTunnel_result() : success(0) {
  }

  virtual ~CbmService_DeleteHighDrillingTunnel_result() throw();
  bool success;

  _CbmService_DeleteHighDrillingTunnel_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteHighDrillingTunnel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteHighDrillingTunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteHighDrillingTunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteHighDrillingTunnel_presult__isset {
  _CbmService_DeleteHighDrillingTunnel_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteHighDrillingTunnel_presult__isset;

class CbmService_DeleteHighDrillingTunnel_presult {
 public:


  virtual ~CbmService_DeleteHighDrillingTunnel_presult() throw();
  bool* success;

  _CbmService_DeleteHighDrillingTunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateHighDrillingTunnel_args__isset {
  _CbmService_UpdateHighDrillingTunnel_args__isset() : high_drilling_tunnel(false) {}
  bool high_drilling_tunnel :1;
} _CbmService_UpdateHighDrillingTunnel_args__isset;

class CbmService_UpdateHighDrillingTunnel_args {
 public:

  CbmService_UpdateHighDrillingTunnel_args(const CbmService_UpdateHighDrillingTunnel_args&);
  CbmService_UpdateHighDrillingTunnel_args& operator=(const CbmService_UpdateHighDrillingTunnel_args&);
  CbmService_UpdateHighDrillingTunnel_args() {
  }

  virtual ~CbmService_UpdateHighDrillingTunnel_args() throw();
  HighDrillingTunnel high_drilling_tunnel;

  _CbmService_UpdateHighDrillingTunnel_args__isset __isset;

  void __set_high_drilling_tunnel(const HighDrillingTunnel& val);

  bool operator == (const CbmService_UpdateHighDrillingTunnel_args & rhs) const
  {
    if (!(high_drilling_tunnel == rhs.high_drilling_tunnel))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateHighDrillingTunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateHighDrillingTunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateHighDrillingTunnel_pargs {
 public:


  virtual ~CbmService_UpdateHighDrillingTunnel_pargs() throw();
  const HighDrillingTunnel* high_drilling_tunnel;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateHighDrillingTunnel_result__isset {
  _CbmService_UpdateHighDrillingTunnel_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateHighDrillingTunnel_result__isset;

class CbmService_UpdateHighDrillingTunnel_result {
 public:

  CbmService_UpdateHighDrillingTunnel_result(const CbmService_UpdateHighDrillingTunnel_result&);
  CbmService_UpdateHighDrillingTunnel_result& operator=(const CbmService_UpdateHighDrillingTunnel_result&);
  CbmService_UpdateHighDrillingTunnel_result() : success(0) {
  }

  virtual ~CbmService_UpdateHighDrillingTunnel_result() throw();
  bool success;

  _CbmService_UpdateHighDrillingTunnel_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateHighDrillingTunnel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateHighDrillingTunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateHighDrillingTunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateHighDrillingTunnel_presult__isset {
  _CbmService_UpdateHighDrillingTunnel_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateHighDrillingTunnel_presult__isset;

class CbmService_UpdateHighDrillingTunnel_presult {
 public:


  virtual ~CbmService_UpdateHighDrillingTunnel_presult() throw();
  bool* success;

  _CbmService_UpdateHighDrillingTunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingTunnelById_args__isset {
  _CbmService_GetHighDrillingTunnelById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetHighDrillingTunnelById_args__isset;

class CbmService_GetHighDrillingTunnelById_args {
 public:

  CbmService_GetHighDrillingTunnelById_args(const CbmService_GetHighDrillingTunnelById_args&);
  CbmService_GetHighDrillingTunnelById_args& operator=(const CbmService_GetHighDrillingTunnelById_args&);
  CbmService_GetHighDrillingTunnelById_args() : id(0) {
  }

  virtual ~CbmService_GetHighDrillingTunnelById_args() throw();
  int32_t id;

  _CbmService_GetHighDrillingTunnelById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetHighDrillingTunnelById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingTunnelById_pargs {
 public:


  virtual ~CbmService_GetHighDrillingTunnelById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelById_result__isset {
  _CbmService_GetHighDrillingTunnelById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelById_result__isset;

class CbmService_GetHighDrillingTunnelById_result {
 public:

  CbmService_GetHighDrillingTunnelById_result(const CbmService_GetHighDrillingTunnelById_result&);
  CbmService_GetHighDrillingTunnelById_result& operator=(const CbmService_GetHighDrillingTunnelById_result&);
  CbmService_GetHighDrillingTunnelById_result() {
  }

  virtual ~CbmService_GetHighDrillingTunnelById_result() throw();
  HighDrillingTunnel success;

  _CbmService_GetHighDrillingTunnelById_result__isset __isset;

  void __set_success(const HighDrillingTunnel& val);

  bool operator == (const CbmService_GetHighDrillingTunnelById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelById_presult__isset {
  _CbmService_GetHighDrillingTunnelById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelById_presult__isset;

class CbmService_GetHighDrillingTunnelById_presult {
 public:


  virtual ~CbmService_GetHighDrillingTunnelById_presult() throw();
  HighDrillingTunnel* success;

  _CbmService_GetHighDrillingTunnelById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingTunnelByForeignKey_args__isset {
  _CbmService_GetHighDrillingTunnelByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetHighDrillingTunnelByForeignKey_args__isset;

class CbmService_GetHighDrillingTunnelByForeignKey_args {
 public:

  CbmService_GetHighDrillingTunnelByForeignKey_args(const CbmService_GetHighDrillingTunnelByForeignKey_args&);
  CbmService_GetHighDrillingTunnelByForeignKey_args& operator=(const CbmService_GetHighDrillingTunnelByForeignKey_args&);
  CbmService_GetHighDrillingTunnelByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetHighDrillingTunnelByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetHighDrillingTunnelByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetHighDrillingTunnelByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingTunnelByForeignKey_pargs {
 public:


  virtual ~CbmService_GetHighDrillingTunnelByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelByForeignKey_result__isset {
  _CbmService_GetHighDrillingTunnelByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelByForeignKey_result__isset;

class CbmService_GetHighDrillingTunnelByForeignKey_result {
 public:

  CbmService_GetHighDrillingTunnelByForeignKey_result(const CbmService_GetHighDrillingTunnelByForeignKey_result&);
  CbmService_GetHighDrillingTunnelByForeignKey_result& operator=(const CbmService_GetHighDrillingTunnelByForeignKey_result&);
  CbmService_GetHighDrillingTunnelByForeignKey_result() {
  }

  virtual ~CbmService_GetHighDrillingTunnelByForeignKey_result() throw();
  HighDrillingTunnel success;

  _CbmService_GetHighDrillingTunnelByForeignKey_result__isset __isset;

  void __set_success(const HighDrillingTunnel& val);

  bool operator == (const CbmService_GetHighDrillingTunnelByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelByForeignKey_presult__isset {
  _CbmService_GetHighDrillingTunnelByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelByForeignKey_presult__isset;

class CbmService_GetHighDrillingTunnelByForeignKey_presult {
 public:


  virtual ~CbmService_GetHighDrillingTunnelByForeignKey_presult() throw();
  HighDrillingTunnel* success;

  _CbmService_GetHighDrillingTunnelByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHighDrillingTunnelList_args {
 public:

  CbmService_GetHighDrillingTunnelList_args(const CbmService_GetHighDrillingTunnelList_args&);
  CbmService_GetHighDrillingTunnelList_args& operator=(const CbmService_GetHighDrillingTunnelList_args&);
  CbmService_GetHighDrillingTunnelList_args() {
  }

  virtual ~CbmService_GetHighDrillingTunnelList_args() throw();

  bool operator == (const CbmService_GetHighDrillingTunnelList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingTunnelList_pargs {
 public:


  virtual ~CbmService_GetHighDrillingTunnelList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelList_result__isset {
  _CbmService_GetHighDrillingTunnelList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelList_result__isset;

class CbmService_GetHighDrillingTunnelList_result {
 public:

  CbmService_GetHighDrillingTunnelList_result(const CbmService_GetHighDrillingTunnelList_result&);
  CbmService_GetHighDrillingTunnelList_result& operator=(const CbmService_GetHighDrillingTunnelList_result&);
  CbmService_GetHighDrillingTunnelList_result() {
  }

  virtual ~CbmService_GetHighDrillingTunnelList_result() throw();
  std::vector<HighDrillingTunnel>  success;

  _CbmService_GetHighDrillingTunnelList_result__isset __isset;

  void __set_success(const std::vector<HighDrillingTunnel> & val);

  bool operator == (const CbmService_GetHighDrillingTunnelList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelList_presult__isset {
  _CbmService_GetHighDrillingTunnelList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelList_presult__isset;

class CbmService_GetHighDrillingTunnelList_presult {
 public:


  virtual ~CbmService_GetHighDrillingTunnelList_presult() throw();
  std::vector<HighDrillingTunnel> * success;

  _CbmService_GetHighDrillingTunnelList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHighDrillingTunnelIds_args {
 public:

  CbmService_GetHighDrillingTunnelIds_args(const CbmService_GetHighDrillingTunnelIds_args&);
  CbmService_GetHighDrillingTunnelIds_args& operator=(const CbmService_GetHighDrillingTunnelIds_args&);
  CbmService_GetHighDrillingTunnelIds_args() {
  }

  virtual ~CbmService_GetHighDrillingTunnelIds_args() throw();

  bool operator == (const CbmService_GetHighDrillingTunnelIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingTunnelIds_pargs {
 public:


  virtual ~CbmService_GetHighDrillingTunnelIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelIds_result__isset {
  _CbmService_GetHighDrillingTunnelIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelIds_result__isset;

class CbmService_GetHighDrillingTunnelIds_result {
 public:

  CbmService_GetHighDrillingTunnelIds_result(const CbmService_GetHighDrillingTunnelIds_result&);
  CbmService_GetHighDrillingTunnelIds_result& operator=(const CbmService_GetHighDrillingTunnelIds_result&);
  CbmService_GetHighDrillingTunnelIds_result() {
  }

  virtual ~CbmService_GetHighDrillingTunnelIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetHighDrillingTunnelIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetHighDrillingTunnelIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelIds_presult__isset {
  _CbmService_GetHighDrillingTunnelIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelIds_presult__isset;

class CbmService_GetHighDrillingTunnelIds_presult {
 public:


  virtual ~CbmService_GetHighDrillingTunnelIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetHighDrillingTunnelIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHighDrillingTunnelNames_args {
 public:

  CbmService_GetHighDrillingTunnelNames_args(const CbmService_GetHighDrillingTunnelNames_args&);
  CbmService_GetHighDrillingTunnelNames_args& operator=(const CbmService_GetHighDrillingTunnelNames_args&);
  CbmService_GetHighDrillingTunnelNames_args() {
  }

  virtual ~CbmService_GetHighDrillingTunnelNames_args() throw();

  bool operator == (const CbmService_GetHighDrillingTunnelNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingTunnelNames_pargs {
 public:


  virtual ~CbmService_GetHighDrillingTunnelNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelNames_result__isset {
  _CbmService_GetHighDrillingTunnelNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelNames_result__isset;

class CbmService_GetHighDrillingTunnelNames_result {
 public:

  CbmService_GetHighDrillingTunnelNames_result(const CbmService_GetHighDrillingTunnelNames_result&);
  CbmService_GetHighDrillingTunnelNames_result& operator=(const CbmService_GetHighDrillingTunnelNames_result&);
  CbmService_GetHighDrillingTunnelNames_result() {
  }

  virtual ~CbmService_GetHighDrillingTunnelNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetHighDrillingTunnelNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetHighDrillingTunnelNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelNames_presult__isset {
  _CbmService_GetHighDrillingTunnelNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelNames_presult__isset;

class CbmService_GetHighDrillingTunnelNames_presult {
 public:


  virtual ~CbmService_GetHighDrillingTunnelNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetHighDrillingTunnelNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreHighDrillingTunnel_args__isset {
  _CbmService_AddMoreHighDrillingTunnel_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreHighDrillingTunnel_args__isset;

class CbmService_AddMoreHighDrillingTunnel_args {
 public:

  CbmService_AddMoreHighDrillingTunnel_args(const CbmService_AddMoreHighDrillingTunnel_args&);
  CbmService_AddMoreHighDrillingTunnel_args& operator=(const CbmService_AddMoreHighDrillingTunnel_args&);
  CbmService_AddMoreHighDrillingTunnel_args() {
  }

  virtual ~CbmService_AddMoreHighDrillingTunnel_args() throw();
  std::vector<HighDrillingTunnel>  objs;

  _CbmService_AddMoreHighDrillingTunnel_args__isset __isset;

  void __set_objs(const std::vector<HighDrillingTunnel> & val);

  bool operator == (const CbmService_AddMoreHighDrillingTunnel_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreHighDrillingTunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreHighDrillingTunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHighDrillingTunnel_pargs {
 public:


  virtual ~CbmService_AddMoreHighDrillingTunnel_pargs() throw();
  const std::vector<HighDrillingTunnel> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHighDrillingTunnel_result {
 public:

  CbmService_AddMoreHighDrillingTunnel_result(const CbmService_AddMoreHighDrillingTunnel_result&);
  CbmService_AddMoreHighDrillingTunnel_result& operator=(const CbmService_AddMoreHighDrillingTunnel_result&);
  CbmService_AddMoreHighDrillingTunnel_result() {
  }

  virtual ~CbmService_AddMoreHighDrillingTunnel_result() throw();

  bool operator == (const CbmService_AddMoreHighDrillingTunnel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreHighDrillingTunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreHighDrillingTunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHighDrillingTunnel_presult {
 public:


  virtual ~CbmService_AddMoreHighDrillingTunnel_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreHighDrillingTunnel_args__isset {
  _CbmService_DeleteMoreHighDrillingTunnel_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreHighDrillingTunnel_args__isset;

class CbmService_DeleteMoreHighDrillingTunnel_args {
 public:

  CbmService_DeleteMoreHighDrillingTunnel_args(const CbmService_DeleteMoreHighDrillingTunnel_args&);
  CbmService_DeleteMoreHighDrillingTunnel_args& operator=(const CbmService_DeleteMoreHighDrillingTunnel_args&);
  CbmService_DeleteMoreHighDrillingTunnel_args() {
  }

  virtual ~CbmService_DeleteMoreHighDrillingTunnel_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreHighDrillingTunnel_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreHighDrillingTunnel_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreHighDrillingTunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreHighDrillingTunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHighDrillingTunnel_pargs {
 public:


  virtual ~CbmService_DeleteMoreHighDrillingTunnel_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHighDrillingTunnel_result {
 public:

  CbmService_DeleteMoreHighDrillingTunnel_result(const CbmService_DeleteMoreHighDrillingTunnel_result&);
  CbmService_DeleteMoreHighDrillingTunnel_result& operator=(const CbmService_DeleteMoreHighDrillingTunnel_result&);
  CbmService_DeleteMoreHighDrillingTunnel_result() {
  }

  virtual ~CbmService_DeleteMoreHighDrillingTunnel_result() throw();

  bool operator == (const CbmService_DeleteMoreHighDrillingTunnel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreHighDrillingTunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreHighDrillingTunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHighDrillingTunnel_presult {
 public:


  virtual ~CbmService_DeleteMoreHighDrillingTunnel_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingTunnelByFields_args__isset {
  _CbmService_GetHighDrillingTunnelByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetHighDrillingTunnelByFields_args__isset;

class CbmService_GetHighDrillingTunnelByFields_args {
 public:

  CbmService_GetHighDrillingTunnelByFields_args(const CbmService_GetHighDrillingTunnelByFields_args&);
  CbmService_GetHighDrillingTunnelByFields_args& operator=(const CbmService_GetHighDrillingTunnelByFields_args&);
  CbmService_GetHighDrillingTunnelByFields_args() {
  }

  virtual ~CbmService_GetHighDrillingTunnelByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetHighDrillingTunnelByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetHighDrillingTunnelByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingTunnelByFields_pargs {
 public:


  virtual ~CbmService_GetHighDrillingTunnelByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelByFields_result__isset {
  _CbmService_GetHighDrillingTunnelByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelByFields_result__isset;

class CbmService_GetHighDrillingTunnelByFields_result {
 public:

  CbmService_GetHighDrillingTunnelByFields_result(const CbmService_GetHighDrillingTunnelByFields_result&);
  CbmService_GetHighDrillingTunnelByFields_result& operator=(const CbmService_GetHighDrillingTunnelByFields_result&);
  CbmService_GetHighDrillingTunnelByFields_result() {
  }

  virtual ~CbmService_GetHighDrillingTunnelByFields_result() throw();
  HighDrillingTunnel success;

  _CbmService_GetHighDrillingTunnelByFields_result__isset __isset;

  void __set_success(const HighDrillingTunnel& val);

  bool operator == (const CbmService_GetHighDrillingTunnelByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelByFields_presult__isset {
  _CbmService_GetHighDrillingTunnelByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelByFields_presult__isset;

class CbmService_GetHighDrillingTunnelByFields_presult {
 public:


  virtual ~CbmService_GetHighDrillingTunnelByFields_presult() throw();
  HighDrillingTunnel* success;

  _CbmService_GetHighDrillingTunnelByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingTunnelByFields1_args__isset {
  _CbmService_GetHighDrillingTunnelByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetHighDrillingTunnelByFields1_args__isset;

class CbmService_GetHighDrillingTunnelByFields1_args {
 public:

  CbmService_GetHighDrillingTunnelByFields1_args(const CbmService_GetHighDrillingTunnelByFields1_args&);
  CbmService_GetHighDrillingTunnelByFields1_args& operator=(const CbmService_GetHighDrillingTunnelByFields1_args&);
  CbmService_GetHighDrillingTunnelByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetHighDrillingTunnelByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetHighDrillingTunnelByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingTunnelByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingTunnelByFields1_pargs {
 public:


  virtual ~CbmService_GetHighDrillingTunnelByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelByFields1_result__isset {
  _CbmService_GetHighDrillingTunnelByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelByFields1_result__isset;

class CbmService_GetHighDrillingTunnelByFields1_result {
 public:

  CbmService_GetHighDrillingTunnelByFields1_result(const CbmService_GetHighDrillingTunnelByFields1_result&);
  CbmService_GetHighDrillingTunnelByFields1_result& operator=(const CbmService_GetHighDrillingTunnelByFields1_result&);
  CbmService_GetHighDrillingTunnelByFields1_result() {
  }

  virtual ~CbmService_GetHighDrillingTunnelByFields1_result() throw();
  HighDrillingTunnel success;

  _CbmService_GetHighDrillingTunnelByFields1_result__isset __isset;

  void __set_success(const HighDrillingTunnel& val);

  bool operator == (const CbmService_GetHighDrillingTunnelByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelByFields1_presult__isset {
  _CbmService_GetHighDrillingTunnelByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelByFields1_presult__isset;

class CbmService_GetHighDrillingTunnelByFields1_presult {
 public:


  virtual ~CbmService_GetHighDrillingTunnelByFields1_presult() throw();
  HighDrillingTunnel* success;

  _CbmService_GetHighDrillingTunnelByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingTunnelByFields2_args__isset {
  _CbmService_GetHighDrillingTunnelByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetHighDrillingTunnelByFields2_args__isset;

class CbmService_GetHighDrillingTunnelByFields2_args {
 public:

  CbmService_GetHighDrillingTunnelByFields2_args(const CbmService_GetHighDrillingTunnelByFields2_args&);
  CbmService_GetHighDrillingTunnelByFields2_args& operator=(const CbmService_GetHighDrillingTunnelByFields2_args&);
  CbmService_GetHighDrillingTunnelByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetHighDrillingTunnelByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetHighDrillingTunnelByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingTunnelByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingTunnelByFields2_pargs {
 public:


  virtual ~CbmService_GetHighDrillingTunnelByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelByFields2_result__isset {
  _CbmService_GetHighDrillingTunnelByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelByFields2_result__isset;

class CbmService_GetHighDrillingTunnelByFields2_result {
 public:

  CbmService_GetHighDrillingTunnelByFields2_result(const CbmService_GetHighDrillingTunnelByFields2_result&);
  CbmService_GetHighDrillingTunnelByFields2_result& operator=(const CbmService_GetHighDrillingTunnelByFields2_result&);
  CbmService_GetHighDrillingTunnelByFields2_result() {
  }

  virtual ~CbmService_GetHighDrillingTunnelByFields2_result() throw();
  HighDrillingTunnel success;

  _CbmService_GetHighDrillingTunnelByFields2_result__isset __isset;

  void __set_success(const HighDrillingTunnel& val);

  bool operator == (const CbmService_GetHighDrillingTunnelByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelByFields2_presult__isset {
  _CbmService_GetHighDrillingTunnelByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelByFields2_presult__isset;

class CbmService_GetHighDrillingTunnelByFields2_presult {
 public:


  virtual ~CbmService_GetHighDrillingTunnelByFields2_presult() throw();
  HighDrillingTunnel* success;

  _CbmService_GetHighDrillingTunnelByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingTunnelListByFields_args__isset {
  _CbmService_GetHighDrillingTunnelListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetHighDrillingTunnelListByFields_args__isset;

class CbmService_GetHighDrillingTunnelListByFields_args {
 public:

  CbmService_GetHighDrillingTunnelListByFields_args(const CbmService_GetHighDrillingTunnelListByFields_args&);
  CbmService_GetHighDrillingTunnelListByFields_args& operator=(const CbmService_GetHighDrillingTunnelListByFields_args&);
  CbmService_GetHighDrillingTunnelListByFields_args() {
  }

  virtual ~CbmService_GetHighDrillingTunnelListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetHighDrillingTunnelListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetHighDrillingTunnelListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingTunnelListByFields_pargs {
 public:


  virtual ~CbmService_GetHighDrillingTunnelListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelListByFields_result__isset {
  _CbmService_GetHighDrillingTunnelListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelListByFields_result__isset;

class CbmService_GetHighDrillingTunnelListByFields_result {
 public:

  CbmService_GetHighDrillingTunnelListByFields_result(const CbmService_GetHighDrillingTunnelListByFields_result&);
  CbmService_GetHighDrillingTunnelListByFields_result& operator=(const CbmService_GetHighDrillingTunnelListByFields_result&);
  CbmService_GetHighDrillingTunnelListByFields_result() {
  }

  virtual ~CbmService_GetHighDrillingTunnelListByFields_result() throw();
  std::vector<HighDrillingTunnel>  success;

  _CbmService_GetHighDrillingTunnelListByFields_result__isset __isset;

  void __set_success(const std::vector<HighDrillingTunnel> & val);

  bool operator == (const CbmService_GetHighDrillingTunnelListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelListByFields_presult__isset {
  _CbmService_GetHighDrillingTunnelListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelListByFields_presult__isset;

class CbmService_GetHighDrillingTunnelListByFields_presult {
 public:


  virtual ~CbmService_GetHighDrillingTunnelListByFields_presult() throw();
  std::vector<HighDrillingTunnel> * success;

  _CbmService_GetHighDrillingTunnelListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingTunnelListByFields1_args__isset {
  _CbmService_GetHighDrillingTunnelListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetHighDrillingTunnelListByFields1_args__isset;

class CbmService_GetHighDrillingTunnelListByFields1_args {
 public:

  CbmService_GetHighDrillingTunnelListByFields1_args(const CbmService_GetHighDrillingTunnelListByFields1_args&);
  CbmService_GetHighDrillingTunnelListByFields1_args& operator=(const CbmService_GetHighDrillingTunnelListByFields1_args&);
  CbmService_GetHighDrillingTunnelListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetHighDrillingTunnelListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetHighDrillingTunnelListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingTunnelListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingTunnelListByFields1_pargs {
 public:


  virtual ~CbmService_GetHighDrillingTunnelListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelListByFields1_result__isset {
  _CbmService_GetHighDrillingTunnelListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelListByFields1_result__isset;

class CbmService_GetHighDrillingTunnelListByFields1_result {
 public:

  CbmService_GetHighDrillingTunnelListByFields1_result(const CbmService_GetHighDrillingTunnelListByFields1_result&);
  CbmService_GetHighDrillingTunnelListByFields1_result& operator=(const CbmService_GetHighDrillingTunnelListByFields1_result&);
  CbmService_GetHighDrillingTunnelListByFields1_result() {
  }

  virtual ~CbmService_GetHighDrillingTunnelListByFields1_result() throw();
  std::vector<HighDrillingTunnel>  success;

  _CbmService_GetHighDrillingTunnelListByFields1_result__isset __isset;

  void __set_success(const std::vector<HighDrillingTunnel> & val);

  bool operator == (const CbmService_GetHighDrillingTunnelListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelListByFields1_presult__isset {
  _CbmService_GetHighDrillingTunnelListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelListByFields1_presult__isset;

class CbmService_GetHighDrillingTunnelListByFields1_presult {
 public:


  virtual ~CbmService_GetHighDrillingTunnelListByFields1_presult() throw();
  std::vector<HighDrillingTunnel> * success;

  _CbmService_GetHighDrillingTunnelListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHighDrillingTunnelListByFields2_args__isset {
  _CbmService_GetHighDrillingTunnelListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetHighDrillingTunnelListByFields2_args__isset;

class CbmService_GetHighDrillingTunnelListByFields2_args {
 public:

  CbmService_GetHighDrillingTunnelListByFields2_args(const CbmService_GetHighDrillingTunnelListByFields2_args&);
  CbmService_GetHighDrillingTunnelListByFields2_args& operator=(const CbmService_GetHighDrillingTunnelListByFields2_args&);
  CbmService_GetHighDrillingTunnelListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetHighDrillingTunnelListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetHighDrillingTunnelListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetHighDrillingTunnelListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHighDrillingTunnelListByFields2_pargs {
 public:


  virtual ~CbmService_GetHighDrillingTunnelListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelListByFields2_result__isset {
  _CbmService_GetHighDrillingTunnelListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelListByFields2_result__isset;

class CbmService_GetHighDrillingTunnelListByFields2_result {
 public:

  CbmService_GetHighDrillingTunnelListByFields2_result(const CbmService_GetHighDrillingTunnelListByFields2_result&);
  CbmService_GetHighDrillingTunnelListByFields2_result& operator=(const CbmService_GetHighDrillingTunnelListByFields2_result&);
  CbmService_GetHighDrillingTunnelListByFields2_result() {
  }

  virtual ~CbmService_GetHighDrillingTunnelListByFields2_result() throw();
  std::vector<HighDrillingTunnel>  success;

  _CbmService_GetHighDrillingTunnelListByFields2_result__isset __isset;

  void __set_success(const std::vector<HighDrillingTunnel> & val);

  bool operator == (const CbmService_GetHighDrillingTunnelListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHighDrillingTunnelListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHighDrillingTunnelListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHighDrillingTunnelListByFields2_presult__isset {
  _CbmService_GetHighDrillingTunnelListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHighDrillingTunnelListByFields2_presult__isset;

class CbmService_GetHighDrillingTunnelListByFields2_presult {
 public:


  virtual ~CbmService_GetHighDrillingTunnelListByFields2_presult() throw();
  std::vector<HighDrillingTunnel> * success;

  _CbmService_GetHighDrillingTunnelListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddHydrGeo_args__isset {
  _CbmService_AddHydrGeo_args__isset() : hydr_geo(false) {}
  bool hydr_geo :1;
} _CbmService_AddHydrGeo_args__isset;

class CbmService_AddHydrGeo_args {
 public:

  CbmService_AddHydrGeo_args(const CbmService_AddHydrGeo_args&);
  CbmService_AddHydrGeo_args& operator=(const CbmService_AddHydrGeo_args&);
  CbmService_AddHydrGeo_args() {
  }

  virtual ~CbmService_AddHydrGeo_args() throw();
  HydrGeo hydr_geo;

  _CbmService_AddHydrGeo_args__isset __isset;

  void __set_hydr_geo(const HydrGeo& val);

  bool operator == (const CbmService_AddHydrGeo_args & rhs) const
  {
    if (!(hydr_geo == rhs.hydr_geo))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddHydrGeo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddHydrGeo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddHydrGeo_pargs {
 public:


  virtual ~CbmService_AddHydrGeo_pargs() throw();
  const HydrGeo* hydr_geo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddHydrGeo_result__isset {
  _CbmService_AddHydrGeo_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddHydrGeo_result__isset;

class CbmService_AddHydrGeo_result {
 public:

  CbmService_AddHydrGeo_result(const CbmService_AddHydrGeo_result&);
  CbmService_AddHydrGeo_result& operator=(const CbmService_AddHydrGeo_result&);
  CbmService_AddHydrGeo_result() : success(0) {
  }

  virtual ~CbmService_AddHydrGeo_result() throw();
  int32_t success;

  _CbmService_AddHydrGeo_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddHydrGeo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddHydrGeo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddHydrGeo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddHydrGeo_presult__isset {
  _CbmService_AddHydrGeo_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddHydrGeo_presult__isset;

class CbmService_AddHydrGeo_presult {
 public:


  virtual ~CbmService_AddHydrGeo_presult() throw();
  int32_t* success;

  _CbmService_AddHydrGeo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteHydrGeo_args__isset {
  _CbmService_DeleteHydrGeo_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteHydrGeo_args__isset;

class CbmService_DeleteHydrGeo_args {
 public:

  CbmService_DeleteHydrGeo_args(const CbmService_DeleteHydrGeo_args&);
  CbmService_DeleteHydrGeo_args& operator=(const CbmService_DeleteHydrGeo_args&);
  CbmService_DeleteHydrGeo_args() : id(0) {
  }

  virtual ~CbmService_DeleteHydrGeo_args() throw();
  int32_t id;

  _CbmService_DeleteHydrGeo_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteHydrGeo_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteHydrGeo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteHydrGeo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteHydrGeo_pargs {
 public:


  virtual ~CbmService_DeleteHydrGeo_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteHydrGeo_result__isset {
  _CbmService_DeleteHydrGeo_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteHydrGeo_result__isset;

class CbmService_DeleteHydrGeo_result {
 public:

  CbmService_DeleteHydrGeo_result(const CbmService_DeleteHydrGeo_result&);
  CbmService_DeleteHydrGeo_result& operator=(const CbmService_DeleteHydrGeo_result&);
  CbmService_DeleteHydrGeo_result() : success(0) {
  }

  virtual ~CbmService_DeleteHydrGeo_result() throw();
  bool success;

  _CbmService_DeleteHydrGeo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteHydrGeo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteHydrGeo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteHydrGeo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteHydrGeo_presult__isset {
  _CbmService_DeleteHydrGeo_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteHydrGeo_presult__isset;

class CbmService_DeleteHydrGeo_presult {
 public:


  virtual ~CbmService_DeleteHydrGeo_presult() throw();
  bool* success;

  _CbmService_DeleteHydrGeo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateHydrGeo_args__isset {
  _CbmService_UpdateHydrGeo_args__isset() : hydr_geo(false) {}
  bool hydr_geo :1;
} _CbmService_UpdateHydrGeo_args__isset;

class CbmService_UpdateHydrGeo_args {
 public:

  CbmService_UpdateHydrGeo_args(const CbmService_UpdateHydrGeo_args&);
  CbmService_UpdateHydrGeo_args& operator=(const CbmService_UpdateHydrGeo_args&);
  CbmService_UpdateHydrGeo_args() {
  }

  virtual ~CbmService_UpdateHydrGeo_args() throw();
  HydrGeo hydr_geo;

  _CbmService_UpdateHydrGeo_args__isset __isset;

  void __set_hydr_geo(const HydrGeo& val);

  bool operator == (const CbmService_UpdateHydrGeo_args & rhs) const
  {
    if (!(hydr_geo == rhs.hydr_geo))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateHydrGeo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateHydrGeo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateHydrGeo_pargs {
 public:


  virtual ~CbmService_UpdateHydrGeo_pargs() throw();
  const HydrGeo* hydr_geo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateHydrGeo_result__isset {
  _CbmService_UpdateHydrGeo_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateHydrGeo_result__isset;

class CbmService_UpdateHydrGeo_result {
 public:

  CbmService_UpdateHydrGeo_result(const CbmService_UpdateHydrGeo_result&);
  CbmService_UpdateHydrGeo_result& operator=(const CbmService_UpdateHydrGeo_result&);
  CbmService_UpdateHydrGeo_result() : success(0) {
  }

  virtual ~CbmService_UpdateHydrGeo_result() throw();
  bool success;

  _CbmService_UpdateHydrGeo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateHydrGeo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateHydrGeo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateHydrGeo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateHydrGeo_presult__isset {
  _CbmService_UpdateHydrGeo_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateHydrGeo_presult__isset;

class CbmService_UpdateHydrGeo_presult {
 public:


  virtual ~CbmService_UpdateHydrGeo_presult() throw();
  bool* success;

  _CbmService_UpdateHydrGeo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHydrGeoById_args__isset {
  _CbmService_GetHydrGeoById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetHydrGeoById_args__isset;

class CbmService_GetHydrGeoById_args {
 public:

  CbmService_GetHydrGeoById_args(const CbmService_GetHydrGeoById_args&);
  CbmService_GetHydrGeoById_args& operator=(const CbmService_GetHydrGeoById_args&);
  CbmService_GetHydrGeoById_args() : id(0) {
  }

  virtual ~CbmService_GetHydrGeoById_args() throw();
  int32_t id;

  _CbmService_GetHydrGeoById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetHydrGeoById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHydrGeoById_pargs {
 public:


  virtual ~CbmService_GetHydrGeoById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoById_result__isset {
  _CbmService_GetHydrGeoById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoById_result__isset;

class CbmService_GetHydrGeoById_result {
 public:

  CbmService_GetHydrGeoById_result(const CbmService_GetHydrGeoById_result&);
  CbmService_GetHydrGeoById_result& operator=(const CbmService_GetHydrGeoById_result&);
  CbmService_GetHydrGeoById_result() {
  }

  virtual ~CbmService_GetHydrGeoById_result() throw();
  HydrGeo success;

  _CbmService_GetHydrGeoById_result__isset __isset;

  void __set_success(const HydrGeo& val);

  bool operator == (const CbmService_GetHydrGeoById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoById_presult__isset {
  _CbmService_GetHydrGeoById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoById_presult__isset;

class CbmService_GetHydrGeoById_presult {
 public:


  virtual ~CbmService_GetHydrGeoById_presult() throw();
  HydrGeo* success;

  _CbmService_GetHydrGeoById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHydrGeoByForeignKey_args__isset {
  _CbmService_GetHydrGeoByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetHydrGeoByForeignKey_args__isset;

class CbmService_GetHydrGeoByForeignKey_args {
 public:

  CbmService_GetHydrGeoByForeignKey_args(const CbmService_GetHydrGeoByForeignKey_args&);
  CbmService_GetHydrGeoByForeignKey_args& operator=(const CbmService_GetHydrGeoByForeignKey_args&);
  CbmService_GetHydrGeoByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetHydrGeoByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetHydrGeoByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetHydrGeoByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHydrGeoByForeignKey_pargs {
 public:


  virtual ~CbmService_GetHydrGeoByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoByForeignKey_result__isset {
  _CbmService_GetHydrGeoByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoByForeignKey_result__isset;

class CbmService_GetHydrGeoByForeignKey_result {
 public:

  CbmService_GetHydrGeoByForeignKey_result(const CbmService_GetHydrGeoByForeignKey_result&);
  CbmService_GetHydrGeoByForeignKey_result& operator=(const CbmService_GetHydrGeoByForeignKey_result&);
  CbmService_GetHydrGeoByForeignKey_result() {
  }

  virtual ~CbmService_GetHydrGeoByForeignKey_result() throw();
  HydrGeo success;

  _CbmService_GetHydrGeoByForeignKey_result__isset __isset;

  void __set_success(const HydrGeo& val);

  bool operator == (const CbmService_GetHydrGeoByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoByForeignKey_presult__isset {
  _CbmService_GetHydrGeoByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoByForeignKey_presult__isset;

class CbmService_GetHydrGeoByForeignKey_presult {
 public:


  virtual ~CbmService_GetHydrGeoByForeignKey_presult() throw();
  HydrGeo* success;

  _CbmService_GetHydrGeoByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHydrGeoList_args {
 public:

  CbmService_GetHydrGeoList_args(const CbmService_GetHydrGeoList_args&);
  CbmService_GetHydrGeoList_args& operator=(const CbmService_GetHydrGeoList_args&);
  CbmService_GetHydrGeoList_args() {
  }

  virtual ~CbmService_GetHydrGeoList_args() throw();

  bool operator == (const CbmService_GetHydrGeoList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHydrGeoList_pargs {
 public:


  virtual ~CbmService_GetHydrGeoList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoList_result__isset {
  _CbmService_GetHydrGeoList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoList_result__isset;

class CbmService_GetHydrGeoList_result {
 public:

  CbmService_GetHydrGeoList_result(const CbmService_GetHydrGeoList_result&);
  CbmService_GetHydrGeoList_result& operator=(const CbmService_GetHydrGeoList_result&);
  CbmService_GetHydrGeoList_result() {
  }

  virtual ~CbmService_GetHydrGeoList_result() throw();
  std::vector<HydrGeo>  success;

  _CbmService_GetHydrGeoList_result__isset __isset;

  void __set_success(const std::vector<HydrGeo> & val);

  bool operator == (const CbmService_GetHydrGeoList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoList_presult__isset {
  _CbmService_GetHydrGeoList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoList_presult__isset;

class CbmService_GetHydrGeoList_presult {
 public:


  virtual ~CbmService_GetHydrGeoList_presult() throw();
  std::vector<HydrGeo> * success;

  _CbmService_GetHydrGeoList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHydrGeoIds_args {
 public:

  CbmService_GetHydrGeoIds_args(const CbmService_GetHydrGeoIds_args&);
  CbmService_GetHydrGeoIds_args& operator=(const CbmService_GetHydrGeoIds_args&);
  CbmService_GetHydrGeoIds_args() {
  }

  virtual ~CbmService_GetHydrGeoIds_args() throw();

  bool operator == (const CbmService_GetHydrGeoIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHydrGeoIds_pargs {
 public:


  virtual ~CbmService_GetHydrGeoIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoIds_result__isset {
  _CbmService_GetHydrGeoIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoIds_result__isset;

class CbmService_GetHydrGeoIds_result {
 public:

  CbmService_GetHydrGeoIds_result(const CbmService_GetHydrGeoIds_result&);
  CbmService_GetHydrGeoIds_result& operator=(const CbmService_GetHydrGeoIds_result&);
  CbmService_GetHydrGeoIds_result() {
  }

  virtual ~CbmService_GetHydrGeoIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetHydrGeoIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetHydrGeoIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoIds_presult__isset {
  _CbmService_GetHydrGeoIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoIds_presult__isset;

class CbmService_GetHydrGeoIds_presult {
 public:


  virtual ~CbmService_GetHydrGeoIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetHydrGeoIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetHydrGeoNames_args {
 public:

  CbmService_GetHydrGeoNames_args(const CbmService_GetHydrGeoNames_args&);
  CbmService_GetHydrGeoNames_args& operator=(const CbmService_GetHydrGeoNames_args&);
  CbmService_GetHydrGeoNames_args() {
  }

  virtual ~CbmService_GetHydrGeoNames_args() throw();

  bool operator == (const CbmService_GetHydrGeoNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHydrGeoNames_pargs {
 public:


  virtual ~CbmService_GetHydrGeoNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoNames_result__isset {
  _CbmService_GetHydrGeoNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoNames_result__isset;

class CbmService_GetHydrGeoNames_result {
 public:

  CbmService_GetHydrGeoNames_result(const CbmService_GetHydrGeoNames_result&);
  CbmService_GetHydrGeoNames_result& operator=(const CbmService_GetHydrGeoNames_result&);
  CbmService_GetHydrGeoNames_result() {
  }

  virtual ~CbmService_GetHydrGeoNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetHydrGeoNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetHydrGeoNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoNames_presult__isset {
  _CbmService_GetHydrGeoNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoNames_presult__isset;

class CbmService_GetHydrGeoNames_presult {
 public:


  virtual ~CbmService_GetHydrGeoNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetHydrGeoNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreHydrGeo_args__isset {
  _CbmService_AddMoreHydrGeo_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreHydrGeo_args__isset;

class CbmService_AddMoreHydrGeo_args {
 public:

  CbmService_AddMoreHydrGeo_args(const CbmService_AddMoreHydrGeo_args&);
  CbmService_AddMoreHydrGeo_args& operator=(const CbmService_AddMoreHydrGeo_args&);
  CbmService_AddMoreHydrGeo_args() {
  }

  virtual ~CbmService_AddMoreHydrGeo_args() throw();
  std::vector<HydrGeo>  objs;

  _CbmService_AddMoreHydrGeo_args__isset __isset;

  void __set_objs(const std::vector<HydrGeo> & val);

  bool operator == (const CbmService_AddMoreHydrGeo_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreHydrGeo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreHydrGeo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHydrGeo_pargs {
 public:


  virtual ~CbmService_AddMoreHydrGeo_pargs() throw();
  const std::vector<HydrGeo> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHydrGeo_result {
 public:

  CbmService_AddMoreHydrGeo_result(const CbmService_AddMoreHydrGeo_result&);
  CbmService_AddMoreHydrGeo_result& operator=(const CbmService_AddMoreHydrGeo_result&);
  CbmService_AddMoreHydrGeo_result() {
  }

  virtual ~CbmService_AddMoreHydrGeo_result() throw();

  bool operator == (const CbmService_AddMoreHydrGeo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreHydrGeo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreHydrGeo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreHydrGeo_presult {
 public:


  virtual ~CbmService_AddMoreHydrGeo_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreHydrGeo_args__isset {
  _CbmService_DeleteMoreHydrGeo_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreHydrGeo_args__isset;

class CbmService_DeleteMoreHydrGeo_args {
 public:

  CbmService_DeleteMoreHydrGeo_args(const CbmService_DeleteMoreHydrGeo_args&);
  CbmService_DeleteMoreHydrGeo_args& operator=(const CbmService_DeleteMoreHydrGeo_args&);
  CbmService_DeleteMoreHydrGeo_args() {
  }

  virtual ~CbmService_DeleteMoreHydrGeo_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreHydrGeo_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreHydrGeo_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreHydrGeo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreHydrGeo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHydrGeo_pargs {
 public:


  virtual ~CbmService_DeleteMoreHydrGeo_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHydrGeo_result {
 public:

  CbmService_DeleteMoreHydrGeo_result(const CbmService_DeleteMoreHydrGeo_result&);
  CbmService_DeleteMoreHydrGeo_result& operator=(const CbmService_DeleteMoreHydrGeo_result&);
  CbmService_DeleteMoreHydrGeo_result() {
  }

  virtual ~CbmService_DeleteMoreHydrGeo_result() throw();

  bool operator == (const CbmService_DeleteMoreHydrGeo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreHydrGeo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreHydrGeo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreHydrGeo_presult {
 public:


  virtual ~CbmService_DeleteMoreHydrGeo_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHydrGeoByFields_args__isset {
  _CbmService_GetHydrGeoByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetHydrGeoByFields_args__isset;

class CbmService_GetHydrGeoByFields_args {
 public:

  CbmService_GetHydrGeoByFields_args(const CbmService_GetHydrGeoByFields_args&);
  CbmService_GetHydrGeoByFields_args& operator=(const CbmService_GetHydrGeoByFields_args&);
  CbmService_GetHydrGeoByFields_args() {
  }

  virtual ~CbmService_GetHydrGeoByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetHydrGeoByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetHydrGeoByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHydrGeoByFields_pargs {
 public:


  virtual ~CbmService_GetHydrGeoByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoByFields_result__isset {
  _CbmService_GetHydrGeoByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoByFields_result__isset;

class CbmService_GetHydrGeoByFields_result {
 public:

  CbmService_GetHydrGeoByFields_result(const CbmService_GetHydrGeoByFields_result&);
  CbmService_GetHydrGeoByFields_result& operator=(const CbmService_GetHydrGeoByFields_result&);
  CbmService_GetHydrGeoByFields_result() {
  }

  virtual ~CbmService_GetHydrGeoByFields_result() throw();
  HydrGeo success;

  _CbmService_GetHydrGeoByFields_result__isset __isset;

  void __set_success(const HydrGeo& val);

  bool operator == (const CbmService_GetHydrGeoByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoByFields_presult__isset {
  _CbmService_GetHydrGeoByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoByFields_presult__isset;

class CbmService_GetHydrGeoByFields_presult {
 public:


  virtual ~CbmService_GetHydrGeoByFields_presult() throw();
  HydrGeo* success;

  _CbmService_GetHydrGeoByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHydrGeoByFields1_args__isset {
  _CbmService_GetHydrGeoByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetHydrGeoByFields1_args__isset;

class CbmService_GetHydrGeoByFields1_args {
 public:

  CbmService_GetHydrGeoByFields1_args(const CbmService_GetHydrGeoByFields1_args&);
  CbmService_GetHydrGeoByFields1_args& operator=(const CbmService_GetHydrGeoByFields1_args&);
  CbmService_GetHydrGeoByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetHydrGeoByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetHydrGeoByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetHydrGeoByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHydrGeoByFields1_pargs {
 public:


  virtual ~CbmService_GetHydrGeoByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoByFields1_result__isset {
  _CbmService_GetHydrGeoByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoByFields1_result__isset;

class CbmService_GetHydrGeoByFields1_result {
 public:

  CbmService_GetHydrGeoByFields1_result(const CbmService_GetHydrGeoByFields1_result&);
  CbmService_GetHydrGeoByFields1_result& operator=(const CbmService_GetHydrGeoByFields1_result&);
  CbmService_GetHydrGeoByFields1_result() {
  }

  virtual ~CbmService_GetHydrGeoByFields1_result() throw();
  HydrGeo success;

  _CbmService_GetHydrGeoByFields1_result__isset __isset;

  void __set_success(const HydrGeo& val);

  bool operator == (const CbmService_GetHydrGeoByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoByFields1_presult__isset {
  _CbmService_GetHydrGeoByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoByFields1_presult__isset;

class CbmService_GetHydrGeoByFields1_presult {
 public:


  virtual ~CbmService_GetHydrGeoByFields1_presult() throw();
  HydrGeo* success;

  _CbmService_GetHydrGeoByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHydrGeoByFields2_args__isset {
  _CbmService_GetHydrGeoByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetHydrGeoByFields2_args__isset;

class CbmService_GetHydrGeoByFields2_args {
 public:

  CbmService_GetHydrGeoByFields2_args(const CbmService_GetHydrGeoByFields2_args&);
  CbmService_GetHydrGeoByFields2_args& operator=(const CbmService_GetHydrGeoByFields2_args&);
  CbmService_GetHydrGeoByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetHydrGeoByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetHydrGeoByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetHydrGeoByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHydrGeoByFields2_pargs {
 public:


  virtual ~CbmService_GetHydrGeoByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoByFields2_result__isset {
  _CbmService_GetHydrGeoByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoByFields2_result__isset;

class CbmService_GetHydrGeoByFields2_result {
 public:

  CbmService_GetHydrGeoByFields2_result(const CbmService_GetHydrGeoByFields2_result&);
  CbmService_GetHydrGeoByFields2_result& operator=(const CbmService_GetHydrGeoByFields2_result&);
  CbmService_GetHydrGeoByFields2_result() {
  }

  virtual ~CbmService_GetHydrGeoByFields2_result() throw();
  HydrGeo success;

  _CbmService_GetHydrGeoByFields2_result__isset __isset;

  void __set_success(const HydrGeo& val);

  bool operator == (const CbmService_GetHydrGeoByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoByFields2_presult__isset {
  _CbmService_GetHydrGeoByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoByFields2_presult__isset;

class CbmService_GetHydrGeoByFields2_presult {
 public:


  virtual ~CbmService_GetHydrGeoByFields2_presult() throw();
  HydrGeo* success;

  _CbmService_GetHydrGeoByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHydrGeoListByFields_args__isset {
  _CbmService_GetHydrGeoListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetHydrGeoListByFields_args__isset;

class CbmService_GetHydrGeoListByFields_args {
 public:

  CbmService_GetHydrGeoListByFields_args(const CbmService_GetHydrGeoListByFields_args&);
  CbmService_GetHydrGeoListByFields_args& operator=(const CbmService_GetHydrGeoListByFields_args&);
  CbmService_GetHydrGeoListByFields_args() {
  }

  virtual ~CbmService_GetHydrGeoListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetHydrGeoListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetHydrGeoListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHydrGeoListByFields_pargs {
 public:


  virtual ~CbmService_GetHydrGeoListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoListByFields_result__isset {
  _CbmService_GetHydrGeoListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoListByFields_result__isset;

class CbmService_GetHydrGeoListByFields_result {
 public:

  CbmService_GetHydrGeoListByFields_result(const CbmService_GetHydrGeoListByFields_result&);
  CbmService_GetHydrGeoListByFields_result& operator=(const CbmService_GetHydrGeoListByFields_result&);
  CbmService_GetHydrGeoListByFields_result() {
  }

  virtual ~CbmService_GetHydrGeoListByFields_result() throw();
  std::vector<HydrGeo>  success;

  _CbmService_GetHydrGeoListByFields_result__isset __isset;

  void __set_success(const std::vector<HydrGeo> & val);

  bool operator == (const CbmService_GetHydrGeoListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoListByFields_presult__isset {
  _CbmService_GetHydrGeoListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoListByFields_presult__isset;

class CbmService_GetHydrGeoListByFields_presult {
 public:


  virtual ~CbmService_GetHydrGeoListByFields_presult() throw();
  std::vector<HydrGeo> * success;

  _CbmService_GetHydrGeoListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHydrGeoListByFields1_args__isset {
  _CbmService_GetHydrGeoListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetHydrGeoListByFields1_args__isset;

class CbmService_GetHydrGeoListByFields1_args {
 public:

  CbmService_GetHydrGeoListByFields1_args(const CbmService_GetHydrGeoListByFields1_args&);
  CbmService_GetHydrGeoListByFields1_args& operator=(const CbmService_GetHydrGeoListByFields1_args&);
  CbmService_GetHydrGeoListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetHydrGeoListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetHydrGeoListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetHydrGeoListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHydrGeoListByFields1_pargs {
 public:


  virtual ~CbmService_GetHydrGeoListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoListByFields1_result__isset {
  _CbmService_GetHydrGeoListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoListByFields1_result__isset;

class CbmService_GetHydrGeoListByFields1_result {
 public:

  CbmService_GetHydrGeoListByFields1_result(const CbmService_GetHydrGeoListByFields1_result&);
  CbmService_GetHydrGeoListByFields1_result& operator=(const CbmService_GetHydrGeoListByFields1_result&);
  CbmService_GetHydrGeoListByFields1_result() {
  }

  virtual ~CbmService_GetHydrGeoListByFields1_result() throw();
  std::vector<HydrGeo>  success;

  _CbmService_GetHydrGeoListByFields1_result__isset __isset;

  void __set_success(const std::vector<HydrGeo> & val);

  bool operator == (const CbmService_GetHydrGeoListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoListByFields1_presult__isset {
  _CbmService_GetHydrGeoListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoListByFields1_presult__isset;

class CbmService_GetHydrGeoListByFields1_presult {
 public:


  virtual ~CbmService_GetHydrGeoListByFields1_presult() throw();
  std::vector<HydrGeo> * success;

  _CbmService_GetHydrGeoListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetHydrGeoListByFields2_args__isset {
  _CbmService_GetHydrGeoListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetHydrGeoListByFields2_args__isset;

class CbmService_GetHydrGeoListByFields2_args {
 public:

  CbmService_GetHydrGeoListByFields2_args(const CbmService_GetHydrGeoListByFields2_args&);
  CbmService_GetHydrGeoListByFields2_args& operator=(const CbmService_GetHydrGeoListByFields2_args&);
  CbmService_GetHydrGeoListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetHydrGeoListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetHydrGeoListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetHydrGeoListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetHydrGeoListByFields2_pargs {
 public:


  virtual ~CbmService_GetHydrGeoListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoListByFields2_result__isset {
  _CbmService_GetHydrGeoListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoListByFields2_result__isset;

class CbmService_GetHydrGeoListByFields2_result {
 public:

  CbmService_GetHydrGeoListByFields2_result(const CbmService_GetHydrGeoListByFields2_result&);
  CbmService_GetHydrGeoListByFields2_result& operator=(const CbmService_GetHydrGeoListByFields2_result&);
  CbmService_GetHydrGeoListByFields2_result() {
  }

  virtual ~CbmService_GetHydrGeoListByFields2_result() throw();
  std::vector<HydrGeo>  success;

  _CbmService_GetHydrGeoListByFields2_result__isset __isset;

  void __set_success(const std::vector<HydrGeo> & val);

  bool operator == (const CbmService_GetHydrGeoListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetHydrGeoListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetHydrGeoListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetHydrGeoListByFields2_presult__isset {
  _CbmService_GetHydrGeoListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetHydrGeoListByFields2_presult__isset;

class CbmService_GetHydrGeoListByFields2_presult {
 public:


  virtual ~CbmService_GetHydrGeoListByFields2_presult() throw();
  std::vector<HydrGeo> * success;

  _CbmService_GetHydrGeoListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMine_args__isset {
  _CbmService_AddMine_args__isset() : mine(false) {}
  bool mine :1;
} _CbmService_AddMine_args__isset;

class CbmService_AddMine_args {
 public:

  CbmService_AddMine_args(const CbmService_AddMine_args&);
  CbmService_AddMine_args& operator=(const CbmService_AddMine_args&);
  CbmService_AddMine_args() {
  }

  virtual ~CbmService_AddMine_args() throw();
  Mine mine;

  _CbmService_AddMine_args__isset __isset;

  void __set_mine(const Mine& val);

  bool operator == (const CbmService_AddMine_args & rhs) const
  {
    if (!(mine == rhs.mine))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMine_pargs {
 public:


  virtual ~CbmService_AddMine_pargs() throw();
  const Mine* mine;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddMine_result__isset {
  _CbmService_AddMine_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddMine_result__isset;

class CbmService_AddMine_result {
 public:

  CbmService_AddMine_result(const CbmService_AddMine_result&);
  CbmService_AddMine_result& operator=(const CbmService_AddMine_result&);
  CbmService_AddMine_result() : success(0) {
  }

  virtual ~CbmService_AddMine_result() throw();
  int32_t success;

  _CbmService_AddMine_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddMine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddMine_presult__isset {
  _CbmService_AddMine_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddMine_presult__isset;

class CbmService_AddMine_presult {
 public:


  virtual ~CbmService_AddMine_presult() throw();
  int32_t* success;

  _CbmService_AddMine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMine_args__isset {
  _CbmService_DeleteMine_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteMine_args__isset;

class CbmService_DeleteMine_args {
 public:

  CbmService_DeleteMine_args(const CbmService_DeleteMine_args&);
  CbmService_DeleteMine_args& operator=(const CbmService_DeleteMine_args&);
  CbmService_DeleteMine_args() : id(0) {
  }

  virtual ~CbmService_DeleteMine_args() throw();
  int32_t id;

  _CbmService_DeleteMine_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteMine_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMine_pargs {
 public:


  virtual ~CbmService_DeleteMine_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteMine_result__isset {
  _CbmService_DeleteMine_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteMine_result__isset;

class CbmService_DeleteMine_result {
 public:

  CbmService_DeleteMine_result(const CbmService_DeleteMine_result&);
  CbmService_DeleteMine_result& operator=(const CbmService_DeleteMine_result&);
  CbmService_DeleteMine_result() : success(0) {
  }

  virtual ~CbmService_DeleteMine_result() throw();
  bool success;

  _CbmService_DeleteMine_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteMine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteMine_presult__isset {
  _CbmService_DeleteMine_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteMine_presult__isset;

class CbmService_DeleteMine_presult {
 public:


  virtual ~CbmService_DeleteMine_presult() throw();
  bool* success;

  _CbmService_DeleteMine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateMine_args__isset {
  _CbmService_UpdateMine_args__isset() : mine(false) {}
  bool mine :1;
} _CbmService_UpdateMine_args__isset;

class CbmService_UpdateMine_args {
 public:

  CbmService_UpdateMine_args(const CbmService_UpdateMine_args&);
  CbmService_UpdateMine_args& operator=(const CbmService_UpdateMine_args&);
  CbmService_UpdateMine_args() {
  }

  virtual ~CbmService_UpdateMine_args() throw();
  Mine mine;

  _CbmService_UpdateMine_args__isset __isset;

  void __set_mine(const Mine& val);

  bool operator == (const CbmService_UpdateMine_args & rhs) const
  {
    if (!(mine == rhs.mine))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateMine_pargs {
 public:


  virtual ~CbmService_UpdateMine_pargs() throw();
  const Mine* mine;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateMine_result__isset {
  _CbmService_UpdateMine_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateMine_result__isset;

class CbmService_UpdateMine_result {
 public:

  CbmService_UpdateMine_result(const CbmService_UpdateMine_result&);
  CbmService_UpdateMine_result& operator=(const CbmService_UpdateMine_result&);
  CbmService_UpdateMine_result() : success(0) {
  }

  virtual ~CbmService_UpdateMine_result() throw();
  bool success;

  _CbmService_UpdateMine_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateMine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateMine_presult__isset {
  _CbmService_UpdateMine_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateMine_presult__isset;

class CbmService_UpdateMine_presult {
 public:


  virtual ~CbmService_UpdateMine_presult() throw();
  bool* success;

  _CbmService_UpdateMine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineById_args__isset {
  _CbmService_GetMineById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetMineById_args__isset;

class CbmService_GetMineById_args {
 public:

  CbmService_GetMineById_args(const CbmService_GetMineById_args&);
  CbmService_GetMineById_args& operator=(const CbmService_GetMineById_args&);
  CbmService_GetMineById_args() : id(0) {
  }

  virtual ~CbmService_GetMineById_args() throw();
  int32_t id;

  _CbmService_GetMineById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetMineById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineById_pargs {
 public:


  virtual ~CbmService_GetMineById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineById_result__isset {
  _CbmService_GetMineById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineById_result__isset;

class CbmService_GetMineById_result {
 public:

  CbmService_GetMineById_result(const CbmService_GetMineById_result&);
  CbmService_GetMineById_result& operator=(const CbmService_GetMineById_result&);
  CbmService_GetMineById_result() {
  }

  virtual ~CbmService_GetMineById_result() throw();
  Mine success;

  _CbmService_GetMineById_result__isset __isset;

  void __set_success(const Mine& val);

  bool operator == (const CbmService_GetMineById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineById_presult__isset {
  _CbmService_GetMineById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineById_presult__isset;

class CbmService_GetMineById_presult {
 public:


  virtual ~CbmService_GetMineById_presult() throw();
  Mine* success;

  _CbmService_GetMineById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineByForeignKey_args__isset {
  _CbmService_GetMineByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetMineByForeignKey_args__isset;

class CbmService_GetMineByForeignKey_args {
 public:

  CbmService_GetMineByForeignKey_args(const CbmService_GetMineByForeignKey_args&);
  CbmService_GetMineByForeignKey_args& operator=(const CbmService_GetMineByForeignKey_args&);
  CbmService_GetMineByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetMineByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetMineByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetMineByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineByForeignKey_pargs {
 public:


  virtual ~CbmService_GetMineByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineByForeignKey_result__isset {
  _CbmService_GetMineByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineByForeignKey_result__isset;

class CbmService_GetMineByForeignKey_result {
 public:

  CbmService_GetMineByForeignKey_result(const CbmService_GetMineByForeignKey_result&);
  CbmService_GetMineByForeignKey_result& operator=(const CbmService_GetMineByForeignKey_result&);
  CbmService_GetMineByForeignKey_result() {
  }

  virtual ~CbmService_GetMineByForeignKey_result() throw();
  Mine success;

  _CbmService_GetMineByForeignKey_result__isset __isset;

  void __set_success(const Mine& val);

  bool operator == (const CbmService_GetMineByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineByForeignKey_presult__isset {
  _CbmService_GetMineByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineByForeignKey_presult__isset;

class CbmService_GetMineByForeignKey_presult {
 public:


  virtual ~CbmService_GetMineByForeignKey_presult() throw();
  Mine* success;

  _CbmService_GetMineByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetMineList_args {
 public:

  CbmService_GetMineList_args(const CbmService_GetMineList_args&);
  CbmService_GetMineList_args& operator=(const CbmService_GetMineList_args&);
  CbmService_GetMineList_args() {
  }

  virtual ~CbmService_GetMineList_args() throw();

  bool operator == (const CbmService_GetMineList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetMineList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineList_pargs {
 public:


  virtual ~CbmService_GetMineList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineList_result__isset {
  _CbmService_GetMineList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineList_result__isset;

class CbmService_GetMineList_result {
 public:

  CbmService_GetMineList_result(const CbmService_GetMineList_result&);
  CbmService_GetMineList_result& operator=(const CbmService_GetMineList_result&);
  CbmService_GetMineList_result() {
  }

  virtual ~CbmService_GetMineList_result() throw();
  std::vector<Mine>  success;

  _CbmService_GetMineList_result__isset __isset;

  void __set_success(const std::vector<Mine> & val);

  bool operator == (const CbmService_GetMineList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineList_presult__isset {
  _CbmService_GetMineList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineList_presult__isset;

class CbmService_GetMineList_presult {
 public:


  virtual ~CbmService_GetMineList_presult() throw();
  std::vector<Mine> * success;

  _CbmService_GetMineList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetMineIds_args {
 public:

  CbmService_GetMineIds_args(const CbmService_GetMineIds_args&);
  CbmService_GetMineIds_args& operator=(const CbmService_GetMineIds_args&);
  CbmService_GetMineIds_args() {
  }

  virtual ~CbmService_GetMineIds_args() throw();

  bool operator == (const CbmService_GetMineIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetMineIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineIds_pargs {
 public:


  virtual ~CbmService_GetMineIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineIds_result__isset {
  _CbmService_GetMineIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineIds_result__isset;

class CbmService_GetMineIds_result {
 public:

  CbmService_GetMineIds_result(const CbmService_GetMineIds_result&);
  CbmService_GetMineIds_result& operator=(const CbmService_GetMineIds_result&);
  CbmService_GetMineIds_result() {
  }

  virtual ~CbmService_GetMineIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetMineIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetMineIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineIds_presult__isset {
  _CbmService_GetMineIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineIds_presult__isset;

class CbmService_GetMineIds_presult {
 public:


  virtual ~CbmService_GetMineIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetMineIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetMineNames_args {
 public:

  CbmService_GetMineNames_args(const CbmService_GetMineNames_args&);
  CbmService_GetMineNames_args& operator=(const CbmService_GetMineNames_args&);
  CbmService_GetMineNames_args() {
  }

  virtual ~CbmService_GetMineNames_args() throw();

  bool operator == (const CbmService_GetMineNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetMineNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineNames_pargs {
 public:


  virtual ~CbmService_GetMineNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineNames_result__isset {
  _CbmService_GetMineNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineNames_result__isset;

class CbmService_GetMineNames_result {
 public:

  CbmService_GetMineNames_result(const CbmService_GetMineNames_result&);
  CbmService_GetMineNames_result& operator=(const CbmService_GetMineNames_result&);
  CbmService_GetMineNames_result() {
  }

  virtual ~CbmService_GetMineNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetMineNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetMineNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineNames_presult__isset {
  _CbmService_GetMineNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineNames_presult__isset;

class CbmService_GetMineNames_presult {
 public:


  virtual ~CbmService_GetMineNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetMineNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreMine_args__isset {
  _CbmService_AddMoreMine_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreMine_args__isset;

class CbmService_AddMoreMine_args {
 public:

  CbmService_AddMoreMine_args(const CbmService_AddMoreMine_args&);
  CbmService_AddMoreMine_args& operator=(const CbmService_AddMoreMine_args&);
  CbmService_AddMoreMine_args() {
  }

  virtual ~CbmService_AddMoreMine_args() throw();
  std::vector<Mine>  objs;

  _CbmService_AddMoreMine_args__isset __isset;

  void __set_objs(const std::vector<Mine> & val);

  bool operator == (const CbmService_AddMoreMine_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreMine_pargs {
 public:


  virtual ~CbmService_AddMoreMine_pargs() throw();
  const std::vector<Mine> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreMine_result {
 public:

  CbmService_AddMoreMine_result(const CbmService_AddMoreMine_result&);
  CbmService_AddMoreMine_result& operator=(const CbmService_AddMoreMine_result&);
  CbmService_AddMoreMine_result() {
  }

  virtual ~CbmService_AddMoreMine_result() throw();

  bool operator == (const CbmService_AddMoreMine_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreMine_presult {
 public:


  virtual ~CbmService_AddMoreMine_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreMine_args__isset {
  _CbmService_DeleteMoreMine_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreMine_args__isset;

class CbmService_DeleteMoreMine_args {
 public:

  CbmService_DeleteMoreMine_args(const CbmService_DeleteMoreMine_args&);
  CbmService_DeleteMoreMine_args& operator=(const CbmService_DeleteMoreMine_args&);
  CbmService_DeleteMoreMine_args() {
  }

  virtual ~CbmService_DeleteMoreMine_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreMine_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreMine_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreMine_pargs {
 public:


  virtual ~CbmService_DeleteMoreMine_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreMine_result {
 public:

  CbmService_DeleteMoreMine_result(const CbmService_DeleteMoreMine_result&);
  CbmService_DeleteMoreMine_result& operator=(const CbmService_DeleteMoreMine_result&);
  CbmService_DeleteMoreMine_result() {
  }

  virtual ~CbmService_DeleteMoreMine_result() throw();

  bool operator == (const CbmService_DeleteMoreMine_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreMine_presult {
 public:


  virtual ~CbmService_DeleteMoreMine_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineByFields_args__isset {
  _CbmService_GetMineByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetMineByFields_args__isset;

class CbmService_GetMineByFields_args {
 public:

  CbmService_GetMineByFields_args(const CbmService_GetMineByFields_args&);
  CbmService_GetMineByFields_args& operator=(const CbmService_GetMineByFields_args&);
  CbmService_GetMineByFields_args() {
  }

  virtual ~CbmService_GetMineByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetMineByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetMineByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineByFields_pargs {
 public:


  virtual ~CbmService_GetMineByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineByFields_result__isset {
  _CbmService_GetMineByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineByFields_result__isset;

class CbmService_GetMineByFields_result {
 public:

  CbmService_GetMineByFields_result(const CbmService_GetMineByFields_result&);
  CbmService_GetMineByFields_result& operator=(const CbmService_GetMineByFields_result&);
  CbmService_GetMineByFields_result() {
  }

  virtual ~CbmService_GetMineByFields_result() throw();
  Mine success;

  _CbmService_GetMineByFields_result__isset __isset;

  void __set_success(const Mine& val);

  bool operator == (const CbmService_GetMineByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineByFields_presult__isset {
  _CbmService_GetMineByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineByFields_presult__isset;

class CbmService_GetMineByFields_presult {
 public:


  virtual ~CbmService_GetMineByFields_presult() throw();
  Mine* success;

  _CbmService_GetMineByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineByFields1_args__isset {
  _CbmService_GetMineByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetMineByFields1_args__isset;

class CbmService_GetMineByFields1_args {
 public:

  CbmService_GetMineByFields1_args(const CbmService_GetMineByFields1_args&);
  CbmService_GetMineByFields1_args& operator=(const CbmService_GetMineByFields1_args&);
  CbmService_GetMineByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetMineByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetMineByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetMineByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineByFields1_pargs {
 public:


  virtual ~CbmService_GetMineByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineByFields1_result__isset {
  _CbmService_GetMineByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineByFields1_result__isset;

class CbmService_GetMineByFields1_result {
 public:

  CbmService_GetMineByFields1_result(const CbmService_GetMineByFields1_result&);
  CbmService_GetMineByFields1_result& operator=(const CbmService_GetMineByFields1_result&);
  CbmService_GetMineByFields1_result() {
  }

  virtual ~CbmService_GetMineByFields1_result() throw();
  Mine success;

  _CbmService_GetMineByFields1_result__isset __isset;

  void __set_success(const Mine& val);

  bool operator == (const CbmService_GetMineByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineByFields1_presult__isset {
  _CbmService_GetMineByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineByFields1_presult__isset;

class CbmService_GetMineByFields1_presult {
 public:


  virtual ~CbmService_GetMineByFields1_presult() throw();
  Mine* success;

  _CbmService_GetMineByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineByFields2_args__isset {
  _CbmService_GetMineByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetMineByFields2_args__isset;

class CbmService_GetMineByFields2_args {
 public:

  CbmService_GetMineByFields2_args(const CbmService_GetMineByFields2_args&);
  CbmService_GetMineByFields2_args& operator=(const CbmService_GetMineByFields2_args&);
  CbmService_GetMineByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetMineByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetMineByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetMineByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineByFields2_pargs {
 public:


  virtual ~CbmService_GetMineByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineByFields2_result__isset {
  _CbmService_GetMineByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineByFields2_result__isset;

class CbmService_GetMineByFields2_result {
 public:

  CbmService_GetMineByFields2_result(const CbmService_GetMineByFields2_result&);
  CbmService_GetMineByFields2_result& operator=(const CbmService_GetMineByFields2_result&);
  CbmService_GetMineByFields2_result() {
  }

  virtual ~CbmService_GetMineByFields2_result() throw();
  Mine success;

  _CbmService_GetMineByFields2_result__isset __isset;

  void __set_success(const Mine& val);

  bool operator == (const CbmService_GetMineByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineByFields2_presult__isset {
  _CbmService_GetMineByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineByFields2_presult__isset;

class CbmService_GetMineByFields2_presult {
 public:


  virtual ~CbmService_GetMineByFields2_presult() throw();
  Mine* success;

  _CbmService_GetMineByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineListByFields_args__isset {
  _CbmService_GetMineListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetMineListByFields_args__isset;

class CbmService_GetMineListByFields_args {
 public:

  CbmService_GetMineListByFields_args(const CbmService_GetMineListByFields_args&);
  CbmService_GetMineListByFields_args& operator=(const CbmService_GetMineListByFields_args&);
  CbmService_GetMineListByFields_args() {
  }

  virtual ~CbmService_GetMineListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetMineListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetMineListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineListByFields_pargs {
 public:


  virtual ~CbmService_GetMineListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineListByFields_result__isset {
  _CbmService_GetMineListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineListByFields_result__isset;

class CbmService_GetMineListByFields_result {
 public:

  CbmService_GetMineListByFields_result(const CbmService_GetMineListByFields_result&);
  CbmService_GetMineListByFields_result& operator=(const CbmService_GetMineListByFields_result&);
  CbmService_GetMineListByFields_result() {
  }

  virtual ~CbmService_GetMineListByFields_result() throw();
  std::vector<Mine>  success;

  _CbmService_GetMineListByFields_result__isset __isset;

  void __set_success(const std::vector<Mine> & val);

  bool operator == (const CbmService_GetMineListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineListByFields_presult__isset {
  _CbmService_GetMineListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineListByFields_presult__isset;

class CbmService_GetMineListByFields_presult {
 public:


  virtual ~CbmService_GetMineListByFields_presult() throw();
  std::vector<Mine> * success;

  _CbmService_GetMineListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineListByFields1_args__isset {
  _CbmService_GetMineListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetMineListByFields1_args__isset;

class CbmService_GetMineListByFields1_args {
 public:

  CbmService_GetMineListByFields1_args(const CbmService_GetMineListByFields1_args&);
  CbmService_GetMineListByFields1_args& operator=(const CbmService_GetMineListByFields1_args&);
  CbmService_GetMineListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetMineListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetMineListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetMineListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineListByFields1_pargs {
 public:


  virtual ~CbmService_GetMineListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineListByFields1_result__isset {
  _CbmService_GetMineListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineListByFields1_result__isset;

class CbmService_GetMineListByFields1_result {
 public:

  CbmService_GetMineListByFields1_result(const CbmService_GetMineListByFields1_result&);
  CbmService_GetMineListByFields1_result& operator=(const CbmService_GetMineListByFields1_result&);
  CbmService_GetMineListByFields1_result() {
  }

  virtual ~CbmService_GetMineListByFields1_result() throw();
  std::vector<Mine>  success;

  _CbmService_GetMineListByFields1_result__isset __isset;

  void __set_success(const std::vector<Mine> & val);

  bool operator == (const CbmService_GetMineListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineListByFields1_presult__isset {
  _CbmService_GetMineListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineListByFields1_presult__isset;

class CbmService_GetMineListByFields1_presult {
 public:


  virtual ~CbmService_GetMineListByFields1_presult() throw();
  std::vector<Mine> * success;

  _CbmService_GetMineListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineListByFields2_args__isset {
  _CbmService_GetMineListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetMineListByFields2_args__isset;

class CbmService_GetMineListByFields2_args {
 public:

  CbmService_GetMineListByFields2_args(const CbmService_GetMineListByFields2_args&);
  CbmService_GetMineListByFields2_args& operator=(const CbmService_GetMineListByFields2_args&);
  CbmService_GetMineListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetMineListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetMineListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetMineListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineListByFields2_pargs {
 public:


  virtual ~CbmService_GetMineListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineListByFields2_result__isset {
  _CbmService_GetMineListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineListByFields2_result__isset;

class CbmService_GetMineListByFields2_result {
 public:

  CbmService_GetMineListByFields2_result(const CbmService_GetMineListByFields2_result&);
  CbmService_GetMineListByFields2_result& operator=(const CbmService_GetMineListByFields2_result&);
  CbmService_GetMineListByFields2_result() {
  }

  virtual ~CbmService_GetMineListByFields2_result() throw();
  std::vector<Mine>  success;

  _CbmService_GetMineListByFields2_result__isset __isset;

  void __set_success(const std::vector<Mine> & val);

  bool operator == (const CbmService_GetMineListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineListByFields2_presult__isset {
  _CbmService_GetMineListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineListByFields2_presult__isset;

class CbmService_GetMineListByFields2_presult {
 public:


  virtual ~CbmService_GetMineListByFields2_presult() throw();
  std::vector<Mine> * success;

  _CbmService_GetMineListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMineBase_args__isset {
  _CbmService_AddMineBase_args__isset() : mine_base(false) {}
  bool mine_base :1;
} _CbmService_AddMineBase_args__isset;

class CbmService_AddMineBase_args {
 public:

  CbmService_AddMineBase_args(const CbmService_AddMineBase_args&);
  CbmService_AddMineBase_args& operator=(const CbmService_AddMineBase_args&);
  CbmService_AddMineBase_args() {
  }

  virtual ~CbmService_AddMineBase_args() throw();
  MineBase mine_base;

  _CbmService_AddMineBase_args__isset __isset;

  void __set_mine_base(const MineBase& val);

  bool operator == (const CbmService_AddMineBase_args & rhs) const
  {
    if (!(mine_base == rhs.mine_base))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMineBase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMineBase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMineBase_pargs {
 public:


  virtual ~CbmService_AddMineBase_pargs() throw();
  const MineBase* mine_base;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddMineBase_result__isset {
  _CbmService_AddMineBase_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddMineBase_result__isset;

class CbmService_AddMineBase_result {
 public:

  CbmService_AddMineBase_result(const CbmService_AddMineBase_result&);
  CbmService_AddMineBase_result& operator=(const CbmService_AddMineBase_result&);
  CbmService_AddMineBase_result() : success(0) {
  }

  virtual ~CbmService_AddMineBase_result() throw();
  int32_t success;

  _CbmService_AddMineBase_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddMineBase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMineBase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMineBase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddMineBase_presult__isset {
  _CbmService_AddMineBase_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddMineBase_presult__isset;

class CbmService_AddMineBase_presult {
 public:


  virtual ~CbmService_AddMineBase_presult() throw();
  int32_t* success;

  _CbmService_AddMineBase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMineBase_args__isset {
  _CbmService_DeleteMineBase_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteMineBase_args__isset;

class CbmService_DeleteMineBase_args {
 public:

  CbmService_DeleteMineBase_args(const CbmService_DeleteMineBase_args&);
  CbmService_DeleteMineBase_args& operator=(const CbmService_DeleteMineBase_args&);
  CbmService_DeleteMineBase_args() : id(0) {
  }

  virtual ~CbmService_DeleteMineBase_args() throw();
  int32_t id;

  _CbmService_DeleteMineBase_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteMineBase_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMineBase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMineBase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMineBase_pargs {
 public:


  virtual ~CbmService_DeleteMineBase_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteMineBase_result__isset {
  _CbmService_DeleteMineBase_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteMineBase_result__isset;

class CbmService_DeleteMineBase_result {
 public:

  CbmService_DeleteMineBase_result(const CbmService_DeleteMineBase_result&);
  CbmService_DeleteMineBase_result& operator=(const CbmService_DeleteMineBase_result&);
  CbmService_DeleteMineBase_result() : success(0) {
  }

  virtual ~CbmService_DeleteMineBase_result() throw();
  bool success;

  _CbmService_DeleteMineBase_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteMineBase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMineBase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMineBase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteMineBase_presult__isset {
  _CbmService_DeleteMineBase_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteMineBase_presult__isset;

class CbmService_DeleteMineBase_presult {
 public:


  virtual ~CbmService_DeleteMineBase_presult() throw();
  bool* success;

  _CbmService_DeleteMineBase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateMineBase_args__isset {
  _CbmService_UpdateMineBase_args__isset() : mine_base(false) {}
  bool mine_base :1;
} _CbmService_UpdateMineBase_args__isset;

class CbmService_UpdateMineBase_args {
 public:

  CbmService_UpdateMineBase_args(const CbmService_UpdateMineBase_args&);
  CbmService_UpdateMineBase_args& operator=(const CbmService_UpdateMineBase_args&);
  CbmService_UpdateMineBase_args() {
  }

  virtual ~CbmService_UpdateMineBase_args() throw();
  MineBase mine_base;

  _CbmService_UpdateMineBase_args__isset __isset;

  void __set_mine_base(const MineBase& val);

  bool operator == (const CbmService_UpdateMineBase_args & rhs) const
  {
    if (!(mine_base == rhs.mine_base))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateMineBase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateMineBase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateMineBase_pargs {
 public:


  virtual ~CbmService_UpdateMineBase_pargs() throw();
  const MineBase* mine_base;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateMineBase_result__isset {
  _CbmService_UpdateMineBase_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateMineBase_result__isset;

class CbmService_UpdateMineBase_result {
 public:

  CbmService_UpdateMineBase_result(const CbmService_UpdateMineBase_result&);
  CbmService_UpdateMineBase_result& operator=(const CbmService_UpdateMineBase_result&);
  CbmService_UpdateMineBase_result() : success(0) {
  }

  virtual ~CbmService_UpdateMineBase_result() throw();
  bool success;

  _CbmService_UpdateMineBase_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateMineBase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateMineBase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateMineBase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateMineBase_presult__isset {
  _CbmService_UpdateMineBase_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateMineBase_presult__isset;

class CbmService_UpdateMineBase_presult {
 public:


  virtual ~CbmService_UpdateMineBase_presult() throw();
  bool* success;

  _CbmService_UpdateMineBase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineBaseById_args__isset {
  _CbmService_GetMineBaseById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetMineBaseById_args__isset;

class CbmService_GetMineBaseById_args {
 public:

  CbmService_GetMineBaseById_args(const CbmService_GetMineBaseById_args&);
  CbmService_GetMineBaseById_args& operator=(const CbmService_GetMineBaseById_args&);
  CbmService_GetMineBaseById_args() : id(0) {
  }

  virtual ~CbmService_GetMineBaseById_args() throw();
  int32_t id;

  _CbmService_GetMineBaseById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetMineBaseById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineBaseById_pargs {
 public:


  virtual ~CbmService_GetMineBaseById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseById_result__isset {
  _CbmService_GetMineBaseById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseById_result__isset;

class CbmService_GetMineBaseById_result {
 public:

  CbmService_GetMineBaseById_result(const CbmService_GetMineBaseById_result&);
  CbmService_GetMineBaseById_result& operator=(const CbmService_GetMineBaseById_result&);
  CbmService_GetMineBaseById_result() {
  }

  virtual ~CbmService_GetMineBaseById_result() throw();
  MineBase success;

  _CbmService_GetMineBaseById_result__isset __isset;

  void __set_success(const MineBase& val);

  bool operator == (const CbmService_GetMineBaseById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseById_presult__isset {
  _CbmService_GetMineBaseById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseById_presult__isset;

class CbmService_GetMineBaseById_presult {
 public:


  virtual ~CbmService_GetMineBaseById_presult() throw();
  MineBase* success;

  _CbmService_GetMineBaseById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineBaseByForeignKey_args__isset {
  _CbmService_GetMineBaseByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetMineBaseByForeignKey_args__isset;

class CbmService_GetMineBaseByForeignKey_args {
 public:

  CbmService_GetMineBaseByForeignKey_args(const CbmService_GetMineBaseByForeignKey_args&);
  CbmService_GetMineBaseByForeignKey_args& operator=(const CbmService_GetMineBaseByForeignKey_args&);
  CbmService_GetMineBaseByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetMineBaseByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetMineBaseByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetMineBaseByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineBaseByForeignKey_pargs {
 public:


  virtual ~CbmService_GetMineBaseByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseByForeignKey_result__isset {
  _CbmService_GetMineBaseByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseByForeignKey_result__isset;

class CbmService_GetMineBaseByForeignKey_result {
 public:

  CbmService_GetMineBaseByForeignKey_result(const CbmService_GetMineBaseByForeignKey_result&);
  CbmService_GetMineBaseByForeignKey_result& operator=(const CbmService_GetMineBaseByForeignKey_result&);
  CbmService_GetMineBaseByForeignKey_result() {
  }

  virtual ~CbmService_GetMineBaseByForeignKey_result() throw();
  MineBase success;

  _CbmService_GetMineBaseByForeignKey_result__isset __isset;

  void __set_success(const MineBase& val);

  bool operator == (const CbmService_GetMineBaseByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseByForeignKey_presult__isset {
  _CbmService_GetMineBaseByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseByForeignKey_presult__isset;

class CbmService_GetMineBaseByForeignKey_presult {
 public:


  virtual ~CbmService_GetMineBaseByForeignKey_presult() throw();
  MineBase* success;

  _CbmService_GetMineBaseByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetMineBaseList_args {
 public:

  CbmService_GetMineBaseList_args(const CbmService_GetMineBaseList_args&);
  CbmService_GetMineBaseList_args& operator=(const CbmService_GetMineBaseList_args&);
  CbmService_GetMineBaseList_args() {
  }

  virtual ~CbmService_GetMineBaseList_args() throw();

  bool operator == (const CbmService_GetMineBaseList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetMineBaseList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineBaseList_pargs {
 public:


  virtual ~CbmService_GetMineBaseList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseList_result__isset {
  _CbmService_GetMineBaseList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseList_result__isset;

class CbmService_GetMineBaseList_result {
 public:

  CbmService_GetMineBaseList_result(const CbmService_GetMineBaseList_result&);
  CbmService_GetMineBaseList_result& operator=(const CbmService_GetMineBaseList_result&);
  CbmService_GetMineBaseList_result() {
  }

  virtual ~CbmService_GetMineBaseList_result() throw();
  std::vector<MineBase>  success;

  _CbmService_GetMineBaseList_result__isset __isset;

  void __set_success(const std::vector<MineBase> & val);

  bool operator == (const CbmService_GetMineBaseList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseList_presult__isset {
  _CbmService_GetMineBaseList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseList_presult__isset;

class CbmService_GetMineBaseList_presult {
 public:


  virtual ~CbmService_GetMineBaseList_presult() throw();
  std::vector<MineBase> * success;

  _CbmService_GetMineBaseList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetMineBaseIds_args {
 public:

  CbmService_GetMineBaseIds_args(const CbmService_GetMineBaseIds_args&);
  CbmService_GetMineBaseIds_args& operator=(const CbmService_GetMineBaseIds_args&);
  CbmService_GetMineBaseIds_args() {
  }

  virtual ~CbmService_GetMineBaseIds_args() throw();

  bool operator == (const CbmService_GetMineBaseIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetMineBaseIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineBaseIds_pargs {
 public:


  virtual ~CbmService_GetMineBaseIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseIds_result__isset {
  _CbmService_GetMineBaseIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseIds_result__isset;

class CbmService_GetMineBaseIds_result {
 public:

  CbmService_GetMineBaseIds_result(const CbmService_GetMineBaseIds_result&);
  CbmService_GetMineBaseIds_result& operator=(const CbmService_GetMineBaseIds_result&);
  CbmService_GetMineBaseIds_result() {
  }

  virtual ~CbmService_GetMineBaseIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetMineBaseIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetMineBaseIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseIds_presult__isset {
  _CbmService_GetMineBaseIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseIds_presult__isset;

class CbmService_GetMineBaseIds_presult {
 public:


  virtual ~CbmService_GetMineBaseIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetMineBaseIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetMineBaseNames_args {
 public:

  CbmService_GetMineBaseNames_args(const CbmService_GetMineBaseNames_args&);
  CbmService_GetMineBaseNames_args& operator=(const CbmService_GetMineBaseNames_args&);
  CbmService_GetMineBaseNames_args() {
  }

  virtual ~CbmService_GetMineBaseNames_args() throw();

  bool operator == (const CbmService_GetMineBaseNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetMineBaseNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineBaseNames_pargs {
 public:


  virtual ~CbmService_GetMineBaseNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseNames_result__isset {
  _CbmService_GetMineBaseNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseNames_result__isset;

class CbmService_GetMineBaseNames_result {
 public:

  CbmService_GetMineBaseNames_result(const CbmService_GetMineBaseNames_result&);
  CbmService_GetMineBaseNames_result& operator=(const CbmService_GetMineBaseNames_result&);
  CbmService_GetMineBaseNames_result() {
  }

  virtual ~CbmService_GetMineBaseNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetMineBaseNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetMineBaseNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseNames_presult__isset {
  _CbmService_GetMineBaseNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseNames_presult__isset;

class CbmService_GetMineBaseNames_presult {
 public:


  virtual ~CbmService_GetMineBaseNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetMineBaseNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreMineBase_args__isset {
  _CbmService_AddMoreMineBase_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreMineBase_args__isset;

class CbmService_AddMoreMineBase_args {
 public:

  CbmService_AddMoreMineBase_args(const CbmService_AddMoreMineBase_args&);
  CbmService_AddMoreMineBase_args& operator=(const CbmService_AddMoreMineBase_args&);
  CbmService_AddMoreMineBase_args() {
  }

  virtual ~CbmService_AddMoreMineBase_args() throw();
  std::vector<MineBase>  objs;

  _CbmService_AddMoreMineBase_args__isset __isset;

  void __set_objs(const std::vector<MineBase> & val);

  bool operator == (const CbmService_AddMoreMineBase_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreMineBase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreMineBase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreMineBase_pargs {
 public:


  virtual ~CbmService_AddMoreMineBase_pargs() throw();
  const std::vector<MineBase> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreMineBase_result {
 public:

  CbmService_AddMoreMineBase_result(const CbmService_AddMoreMineBase_result&);
  CbmService_AddMoreMineBase_result& operator=(const CbmService_AddMoreMineBase_result&);
  CbmService_AddMoreMineBase_result() {
  }

  virtual ~CbmService_AddMoreMineBase_result() throw();

  bool operator == (const CbmService_AddMoreMineBase_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreMineBase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreMineBase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreMineBase_presult {
 public:


  virtual ~CbmService_AddMoreMineBase_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreMineBase_args__isset {
  _CbmService_DeleteMoreMineBase_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreMineBase_args__isset;

class CbmService_DeleteMoreMineBase_args {
 public:

  CbmService_DeleteMoreMineBase_args(const CbmService_DeleteMoreMineBase_args&);
  CbmService_DeleteMoreMineBase_args& operator=(const CbmService_DeleteMoreMineBase_args&);
  CbmService_DeleteMoreMineBase_args() {
  }

  virtual ~CbmService_DeleteMoreMineBase_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreMineBase_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreMineBase_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreMineBase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreMineBase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreMineBase_pargs {
 public:


  virtual ~CbmService_DeleteMoreMineBase_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreMineBase_result {
 public:

  CbmService_DeleteMoreMineBase_result(const CbmService_DeleteMoreMineBase_result&);
  CbmService_DeleteMoreMineBase_result& operator=(const CbmService_DeleteMoreMineBase_result&);
  CbmService_DeleteMoreMineBase_result() {
  }

  virtual ~CbmService_DeleteMoreMineBase_result() throw();

  bool operator == (const CbmService_DeleteMoreMineBase_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreMineBase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreMineBase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreMineBase_presult {
 public:


  virtual ~CbmService_DeleteMoreMineBase_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineBaseByFields_args__isset {
  _CbmService_GetMineBaseByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetMineBaseByFields_args__isset;

class CbmService_GetMineBaseByFields_args {
 public:

  CbmService_GetMineBaseByFields_args(const CbmService_GetMineBaseByFields_args&);
  CbmService_GetMineBaseByFields_args& operator=(const CbmService_GetMineBaseByFields_args&);
  CbmService_GetMineBaseByFields_args() {
  }

  virtual ~CbmService_GetMineBaseByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetMineBaseByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetMineBaseByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineBaseByFields_pargs {
 public:


  virtual ~CbmService_GetMineBaseByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseByFields_result__isset {
  _CbmService_GetMineBaseByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseByFields_result__isset;

class CbmService_GetMineBaseByFields_result {
 public:

  CbmService_GetMineBaseByFields_result(const CbmService_GetMineBaseByFields_result&);
  CbmService_GetMineBaseByFields_result& operator=(const CbmService_GetMineBaseByFields_result&);
  CbmService_GetMineBaseByFields_result() {
  }

  virtual ~CbmService_GetMineBaseByFields_result() throw();
  MineBase success;

  _CbmService_GetMineBaseByFields_result__isset __isset;

  void __set_success(const MineBase& val);

  bool operator == (const CbmService_GetMineBaseByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseByFields_presult__isset {
  _CbmService_GetMineBaseByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseByFields_presult__isset;

class CbmService_GetMineBaseByFields_presult {
 public:


  virtual ~CbmService_GetMineBaseByFields_presult() throw();
  MineBase* success;

  _CbmService_GetMineBaseByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineBaseByFields1_args__isset {
  _CbmService_GetMineBaseByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetMineBaseByFields1_args__isset;

class CbmService_GetMineBaseByFields1_args {
 public:

  CbmService_GetMineBaseByFields1_args(const CbmService_GetMineBaseByFields1_args&);
  CbmService_GetMineBaseByFields1_args& operator=(const CbmService_GetMineBaseByFields1_args&);
  CbmService_GetMineBaseByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetMineBaseByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetMineBaseByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetMineBaseByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineBaseByFields1_pargs {
 public:


  virtual ~CbmService_GetMineBaseByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseByFields1_result__isset {
  _CbmService_GetMineBaseByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseByFields1_result__isset;

class CbmService_GetMineBaseByFields1_result {
 public:

  CbmService_GetMineBaseByFields1_result(const CbmService_GetMineBaseByFields1_result&);
  CbmService_GetMineBaseByFields1_result& operator=(const CbmService_GetMineBaseByFields1_result&);
  CbmService_GetMineBaseByFields1_result() {
  }

  virtual ~CbmService_GetMineBaseByFields1_result() throw();
  MineBase success;

  _CbmService_GetMineBaseByFields1_result__isset __isset;

  void __set_success(const MineBase& val);

  bool operator == (const CbmService_GetMineBaseByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseByFields1_presult__isset {
  _CbmService_GetMineBaseByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseByFields1_presult__isset;

class CbmService_GetMineBaseByFields1_presult {
 public:


  virtual ~CbmService_GetMineBaseByFields1_presult() throw();
  MineBase* success;

  _CbmService_GetMineBaseByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineBaseByFields2_args__isset {
  _CbmService_GetMineBaseByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetMineBaseByFields2_args__isset;

class CbmService_GetMineBaseByFields2_args {
 public:

  CbmService_GetMineBaseByFields2_args(const CbmService_GetMineBaseByFields2_args&);
  CbmService_GetMineBaseByFields2_args& operator=(const CbmService_GetMineBaseByFields2_args&);
  CbmService_GetMineBaseByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetMineBaseByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetMineBaseByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetMineBaseByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineBaseByFields2_pargs {
 public:


  virtual ~CbmService_GetMineBaseByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseByFields2_result__isset {
  _CbmService_GetMineBaseByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseByFields2_result__isset;

class CbmService_GetMineBaseByFields2_result {
 public:

  CbmService_GetMineBaseByFields2_result(const CbmService_GetMineBaseByFields2_result&);
  CbmService_GetMineBaseByFields2_result& operator=(const CbmService_GetMineBaseByFields2_result&);
  CbmService_GetMineBaseByFields2_result() {
  }

  virtual ~CbmService_GetMineBaseByFields2_result() throw();
  MineBase success;

  _CbmService_GetMineBaseByFields2_result__isset __isset;

  void __set_success(const MineBase& val);

  bool operator == (const CbmService_GetMineBaseByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseByFields2_presult__isset {
  _CbmService_GetMineBaseByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseByFields2_presult__isset;

class CbmService_GetMineBaseByFields2_presult {
 public:


  virtual ~CbmService_GetMineBaseByFields2_presult() throw();
  MineBase* success;

  _CbmService_GetMineBaseByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineBaseListByFields_args__isset {
  _CbmService_GetMineBaseListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetMineBaseListByFields_args__isset;

class CbmService_GetMineBaseListByFields_args {
 public:

  CbmService_GetMineBaseListByFields_args(const CbmService_GetMineBaseListByFields_args&);
  CbmService_GetMineBaseListByFields_args& operator=(const CbmService_GetMineBaseListByFields_args&);
  CbmService_GetMineBaseListByFields_args() {
  }

  virtual ~CbmService_GetMineBaseListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetMineBaseListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetMineBaseListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineBaseListByFields_pargs {
 public:


  virtual ~CbmService_GetMineBaseListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseListByFields_result__isset {
  _CbmService_GetMineBaseListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseListByFields_result__isset;

class CbmService_GetMineBaseListByFields_result {
 public:

  CbmService_GetMineBaseListByFields_result(const CbmService_GetMineBaseListByFields_result&);
  CbmService_GetMineBaseListByFields_result& operator=(const CbmService_GetMineBaseListByFields_result&);
  CbmService_GetMineBaseListByFields_result() {
  }

  virtual ~CbmService_GetMineBaseListByFields_result() throw();
  std::vector<MineBase>  success;

  _CbmService_GetMineBaseListByFields_result__isset __isset;

  void __set_success(const std::vector<MineBase> & val);

  bool operator == (const CbmService_GetMineBaseListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseListByFields_presult__isset {
  _CbmService_GetMineBaseListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseListByFields_presult__isset;

class CbmService_GetMineBaseListByFields_presult {
 public:


  virtual ~CbmService_GetMineBaseListByFields_presult() throw();
  std::vector<MineBase> * success;

  _CbmService_GetMineBaseListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineBaseListByFields1_args__isset {
  _CbmService_GetMineBaseListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetMineBaseListByFields1_args__isset;

class CbmService_GetMineBaseListByFields1_args {
 public:

  CbmService_GetMineBaseListByFields1_args(const CbmService_GetMineBaseListByFields1_args&);
  CbmService_GetMineBaseListByFields1_args& operator=(const CbmService_GetMineBaseListByFields1_args&);
  CbmService_GetMineBaseListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetMineBaseListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetMineBaseListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetMineBaseListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineBaseListByFields1_pargs {
 public:


  virtual ~CbmService_GetMineBaseListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseListByFields1_result__isset {
  _CbmService_GetMineBaseListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseListByFields1_result__isset;

class CbmService_GetMineBaseListByFields1_result {
 public:

  CbmService_GetMineBaseListByFields1_result(const CbmService_GetMineBaseListByFields1_result&);
  CbmService_GetMineBaseListByFields1_result& operator=(const CbmService_GetMineBaseListByFields1_result&);
  CbmService_GetMineBaseListByFields1_result() {
  }

  virtual ~CbmService_GetMineBaseListByFields1_result() throw();
  std::vector<MineBase>  success;

  _CbmService_GetMineBaseListByFields1_result__isset __isset;

  void __set_success(const std::vector<MineBase> & val);

  bool operator == (const CbmService_GetMineBaseListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseListByFields1_presult__isset {
  _CbmService_GetMineBaseListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseListByFields1_presult__isset;

class CbmService_GetMineBaseListByFields1_presult {
 public:


  virtual ~CbmService_GetMineBaseListByFields1_presult() throw();
  std::vector<MineBase> * success;

  _CbmService_GetMineBaseListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineBaseListByFields2_args__isset {
  _CbmService_GetMineBaseListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetMineBaseListByFields2_args__isset;

class CbmService_GetMineBaseListByFields2_args {
 public:

  CbmService_GetMineBaseListByFields2_args(const CbmService_GetMineBaseListByFields2_args&);
  CbmService_GetMineBaseListByFields2_args& operator=(const CbmService_GetMineBaseListByFields2_args&);
  CbmService_GetMineBaseListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetMineBaseListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetMineBaseListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetMineBaseListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineBaseListByFields2_pargs {
 public:


  virtual ~CbmService_GetMineBaseListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseListByFields2_result__isset {
  _CbmService_GetMineBaseListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseListByFields2_result__isset;

class CbmService_GetMineBaseListByFields2_result {
 public:

  CbmService_GetMineBaseListByFields2_result(const CbmService_GetMineBaseListByFields2_result&);
  CbmService_GetMineBaseListByFields2_result& operator=(const CbmService_GetMineBaseListByFields2_result&);
  CbmService_GetMineBaseListByFields2_result() {
  }

  virtual ~CbmService_GetMineBaseListByFields2_result() throw();
  std::vector<MineBase>  success;

  _CbmService_GetMineBaseListByFields2_result__isset __isset;

  void __set_success(const std::vector<MineBase> & val);

  bool operator == (const CbmService_GetMineBaseListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineBaseListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineBaseListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineBaseListByFields2_presult__isset {
  _CbmService_GetMineBaseListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineBaseListByFields2_presult__isset;

class CbmService_GetMineBaseListByFields2_presult {
 public:


  virtual ~CbmService_GetMineBaseListByFields2_presult() throw();
  std::vector<MineBase> * success;

  _CbmService_GetMineBaseListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMineRegion_args__isset {
  _CbmService_AddMineRegion_args__isset() : mine_region(false) {}
  bool mine_region :1;
} _CbmService_AddMineRegion_args__isset;

class CbmService_AddMineRegion_args {
 public:

  CbmService_AddMineRegion_args(const CbmService_AddMineRegion_args&);
  CbmService_AddMineRegion_args& operator=(const CbmService_AddMineRegion_args&);
  CbmService_AddMineRegion_args() {
  }

  virtual ~CbmService_AddMineRegion_args() throw();
  MineRegion mine_region;

  _CbmService_AddMineRegion_args__isset __isset;

  void __set_mine_region(const MineRegion& val);

  bool operator == (const CbmService_AddMineRegion_args & rhs) const
  {
    if (!(mine_region == rhs.mine_region))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMineRegion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMineRegion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMineRegion_pargs {
 public:


  virtual ~CbmService_AddMineRegion_pargs() throw();
  const MineRegion* mine_region;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddMineRegion_result__isset {
  _CbmService_AddMineRegion_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddMineRegion_result__isset;

class CbmService_AddMineRegion_result {
 public:

  CbmService_AddMineRegion_result(const CbmService_AddMineRegion_result&);
  CbmService_AddMineRegion_result& operator=(const CbmService_AddMineRegion_result&);
  CbmService_AddMineRegion_result() : success(0) {
  }

  virtual ~CbmService_AddMineRegion_result() throw();
  int32_t success;

  _CbmService_AddMineRegion_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddMineRegion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMineRegion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMineRegion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddMineRegion_presult__isset {
  _CbmService_AddMineRegion_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddMineRegion_presult__isset;

class CbmService_AddMineRegion_presult {
 public:


  virtual ~CbmService_AddMineRegion_presult() throw();
  int32_t* success;

  _CbmService_AddMineRegion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMineRegion_args__isset {
  _CbmService_DeleteMineRegion_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteMineRegion_args__isset;

class CbmService_DeleteMineRegion_args {
 public:

  CbmService_DeleteMineRegion_args(const CbmService_DeleteMineRegion_args&);
  CbmService_DeleteMineRegion_args& operator=(const CbmService_DeleteMineRegion_args&);
  CbmService_DeleteMineRegion_args() : id(0) {
  }

  virtual ~CbmService_DeleteMineRegion_args() throw();
  int32_t id;

  _CbmService_DeleteMineRegion_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteMineRegion_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMineRegion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMineRegion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMineRegion_pargs {
 public:


  virtual ~CbmService_DeleteMineRegion_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteMineRegion_result__isset {
  _CbmService_DeleteMineRegion_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteMineRegion_result__isset;

class CbmService_DeleteMineRegion_result {
 public:

  CbmService_DeleteMineRegion_result(const CbmService_DeleteMineRegion_result&);
  CbmService_DeleteMineRegion_result& operator=(const CbmService_DeleteMineRegion_result&);
  CbmService_DeleteMineRegion_result() : success(0) {
  }

  virtual ~CbmService_DeleteMineRegion_result() throw();
  bool success;

  _CbmService_DeleteMineRegion_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteMineRegion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMineRegion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMineRegion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteMineRegion_presult__isset {
  _CbmService_DeleteMineRegion_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteMineRegion_presult__isset;

class CbmService_DeleteMineRegion_presult {
 public:


  virtual ~CbmService_DeleteMineRegion_presult() throw();
  bool* success;

  _CbmService_DeleteMineRegion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateMineRegion_args__isset {
  _CbmService_UpdateMineRegion_args__isset() : mine_region(false) {}
  bool mine_region :1;
} _CbmService_UpdateMineRegion_args__isset;

class CbmService_UpdateMineRegion_args {
 public:

  CbmService_UpdateMineRegion_args(const CbmService_UpdateMineRegion_args&);
  CbmService_UpdateMineRegion_args& operator=(const CbmService_UpdateMineRegion_args&);
  CbmService_UpdateMineRegion_args() {
  }

  virtual ~CbmService_UpdateMineRegion_args() throw();
  MineRegion mine_region;

  _CbmService_UpdateMineRegion_args__isset __isset;

  void __set_mine_region(const MineRegion& val);

  bool operator == (const CbmService_UpdateMineRegion_args & rhs) const
  {
    if (!(mine_region == rhs.mine_region))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateMineRegion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateMineRegion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateMineRegion_pargs {
 public:


  virtual ~CbmService_UpdateMineRegion_pargs() throw();
  const MineRegion* mine_region;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateMineRegion_result__isset {
  _CbmService_UpdateMineRegion_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateMineRegion_result__isset;

class CbmService_UpdateMineRegion_result {
 public:

  CbmService_UpdateMineRegion_result(const CbmService_UpdateMineRegion_result&);
  CbmService_UpdateMineRegion_result& operator=(const CbmService_UpdateMineRegion_result&);
  CbmService_UpdateMineRegion_result() : success(0) {
  }

  virtual ~CbmService_UpdateMineRegion_result() throw();
  bool success;

  _CbmService_UpdateMineRegion_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateMineRegion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateMineRegion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateMineRegion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateMineRegion_presult__isset {
  _CbmService_UpdateMineRegion_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateMineRegion_presult__isset;

class CbmService_UpdateMineRegion_presult {
 public:


  virtual ~CbmService_UpdateMineRegion_presult() throw();
  bool* success;

  _CbmService_UpdateMineRegion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineRegionById_args__isset {
  _CbmService_GetMineRegionById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetMineRegionById_args__isset;

class CbmService_GetMineRegionById_args {
 public:

  CbmService_GetMineRegionById_args(const CbmService_GetMineRegionById_args&);
  CbmService_GetMineRegionById_args& operator=(const CbmService_GetMineRegionById_args&);
  CbmService_GetMineRegionById_args() : id(0) {
  }

  virtual ~CbmService_GetMineRegionById_args() throw();
  int32_t id;

  _CbmService_GetMineRegionById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetMineRegionById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineRegionById_pargs {
 public:


  virtual ~CbmService_GetMineRegionById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionById_result__isset {
  _CbmService_GetMineRegionById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionById_result__isset;

class CbmService_GetMineRegionById_result {
 public:

  CbmService_GetMineRegionById_result(const CbmService_GetMineRegionById_result&);
  CbmService_GetMineRegionById_result& operator=(const CbmService_GetMineRegionById_result&);
  CbmService_GetMineRegionById_result() {
  }

  virtual ~CbmService_GetMineRegionById_result() throw();
  MineRegion success;

  _CbmService_GetMineRegionById_result__isset __isset;

  void __set_success(const MineRegion& val);

  bool operator == (const CbmService_GetMineRegionById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionById_presult__isset {
  _CbmService_GetMineRegionById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionById_presult__isset;

class CbmService_GetMineRegionById_presult {
 public:


  virtual ~CbmService_GetMineRegionById_presult() throw();
  MineRegion* success;

  _CbmService_GetMineRegionById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineRegionByForeignKey_args__isset {
  _CbmService_GetMineRegionByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetMineRegionByForeignKey_args__isset;

class CbmService_GetMineRegionByForeignKey_args {
 public:

  CbmService_GetMineRegionByForeignKey_args(const CbmService_GetMineRegionByForeignKey_args&);
  CbmService_GetMineRegionByForeignKey_args& operator=(const CbmService_GetMineRegionByForeignKey_args&);
  CbmService_GetMineRegionByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetMineRegionByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetMineRegionByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetMineRegionByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineRegionByForeignKey_pargs {
 public:


  virtual ~CbmService_GetMineRegionByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionByForeignKey_result__isset {
  _CbmService_GetMineRegionByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionByForeignKey_result__isset;

class CbmService_GetMineRegionByForeignKey_result {
 public:

  CbmService_GetMineRegionByForeignKey_result(const CbmService_GetMineRegionByForeignKey_result&);
  CbmService_GetMineRegionByForeignKey_result& operator=(const CbmService_GetMineRegionByForeignKey_result&);
  CbmService_GetMineRegionByForeignKey_result() {
  }

  virtual ~CbmService_GetMineRegionByForeignKey_result() throw();
  MineRegion success;

  _CbmService_GetMineRegionByForeignKey_result__isset __isset;

  void __set_success(const MineRegion& val);

  bool operator == (const CbmService_GetMineRegionByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionByForeignKey_presult__isset {
  _CbmService_GetMineRegionByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionByForeignKey_presult__isset;

class CbmService_GetMineRegionByForeignKey_presult {
 public:


  virtual ~CbmService_GetMineRegionByForeignKey_presult() throw();
  MineRegion* success;

  _CbmService_GetMineRegionByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetMineRegionList_args {
 public:

  CbmService_GetMineRegionList_args(const CbmService_GetMineRegionList_args&);
  CbmService_GetMineRegionList_args& operator=(const CbmService_GetMineRegionList_args&);
  CbmService_GetMineRegionList_args() {
  }

  virtual ~CbmService_GetMineRegionList_args() throw();

  bool operator == (const CbmService_GetMineRegionList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetMineRegionList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineRegionList_pargs {
 public:


  virtual ~CbmService_GetMineRegionList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionList_result__isset {
  _CbmService_GetMineRegionList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionList_result__isset;

class CbmService_GetMineRegionList_result {
 public:

  CbmService_GetMineRegionList_result(const CbmService_GetMineRegionList_result&);
  CbmService_GetMineRegionList_result& operator=(const CbmService_GetMineRegionList_result&);
  CbmService_GetMineRegionList_result() {
  }

  virtual ~CbmService_GetMineRegionList_result() throw();
  std::vector<MineRegion>  success;

  _CbmService_GetMineRegionList_result__isset __isset;

  void __set_success(const std::vector<MineRegion> & val);

  bool operator == (const CbmService_GetMineRegionList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionList_presult__isset {
  _CbmService_GetMineRegionList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionList_presult__isset;

class CbmService_GetMineRegionList_presult {
 public:


  virtual ~CbmService_GetMineRegionList_presult() throw();
  std::vector<MineRegion> * success;

  _CbmService_GetMineRegionList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetMineRegionIds_args {
 public:

  CbmService_GetMineRegionIds_args(const CbmService_GetMineRegionIds_args&);
  CbmService_GetMineRegionIds_args& operator=(const CbmService_GetMineRegionIds_args&);
  CbmService_GetMineRegionIds_args() {
  }

  virtual ~CbmService_GetMineRegionIds_args() throw();

  bool operator == (const CbmService_GetMineRegionIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetMineRegionIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineRegionIds_pargs {
 public:


  virtual ~CbmService_GetMineRegionIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionIds_result__isset {
  _CbmService_GetMineRegionIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionIds_result__isset;

class CbmService_GetMineRegionIds_result {
 public:

  CbmService_GetMineRegionIds_result(const CbmService_GetMineRegionIds_result&);
  CbmService_GetMineRegionIds_result& operator=(const CbmService_GetMineRegionIds_result&);
  CbmService_GetMineRegionIds_result() {
  }

  virtual ~CbmService_GetMineRegionIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetMineRegionIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetMineRegionIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionIds_presult__isset {
  _CbmService_GetMineRegionIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionIds_presult__isset;

class CbmService_GetMineRegionIds_presult {
 public:


  virtual ~CbmService_GetMineRegionIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetMineRegionIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetMineRegionNames_args {
 public:

  CbmService_GetMineRegionNames_args(const CbmService_GetMineRegionNames_args&);
  CbmService_GetMineRegionNames_args& operator=(const CbmService_GetMineRegionNames_args&);
  CbmService_GetMineRegionNames_args() {
  }

  virtual ~CbmService_GetMineRegionNames_args() throw();

  bool operator == (const CbmService_GetMineRegionNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetMineRegionNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineRegionNames_pargs {
 public:


  virtual ~CbmService_GetMineRegionNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionNames_result__isset {
  _CbmService_GetMineRegionNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionNames_result__isset;

class CbmService_GetMineRegionNames_result {
 public:

  CbmService_GetMineRegionNames_result(const CbmService_GetMineRegionNames_result&);
  CbmService_GetMineRegionNames_result& operator=(const CbmService_GetMineRegionNames_result&);
  CbmService_GetMineRegionNames_result() {
  }

  virtual ~CbmService_GetMineRegionNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetMineRegionNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetMineRegionNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionNames_presult__isset {
  _CbmService_GetMineRegionNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionNames_presult__isset;

class CbmService_GetMineRegionNames_presult {
 public:


  virtual ~CbmService_GetMineRegionNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetMineRegionNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreMineRegion_args__isset {
  _CbmService_AddMoreMineRegion_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreMineRegion_args__isset;

class CbmService_AddMoreMineRegion_args {
 public:

  CbmService_AddMoreMineRegion_args(const CbmService_AddMoreMineRegion_args&);
  CbmService_AddMoreMineRegion_args& operator=(const CbmService_AddMoreMineRegion_args&);
  CbmService_AddMoreMineRegion_args() {
  }

  virtual ~CbmService_AddMoreMineRegion_args() throw();
  std::vector<MineRegion>  objs;

  _CbmService_AddMoreMineRegion_args__isset __isset;

  void __set_objs(const std::vector<MineRegion> & val);

  bool operator == (const CbmService_AddMoreMineRegion_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreMineRegion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreMineRegion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreMineRegion_pargs {
 public:


  virtual ~CbmService_AddMoreMineRegion_pargs() throw();
  const std::vector<MineRegion> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreMineRegion_result {
 public:

  CbmService_AddMoreMineRegion_result(const CbmService_AddMoreMineRegion_result&);
  CbmService_AddMoreMineRegion_result& operator=(const CbmService_AddMoreMineRegion_result&);
  CbmService_AddMoreMineRegion_result() {
  }

  virtual ~CbmService_AddMoreMineRegion_result() throw();

  bool operator == (const CbmService_AddMoreMineRegion_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreMineRegion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreMineRegion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreMineRegion_presult {
 public:


  virtual ~CbmService_AddMoreMineRegion_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreMineRegion_args__isset {
  _CbmService_DeleteMoreMineRegion_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreMineRegion_args__isset;

class CbmService_DeleteMoreMineRegion_args {
 public:

  CbmService_DeleteMoreMineRegion_args(const CbmService_DeleteMoreMineRegion_args&);
  CbmService_DeleteMoreMineRegion_args& operator=(const CbmService_DeleteMoreMineRegion_args&);
  CbmService_DeleteMoreMineRegion_args() {
  }

  virtual ~CbmService_DeleteMoreMineRegion_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreMineRegion_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreMineRegion_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreMineRegion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreMineRegion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreMineRegion_pargs {
 public:


  virtual ~CbmService_DeleteMoreMineRegion_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreMineRegion_result {
 public:

  CbmService_DeleteMoreMineRegion_result(const CbmService_DeleteMoreMineRegion_result&);
  CbmService_DeleteMoreMineRegion_result& operator=(const CbmService_DeleteMoreMineRegion_result&);
  CbmService_DeleteMoreMineRegion_result() {
  }

  virtual ~CbmService_DeleteMoreMineRegion_result() throw();

  bool operator == (const CbmService_DeleteMoreMineRegion_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreMineRegion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreMineRegion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreMineRegion_presult {
 public:


  virtual ~CbmService_DeleteMoreMineRegion_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineRegionByFields_args__isset {
  _CbmService_GetMineRegionByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetMineRegionByFields_args__isset;

class CbmService_GetMineRegionByFields_args {
 public:

  CbmService_GetMineRegionByFields_args(const CbmService_GetMineRegionByFields_args&);
  CbmService_GetMineRegionByFields_args& operator=(const CbmService_GetMineRegionByFields_args&);
  CbmService_GetMineRegionByFields_args() {
  }

  virtual ~CbmService_GetMineRegionByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetMineRegionByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetMineRegionByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineRegionByFields_pargs {
 public:


  virtual ~CbmService_GetMineRegionByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionByFields_result__isset {
  _CbmService_GetMineRegionByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionByFields_result__isset;

class CbmService_GetMineRegionByFields_result {
 public:

  CbmService_GetMineRegionByFields_result(const CbmService_GetMineRegionByFields_result&);
  CbmService_GetMineRegionByFields_result& operator=(const CbmService_GetMineRegionByFields_result&);
  CbmService_GetMineRegionByFields_result() {
  }

  virtual ~CbmService_GetMineRegionByFields_result() throw();
  MineRegion success;

  _CbmService_GetMineRegionByFields_result__isset __isset;

  void __set_success(const MineRegion& val);

  bool operator == (const CbmService_GetMineRegionByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionByFields_presult__isset {
  _CbmService_GetMineRegionByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionByFields_presult__isset;

class CbmService_GetMineRegionByFields_presult {
 public:


  virtual ~CbmService_GetMineRegionByFields_presult() throw();
  MineRegion* success;

  _CbmService_GetMineRegionByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineRegionByFields1_args__isset {
  _CbmService_GetMineRegionByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetMineRegionByFields1_args__isset;

class CbmService_GetMineRegionByFields1_args {
 public:

  CbmService_GetMineRegionByFields1_args(const CbmService_GetMineRegionByFields1_args&);
  CbmService_GetMineRegionByFields1_args& operator=(const CbmService_GetMineRegionByFields1_args&);
  CbmService_GetMineRegionByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetMineRegionByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetMineRegionByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetMineRegionByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineRegionByFields1_pargs {
 public:


  virtual ~CbmService_GetMineRegionByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionByFields1_result__isset {
  _CbmService_GetMineRegionByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionByFields1_result__isset;

class CbmService_GetMineRegionByFields1_result {
 public:

  CbmService_GetMineRegionByFields1_result(const CbmService_GetMineRegionByFields1_result&);
  CbmService_GetMineRegionByFields1_result& operator=(const CbmService_GetMineRegionByFields1_result&);
  CbmService_GetMineRegionByFields1_result() {
  }

  virtual ~CbmService_GetMineRegionByFields1_result() throw();
  MineRegion success;

  _CbmService_GetMineRegionByFields1_result__isset __isset;

  void __set_success(const MineRegion& val);

  bool operator == (const CbmService_GetMineRegionByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionByFields1_presult__isset {
  _CbmService_GetMineRegionByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionByFields1_presult__isset;

class CbmService_GetMineRegionByFields1_presult {
 public:


  virtual ~CbmService_GetMineRegionByFields1_presult() throw();
  MineRegion* success;

  _CbmService_GetMineRegionByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineRegionByFields2_args__isset {
  _CbmService_GetMineRegionByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetMineRegionByFields2_args__isset;

class CbmService_GetMineRegionByFields2_args {
 public:

  CbmService_GetMineRegionByFields2_args(const CbmService_GetMineRegionByFields2_args&);
  CbmService_GetMineRegionByFields2_args& operator=(const CbmService_GetMineRegionByFields2_args&);
  CbmService_GetMineRegionByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetMineRegionByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetMineRegionByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetMineRegionByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineRegionByFields2_pargs {
 public:


  virtual ~CbmService_GetMineRegionByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionByFields2_result__isset {
  _CbmService_GetMineRegionByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionByFields2_result__isset;

class CbmService_GetMineRegionByFields2_result {
 public:

  CbmService_GetMineRegionByFields2_result(const CbmService_GetMineRegionByFields2_result&);
  CbmService_GetMineRegionByFields2_result& operator=(const CbmService_GetMineRegionByFields2_result&);
  CbmService_GetMineRegionByFields2_result() {
  }

  virtual ~CbmService_GetMineRegionByFields2_result() throw();
  MineRegion success;

  _CbmService_GetMineRegionByFields2_result__isset __isset;

  void __set_success(const MineRegion& val);

  bool operator == (const CbmService_GetMineRegionByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionByFields2_presult__isset {
  _CbmService_GetMineRegionByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionByFields2_presult__isset;

class CbmService_GetMineRegionByFields2_presult {
 public:


  virtual ~CbmService_GetMineRegionByFields2_presult() throw();
  MineRegion* success;

  _CbmService_GetMineRegionByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineRegionListByFields_args__isset {
  _CbmService_GetMineRegionListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetMineRegionListByFields_args__isset;

class CbmService_GetMineRegionListByFields_args {
 public:

  CbmService_GetMineRegionListByFields_args(const CbmService_GetMineRegionListByFields_args&);
  CbmService_GetMineRegionListByFields_args& operator=(const CbmService_GetMineRegionListByFields_args&);
  CbmService_GetMineRegionListByFields_args() {
  }

  virtual ~CbmService_GetMineRegionListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetMineRegionListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetMineRegionListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineRegionListByFields_pargs {
 public:


  virtual ~CbmService_GetMineRegionListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionListByFields_result__isset {
  _CbmService_GetMineRegionListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionListByFields_result__isset;

class CbmService_GetMineRegionListByFields_result {
 public:

  CbmService_GetMineRegionListByFields_result(const CbmService_GetMineRegionListByFields_result&);
  CbmService_GetMineRegionListByFields_result& operator=(const CbmService_GetMineRegionListByFields_result&);
  CbmService_GetMineRegionListByFields_result() {
  }

  virtual ~CbmService_GetMineRegionListByFields_result() throw();
  std::vector<MineRegion>  success;

  _CbmService_GetMineRegionListByFields_result__isset __isset;

  void __set_success(const std::vector<MineRegion> & val);

  bool operator == (const CbmService_GetMineRegionListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionListByFields_presult__isset {
  _CbmService_GetMineRegionListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionListByFields_presult__isset;

class CbmService_GetMineRegionListByFields_presult {
 public:


  virtual ~CbmService_GetMineRegionListByFields_presult() throw();
  std::vector<MineRegion> * success;

  _CbmService_GetMineRegionListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineRegionListByFields1_args__isset {
  _CbmService_GetMineRegionListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetMineRegionListByFields1_args__isset;

class CbmService_GetMineRegionListByFields1_args {
 public:

  CbmService_GetMineRegionListByFields1_args(const CbmService_GetMineRegionListByFields1_args&);
  CbmService_GetMineRegionListByFields1_args& operator=(const CbmService_GetMineRegionListByFields1_args&);
  CbmService_GetMineRegionListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetMineRegionListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetMineRegionListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetMineRegionListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineRegionListByFields1_pargs {
 public:


  virtual ~CbmService_GetMineRegionListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionListByFields1_result__isset {
  _CbmService_GetMineRegionListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionListByFields1_result__isset;

class CbmService_GetMineRegionListByFields1_result {
 public:

  CbmService_GetMineRegionListByFields1_result(const CbmService_GetMineRegionListByFields1_result&);
  CbmService_GetMineRegionListByFields1_result& operator=(const CbmService_GetMineRegionListByFields1_result&);
  CbmService_GetMineRegionListByFields1_result() {
  }

  virtual ~CbmService_GetMineRegionListByFields1_result() throw();
  std::vector<MineRegion>  success;

  _CbmService_GetMineRegionListByFields1_result__isset __isset;

  void __set_success(const std::vector<MineRegion> & val);

  bool operator == (const CbmService_GetMineRegionListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionListByFields1_presult__isset {
  _CbmService_GetMineRegionListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionListByFields1_presult__isset;

class CbmService_GetMineRegionListByFields1_presult {
 public:


  virtual ~CbmService_GetMineRegionListByFields1_presult() throw();
  std::vector<MineRegion> * success;

  _CbmService_GetMineRegionListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineRegionListByFields2_args__isset {
  _CbmService_GetMineRegionListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetMineRegionListByFields2_args__isset;

class CbmService_GetMineRegionListByFields2_args {
 public:

  CbmService_GetMineRegionListByFields2_args(const CbmService_GetMineRegionListByFields2_args&);
  CbmService_GetMineRegionListByFields2_args& operator=(const CbmService_GetMineRegionListByFields2_args&);
  CbmService_GetMineRegionListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetMineRegionListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetMineRegionListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetMineRegionListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineRegionListByFields2_pargs {
 public:


  virtual ~CbmService_GetMineRegionListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionListByFields2_result__isset {
  _CbmService_GetMineRegionListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionListByFields2_result__isset;

class CbmService_GetMineRegionListByFields2_result {
 public:

  CbmService_GetMineRegionListByFields2_result(const CbmService_GetMineRegionListByFields2_result&);
  CbmService_GetMineRegionListByFields2_result& operator=(const CbmService_GetMineRegionListByFields2_result&);
  CbmService_GetMineRegionListByFields2_result() {
  }

  virtual ~CbmService_GetMineRegionListByFields2_result() throw();
  std::vector<MineRegion>  success;

  _CbmService_GetMineRegionListByFields2_result__isset __isset;

  void __set_success(const std::vector<MineRegion> & val);

  bool operator == (const CbmService_GetMineRegionListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionListByFields2_presult__isset {
  _CbmService_GetMineRegionListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionListByFields2_presult__isset;

class CbmService_GetMineRegionListByFields2_presult {
 public:


  virtual ~CbmService_GetMineRegionListByFields2_presult() throw();
  std::vector<MineRegion> * success;

  _CbmService_GetMineRegionListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddPoreFlow_args__isset {
  _CbmService_AddPoreFlow_args__isset() : pore_flow(false) {}
  bool pore_flow :1;
} _CbmService_AddPoreFlow_args__isset;

class CbmService_AddPoreFlow_args {
 public:

  CbmService_AddPoreFlow_args(const CbmService_AddPoreFlow_args&);
  CbmService_AddPoreFlow_args& operator=(const CbmService_AddPoreFlow_args&);
  CbmService_AddPoreFlow_args() {
  }

  virtual ~CbmService_AddPoreFlow_args() throw();
  PoreFlow pore_flow;

  _CbmService_AddPoreFlow_args__isset __isset;

  void __set_pore_flow(const PoreFlow& val);

  bool operator == (const CbmService_AddPoreFlow_args & rhs) const
  {
    if (!(pore_flow == rhs.pore_flow))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddPoreFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddPoreFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddPoreFlow_pargs {
 public:


  virtual ~CbmService_AddPoreFlow_pargs() throw();
  const PoreFlow* pore_flow;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddPoreFlow_result__isset {
  _CbmService_AddPoreFlow_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddPoreFlow_result__isset;

class CbmService_AddPoreFlow_result {
 public:

  CbmService_AddPoreFlow_result(const CbmService_AddPoreFlow_result&);
  CbmService_AddPoreFlow_result& operator=(const CbmService_AddPoreFlow_result&);
  CbmService_AddPoreFlow_result() : success(0) {
  }

  virtual ~CbmService_AddPoreFlow_result() throw();
  int32_t success;

  _CbmService_AddPoreFlow_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddPoreFlow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddPoreFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddPoreFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddPoreFlow_presult__isset {
  _CbmService_AddPoreFlow_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddPoreFlow_presult__isset;

class CbmService_AddPoreFlow_presult {
 public:


  virtual ~CbmService_AddPoreFlow_presult() throw();
  int32_t* success;

  _CbmService_AddPoreFlow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeletePoreFlow_args__isset {
  _CbmService_DeletePoreFlow_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeletePoreFlow_args__isset;

class CbmService_DeletePoreFlow_args {
 public:

  CbmService_DeletePoreFlow_args(const CbmService_DeletePoreFlow_args&);
  CbmService_DeletePoreFlow_args& operator=(const CbmService_DeletePoreFlow_args&);
  CbmService_DeletePoreFlow_args() : id(0) {
  }

  virtual ~CbmService_DeletePoreFlow_args() throw();
  int32_t id;

  _CbmService_DeletePoreFlow_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeletePoreFlow_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeletePoreFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeletePoreFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeletePoreFlow_pargs {
 public:


  virtual ~CbmService_DeletePoreFlow_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeletePoreFlow_result__isset {
  _CbmService_DeletePoreFlow_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeletePoreFlow_result__isset;

class CbmService_DeletePoreFlow_result {
 public:

  CbmService_DeletePoreFlow_result(const CbmService_DeletePoreFlow_result&);
  CbmService_DeletePoreFlow_result& operator=(const CbmService_DeletePoreFlow_result&);
  CbmService_DeletePoreFlow_result() : success(0) {
  }

  virtual ~CbmService_DeletePoreFlow_result() throw();
  bool success;

  _CbmService_DeletePoreFlow_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeletePoreFlow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeletePoreFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeletePoreFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeletePoreFlow_presult__isset {
  _CbmService_DeletePoreFlow_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeletePoreFlow_presult__isset;

class CbmService_DeletePoreFlow_presult {
 public:


  virtual ~CbmService_DeletePoreFlow_presult() throw();
  bool* success;

  _CbmService_DeletePoreFlow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdatePoreFlow_args__isset {
  _CbmService_UpdatePoreFlow_args__isset() : pore_flow(false) {}
  bool pore_flow :1;
} _CbmService_UpdatePoreFlow_args__isset;

class CbmService_UpdatePoreFlow_args {
 public:

  CbmService_UpdatePoreFlow_args(const CbmService_UpdatePoreFlow_args&);
  CbmService_UpdatePoreFlow_args& operator=(const CbmService_UpdatePoreFlow_args&);
  CbmService_UpdatePoreFlow_args() {
  }

  virtual ~CbmService_UpdatePoreFlow_args() throw();
  PoreFlow pore_flow;

  _CbmService_UpdatePoreFlow_args__isset __isset;

  void __set_pore_flow(const PoreFlow& val);

  bool operator == (const CbmService_UpdatePoreFlow_args & rhs) const
  {
    if (!(pore_flow == rhs.pore_flow))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdatePoreFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdatePoreFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdatePoreFlow_pargs {
 public:


  virtual ~CbmService_UpdatePoreFlow_pargs() throw();
  const PoreFlow* pore_flow;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdatePoreFlow_result__isset {
  _CbmService_UpdatePoreFlow_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdatePoreFlow_result__isset;

class CbmService_UpdatePoreFlow_result {
 public:

  CbmService_UpdatePoreFlow_result(const CbmService_UpdatePoreFlow_result&);
  CbmService_UpdatePoreFlow_result& operator=(const CbmService_UpdatePoreFlow_result&);
  CbmService_UpdatePoreFlow_result() : success(0) {
  }

  virtual ~CbmService_UpdatePoreFlow_result() throw();
  bool success;

  _CbmService_UpdatePoreFlow_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdatePoreFlow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdatePoreFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdatePoreFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdatePoreFlow_presult__isset {
  _CbmService_UpdatePoreFlow_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdatePoreFlow_presult__isset;

class CbmService_UpdatePoreFlow_presult {
 public:


  virtual ~CbmService_UpdatePoreFlow_presult() throw();
  bool* success;

  _CbmService_UpdatePoreFlow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreFlowById_args__isset {
  _CbmService_GetPoreFlowById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetPoreFlowById_args__isset;

class CbmService_GetPoreFlowById_args {
 public:

  CbmService_GetPoreFlowById_args(const CbmService_GetPoreFlowById_args&);
  CbmService_GetPoreFlowById_args& operator=(const CbmService_GetPoreFlowById_args&);
  CbmService_GetPoreFlowById_args() : id(0) {
  }

  virtual ~CbmService_GetPoreFlowById_args() throw();
  int32_t id;

  _CbmService_GetPoreFlowById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetPoreFlowById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreFlowById_pargs {
 public:


  virtual ~CbmService_GetPoreFlowById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowById_result__isset {
  _CbmService_GetPoreFlowById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowById_result__isset;

class CbmService_GetPoreFlowById_result {
 public:

  CbmService_GetPoreFlowById_result(const CbmService_GetPoreFlowById_result&);
  CbmService_GetPoreFlowById_result& operator=(const CbmService_GetPoreFlowById_result&);
  CbmService_GetPoreFlowById_result() {
  }

  virtual ~CbmService_GetPoreFlowById_result() throw();
  PoreFlow success;

  _CbmService_GetPoreFlowById_result__isset __isset;

  void __set_success(const PoreFlow& val);

  bool operator == (const CbmService_GetPoreFlowById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowById_presult__isset {
  _CbmService_GetPoreFlowById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowById_presult__isset;

class CbmService_GetPoreFlowById_presult {
 public:


  virtual ~CbmService_GetPoreFlowById_presult() throw();
  PoreFlow* success;

  _CbmService_GetPoreFlowById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreFlowByForeignKey_args__isset {
  _CbmService_GetPoreFlowByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetPoreFlowByForeignKey_args__isset;

class CbmService_GetPoreFlowByForeignKey_args {
 public:

  CbmService_GetPoreFlowByForeignKey_args(const CbmService_GetPoreFlowByForeignKey_args&);
  CbmService_GetPoreFlowByForeignKey_args& operator=(const CbmService_GetPoreFlowByForeignKey_args&);
  CbmService_GetPoreFlowByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetPoreFlowByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetPoreFlowByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetPoreFlowByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreFlowByForeignKey_pargs {
 public:


  virtual ~CbmService_GetPoreFlowByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowByForeignKey_result__isset {
  _CbmService_GetPoreFlowByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowByForeignKey_result__isset;

class CbmService_GetPoreFlowByForeignKey_result {
 public:

  CbmService_GetPoreFlowByForeignKey_result(const CbmService_GetPoreFlowByForeignKey_result&);
  CbmService_GetPoreFlowByForeignKey_result& operator=(const CbmService_GetPoreFlowByForeignKey_result&);
  CbmService_GetPoreFlowByForeignKey_result() {
  }

  virtual ~CbmService_GetPoreFlowByForeignKey_result() throw();
  PoreFlow success;

  _CbmService_GetPoreFlowByForeignKey_result__isset __isset;

  void __set_success(const PoreFlow& val);

  bool operator == (const CbmService_GetPoreFlowByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowByForeignKey_presult__isset {
  _CbmService_GetPoreFlowByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowByForeignKey_presult__isset;

class CbmService_GetPoreFlowByForeignKey_presult {
 public:


  virtual ~CbmService_GetPoreFlowByForeignKey_presult() throw();
  PoreFlow* success;

  _CbmService_GetPoreFlowByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetPoreFlowList_args {
 public:

  CbmService_GetPoreFlowList_args(const CbmService_GetPoreFlowList_args&);
  CbmService_GetPoreFlowList_args& operator=(const CbmService_GetPoreFlowList_args&);
  CbmService_GetPoreFlowList_args() {
  }

  virtual ~CbmService_GetPoreFlowList_args() throw();

  bool operator == (const CbmService_GetPoreFlowList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreFlowList_pargs {
 public:


  virtual ~CbmService_GetPoreFlowList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowList_result__isset {
  _CbmService_GetPoreFlowList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowList_result__isset;

class CbmService_GetPoreFlowList_result {
 public:

  CbmService_GetPoreFlowList_result(const CbmService_GetPoreFlowList_result&);
  CbmService_GetPoreFlowList_result& operator=(const CbmService_GetPoreFlowList_result&);
  CbmService_GetPoreFlowList_result() {
  }

  virtual ~CbmService_GetPoreFlowList_result() throw();
  std::vector<PoreFlow>  success;

  _CbmService_GetPoreFlowList_result__isset __isset;

  void __set_success(const std::vector<PoreFlow> & val);

  bool operator == (const CbmService_GetPoreFlowList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowList_presult__isset {
  _CbmService_GetPoreFlowList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowList_presult__isset;

class CbmService_GetPoreFlowList_presult {
 public:


  virtual ~CbmService_GetPoreFlowList_presult() throw();
  std::vector<PoreFlow> * success;

  _CbmService_GetPoreFlowList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetPoreFlowIds_args {
 public:

  CbmService_GetPoreFlowIds_args(const CbmService_GetPoreFlowIds_args&);
  CbmService_GetPoreFlowIds_args& operator=(const CbmService_GetPoreFlowIds_args&);
  CbmService_GetPoreFlowIds_args() {
  }

  virtual ~CbmService_GetPoreFlowIds_args() throw();

  bool operator == (const CbmService_GetPoreFlowIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreFlowIds_pargs {
 public:


  virtual ~CbmService_GetPoreFlowIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowIds_result__isset {
  _CbmService_GetPoreFlowIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowIds_result__isset;

class CbmService_GetPoreFlowIds_result {
 public:

  CbmService_GetPoreFlowIds_result(const CbmService_GetPoreFlowIds_result&);
  CbmService_GetPoreFlowIds_result& operator=(const CbmService_GetPoreFlowIds_result&);
  CbmService_GetPoreFlowIds_result() {
  }

  virtual ~CbmService_GetPoreFlowIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetPoreFlowIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetPoreFlowIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowIds_presult__isset {
  _CbmService_GetPoreFlowIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowIds_presult__isset;

class CbmService_GetPoreFlowIds_presult {
 public:


  virtual ~CbmService_GetPoreFlowIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetPoreFlowIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetPoreFlowNames_args {
 public:

  CbmService_GetPoreFlowNames_args(const CbmService_GetPoreFlowNames_args&);
  CbmService_GetPoreFlowNames_args& operator=(const CbmService_GetPoreFlowNames_args&);
  CbmService_GetPoreFlowNames_args() {
  }

  virtual ~CbmService_GetPoreFlowNames_args() throw();

  bool operator == (const CbmService_GetPoreFlowNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreFlowNames_pargs {
 public:


  virtual ~CbmService_GetPoreFlowNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowNames_result__isset {
  _CbmService_GetPoreFlowNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowNames_result__isset;

class CbmService_GetPoreFlowNames_result {
 public:

  CbmService_GetPoreFlowNames_result(const CbmService_GetPoreFlowNames_result&);
  CbmService_GetPoreFlowNames_result& operator=(const CbmService_GetPoreFlowNames_result&);
  CbmService_GetPoreFlowNames_result() {
  }

  virtual ~CbmService_GetPoreFlowNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetPoreFlowNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetPoreFlowNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowNames_presult__isset {
  _CbmService_GetPoreFlowNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowNames_presult__isset;

class CbmService_GetPoreFlowNames_presult {
 public:


  virtual ~CbmService_GetPoreFlowNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetPoreFlowNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMorePoreFlow_args__isset {
  _CbmService_AddMorePoreFlow_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMorePoreFlow_args__isset;

class CbmService_AddMorePoreFlow_args {
 public:

  CbmService_AddMorePoreFlow_args(const CbmService_AddMorePoreFlow_args&);
  CbmService_AddMorePoreFlow_args& operator=(const CbmService_AddMorePoreFlow_args&);
  CbmService_AddMorePoreFlow_args() {
  }

  virtual ~CbmService_AddMorePoreFlow_args() throw();
  std::vector<PoreFlow>  objs;

  _CbmService_AddMorePoreFlow_args__isset __isset;

  void __set_objs(const std::vector<PoreFlow> & val);

  bool operator == (const CbmService_AddMorePoreFlow_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMorePoreFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMorePoreFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMorePoreFlow_pargs {
 public:


  virtual ~CbmService_AddMorePoreFlow_pargs() throw();
  const std::vector<PoreFlow> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMorePoreFlow_result {
 public:

  CbmService_AddMorePoreFlow_result(const CbmService_AddMorePoreFlow_result&);
  CbmService_AddMorePoreFlow_result& operator=(const CbmService_AddMorePoreFlow_result&);
  CbmService_AddMorePoreFlow_result() {
  }

  virtual ~CbmService_AddMorePoreFlow_result() throw();

  bool operator == (const CbmService_AddMorePoreFlow_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMorePoreFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMorePoreFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMorePoreFlow_presult {
 public:


  virtual ~CbmService_AddMorePoreFlow_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMorePoreFlow_args__isset {
  _CbmService_DeleteMorePoreFlow_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMorePoreFlow_args__isset;

class CbmService_DeleteMorePoreFlow_args {
 public:

  CbmService_DeleteMorePoreFlow_args(const CbmService_DeleteMorePoreFlow_args&);
  CbmService_DeleteMorePoreFlow_args& operator=(const CbmService_DeleteMorePoreFlow_args&);
  CbmService_DeleteMorePoreFlow_args() {
  }

  virtual ~CbmService_DeleteMorePoreFlow_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMorePoreFlow_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMorePoreFlow_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMorePoreFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMorePoreFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMorePoreFlow_pargs {
 public:


  virtual ~CbmService_DeleteMorePoreFlow_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMorePoreFlow_result {
 public:

  CbmService_DeleteMorePoreFlow_result(const CbmService_DeleteMorePoreFlow_result&);
  CbmService_DeleteMorePoreFlow_result& operator=(const CbmService_DeleteMorePoreFlow_result&);
  CbmService_DeleteMorePoreFlow_result() {
  }

  virtual ~CbmService_DeleteMorePoreFlow_result() throw();

  bool operator == (const CbmService_DeleteMorePoreFlow_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMorePoreFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMorePoreFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMorePoreFlow_presult {
 public:


  virtual ~CbmService_DeleteMorePoreFlow_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreFlowByFields_args__isset {
  _CbmService_GetPoreFlowByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetPoreFlowByFields_args__isset;

class CbmService_GetPoreFlowByFields_args {
 public:

  CbmService_GetPoreFlowByFields_args(const CbmService_GetPoreFlowByFields_args&);
  CbmService_GetPoreFlowByFields_args& operator=(const CbmService_GetPoreFlowByFields_args&);
  CbmService_GetPoreFlowByFields_args() {
  }

  virtual ~CbmService_GetPoreFlowByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetPoreFlowByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetPoreFlowByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreFlowByFields_pargs {
 public:


  virtual ~CbmService_GetPoreFlowByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowByFields_result__isset {
  _CbmService_GetPoreFlowByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowByFields_result__isset;

class CbmService_GetPoreFlowByFields_result {
 public:

  CbmService_GetPoreFlowByFields_result(const CbmService_GetPoreFlowByFields_result&);
  CbmService_GetPoreFlowByFields_result& operator=(const CbmService_GetPoreFlowByFields_result&);
  CbmService_GetPoreFlowByFields_result() {
  }

  virtual ~CbmService_GetPoreFlowByFields_result() throw();
  PoreFlow success;

  _CbmService_GetPoreFlowByFields_result__isset __isset;

  void __set_success(const PoreFlow& val);

  bool operator == (const CbmService_GetPoreFlowByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowByFields_presult__isset {
  _CbmService_GetPoreFlowByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowByFields_presult__isset;

class CbmService_GetPoreFlowByFields_presult {
 public:


  virtual ~CbmService_GetPoreFlowByFields_presult() throw();
  PoreFlow* success;

  _CbmService_GetPoreFlowByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreFlowByFields1_args__isset {
  _CbmService_GetPoreFlowByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetPoreFlowByFields1_args__isset;

class CbmService_GetPoreFlowByFields1_args {
 public:

  CbmService_GetPoreFlowByFields1_args(const CbmService_GetPoreFlowByFields1_args&);
  CbmService_GetPoreFlowByFields1_args& operator=(const CbmService_GetPoreFlowByFields1_args&);
  CbmService_GetPoreFlowByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetPoreFlowByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetPoreFlowByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetPoreFlowByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreFlowByFields1_pargs {
 public:


  virtual ~CbmService_GetPoreFlowByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowByFields1_result__isset {
  _CbmService_GetPoreFlowByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowByFields1_result__isset;

class CbmService_GetPoreFlowByFields1_result {
 public:

  CbmService_GetPoreFlowByFields1_result(const CbmService_GetPoreFlowByFields1_result&);
  CbmService_GetPoreFlowByFields1_result& operator=(const CbmService_GetPoreFlowByFields1_result&);
  CbmService_GetPoreFlowByFields1_result() {
  }

  virtual ~CbmService_GetPoreFlowByFields1_result() throw();
  PoreFlow success;

  _CbmService_GetPoreFlowByFields1_result__isset __isset;

  void __set_success(const PoreFlow& val);

  bool operator == (const CbmService_GetPoreFlowByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowByFields1_presult__isset {
  _CbmService_GetPoreFlowByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowByFields1_presult__isset;

class CbmService_GetPoreFlowByFields1_presult {
 public:


  virtual ~CbmService_GetPoreFlowByFields1_presult() throw();
  PoreFlow* success;

  _CbmService_GetPoreFlowByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreFlowByFields2_args__isset {
  _CbmService_GetPoreFlowByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetPoreFlowByFields2_args__isset;

class CbmService_GetPoreFlowByFields2_args {
 public:

  CbmService_GetPoreFlowByFields2_args(const CbmService_GetPoreFlowByFields2_args&);
  CbmService_GetPoreFlowByFields2_args& operator=(const CbmService_GetPoreFlowByFields2_args&);
  CbmService_GetPoreFlowByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetPoreFlowByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetPoreFlowByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetPoreFlowByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreFlowByFields2_pargs {
 public:


  virtual ~CbmService_GetPoreFlowByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowByFields2_result__isset {
  _CbmService_GetPoreFlowByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowByFields2_result__isset;

class CbmService_GetPoreFlowByFields2_result {
 public:

  CbmService_GetPoreFlowByFields2_result(const CbmService_GetPoreFlowByFields2_result&);
  CbmService_GetPoreFlowByFields2_result& operator=(const CbmService_GetPoreFlowByFields2_result&);
  CbmService_GetPoreFlowByFields2_result() {
  }

  virtual ~CbmService_GetPoreFlowByFields2_result() throw();
  PoreFlow success;

  _CbmService_GetPoreFlowByFields2_result__isset __isset;

  void __set_success(const PoreFlow& val);

  bool operator == (const CbmService_GetPoreFlowByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowByFields2_presult__isset {
  _CbmService_GetPoreFlowByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowByFields2_presult__isset;

class CbmService_GetPoreFlowByFields2_presult {
 public:


  virtual ~CbmService_GetPoreFlowByFields2_presult() throw();
  PoreFlow* success;

  _CbmService_GetPoreFlowByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreFlowListByFields_args__isset {
  _CbmService_GetPoreFlowListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetPoreFlowListByFields_args__isset;

class CbmService_GetPoreFlowListByFields_args {
 public:

  CbmService_GetPoreFlowListByFields_args(const CbmService_GetPoreFlowListByFields_args&);
  CbmService_GetPoreFlowListByFields_args& operator=(const CbmService_GetPoreFlowListByFields_args&);
  CbmService_GetPoreFlowListByFields_args() {
  }

  virtual ~CbmService_GetPoreFlowListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetPoreFlowListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetPoreFlowListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreFlowListByFields_pargs {
 public:


  virtual ~CbmService_GetPoreFlowListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowListByFields_result__isset {
  _CbmService_GetPoreFlowListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowListByFields_result__isset;

class CbmService_GetPoreFlowListByFields_result {
 public:

  CbmService_GetPoreFlowListByFields_result(const CbmService_GetPoreFlowListByFields_result&);
  CbmService_GetPoreFlowListByFields_result& operator=(const CbmService_GetPoreFlowListByFields_result&);
  CbmService_GetPoreFlowListByFields_result() {
  }

  virtual ~CbmService_GetPoreFlowListByFields_result() throw();
  std::vector<PoreFlow>  success;

  _CbmService_GetPoreFlowListByFields_result__isset __isset;

  void __set_success(const std::vector<PoreFlow> & val);

  bool operator == (const CbmService_GetPoreFlowListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowListByFields_presult__isset {
  _CbmService_GetPoreFlowListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowListByFields_presult__isset;

class CbmService_GetPoreFlowListByFields_presult {
 public:


  virtual ~CbmService_GetPoreFlowListByFields_presult() throw();
  std::vector<PoreFlow> * success;

  _CbmService_GetPoreFlowListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreFlowListByFields1_args__isset {
  _CbmService_GetPoreFlowListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetPoreFlowListByFields1_args__isset;

class CbmService_GetPoreFlowListByFields1_args {
 public:

  CbmService_GetPoreFlowListByFields1_args(const CbmService_GetPoreFlowListByFields1_args&);
  CbmService_GetPoreFlowListByFields1_args& operator=(const CbmService_GetPoreFlowListByFields1_args&);
  CbmService_GetPoreFlowListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetPoreFlowListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetPoreFlowListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetPoreFlowListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreFlowListByFields1_pargs {
 public:


  virtual ~CbmService_GetPoreFlowListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowListByFields1_result__isset {
  _CbmService_GetPoreFlowListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowListByFields1_result__isset;

class CbmService_GetPoreFlowListByFields1_result {
 public:

  CbmService_GetPoreFlowListByFields1_result(const CbmService_GetPoreFlowListByFields1_result&);
  CbmService_GetPoreFlowListByFields1_result& operator=(const CbmService_GetPoreFlowListByFields1_result&);
  CbmService_GetPoreFlowListByFields1_result() {
  }

  virtual ~CbmService_GetPoreFlowListByFields1_result() throw();
  std::vector<PoreFlow>  success;

  _CbmService_GetPoreFlowListByFields1_result__isset __isset;

  void __set_success(const std::vector<PoreFlow> & val);

  bool operator == (const CbmService_GetPoreFlowListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowListByFields1_presult__isset {
  _CbmService_GetPoreFlowListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowListByFields1_presult__isset;

class CbmService_GetPoreFlowListByFields1_presult {
 public:


  virtual ~CbmService_GetPoreFlowListByFields1_presult() throw();
  std::vector<PoreFlow> * success;

  _CbmService_GetPoreFlowListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreFlowListByFields2_args__isset {
  _CbmService_GetPoreFlowListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetPoreFlowListByFields2_args__isset;

class CbmService_GetPoreFlowListByFields2_args {
 public:

  CbmService_GetPoreFlowListByFields2_args(const CbmService_GetPoreFlowListByFields2_args&);
  CbmService_GetPoreFlowListByFields2_args& operator=(const CbmService_GetPoreFlowListByFields2_args&);
  CbmService_GetPoreFlowListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetPoreFlowListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetPoreFlowListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetPoreFlowListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreFlowListByFields2_pargs {
 public:


  virtual ~CbmService_GetPoreFlowListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowListByFields2_result__isset {
  _CbmService_GetPoreFlowListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowListByFields2_result__isset;

class CbmService_GetPoreFlowListByFields2_result {
 public:

  CbmService_GetPoreFlowListByFields2_result(const CbmService_GetPoreFlowListByFields2_result&);
  CbmService_GetPoreFlowListByFields2_result& operator=(const CbmService_GetPoreFlowListByFields2_result&);
  CbmService_GetPoreFlowListByFields2_result() {
  }

  virtual ~CbmService_GetPoreFlowListByFields2_result() throw();
  std::vector<PoreFlow>  success;

  _CbmService_GetPoreFlowListByFields2_result__isset __isset;

  void __set_success(const std::vector<PoreFlow> & val);

  bool operator == (const CbmService_GetPoreFlowListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreFlowListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreFlowListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreFlowListByFields2_presult__isset {
  _CbmService_GetPoreFlowListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreFlowListByFields2_presult__isset;

class CbmService_GetPoreFlowListByFields2_presult {
 public:


  virtual ~CbmService_GetPoreFlowListByFields2_presult() throw();
  std::vector<PoreFlow> * success;

  _CbmService_GetPoreFlowListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddPoreSize_args__isset {
  _CbmService_AddPoreSize_args__isset() : pore_size(false) {}
  bool pore_size :1;
} _CbmService_AddPoreSize_args__isset;

class CbmService_AddPoreSize_args {
 public:

  CbmService_AddPoreSize_args(const CbmService_AddPoreSize_args&);
  CbmService_AddPoreSize_args& operator=(const CbmService_AddPoreSize_args&);
  CbmService_AddPoreSize_args() {
  }

  virtual ~CbmService_AddPoreSize_args() throw();
  PoreSize pore_size;

  _CbmService_AddPoreSize_args__isset __isset;

  void __set_pore_size(const PoreSize& val);

  bool operator == (const CbmService_AddPoreSize_args & rhs) const
  {
    if (!(pore_size == rhs.pore_size))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddPoreSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddPoreSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddPoreSize_pargs {
 public:


  virtual ~CbmService_AddPoreSize_pargs() throw();
  const PoreSize* pore_size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddPoreSize_result__isset {
  _CbmService_AddPoreSize_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddPoreSize_result__isset;

class CbmService_AddPoreSize_result {
 public:

  CbmService_AddPoreSize_result(const CbmService_AddPoreSize_result&);
  CbmService_AddPoreSize_result& operator=(const CbmService_AddPoreSize_result&);
  CbmService_AddPoreSize_result() : success(0) {
  }

  virtual ~CbmService_AddPoreSize_result() throw();
  int32_t success;

  _CbmService_AddPoreSize_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddPoreSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddPoreSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddPoreSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddPoreSize_presult__isset {
  _CbmService_AddPoreSize_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddPoreSize_presult__isset;

class CbmService_AddPoreSize_presult {
 public:


  virtual ~CbmService_AddPoreSize_presult() throw();
  int32_t* success;

  _CbmService_AddPoreSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeletePoreSize_args__isset {
  _CbmService_DeletePoreSize_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeletePoreSize_args__isset;

class CbmService_DeletePoreSize_args {
 public:

  CbmService_DeletePoreSize_args(const CbmService_DeletePoreSize_args&);
  CbmService_DeletePoreSize_args& operator=(const CbmService_DeletePoreSize_args&);
  CbmService_DeletePoreSize_args() : id(0) {
  }

  virtual ~CbmService_DeletePoreSize_args() throw();
  int32_t id;

  _CbmService_DeletePoreSize_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeletePoreSize_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeletePoreSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeletePoreSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeletePoreSize_pargs {
 public:


  virtual ~CbmService_DeletePoreSize_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeletePoreSize_result__isset {
  _CbmService_DeletePoreSize_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeletePoreSize_result__isset;

class CbmService_DeletePoreSize_result {
 public:

  CbmService_DeletePoreSize_result(const CbmService_DeletePoreSize_result&);
  CbmService_DeletePoreSize_result& operator=(const CbmService_DeletePoreSize_result&);
  CbmService_DeletePoreSize_result() : success(0) {
  }

  virtual ~CbmService_DeletePoreSize_result() throw();
  bool success;

  _CbmService_DeletePoreSize_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeletePoreSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeletePoreSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeletePoreSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeletePoreSize_presult__isset {
  _CbmService_DeletePoreSize_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeletePoreSize_presult__isset;

class CbmService_DeletePoreSize_presult {
 public:


  virtual ~CbmService_DeletePoreSize_presult() throw();
  bool* success;

  _CbmService_DeletePoreSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdatePoreSize_args__isset {
  _CbmService_UpdatePoreSize_args__isset() : pore_size(false) {}
  bool pore_size :1;
} _CbmService_UpdatePoreSize_args__isset;

class CbmService_UpdatePoreSize_args {
 public:

  CbmService_UpdatePoreSize_args(const CbmService_UpdatePoreSize_args&);
  CbmService_UpdatePoreSize_args& operator=(const CbmService_UpdatePoreSize_args&);
  CbmService_UpdatePoreSize_args() {
  }

  virtual ~CbmService_UpdatePoreSize_args() throw();
  PoreSize pore_size;

  _CbmService_UpdatePoreSize_args__isset __isset;

  void __set_pore_size(const PoreSize& val);

  bool operator == (const CbmService_UpdatePoreSize_args & rhs) const
  {
    if (!(pore_size == rhs.pore_size))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdatePoreSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdatePoreSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdatePoreSize_pargs {
 public:


  virtual ~CbmService_UpdatePoreSize_pargs() throw();
  const PoreSize* pore_size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdatePoreSize_result__isset {
  _CbmService_UpdatePoreSize_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdatePoreSize_result__isset;

class CbmService_UpdatePoreSize_result {
 public:

  CbmService_UpdatePoreSize_result(const CbmService_UpdatePoreSize_result&);
  CbmService_UpdatePoreSize_result& operator=(const CbmService_UpdatePoreSize_result&);
  CbmService_UpdatePoreSize_result() : success(0) {
  }

  virtual ~CbmService_UpdatePoreSize_result() throw();
  bool success;

  _CbmService_UpdatePoreSize_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdatePoreSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdatePoreSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdatePoreSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdatePoreSize_presult__isset {
  _CbmService_UpdatePoreSize_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdatePoreSize_presult__isset;

class CbmService_UpdatePoreSize_presult {
 public:


  virtual ~CbmService_UpdatePoreSize_presult() throw();
  bool* success;

  _CbmService_UpdatePoreSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreSizeById_args__isset {
  _CbmService_GetPoreSizeById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetPoreSizeById_args__isset;

class CbmService_GetPoreSizeById_args {
 public:

  CbmService_GetPoreSizeById_args(const CbmService_GetPoreSizeById_args&);
  CbmService_GetPoreSizeById_args& operator=(const CbmService_GetPoreSizeById_args&);
  CbmService_GetPoreSizeById_args() : id(0) {
  }

  virtual ~CbmService_GetPoreSizeById_args() throw();
  int32_t id;

  _CbmService_GetPoreSizeById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetPoreSizeById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreSizeById_pargs {
 public:


  virtual ~CbmService_GetPoreSizeById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeById_result__isset {
  _CbmService_GetPoreSizeById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeById_result__isset;

class CbmService_GetPoreSizeById_result {
 public:

  CbmService_GetPoreSizeById_result(const CbmService_GetPoreSizeById_result&);
  CbmService_GetPoreSizeById_result& operator=(const CbmService_GetPoreSizeById_result&);
  CbmService_GetPoreSizeById_result() {
  }

  virtual ~CbmService_GetPoreSizeById_result() throw();
  PoreSize success;

  _CbmService_GetPoreSizeById_result__isset __isset;

  void __set_success(const PoreSize& val);

  bool operator == (const CbmService_GetPoreSizeById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeById_presult__isset {
  _CbmService_GetPoreSizeById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeById_presult__isset;

class CbmService_GetPoreSizeById_presult {
 public:


  virtual ~CbmService_GetPoreSizeById_presult() throw();
  PoreSize* success;

  _CbmService_GetPoreSizeById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreSizeByForeignKey_args__isset {
  _CbmService_GetPoreSizeByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetPoreSizeByForeignKey_args__isset;

class CbmService_GetPoreSizeByForeignKey_args {
 public:

  CbmService_GetPoreSizeByForeignKey_args(const CbmService_GetPoreSizeByForeignKey_args&);
  CbmService_GetPoreSizeByForeignKey_args& operator=(const CbmService_GetPoreSizeByForeignKey_args&);
  CbmService_GetPoreSizeByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetPoreSizeByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetPoreSizeByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetPoreSizeByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreSizeByForeignKey_pargs {
 public:


  virtual ~CbmService_GetPoreSizeByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeByForeignKey_result__isset {
  _CbmService_GetPoreSizeByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeByForeignKey_result__isset;

class CbmService_GetPoreSizeByForeignKey_result {
 public:

  CbmService_GetPoreSizeByForeignKey_result(const CbmService_GetPoreSizeByForeignKey_result&);
  CbmService_GetPoreSizeByForeignKey_result& operator=(const CbmService_GetPoreSizeByForeignKey_result&);
  CbmService_GetPoreSizeByForeignKey_result() {
  }

  virtual ~CbmService_GetPoreSizeByForeignKey_result() throw();
  PoreSize success;

  _CbmService_GetPoreSizeByForeignKey_result__isset __isset;

  void __set_success(const PoreSize& val);

  bool operator == (const CbmService_GetPoreSizeByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeByForeignKey_presult__isset {
  _CbmService_GetPoreSizeByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeByForeignKey_presult__isset;

class CbmService_GetPoreSizeByForeignKey_presult {
 public:


  virtual ~CbmService_GetPoreSizeByForeignKey_presult() throw();
  PoreSize* success;

  _CbmService_GetPoreSizeByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetPoreSizeList_args {
 public:

  CbmService_GetPoreSizeList_args(const CbmService_GetPoreSizeList_args&);
  CbmService_GetPoreSizeList_args& operator=(const CbmService_GetPoreSizeList_args&);
  CbmService_GetPoreSizeList_args() {
  }

  virtual ~CbmService_GetPoreSizeList_args() throw();

  bool operator == (const CbmService_GetPoreSizeList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreSizeList_pargs {
 public:


  virtual ~CbmService_GetPoreSizeList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeList_result__isset {
  _CbmService_GetPoreSizeList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeList_result__isset;

class CbmService_GetPoreSizeList_result {
 public:

  CbmService_GetPoreSizeList_result(const CbmService_GetPoreSizeList_result&);
  CbmService_GetPoreSizeList_result& operator=(const CbmService_GetPoreSizeList_result&);
  CbmService_GetPoreSizeList_result() {
  }

  virtual ~CbmService_GetPoreSizeList_result() throw();
  std::vector<PoreSize>  success;

  _CbmService_GetPoreSizeList_result__isset __isset;

  void __set_success(const std::vector<PoreSize> & val);

  bool operator == (const CbmService_GetPoreSizeList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeList_presult__isset {
  _CbmService_GetPoreSizeList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeList_presult__isset;

class CbmService_GetPoreSizeList_presult {
 public:


  virtual ~CbmService_GetPoreSizeList_presult() throw();
  std::vector<PoreSize> * success;

  _CbmService_GetPoreSizeList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetPoreSizeIds_args {
 public:

  CbmService_GetPoreSizeIds_args(const CbmService_GetPoreSizeIds_args&);
  CbmService_GetPoreSizeIds_args& operator=(const CbmService_GetPoreSizeIds_args&);
  CbmService_GetPoreSizeIds_args() {
  }

  virtual ~CbmService_GetPoreSizeIds_args() throw();

  bool operator == (const CbmService_GetPoreSizeIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreSizeIds_pargs {
 public:


  virtual ~CbmService_GetPoreSizeIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeIds_result__isset {
  _CbmService_GetPoreSizeIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeIds_result__isset;

class CbmService_GetPoreSizeIds_result {
 public:

  CbmService_GetPoreSizeIds_result(const CbmService_GetPoreSizeIds_result&);
  CbmService_GetPoreSizeIds_result& operator=(const CbmService_GetPoreSizeIds_result&);
  CbmService_GetPoreSizeIds_result() {
  }

  virtual ~CbmService_GetPoreSizeIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetPoreSizeIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetPoreSizeIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeIds_presult__isset {
  _CbmService_GetPoreSizeIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeIds_presult__isset;

class CbmService_GetPoreSizeIds_presult {
 public:


  virtual ~CbmService_GetPoreSizeIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetPoreSizeIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetPoreSizeNames_args {
 public:

  CbmService_GetPoreSizeNames_args(const CbmService_GetPoreSizeNames_args&);
  CbmService_GetPoreSizeNames_args& operator=(const CbmService_GetPoreSizeNames_args&);
  CbmService_GetPoreSizeNames_args() {
  }

  virtual ~CbmService_GetPoreSizeNames_args() throw();

  bool operator == (const CbmService_GetPoreSizeNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreSizeNames_pargs {
 public:


  virtual ~CbmService_GetPoreSizeNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeNames_result__isset {
  _CbmService_GetPoreSizeNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeNames_result__isset;

class CbmService_GetPoreSizeNames_result {
 public:

  CbmService_GetPoreSizeNames_result(const CbmService_GetPoreSizeNames_result&);
  CbmService_GetPoreSizeNames_result& operator=(const CbmService_GetPoreSizeNames_result&);
  CbmService_GetPoreSizeNames_result() {
  }

  virtual ~CbmService_GetPoreSizeNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetPoreSizeNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetPoreSizeNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeNames_presult__isset {
  _CbmService_GetPoreSizeNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeNames_presult__isset;

class CbmService_GetPoreSizeNames_presult {
 public:


  virtual ~CbmService_GetPoreSizeNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetPoreSizeNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMorePoreSize_args__isset {
  _CbmService_AddMorePoreSize_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMorePoreSize_args__isset;

class CbmService_AddMorePoreSize_args {
 public:

  CbmService_AddMorePoreSize_args(const CbmService_AddMorePoreSize_args&);
  CbmService_AddMorePoreSize_args& operator=(const CbmService_AddMorePoreSize_args&);
  CbmService_AddMorePoreSize_args() {
  }

  virtual ~CbmService_AddMorePoreSize_args() throw();
  std::vector<PoreSize>  objs;

  _CbmService_AddMorePoreSize_args__isset __isset;

  void __set_objs(const std::vector<PoreSize> & val);

  bool operator == (const CbmService_AddMorePoreSize_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMorePoreSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMorePoreSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMorePoreSize_pargs {
 public:


  virtual ~CbmService_AddMorePoreSize_pargs() throw();
  const std::vector<PoreSize> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMorePoreSize_result {
 public:

  CbmService_AddMorePoreSize_result(const CbmService_AddMorePoreSize_result&);
  CbmService_AddMorePoreSize_result& operator=(const CbmService_AddMorePoreSize_result&);
  CbmService_AddMorePoreSize_result() {
  }

  virtual ~CbmService_AddMorePoreSize_result() throw();

  bool operator == (const CbmService_AddMorePoreSize_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMorePoreSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMorePoreSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMorePoreSize_presult {
 public:


  virtual ~CbmService_AddMorePoreSize_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMorePoreSize_args__isset {
  _CbmService_DeleteMorePoreSize_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMorePoreSize_args__isset;

class CbmService_DeleteMorePoreSize_args {
 public:

  CbmService_DeleteMorePoreSize_args(const CbmService_DeleteMorePoreSize_args&);
  CbmService_DeleteMorePoreSize_args& operator=(const CbmService_DeleteMorePoreSize_args&);
  CbmService_DeleteMorePoreSize_args() {
  }

  virtual ~CbmService_DeleteMorePoreSize_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMorePoreSize_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMorePoreSize_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMorePoreSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMorePoreSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMorePoreSize_pargs {
 public:


  virtual ~CbmService_DeleteMorePoreSize_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMorePoreSize_result {
 public:

  CbmService_DeleteMorePoreSize_result(const CbmService_DeleteMorePoreSize_result&);
  CbmService_DeleteMorePoreSize_result& operator=(const CbmService_DeleteMorePoreSize_result&);
  CbmService_DeleteMorePoreSize_result() {
  }

  virtual ~CbmService_DeleteMorePoreSize_result() throw();

  bool operator == (const CbmService_DeleteMorePoreSize_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMorePoreSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMorePoreSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMorePoreSize_presult {
 public:


  virtual ~CbmService_DeleteMorePoreSize_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreSizeByFields_args__isset {
  _CbmService_GetPoreSizeByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetPoreSizeByFields_args__isset;

class CbmService_GetPoreSizeByFields_args {
 public:

  CbmService_GetPoreSizeByFields_args(const CbmService_GetPoreSizeByFields_args&);
  CbmService_GetPoreSizeByFields_args& operator=(const CbmService_GetPoreSizeByFields_args&);
  CbmService_GetPoreSizeByFields_args() {
  }

  virtual ~CbmService_GetPoreSizeByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetPoreSizeByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetPoreSizeByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreSizeByFields_pargs {
 public:


  virtual ~CbmService_GetPoreSizeByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeByFields_result__isset {
  _CbmService_GetPoreSizeByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeByFields_result__isset;

class CbmService_GetPoreSizeByFields_result {
 public:

  CbmService_GetPoreSizeByFields_result(const CbmService_GetPoreSizeByFields_result&);
  CbmService_GetPoreSizeByFields_result& operator=(const CbmService_GetPoreSizeByFields_result&);
  CbmService_GetPoreSizeByFields_result() {
  }

  virtual ~CbmService_GetPoreSizeByFields_result() throw();
  PoreSize success;

  _CbmService_GetPoreSizeByFields_result__isset __isset;

  void __set_success(const PoreSize& val);

  bool operator == (const CbmService_GetPoreSizeByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeByFields_presult__isset {
  _CbmService_GetPoreSizeByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeByFields_presult__isset;

class CbmService_GetPoreSizeByFields_presult {
 public:


  virtual ~CbmService_GetPoreSizeByFields_presult() throw();
  PoreSize* success;

  _CbmService_GetPoreSizeByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreSizeByFields1_args__isset {
  _CbmService_GetPoreSizeByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetPoreSizeByFields1_args__isset;

class CbmService_GetPoreSizeByFields1_args {
 public:

  CbmService_GetPoreSizeByFields1_args(const CbmService_GetPoreSizeByFields1_args&);
  CbmService_GetPoreSizeByFields1_args& operator=(const CbmService_GetPoreSizeByFields1_args&);
  CbmService_GetPoreSizeByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetPoreSizeByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetPoreSizeByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetPoreSizeByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreSizeByFields1_pargs {
 public:


  virtual ~CbmService_GetPoreSizeByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeByFields1_result__isset {
  _CbmService_GetPoreSizeByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeByFields1_result__isset;

class CbmService_GetPoreSizeByFields1_result {
 public:

  CbmService_GetPoreSizeByFields1_result(const CbmService_GetPoreSizeByFields1_result&);
  CbmService_GetPoreSizeByFields1_result& operator=(const CbmService_GetPoreSizeByFields1_result&);
  CbmService_GetPoreSizeByFields1_result() {
  }

  virtual ~CbmService_GetPoreSizeByFields1_result() throw();
  PoreSize success;

  _CbmService_GetPoreSizeByFields1_result__isset __isset;

  void __set_success(const PoreSize& val);

  bool operator == (const CbmService_GetPoreSizeByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeByFields1_presult__isset {
  _CbmService_GetPoreSizeByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeByFields1_presult__isset;

class CbmService_GetPoreSizeByFields1_presult {
 public:


  virtual ~CbmService_GetPoreSizeByFields1_presult() throw();
  PoreSize* success;

  _CbmService_GetPoreSizeByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreSizeByFields2_args__isset {
  _CbmService_GetPoreSizeByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetPoreSizeByFields2_args__isset;

class CbmService_GetPoreSizeByFields2_args {
 public:

  CbmService_GetPoreSizeByFields2_args(const CbmService_GetPoreSizeByFields2_args&);
  CbmService_GetPoreSizeByFields2_args& operator=(const CbmService_GetPoreSizeByFields2_args&);
  CbmService_GetPoreSizeByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetPoreSizeByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetPoreSizeByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetPoreSizeByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreSizeByFields2_pargs {
 public:


  virtual ~CbmService_GetPoreSizeByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeByFields2_result__isset {
  _CbmService_GetPoreSizeByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeByFields2_result__isset;

class CbmService_GetPoreSizeByFields2_result {
 public:

  CbmService_GetPoreSizeByFields2_result(const CbmService_GetPoreSizeByFields2_result&);
  CbmService_GetPoreSizeByFields2_result& operator=(const CbmService_GetPoreSizeByFields2_result&);
  CbmService_GetPoreSizeByFields2_result() {
  }

  virtual ~CbmService_GetPoreSizeByFields2_result() throw();
  PoreSize success;

  _CbmService_GetPoreSizeByFields2_result__isset __isset;

  void __set_success(const PoreSize& val);

  bool operator == (const CbmService_GetPoreSizeByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeByFields2_presult__isset {
  _CbmService_GetPoreSizeByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeByFields2_presult__isset;

class CbmService_GetPoreSizeByFields2_presult {
 public:


  virtual ~CbmService_GetPoreSizeByFields2_presult() throw();
  PoreSize* success;

  _CbmService_GetPoreSizeByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreSizeListByFields_args__isset {
  _CbmService_GetPoreSizeListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetPoreSizeListByFields_args__isset;

class CbmService_GetPoreSizeListByFields_args {
 public:

  CbmService_GetPoreSizeListByFields_args(const CbmService_GetPoreSizeListByFields_args&);
  CbmService_GetPoreSizeListByFields_args& operator=(const CbmService_GetPoreSizeListByFields_args&);
  CbmService_GetPoreSizeListByFields_args() {
  }

  virtual ~CbmService_GetPoreSizeListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetPoreSizeListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetPoreSizeListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreSizeListByFields_pargs {
 public:


  virtual ~CbmService_GetPoreSizeListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeListByFields_result__isset {
  _CbmService_GetPoreSizeListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeListByFields_result__isset;

class CbmService_GetPoreSizeListByFields_result {
 public:

  CbmService_GetPoreSizeListByFields_result(const CbmService_GetPoreSizeListByFields_result&);
  CbmService_GetPoreSizeListByFields_result& operator=(const CbmService_GetPoreSizeListByFields_result&);
  CbmService_GetPoreSizeListByFields_result() {
  }

  virtual ~CbmService_GetPoreSizeListByFields_result() throw();
  std::vector<PoreSize>  success;

  _CbmService_GetPoreSizeListByFields_result__isset __isset;

  void __set_success(const std::vector<PoreSize> & val);

  bool operator == (const CbmService_GetPoreSizeListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeListByFields_presult__isset {
  _CbmService_GetPoreSizeListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeListByFields_presult__isset;

class CbmService_GetPoreSizeListByFields_presult {
 public:


  virtual ~CbmService_GetPoreSizeListByFields_presult() throw();
  std::vector<PoreSize> * success;

  _CbmService_GetPoreSizeListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreSizeListByFields1_args__isset {
  _CbmService_GetPoreSizeListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetPoreSizeListByFields1_args__isset;

class CbmService_GetPoreSizeListByFields1_args {
 public:

  CbmService_GetPoreSizeListByFields1_args(const CbmService_GetPoreSizeListByFields1_args&);
  CbmService_GetPoreSizeListByFields1_args& operator=(const CbmService_GetPoreSizeListByFields1_args&);
  CbmService_GetPoreSizeListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetPoreSizeListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetPoreSizeListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetPoreSizeListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreSizeListByFields1_pargs {
 public:


  virtual ~CbmService_GetPoreSizeListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeListByFields1_result__isset {
  _CbmService_GetPoreSizeListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeListByFields1_result__isset;

class CbmService_GetPoreSizeListByFields1_result {
 public:

  CbmService_GetPoreSizeListByFields1_result(const CbmService_GetPoreSizeListByFields1_result&);
  CbmService_GetPoreSizeListByFields1_result& operator=(const CbmService_GetPoreSizeListByFields1_result&);
  CbmService_GetPoreSizeListByFields1_result() {
  }

  virtual ~CbmService_GetPoreSizeListByFields1_result() throw();
  std::vector<PoreSize>  success;

  _CbmService_GetPoreSizeListByFields1_result__isset __isset;

  void __set_success(const std::vector<PoreSize> & val);

  bool operator == (const CbmService_GetPoreSizeListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeListByFields1_presult__isset {
  _CbmService_GetPoreSizeListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeListByFields1_presult__isset;

class CbmService_GetPoreSizeListByFields1_presult {
 public:


  virtual ~CbmService_GetPoreSizeListByFields1_presult() throw();
  std::vector<PoreSize> * success;

  _CbmService_GetPoreSizeListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetPoreSizeListByFields2_args__isset {
  _CbmService_GetPoreSizeListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetPoreSizeListByFields2_args__isset;

class CbmService_GetPoreSizeListByFields2_args {
 public:

  CbmService_GetPoreSizeListByFields2_args(const CbmService_GetPoreSizeListByFields2_args&);
  CbmService_GetPoreSizeListByFields2_args& operator=(const CbmService_GetPoreSizeListByFields2_args&);
  CbmService_GetPoreSizeListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetPoreSizeListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetPoreSizeListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetPoreSizeListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetPoreSizeListByFields2_pargs {
 public:


  virtual ~CbmService_GetPoreSizeListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeListByFields2_result__isset {
  _CbmService_GetPoreSizeListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeListByFields2_result__isset;

class CbmService_GetPoreSizeListByFields2_result {
 public:

  CbmService_GetPoreSizeListByFields2_result(const CbmService_GetPoreSizeListByFields2_result&);
  CbmService_GetPoreSizeListByFields2_result& operator=(const CbmService_GetPoreSizeListByFields2_result&);
  CbmService_GetPoreSizeListByFields2_result() {
  }

  virtual ~CbmService_GetPoreSizeListByFields2_result() throw();
  std::vector<PoreSize>  success;

  _CbmService_GetPoreSizeListByFields2_result__isset __isset;

  void __set_success(const std::vector<PoreSize> & val);

  bool operator == (const CbmService_GetPoreSizeListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetPoreSizeListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetPoreSizeListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetPoreSizeListByFields2_presult__isset {
  _CbmService_GetPoreSizeListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetPoreSizeListByFields2_presult__isset;

class CbmService_GetPoreSizeListByFields2_presult {
 public:


  virtual ~CbmService_GetPoreSizeListByFields2_presult() throw();
  std::vector<PoreSize> * success;

  _CbmService_GetPoreSizeListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddResAbundance_args__isset {
  _CbmService_AddResAbundance_args__isset() : res_abundance(false) {}
  bool res_abundance :1;
} _CbmService_AddResAbundance_args__isset;

class CbmService_AddResAbundance_args {
 public:

  CbmService_AddResAbundance_args(const CbmService_AddResAbundance_args&);
  CbmService_AddResAbundance_args& operator=(const CbmService_AddResAbundance_args&);
  CbmService_AddResAbundance_args() {
  }

  virtual ~CbmService_AddResAbundance_args() throw();
  ResAbundance res_abundance;

  _CbmService_AddResAbundance_args__isset __isset;

  void __set_res_abundance(const ResAbundance& val);

  bool operator == (const CbmService_AddResAbundance_args & rhs) const
  {
    if (!(res_abundance == rhs.res_abundance))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddResAbundance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddResAbundance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddResAbundance_pargs {
 public:


  virtual ~CbmService_AddResAbundance_pargs() throw();
  const ResAbundance* res_abundance;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddResAbundance_result__isset {
  _CbmService_AddResAbundance_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddResAbundance_result__isset;

class CbmService_AddResAbundance_result {
 public:

  CbmService_AddResAbundance_result(const CbmService_AddResAbundance_result&);
  CbmService_AddResAbundance_result& operator=(const CbmService_AddResAbundance_result&);
  CbmService_AddResAbundance_result() : success(0) {
  }

  virtual ~CbmService_AddResAbundance_result() throw();
  int32_t success;

  _CbmService_AddResAbundance_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddResAbundance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddResAbundance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddResAbundance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddResAbundance_presult__isset {
  _CbmService_AddResAbundance_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddResAbundance_presult__isset;

class CbmService_AddResAbundance_presult {
 public:


  virtual ~CbmService_AddResAbundance_presult() throw();
  int32_t* success;

  _CbmService_AddResAbundance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteResAbundance_args__isset {
  _CbmService_DeleteResAbundance_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteResAbundance_args__isset;

class CbmService_DeleteResAbundance_args {
 public:

  CbmService_DeleteResAbundance_args(const CbmService_DeleteResAbundance_args&);
  CbmService_DeleteResAbundance_args& operator=(const CbmService_DeleteResAbundance_args&);
  CbmService_DeleteResAbundance_args() : id(0) {
  }

  virtual ~CbmService_DeleteResAbundance_args() throw();
  int32_t id;

  _CbmService_DeleteResAbundance_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteResAbundance_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteResAbundance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteResAbundance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteResAbundance_pargs {
 public:


  virtual ~CbmService_DeleteResAbundance_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteResAbundance_result__isset {
  _CbmService_DeleteResAbundance_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteResAbundance_result__isset;

class CbmService_DeleteResAbundance_result {
 public:

  CbmService_DeleteResAbundance_result(const CbmService_DeleteResAbundance_result&);
  CbmService_DeleteResAbundance_result& operator=(const CbmService_DeleteResAbundance_result&);
  CbmService_DeleteResAbundance_result() : success(0) {
  }

  virtual ~CbmService_DeleteResAbundance_result() throw();
  bool success;

  _CbmService_DeleteResAbundance_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteResAbundance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteResAbundance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteResAbundance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteResAbundance_presult__isset {
  _CbmService_DeleteResAbundance_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteResAbundance_presult__isset;

class CbmService_DeleteResAbundance_presult {
 public:


  virtual ~CbmService_DeleteResAbundance_presult() throw();
  bool* success;

  _CbmService_DeleteResAbundance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateResAbundance_args__isset {
  _CbmService_UpdateResAbundance_args__isset() : res_abundance(false) {}
  bool res_abundance :1;
} _CbmService_UpdateResAbundance_args__isset;

class CbmService_UpdateResAbundance_args {
 public:

  CbmService_UpdateResAbundance_args(const CbmService_UpdateResAbundance_args&);
  CbmService_UpdateResAbundance_args& operator=(const CbmService_UpdateResAbundance_args&);
  CbmService_UpdateResAbundance_args() {
  }

  virtual ~CbmService_UpdateResAbundance_args() throw();
  ResAbundance res_abundance;

  _CbmService_UpdateResAbundance_args__isset __isset;

  void __set_res_abundance(const ResAbundance& val);

  bool operator == (const CbmService_UpdateResAbundance_args & rhs) const
  {
    if (!(res_abundance == rhs.res_abundance))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateResAbundance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateResAbundance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateResAbundance_pargs {
 public:


  virtual ~CbmService_UpdateResAbundance_pargs() throw();
  const ResAbundance* res_abundance;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateResAbundance_result__isset {
  _CbmService_UpdateResAbundance_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateResAbundance_result__isset;

class CbmService_UpdateResAbundance_result {
 public:

  CbmService_UpdateResAbundance_result(const CbmService_UpdateResAbundance_result&);
  CbmService_UpdateResAbundance_result& operator=(const CbmService_UpdateResAbundance_result&);
  CbmService_UpdateResAbundance_result() : success(0) {
  }

  virtual ~CbmService_UpdateResAbundance_result() throw();
  bool success;

  _CbmService_UpdateResAbundance_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateResAbundance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateResAbundance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateResAbundance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateResAbundance_presult__isset {
  _CbmService_UpdateResAbundance_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateResAbundance_presult__isset;

class CbmService_UpdateResAbundance_presult {
 public:


  virtual ~CbmService_UpdateResAbundance_presult() throw();
  bool* success;

  _CbmService_UpdateResAbundance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetResAbundanceById_args__isset {
  _CbmService_GetResAbundanceById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetResAbundanceById_args__isset;

class CbmService_GetResAbundanceById_args {
 public:

  CbmService_GetResAbundanceById_args(const CbmService_GetResAbundanceById_args&);
  CbmService_GetResAbundanceById_args& operator=(const CbmService_GetResAbundanceById_args&);
  CbmService_GetResAbundanceById_args() : id(0) {
  }

  virtual ~CbmService_GetResAbundanceById_args() throw();
  int32_t id;

  _CbmService_GetResAbundanceById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetResAbundanceById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetResAbundanceById_pargs {
 public:


  virtual ~CbmService_GetResAbundanceById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceById_result__isset {
  _CbmService_GetResAbundanceById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceById_result__isset;

class CbmService_GetResAbundanceById_result {
 public:

  CbmService_GetResAbundanceById_result(const CbmService_GetResAbundanceById_result&);
  CbmService_GetResAbundanceById_result& operator=(const CbmService_GetResAbundanceById_result&);
  CbmService_GetResAbundanceById_result() {
  }

  virtual ~CbmService_GetResAbundanceById_result() throw();
  ResAbundance success;

  _CbmService_GetResAbundanceById_result__isset __isset;

  void __set_success(const ResAbundance& val);

  bool operator == (const CbmService_GetResAbundanceById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceById_presult__isset {
  _CbmService_GetResAbundanceById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceById_presult__isset;

class CbmService_GetResAbundanceById_presult {
 public:


  virtual ~CbmService_GetResAbundanceById_presult() throw();
  ResAbundance* success;

  _CbmService_GetResAbundanceById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetResAbundanceByForeignKey_args__isset {
  _CbmService_GetResAbundanceByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetResAbundanceByForeignKey_args__isset;

class CbmService_GetResAbundanceByForeignKey_args {
 public:

  CbmService_GetResAbundanceByForeignKey_args(const CbmService_GetResAbundanceByForeignKey_args&);
  CbmService_GetResAbundanceByForeignKey_args& operator=(const CbmService_GetResAbundanceByForeignKey_args&);
  CbmService_GetResAbundanceByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetResAbundanceByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetResAbundanceByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetResAbundanceByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetResAbundanceByForeignKey_pargs {
 public:


  virtual ~CbmService_GetResAbundanceByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceByForeignKey_result__isset {
  _CbmService_GetResAbundanceByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceByForeignKey_result__isset;

class CbmService_GetResAbundanceByForeignKey_result {
 public:

  CbmService_GetResAbundanceByForeignKey_result(const CbmService_GetResAbundanceByForeignKey_result&);
  CbmService_GetResAbundanceByForeignKey_result& operator=(const CbmService_GetResAbundanceByForeignKey_result&);
  CbmService_GetResAbundanceByForeignKey_result() {
  }

  virtual ~CbmService_GetResAbundanceByForeignKey_result() throw();
  ResAbundance success;

  _CbmService_GetResAbundanceByForeignKey_result__isset __isset;

  void __set_success(const ResAbundance& val);

  bool operator == (const CbmService_GetResAbundanceByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceByForeignKey_presult__isset {
  _CbmService_GetResAbundanceByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceByForeignKey_presult__isset;

class CbmService_GetResAbundanceByForeignKey_presult {
 public:


  virtual ~CbmService_GetResAbundanceByForeignKey_presult() throw();
  ResAbundance* success;

  _CbmService_GetResAbundanceByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetResAbundanceList_args {
 public:

  CbmService_GetResAbundanceList_args(const CbmService_GetResAbundanceList_args&);
  CbmService_GetResAbundanceList_args& operator=(const CbmService_GetResAbundanceList_args&);
  CbmService_GetResAbundanceList_args() {
  }

  virtual ~CbmService_GetResAbundanceList_args() throw();

  bool operator == (const CbmService_GetResAbundanceList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetResAbundanceList_pargs {
 public:


  virtual ~CbmService_GetResAbundanceList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceList_result__isset {
  _CbmService_GetResAbundanceList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceList_result__isset;

class CbmService_GetResAbundanceList_result {
 public:

  CbmService_GetResAbundanceList_result(const CbmService_GetResAbundanceList_result&);
  CbmService_GetResAbundanceList_result& operator=(const CbmService_GetResAbundanceList_result&);
  CbmService_GetResAbundanceList_result() {
  }

  virtual ~CbmService_GetResAbundanceList_result() throw();
  std::vector<ResAbundance>  success;

  _CbmService_GetResAbundanceList_result__isset __isset;

  void __set_success(const std::vector<ResAbundance> & val);

  bool operator == (const CbmService_GetResAbundanceList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceList_presult__isset {
  _CbmService_GetResAbundanceList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceList_presult__isset;

class CbmService_GetResAbundanceList_presult {
 public:


  virtual ~CbmService_GetResAbundanceList_presult() throw();
  std::vector<ResAbundance> * success;

  _CbmService_GetResAbundanceList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetResAbundanceIds_args {
 public:

  CbmService_GetResAbundanceIds_args(const CbmService_GetResAbundanceIds_args&);
  CbmService_GetResAbundanceIds_args& operator=(const CbmService_GetResAbundanceIds_args&);
  CbmService_GetResAbundanceIds_args() {
  }

  virtual ~CbmService_GetResAbundanceIds_args() throw();

  bool operator == (const CbmService_GetResAbundanceIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetResAbundanceIds_pargs {
 public:


  virtual ~CbmService_GetResAbundanceIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceIds_result__isset {
  _CbmService_GetResAbundanceIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceIds_result__isset;

class CbmService_GetResAbundanceIds_result {
 public:

  CbmService_GetResAbundanceIds_result(const CbmService_GetResAbundanceIds_result&);
  CbmService_GetResAbundanceIds_result& operator=(const CbmService_GetResAbundanceIds_result&);
  CbmService_GetResAbundanceIds_result() {
  }

  virtual ~CbmService_GetResAbundanceIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetResAbundanceIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetResAbundanceIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceIds_presult__isset {
  _CbmService_GetResAbundanceIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceIds_presult__isset;

class CbmService_GetResAbundanceIds_presult {
 public:


  virtual ~CbmService_GetResAbundanceIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetResAbundanceIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetResAbundanceNames_args {
 public:

  CbmService_GetResAbundanceNames_args(const CbmService_GetResAbundanceNames_args&);
  CbmService_GetResAbundanceNames_args& operator=(const CbmService_GetResAbundanceNames_args&);
  CbmService_GetResAbundanceNames_args() {
  }

  virtual ~CbmService_GetResAbundanceNames_args() throw();

  bool operator == (const CbmService_GetResAbundanceNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetResAbundanceNames_pargs {
 public:


  virtual ~CbmService_GetResAbundanceNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceNames_result__isset {
  _CbmService_GetResAbundanceNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceNames_result__isset;

class CbmService_GetResAbundanceNames_result {
 public:

  CbmService_GetResAbundanceNames_result(const CbmService_GetResAbundanceNames_result&);
  CbmService_GetResAbundanceNames_result& operator=(const CbmService_GetResAbundanceNames_result&);
  CbmService_GetResAbundanceNames_result() {
  }

  virtual ~CbmService_GetResAbundanceNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetResAbundanceNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetResAbundanceNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceNames_presult__isset {
  _CbmService_GetResAbundanceNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceNames_presult__isset;

class CbmService_GetResAbundanceNames_presult {
 public:


  virtual ~CbmService_GetResAbundanceNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetResAbundanceNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreResAbundance_args__isset {
  _CbmService_AddMoreResAbundance_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreResAbundance_args__isset;

class CbmService_AddMoreResAbundance_args {
 public:

  CbmService_AddMoreResAbundance_args(const CbmService_AddMoreResAbundance_args&);
  CbmService_AddMoreResAbundance_args& operator=(const CbmService_AddMoreResAbundance_args&);
  CbmService_AddMoreResAbundance_args() {
  }

  virtual ~CbmService_AddMoreResAbundance_args() throw();
  std::vector<ResAbundance>  objs;

  _CbmService_AddMoreResAbundance_args__isset __isset;

  void __set_objs(const std::vector<ResAbundance> & val);

  bool operator == (const CbmService_AddMoreResAbundance_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreResAbundance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreResAbundance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreResAbundance_pargs {
 public:


  virtual ~CbmService_AddMoreResAbundance_pargs() throw();
  const std::vector<ResAbundance> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreResAbundance_result {
 public:

  CbmService_AddMoreResAbundance_result(const CbmService_AddMoreResAbundance_result&);
  CbmService_AddMoreResAbundance_result& operator=(const CbmService_AddMoreResAbundance_result&);
  CbmService_AddMoreResAbundance_result() {
  }

  virtual ~CbmService_AddMoreResAbundance_result() throw();

  bool operator == (const CbmService_AddMoreResAbundance_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreResAbundance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreResAbundance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreResAbundance_presult {
 public:


  virtual ~CbmService_AddMoreResAbundance_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreResAbundance_args__isset {
  _CbmService_DeleteMoreResAbundance_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreResAbundance_args__isset;

class CbmService_DeleteMoreResAbundance_args {
 public:

  CbmService_DeleteMoreResAbundance_args(const CbmService_DeleteMoreResAbundance_args&);
  CbmService_DeleteMoreResAbundance_args& operator=(const CbmService_DeleteMoreResAbundance_args&);
  CbmService_DeleteMoreResAbundance_args() {
  }

  virtual ~CbmService_DeleteMoreResAbundance_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreResAbundance_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreResAbundance_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreResAbundance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreResAbundance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreResAbundance_pargs {
 public:


  virtual ~CbmService_DeleteMoreResAbundance_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreResAbundance_result {
 public:

  CbmService_DeleteMoreResAbundance_result(const CbmService_DeleteMoreResAbundance_result&);
  CbmService_DeleteMoreResAbundance_result& operator=(const CbmService_DeleteMoreResAbundance_result&);
  CbmService_DeleteMoreResAbundance_result() {
  }

  virtual ~CbmService_DeleteMoreResAbundance_result() throw();

  bool operator == (const CbmService_DeleteMoreResAbundance_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreResAbundance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreResAbundance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreResAbundance_presult {
 public:


  virtual ~CbmService_DeleteMoreResAbundance_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetResAbundanceByFields_args__isset {
  _CbmService_GetResAbundanceByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetResAbundanceByFields_args__isset;

class CbmService_GetResAbundanceByFields_args {
 public:

  CbmService_GetResAbundanceByFields_args(const CbmService_GetResAbundanceByFields_args&);
  CbmService_GetResAbundanceByFields_args& operator=(const CbmService_GetResAbundanceByFields_args&);
  CbmService_GetResAbundanceByFields_args() {
  }

  virtual ~CbmService_GetResAbundanceByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetResAbundanceByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetResAbundanceByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetResAbundanceByFields_pargs {
 public:


  virtual ~CbmService_GetResAbundanceByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceByFields_result__isset {
  _CbmService_GetResAbundanceByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceByFields_result__isset;

class CbmService_GetResAbundanceByFields_result {
 public:

  CbmService_GetResAbundanceByFields_result(const CbmService_GetResAbundanceByFields_result&);
  CbmService_GetResAbundanceByFields_result& operator=(const CbmService_GetResAbundanceByFields_result&);
  CbmService_GetResAbundanceByFields_result() {
  }

  virtual ~CbmService_GetResAbundanceByFields_result() throw();
  ResAbundance success;

  _CbmService_GetResAbundanceByFields_result__isset __isset;

  void __set_success(const ResAbundance& val);

  bool operator == (const CbmService_GetResAbundanceByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceByFields_presult__isset {
  _CbmService_GetResAbundanceByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceByFields_presult__isset;

class CbmService_GetResAbundanceByFields_presult {
 public:


  virtual ~CbmService_GetResAbundanceByFields_presult() throw();
  ResAbundance* success;

  _CbmService_GetResAbundanceByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetResAbundanceByFields1_args__isset {
  _CbmService_GetResAbundanceByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetResAbundanceByFields1_args__isset;

class CbmService_GetResAbundanceByFields1_args {
 public:

  CbmService_GetResAbundanceByFields1_args(const CbmService_GetResAbundanceByFields1_args&);
  CbmService_GetResAbundanceByFields1_args& operator=(const CbmService_GetResAbundanceByFields1_args&);
  CbmService_GetResAbundanceByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetResAbundanceByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetResAbundanceByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetResAbundanceByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetResAbundanceByFields1_pargs {
 public:


  virtual ~CbmService_GetResAbundanceByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceByFields1_result__isset {
  _CbmService_GetResAbundanceByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceByFields1_result__isset;

class CbmService_GetResAbundanceByFields1_result {
 public:

  CbmService_GetResAbundanceByFields1_result(const CbmService_GetResAbundanceByFields1_result&);
  CbmService_GetResAbundanceByFields1_result& operator=(const CbmService_GetResAbundanceByFields1_result&);
  CbmService_GetResAbundanceByFields1_result() {
  }

  virtual ~CbmService_GetResAbundanceByFields1_result() throw();
  ResAbundance success;

  _CbmService_GetResAbundanceByFields1_result__isset __isset;

  void __set_success(const ResAbundance& val);

  bool operator == (const CbmService_GetResAbundanceByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceByFields1_presult__isset {
  _CbmService_GetResAbundanceByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceByFields1_presult__isset;

class CbmService_GetResAbundanceByFields1_presult {
 public:


  virtual ~CbmService_GetResAbundanceByFields1_presult() throw();
  ResAbundance* success;

  _CbmService_GetResAbundanceByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetResAbundanceByFields2_args__isset {
  _CbmService_GetResAbundanceByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetResAbundanceByFields2_args__isset;

class CbmService_GetResAbundanceByFields2_args {
 public:

  CbmService_GetResAbundanceByFields2_args(const CbmService_GetResAbundanceByFields2_args&);
  CbmService_GetResAbundanceByFields2_args& operator=(const CbmService_GetResAbundanceByFields2_args&);
  CbmService_GetResAbundanceByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetResAbundanceByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetResAbundanceByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetResAbundanceByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetResAbundanceByFields2_pargs {
 public:


  virtual ~CbmService_GetResAbundanceByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceByFields2_result__isset {
  _CbmService_GetResAbundanceByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceByFields2_result__isset;

class CbmService_GetResAbundanceByFields2_result {
 public:

  CbmService_GetResAbundanceByFields2_result(const CbmService_GetResAbundanceByFields2_result&);
  CbmService_GetResAbundanceByFields2_result& operator=(const CbmService_GetResAbundanceByFields2_result&);
  CbmService_GetResAbundanceByFields2_result() {
  }

  virtual ~CbmService_GetResAbundanceByFields2_result() throw();
  ResAbundance success;

  _CbmService_GetResAbundanceByFields2_result__isset __isset;

  void __set_success(const ResAbundance& val);

  bool operator == (const CbmService_GetResAbundanceByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceByFields2_presult__isset {
  _CbmService_GetResAbundanceByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceByFields2_presult__isset;

class CbmService_GetResAbundanceByFields2_presult {
 public:


  virtual ~CbmService_GetResAbundanceByFields2_presult() throw();
  ResAbundance* success;

  _CbmService_GetResAbundanceByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetResAbundanceListByFields_args__isset {
  _CbmService_GetResAbundanceListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetResAbundanceListByFields_args__isset;

class CbmService_GetResAbundanceListByFields_args {
 public:

  CbmService_GetResAbundanceListByFields_args(const CbmService_GetResAbundanceListByFields_args&);
  CbmService_GetResAbundanceListByFields_args& operator=(const CbmService_GetResAbundanceListByFields_args&);
  CbmService_GetResAbundanceListByFields_args() {
  }

  virtual ~CbmService_GetResAbundanceListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetResAbundanceListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetResAbundanceListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetResAbundanceListByFields_pargs {
 public:


  virtual ~CbmService_GetResAbundanceListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceListByFields_result__isset {
  _CbmService_GetResAbundanceListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceListByFields_result__isset;

class CbmService_GetResAbundanceListByFields_result {
 public:

  CbmService_GetResAbundanceListByFields_result(const CbmService_GetResAbundanceListByFields_result&);
  CbmService_GetResAbundanceListByFields_result& operator=(const CbmService_GetResAbundanceListByFields_result&);
  CbmService_GetResAbundanceListByFields_result() {
  }

  virtual ~CbmService_GetResAbundanceListByFields_result() throw();
  std::vector<ResAbundance>  success;

  _CbmService_GetResAbundanceListByFields_result__isset __isset;

  void __set_success(const std::vector<ResAbundance> & val);

  bool operator == (const CbmService_GetResAbundanceListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceListByFields_presult__isset {
  _CbmService_GetResAbundanceListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceListByFields_presult__isset;

class CbmService_GetResAbundanceListByFields_presult {
 public:


  virtual ~CbmService_GetResAbundanceListByFields_presult() throw();
  std::vector<ResAbundance> * success;

  _CbmService_GetResAbundanceListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetResAbundanceListByFields1_args__isset {
  _CbmService_GetResAbundanceListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetResAbundanceListByFields1_args__isset;

class CbmService_GetResAbundanceListByFields1_args {
 public:

  CbmService_GetResAbundanceListByFields1_args(const CbmService_GetResAbundanceListByFields1_args&);
  CbmService_GetResAbundanceListByFields1_args& operator=(const CbmService_GetResAbundanceListByFields1_args&);
  CbmService_GetResAbundanceListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetResAbundanceListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetResAbundanceListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetResAbundanceListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetResAbundanceListByFields1_pargs {
 public:


  virtual ~CbmService_GetResAbundanceListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceListByFields1_result__isset {
  _CbmService_GetResAbundanceListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceListByFields1_result__isset;

class CbmService_GetResAbundanceListByFields1_result {
 public:

  CbmService_GetResAbundanceListByFields1_result(const CbmService_GetResAbundanceListByFields1_result&);
  CbmService_GetResAbundanceListByFields1_result& operator=(const CbmService_GetResAbundanceListByFields1_result&);
  CbmService_GetResAbundanceListByFields1_result() {
  }

  virtual ~CbmService_GetResAbundanceListByFields1_result() throw();
  std::vector<ResAbundance>  success;

  _CbmService_GetResAbundanceListByFields1_result__isset __isset;

  void __set_success(const std::vector<ResAbundance> & val);

  bool operator == (const CbmService_GetResAbundanceListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceListByFields1_presult__isset {
  _CbmService_GetResAbundanceListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceListByFields1_presult__isset;

class CbmService_GetResAbundanceListByFields1_presult {
 public:


  virtual ~CbmService_GetResAbundanceListByFields1_presult() throw();
  std::vector<ResAbundance> * success;

  _CbmService_GetResAbundanceListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetResAbundanceListByFields2_args__isset {
  _CbmService_GetResAbundanceListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetResAbundanceListByFields2_args__isset;

class CbmService_GetResAbundanceListByFields2_args {
 public:

  CbmService_GetResAbundanceListByFields2_args(const CbmService_GetResAbundanceListByFields2_args&);
  CbmService_GetResAbundanceListByFields2_args& operator=(const CbmService_GetResAbundanceListByFields2_args&);
  CbmService_GetResAbundanceListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetResAbundanceListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetResAbundanceListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetResAbundanceListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetResAbundanceListByFields2_pargs {
 public:


  virtual ~CbmService_GetResAbundanceListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceListByFields2_result__isset {
  _CbmService_GetResAbundanceListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceListByFields2_result__isset;

class CbmService_GetResAbundanceListByFields2_result {
 public:

  CbmService_GetResAbundanceListByFields2_result(const CbmService_GetResAbundanceListByFields2_result&);
  CbmService_GetResAbundanceListByFields2_result& operator=(const CbmService_GetResAbundanceListByFields2_result&);
  CbmService_GetResAbundanceListByFields2_result() {
  }

  virtual ~CbmService_GetResAbundanceListByFields2_result() throw();
  std::vector<ResAbundance>  success;

  _CbmService_GetResAbundanceListByFields2_result__isset __isset;

  void __set_success(const std::vector<ResAbundance> & val);

  bool operator == (const CbmService_GetResAbundanceListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetResAbundanceListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetResAbundanceListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetResAbundanceListByFields2_presult__isset {
  _CbmService_GetResAbundanceListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetResAbundanceListByFields2_presult__isset;

class CbmService_GetResAbundanceListByFields2_presult {
 public:


  virtual ~CbmService_GetResAbundanceListByFields2_presult() throw();
  std::vector<ResAbundance> * success;

  _CbmService_GetResAbundanceListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddRock_args__isset {
  _CbmService_AddRock_args__isset() : rock(false) {}
  bool rock :1;
} _CbmService_AddRock_args__isset;

class CbmService_AddRock_args {
 public:

  CbmService_AddRock_args(const CbmService_AddRock_args&);
  CbmService_AddRock_args& operator=(const CbmService_AddRock_args&);
  CbmService_AddRock_args() {
  }

  virtual ~CbmService_AddRock_args() throw();
  Rock rock;

  _CbmService_AddRock_args__isset __isset;

  void __set_rock(const Rock& val);

  bool operator == (const CbmService_AddRock_args & rhs) const
  {
    if (!(rock == rhs.rock))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddRock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddRock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddRock_pargs {
 public:


  virtual ~CbmService_AddRock_pargs() throw();
  const Rock* rock;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddRock_result__isset {
  _CbmService_AddRock_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddRock_result__isset;

class CbmService_AddRock_result {
 public:

  CbmService_AddRock_result(const CbmService_AddRock_result&);
  CbmService_AddRock_result& operator=(const CbmService_AddRock_result&);
  CbmService_AddRock_result() : success(0) {
  }

  virtual ~CbmService_AddRock_result() throw();
  int32_t success;

  _CbmService_AddRock_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddRock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddRock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddRock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddRock_presult__isset {
  _CbmService_AddRock_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddRock_presult__isset;

class CbmService_AddRock_presult {
 public:


  virtual ~CbmService_AddRock_presult() throw();
  int32_t* success;

  _CbmService_AddRock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteRock_args__isset {
  _CbmService_DeleteRock_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteRock_args__isset;

class CbmService_DeleteRock_args {
 public:

  CbmService_DeleteRock_args(const CbmService_DeleteRock_args&);
  CbmService_DeleteRock_args& operator=(const CbmService_DeleteRock_args&);
  CbmService_DeleteRock_args() : id(0) {
  }

  virtual ~CbmService_DeleteRock_args() throw();
  int32_t id;

  _CbmService_DeleteRock_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteRock_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteRock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteRock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteRock_pargs {
 public:


  virtual ~CbmService_DeleteRock_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteRock_result__isset {
  _CbmService_DeleteRock_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteRock_result__isset;

class CbmService_DeleteRock_result {
 public:

  CbmService_DeleteRock_result(const CbmService_DeleteRock_result&);
  CbmService_DeleteRock_result& operator=(const CbmService_DeleteRock_result&);
  CbmService_DeleteRock_result() : success(0) {
  }

  virtual ~CbmService_DeleteRock_result() throw();
  bool success;

  _CbmService_DeleteRock_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteRock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteRock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteRock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteRock_presult__isset {
  _CbmService_DeleteRock_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteRock_presult__isset;

class CbmService_DeleteRock_presult {
 public:


  virtual ~CbmService_DeleteRock_presult() throw();
  bool* success;

  _CbmService_DeleteRock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateRock_args__isset {
  _CbmService_UpdateRock_args__isset() : rock(false) {}
  bool rock :1;
} _CbmService_UpdateRock_args__isset;

class CbmService_UpdateRock_args {
 public:

  CbmService_UpdateRock_args(const CbmService_UpdateRock_args&);
  CbmService_UpdateRock_args& operator=(const CbmService_UpdateRock_args&);
  CbmService_UpdateRock_args() {
  }

  virtual ~CbmService_UpdateRock_args() throw();
  Rock rock;

  _CbmService_UpdateRock_args__isset __isset;

  void __set_rock(const Rock& val);

  bool operator == (const CbmService_UpdateRock_args & rhs) const
  {
    if (!(rock == rhs.rock))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateRock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateRock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateRock_pargs {
 public:


  virtual ~CbmService_UpdateRock_pargs() throw();
  const Rock* rock;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateRock_result__isset {
  _CbmService_UpdateRock_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateRock_result__isset;

class CbmService_UpdateRock_result {
 public:

  CbmService_UpdateRock_result(const CbmService_UpdateRock_result&);
  CbmService_UpdateRock_result& operator=(const CbmService_UpdateRock_result&);
  CbmService_UpdateRock_result() : success(0) {
  }

  virtual ~CbmService_UpdateRock_result() throw();
  bool success;

  _CbmService_UpdateRock_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateRock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateRock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateRock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateRock_presult__isset {
  _CbmService_UpdateRock_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateRock_presult__isset;

class CbmService_UpdateRock_presult {
 public:


  virtual ~CbmService_UpdateRock_presult() throw();
  bool* success;

  _CbmService_UpdateRock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetRockById_args__isset {
  _CbmService_GetRockById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetRockById_args__isset;

class CbmService_GetRockById_args {
 public:

  CbmService_GetRockById_args(const CbmService_GetRockById_args&);
  CbmService_GetRockById_args& operator=(const CbmService_GetRockById_args&);
  CbmService_GetRockById_args() : id(0) {
  }

  virtual ~CbmService_GetRockById_args() throw();
  int32_t id;

  _CbmService_GetRockById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetRockById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetRockById_pargs {
 public:


  virtual ~CbmService_GetRockById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockById_result__isset {
  _CbmService_GetRockById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockById_result__isset;

class CbmService_GetRockById_result {
 public:

  CbmService_GetRockById_result(const CbmService_GetRockById_result&);
  CbmService_GetRockById_result& operator=(const CbmService_GetRockById_result&);
  CbmService_GetRockById_result() {
  }

  virtual ~CbmService_GetRockById_result() throw();
  Rock success;

  _CbmService_GetRockById_result__isset __isset;

  void __set_success(const Rock& val);

  bool operator == (const CbmService_GetRockById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockById_presult__isset {
  _CbmService_GetRockById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockById_presult__isset;

class CbmService_GetRockById_presult {
 public:


  virtual ~CbmService_GetRockById_presult() throw();
  Rock* success;

  _CbmService_GetRockById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetRockByForeignKey_args__isset {
  _CbmService_GetRockByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetRockByForeignKey_args__isset;

class CbmService_GetRockByForeignKey_args {
 public:

  CbmService_GetRockByForeignKey_args(const CbmService_GetRockByForeignKey_args&);
  CbmService_GetRockByForeignKey_args& operator=(const CbmService_GetRockByForeignKey_args&);
  CbmService_GetRockByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetRockByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetRockByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetRockByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetRockByForeignKey_pargs {
 public:


  virtual ~CbmService_GetRockByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockByForeignKey_result__isset {
  _CbmService_GetRockByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockByForeignKey_result__isset;

class CbmService_GetRockByForeignKey_result {
 public:

  CbmService_GetRockByForeignKey_result(const CbmService_GetRockByForeignKey_result&);
  CbmService_GetRockByForeignKey_result& operator=(const CbmService_GetRockByForeignKey_result&);
  CbmService_GetRockByForeignKey_result() {
  }

  virtual ~CbmService_GetRockByForeignKey_result() throw();
  Rock success;

  _CbmService_GetRockByForeignKey_result__isset __isset;

  void __set_success(const Rock& val);

  bool operator == (const CbmService_GetRockByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockByForeignKey_presult__isset {
  _CbmService_GetRockByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockByForeignKey_presult__isset;

class CbmService_GetRockByForeignKey_presult {
 public:


  virtual ~CbmService_GetRockByForeignKey_presult() throw();
  Rock* success;

  _CbmService_GetRockByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetRockList_args {
 public:

  CbmService_GetRockList_args(const CbmService_GetRockList_args&);
  CbmService_GetRockList_args& operator=(const CbmService_GetRockList_args&);
  CbmService_GetRockList_args() {
  }

  virtual ~CbmService_GetRockList_args() throw();

  bool operator == (const CbmService_GetRockList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetRockList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetRockList_pargs {
 public:


  virtual ~CbmService_GetRockList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockList_result__isset {
  _CbmService_GetRockList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockList_result__isset;

class CbmService_GetRockList_result {
 public:

  CbmService_GetRockList_result(const CbmService_GetRockList_result&);
  CbmService_GetRockList_result& operator=(const CbmService_GetRockList_result&);
  CbmService_GetRockList_result() {
  }

  virtual ~CbmService_GetRockList_result() throw();
  std::vector<Rock>  success;

  _CbmService_GetRockList_result__isset __isset;

  void __set_success(const std::vector<Rock> & val);

  bool operator == (const CbmService_GetRockList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockList_presult__isset {
  _CbmService_GetRockList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockList_presult__isset;

class CbmService_GetRockList_presult {
 public:


  virtual ~CbmService_GetRockList_presult() throw();
  std::vector<Rock> * success;

  _CbmService_GetRockList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetRockIds_args {
 public:

  CbmService_GetRockIds_args(const CbmService_GetRockIds_args&);
  CbmService_GetRockIds_args& operator=(const CbmService_GetRockIds_args&);
  CbmService_GetRockIds_args() {
  }

  virtual ~CbmService_GetRockIds_args() throw();

  bool operator == (const CbmService_GetRockIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetRockIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetRockIds_pargs {
 public:


  virtual ~CbmService_GetRockIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockIds_result__isset {
  _CbmService_GetRockIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockIds_result__isset;

class CbmService_GetRockIds_result {
 public:

  CbmService_GetRockIds_result(const CbmService_GetRockIds_result&);
  CbmService_GetRockIds_result& operator=(const CbmService_GetRockIds_result&);
  CbmService_GetRockIds_result() {
  }

  virtual ~CbmService_GetRockIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetRockIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetRockIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockIds_presult__isset {
  _CbmService_GetRockIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockIds_presult__isset;

class CbmService_GetRockIds_presult {
 public:


  virtual ~CbmService_GetRockIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetRockIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetRockNames_args {
 public:

  CbmService_GetRockNames_args(const CbmService_GetRockNames_args&);
  CbmService_GetRockNames_args& operator=(const CbmService_GetRockNames_args&);
  CbmService_GetRockNames_args() {
  }

  virtual ~CbmService_GetRockNames_args() throw();

  bool operator == (const CbmService_GetRockNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetRockNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetRockNames_pargs {
 public:


  virtual ~CbmService_GetRockNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockNames_result__isset {
  _CbmService_GetRockNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockNames_result__isset;

class CbmService_GetRockNames_result {
 public:

  CbmService_GetRockNames_result(const CbmService_GetRockNames_result&);
  CbmService_GetRockNames_result& operator=(const CbmService_GetRockNames_result&);
  CbmService_GetRockNames_result() {
  }

  virtual ~CbmService_GetRockNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetRockNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetRockNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockNames_presult__isset {
  _CbmService_GetRockNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockNames_presult__isset;

class CbmService_GetRockNames_presult {
 public:


  virtual ~CbmService_GetRockNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetRockNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreRock_args__isset {
  _CbmService_AddMoreRock_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreRock_args__isset;

class CbmService_AddMoreRock_args {
 public:

  CbmService_AddMoreRock_args(const CbmService_AddMoreRock_args&);
  CbmService_AddMoreRock_args& operator=(const CbmService_AddMoreRock_args&);
  CbmService_AddMoreRock_args() {
  }

  virtual ~CbmService_AddMoreRock_args() throw();
  std::vector<Rock>  objs;

  _CbmService_AddMoreRock_args__isset __isset;

  void __set_objs(const std::vector<Rock> & val);

  bool operator == (const CbmService_AddMoreRock_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreRock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreRock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreRock_pargs {
 public:


  virtual ~CbmService_AddMoreRock_pargs() throw();
  const std::vector<Rock> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreRock_result {
 public:

  CbmService_AddMoreRock_result(const CbmService_AddMoreRock_result&);
  CbmService_AddMoreRock_result& operator=(const CbmService_AddMoreRock_result&);
  CbmService_AddMoreRock_result() {
  }

  virtual ~CbmService_AddMoreRock_result() throw();

  bool operator == (const CbmService_AddMoreRock_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreRock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreRock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreRock_presult {
 public:


  virtual ~CbmService_AddMoreRock_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreRock_args__isset {
  _CbmService_DeleteMoreRock_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreRock_args__isset;

class CbmService_DeleteMoreRock_args {
 public:

  CbmService_DeleteMoreRock_args(const CbmService_DeleteMoreRock_args&);
  CbmService_DeleteMoreRock_args& operator=(const CbmService_DeleteMoreRock_args&);
  CbmService_DeleteMoreRock_args() {
  }

  virtual ~CbmService_DeleteMoreRock_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreRock_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreRock_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreRock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreRock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreRock_pargs {
 public:


  virtual ~CbmService_DeleteMoreRock_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreRock_result {
 public:

  CbmService_DeleteMoreRock_result(const CbmService_DeleteMoreRock_result&);
  CbmService_DeleteMoreRock_result& operator=(const CbmService_DeleteMoreRock_result&);
  CbmService_DeleteMoreRock_result() {
  }

  virtual ~CbmService_DeleteMoreRock_result() throw();

  bool operator == (const CbmService_DeleteMoreRock_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreRock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreRock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreRock_presult {
 public:


  virtual ~CbmService_DeleteMoreRock_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetRockByFields_args__isset {
  _CbmService_GetRockByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetRockByFields_args__isset;

class CbmService_GetRockByFields_args {
 public:

  CbmService_GetRockByFields_args(const CbmService_GetRockByFields_args&);
  CbmService_GetRockByFields_args& operator=(const CbmService_GetRockByFields_args&);
  CbmService_GetRockByFields_args() {
  }

  virtual ~CbmService_GetRockByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetRockByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetRockByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetRockByFields_pargs {
 public:


  virtual ~CbmService_GetRockByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockByFields_result__isset {
  _CbmService_GetRockByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockByFields_result__isset;

class CbmService_GetRockByFields_result {
 public:

  CbmService_GetRockByFields_result(const CbmService_GetRockByFields_result&);
  CbmService_GetRockByFields_result& operator=(const CbmService_GetRockByFields_result&);
  CbmService_GetRockByFields_result() {
  }

  virtual ~CbmService_GetRockByFields_result() throw();
  Rock success;

  _CbmService_GetRockByFields_result__isset __isset;

  void __set_success(const Rock& val);

  bool operator == (const CbmService_GetRockByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockByFields_presult__isset {
  _CbmService_GetRockByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockByFields_presult__isset;

class CbmService_GetRockByFields_presult {
 public:


  virtual ~CbmService_GetRockByFields_presult() throw();
  Rock* success;

  _CbmService_GetRockByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetRockByFields1_args__isset {
  _CbmService_GetRockByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetRockByFields1_args__isset;

class CbmService_GetRockByFields1_args {
 public:

  CbmService_GetRockByFields1_args(const CbmService_GetRockByFields1_args&);
  CbmService_GetRockByFields1_args& operator=(const CbmService_GetRockByFields1_args&);
  CbmService_GetRockByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetRockByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetRockByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetRockByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetRockByFields1_pargs {
 public:


  virtual ~CbmService_GetRockByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockByFields1_result__isset {
  _CbmService_GetRockByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockByFields1_result__isset;

class CbmService_GetRockByFields1_result {
 public:

  CbmService_GetRockByFields1_result(const CbmService_GetRockByFields1_result&);
  CbmService_GetRockByFields1_result& operator=(const CbmService_GetRockByFields1_result&);
  CbmService_GetRockByFields1_result() {
  }

  virtual ~CbmService_GetRockByFields1_result() throw();
  Rock success;

  _CbmService_GetRockByFields1_result__isset __isset;

  void __set_success(const Rock& val);

  bool operator == (const CbmService_GetRockByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockByFields1_presult__isset {
  _CbmService_GetRockByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockByFields1_presult__isset;

class CbmService_GetRockByFields1_presult {
 public:


  virtual ~CbmService_GetRockByFields1_presult() throw();
  Rock* success;

  _CbmService_GetRockByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetRockByFields2_args__isset {
  _CbmService_GetRockByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetRockByFields2_args__isset;

class CbmService_GetRockByFields2_args {
 public:

  CbmService_GetRockByFields2_args(const CbmService_GetRockByFields2_args&);
  CbmService_GetRockByFields2_args& operator=(const CbmService_GetRockByFields2_args&);
  CbmService_GetRockByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetRockByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetRockByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetRockByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetRockByFields2_pargs {
 public:


  virtual ~CbmService_GetRockByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockByFields2_result__isset {
  _CbmService_GetRockByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockByFields2_result__isset;

class CbmService_GetRockByFields2_result {
 public:

  CbmService_GetRockByFields2_result(const CbmService_GetRockByFields2_result&);
  CbmService_GetRockByFields2_result& operator=(const CbmService_GetRockByFields2_result&);
  CbmService_GetRockByFields2_result() {
  }

  virtual ~CbmService_GetRockByFields2_result() throw();
  Rock success;

  _CbmService_GetRockByFields2_result__isset __isset;

  void __set_success(const Rock& val);

  bool operator == (const CbmService_GetRockByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockByFields2_presult__isset {
  _CbmService_GetRockByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockByFields2_presult__isset;

class CbmService_GetRockByFields2_presult {
 public:


  virtual ~CbmService_GetRockByFields2_presult() throw();
  Rock* success;

  _CbmService_GetRockByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetRockListByFields_args__isset {
  _CbmService_GetRockListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetRockListByFields_args__isset;

class CbmService_GetRockListByFields_args {
 public:

  CbmService_GetRockListByFields_args(const CbmService_GetRockListByFields_args&);
  CbmService_GetRockListByFields_args& operator=(const CbmService_GetRockListByFields_args&);
  CbmService_GetRockListByFields_args() {
  }

  virtual ~CbmService_GetRockListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetRockListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetRockListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetRockListByFields_pargs {
 public:


  virtual ~CbmService_GetRockListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockListByFields_result__isset {
  _CbmService_GetRockListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockListByFields_result__isset;

class CbmService_GetRockListByFields_result {
 public:

  CbmService_GetRockListByFields_result(const CbmService_GetRockListByFields_result&);
  CbmService_GetRockListByFields_result& operator=(const CbmService_GetRockListByFields_result&);
  CbmService_GetRockListByFields_result() {
  }

  virtual ~CbmService_GetRockListByFields_result() throw();
  std::vector<Rock>  success;

  _CbmService_GetRockListByFields_result__isset __isset;

  void __set_success(const std::vector<Rock> & val);

  bool operator == (const CbmService_GetRockListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockListByFields_presult__isset {
  _CbmService_GetRockListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockListByFields_presult__isset;

class CbmService_GetRockListByFields_presult {
 public:


  virtual ~CbmService_GetRockListByFields_presult() throw();
  std::vector<Rock> * success;

  _CbmService_GetRockListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetRockListByFields1_args__isset {
  _CbmService_GetRockListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetRockListByFields1_args__isset;

class CbmService_GetRockListByFields1_args {
 public:

  CbmService_GetRockListByFields1_args(const CbmService_GetRockListByFields1_args&);
  CbmService_GetRockListByFields1_args& operator=(const CbmService_GetRockListByFields1_args&);
  CbmService_GetRockListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetRockListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetRockListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetRockListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetRockListByFields1_pargs {
 public:


  virtual ~CbmService_GetRockListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockListByFields1_result__isset {
  _CbmService_GetRockListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockListByFields1_result__isset;

class CbmService_GetRockListByFields1_result {
 public:

  CbmService_GetRockListByFields1_result(const CbmService_GetRockListByFields1_result&);
  CbmService_GetRockListByFields1_result& operator=(const CbmService_GetRockListByFields1_result&);
  CbmService_GetRockListByFields1_result() {
  }

  virtual ~CbmService_GetRockListByFields1_result() throw();
  std::vector<Rock>  success;

  _CbmService_GetRockListByFields1_result__isset __isset;

  void __set_success(const std::vector<Rock> & val);

  bool operator == (const CbmService_GetRockListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockListByFields1_presult__isset {
  _CbmService_GetRockListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockListByFields1_presult__isset;

class CbmService_GetRockListByFields1_presult {
 public:


  virtual ~CbmService_GetRockListByFields1_presult() throw();
  std::vector<Rock> * success;

  _CbmService_GetRockListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetRockListByFields2_args__isset {
  _CbmService_GetRockListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetRockListByFields2_args__isset;

class CbmService_GetRockListByFields2_args {
 public:

  CbmService_GetRockListByFields2_args(const CbmService_GetRockListByFields2_args&);
  CbmService_GetRockListByFields2_args& operator=(const CbmService_GetRockListByFields2_args&);
  CbmService_GetRockListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetRockListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetRockListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetRockListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetRockListByFields2_pargs {
 public:


  virtual ~CbmService_GetRockListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockListByFields2_result__isset {
  _CbmService_GetRockListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockListByFields2_result__isset;

class CbmService_GetRockListByFields2_result {
 public:

  CbmService_GetRockListByFields2_result(const CbmService_GetRockListByFields2_result&);
  CbmService_GetRockListByFields2_result& operator=(const CbmService_GetRockListByFields2_result&);
  CbmService_GetRockListByFields2_result() {
  }

  virtual ~CbmService_GetRockListByFields2_result() throw();
  std::vector<Rock>  success;

  _CbmService_GetRockListByFields2_result__isset __isset;

  void __set_success(const std::vector<Rock> & val);

  bool operator == (const CbmService_GetRockListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetRockListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetRockListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetRockListByFields2_presult__isset {
  _CbmService_GetRockListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetRockListByFields2_presult__isset;

class CbmService_GetRockListByFields2_presult {
 public:


  virtual ~CbmService_GetRockListByFields2_presult() throw();
  std::vector<Rock> * success;

  _CbmService_GetRockListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddSysInfo_args__isset {
  _CbmService_AddSysInfo_args__isset() : sys_info(false) {}
  bool sys_info :1;
} _CbmService_AddSysInfo_args__isset;

class CbmService_AddSysInfo_args {
 public:

  CbmService_AddSysInfo_args(const CbmService_AddSysInfo_args&);
  CbmService_AddSysInfo_args& operator=(const CbmService_AddSysInfo_args&);
  CbmService_AddSysInfo_args() {
  }

  virtual ~CbmService_AddSysInfo_args() throw();
  SysInfo sys_info;

  _CbmService_AddSysInfo_args__isset __isset;

  void __set_sys_info(const SysInfo& val);

  bool operator == (const CbmService_AddSysInfo_args & rhs) const
  {
    if (!(sys_info == rhs.sys_info))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddSysInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddSysInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddSysInfo_pargs {
 public:


  virtual ~CbmService_AddSysInfo_pargs() throw();
  const SysInfo* sys_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddSysInfo_result__isset {
  _CbmService_AddSysInfo_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddSysInfo_result__isset;

class CbmService_AddSysInfo_result {
 public:

  CbmService_AddSysInfo_result(const CbmService_AddSysInfo_result&);
  CbmService_AddSysInfo_result& operator=(const CbmService_AddSysInfo_result&);
  CbmService_AddSysInfo_result() : success(0) {
  }

  virtual ~CbmService_AddSysInfo_result() throw();
  int32_t success;

  _CbmService_AddSysInfo_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddSysInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddSysInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddSysInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddSysInfo_presult__isset {
  _CbmService_AddSysInfo_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddSysInfo_presult__isset;

class CbmService_AddSysInfo_presult {
 public:


  virtual ~CbmService_AddSysInfo_presult() throw();
  int32_t* success;

  _CbmService_AddSysInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteSysInfo_args__isset {
  _CbmService_DeleteSysInfo_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteSysInfo_args__isset;

class CbmService_DeleteSysInfo_args {
 public:

  CbmService_DeleteSysInfo_args(const CbmService_DeleteSysInfo_args&);
  CbmService_DeleteSysInfo_args& operator=(const CbmService_DeleteSysInfo_args&);
  CbmService_DeleteSysInfo_args() : id(0) {
  }

  virtual ~CbmService_DeleteSysInfo_args() throw();
  int32_t id;

  _CbmService_DeleteSysInfo_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteSysInfo_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteSysInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteSysInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteSysInfo_pargs {
 public:


  virtual ~CbmService_DeleteSysInfo_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteSysInfo_result__isset {
  _CbmService_DeleteSysInfo_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteSysInfo_result__isset;

class CbmService_DeleteSysInfo_result {
 public:

  CbmService_DeleteSysInfo_result(const CbmService_DeleteSysInfo_result&);
  CbmService_DeleteSysInfo_result& operator=(const CbmService_DeleteSysInfo_result&);
  CbmService_DeleteSysInfo_result() : success(0) {
  }

  virtual ~CbmService_DeleteSysInfo_result() throw();
  bool success;

  _CbmService_DeleteSysInfo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteSysInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteSysInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteSysInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteSysInfo_presult__isset {
  _CbmService_DeleteSysInfo_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteSysInfo_presult__isset;

class CbmService_DeleteSysInfo_presult {
 public:


  virtual ~CbmService_DeleteSysInfo_presult() throw();
  bool* success;

  _CbmService_DeleteSysInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateSysInfo_args__isset {
  _CbmService_UpdateSysInfo_args__isset() : sys_info(false) {}
  bool sys_info :1;
} _CbmService_UpdateSysInfo_args__isset;

class CbmService_UpdateSysInfo_args {
 public:

  CbmService_UpdateSysInfo_args(const CbmService_UpdateSysInfo_args&);
  CbmService_UpdateSysInfo_args& operator=(const CbmService_UpdateSysInfo_args&);
  CbmService_UpdateSysInfo_args() {
  }

  virtual ~CbmService_UpdateSysInfo_args() throw();
  SysInfo sys_info;

  _CbmService_UpdateSysInfo_args__isset __isset;

  void __set_sys_info(const SysInfo& val);

  bool operator == (const CbmService_UpdateSysInfo_args & rhs) const
  {
    if (!(sys_info == rhs.sys_info))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateSysInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateSysInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateSysInfo_pargs {
 public:


  virtual ~CbmService_UpdateSysInfo_pargs() throw();
  const SysInfo* sys_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateSysInfo_result__isset {
  _CbmService_UpdateSysInfo_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateSysInfo_result__isset;

class CbmService_UpdateSysInfo_result {
 public:

  CbmService_UpdateSysInfo_result(const CbmService_UpdateSysInfo_result&);
  CbmService_UpdateSysInfo_result& operator=(const CbmService_UpdateSysInfo_result&);
  CbmService_UpdateSysInfo_result() : success(0) {
  }

  virtual ~CbmService_UpdateSysInfo_result() throw();
  bool success;

  _CbmService_UpdateSysInfo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateSysInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateSysInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateSysInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateSysInfo_presult__isset {
  _CbmService_UpdateSysInfo_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateSysInfo_presult__isset;

class CbmService_UpdateSysInfo_presult {
 public:


  virtual ~CbmService_UpdateSysInfo_presult() throw();
  bool* success;

  _CbmService_UpdateSysInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetSysInfoById_args__isset {
  _CbmService_GetSysInfoById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetSysInfoById_args__isset;

class CbmService_GetSysInfoById_args {
 public:

  CbmService_GetSysInfoById_args(const CbmService_GetSysInfoById_args&);
  CbmService_GetSysInfoById_args& operator=(const CbmService_GetSysInfoById_args&);
  CbmService_GetSysInfoById_args() : id(0) {
  }

  virtual ~CbmService_GetSysInfoById_args() throw();
  int32_t id;

  _CbmService_GetSysInfoById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetSysInfoById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSysInfoById_pargs {
 public:


  virtual ~CbmService_GetSysInfoById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoById_result__isset {
  _CbmService_GetSysInfoById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoById_result__isset;

class CbmService_GetSysInfoById_result {
 public:

  CbmService_GetSysInfoById_result(const CbmService_GetSysInfoById_result&);
  CbmService_GetSysInfoById_result& operator=(const CbmService_GetSysInfoById_result&);
  CbmService_GetSysInfoById_result() {
  }

  virtual ~CbmService_GetSysInfoById_result() throw();
  SysInfo success;

  _CbmService_GetSysInfoById_result__isset __isset;

  void __set_success(const SysInfo& val);

  bool operator == (const CbmService_GetSysInfoById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoById_presult__isset {
  _CbmService_GetSysInfoById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoById_presult__isset;

class CbmService_GetSysInfoById_presult {
 public:


  virtual ~CbmService_GetSysInfoById_presult() throw();
  SysInfo* success;

  _CbmService_GetSysInfoById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetSysInfoByForeignKey_args__isset {
  _CbmService_GetSysInfoByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetSysInfoByForeignKey_args__isset;

class CbmService_GetSysInfoByForeignKey_args {
 public:

  CbmService_GetSysInfoByForeignKey_args(const CbmService_GetSysInfoByForeignKey_args&);
  CbmService_GetSysInfoByForeignKey_args& operator=(const CbmService_GetSysInfoByForeignKey_args&);
  CbmService_GetSysInfoByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetSysInfoByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetSysInfoByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetSysInfoByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSysInfoByForeignKey_pargs {
 public:


  virtual ~CbmService_GetSysInfoByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoByForeignKey_result__isset {
  _CbmService_GetSysInfoByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoByForeignKey_result__isset;

class CbmService_GetSysInfoByForeignKey_result {
 public:

  CbmService_GetSysInfoByForeignKey_result(const CbmService_GetSysInfoByForeignKey_result&);
  CbmService_GetSysInfoByForeignKey_result& operator=(const CbmService_GetSysInfoByForeignKey_result&);
  CbmService_GetSysInfoByForeignKey_result() {
  }

  virtual ~CbmService_GetSysInfoByForeignKey_result() throw();
  SysInfo success;

  _CbmService_GetSysInfoByForeignKey_result__isset __isset;

  void __set_success(const SysInfo& val);

  bool operator == (const CbmService_GetSysInfoByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoByForeignKey_presult__isset {
  _CbmService_GetSysInfoByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoByForeignKey_presult__isset;

class CbmService_GetSysInfoByForeignKey_presult {
 public:


  virtual ~CbmService_GetSysInfoByForeignKey_presult() throw();
  SysInfo* success;

  _CbmService_GetSysInfoByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetSysInfoList_args {
 public:

  CbmService_GetSysInfoList_args(const CbmService_GetSysInfoList_args&);
  CbmService_GetSysInfoList_args& operator=(const CbmService_GetSysInfoList_args&);
  CbmService_GetSysInfoList_args() {
  }

  virtual ~CbmService_GetSysInfoList_args() throw();

  bool operator == (const CbmService_GetSysInfoList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetSysInfoList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSysInfoList_pargs {
 public:


  virtual ~CbmService_GetSysInfoList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoList_result__isset {
  _CbmService_GetSysInfoList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoList_result__isset;

class CbmService_GetSysInfoList_result {
 public:

  CbmService_GetSysInfoList_result(const CbmService_GetSysInfoList_result&);
  CbmService_GetSysInfoList_result& operator=(const CbmService_GetSysInfoList_result&);
  CbmService_GetSysInfoList_result() {
  }

  virtual ~CbmService_GetSysInfoList_result() throw();
  std::vector<SysInfo>  success;

  _CbmService_GetSysInfoList_result__isset __isset;

  void __set_success(const std::vector<SysInfo> & val);

  bool operator == (const CbmService_GetSysInfoList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoList_presult__isset {
  _CbmService_GetSysInfoList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoList_presult__isset;

class CbmService_GetSysInfoList_presult {
 public:


  virtual ~CbmService_GetSysInfoList_presult() throw();
  std::vector<SysInfo> * success;

  _CbmService_GetSysInfoList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetSysInfoIds_args {
 public:

  CbmService_GetSysInfoIds_args(const CbmService_GetSysInfoIds_args&);
  CbmService_GetSysInfoIds_args& operator=(const CbmService_GetSysInfoIds_args&);
  CbmService_GetSysInfoIds_args() {
  }

  virtual ~CbmService_GetSysInfoIds_args() throw();

  bool operator == (const CbmService_GetSysInfoIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetSysInfoIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSysInfoIds_pargs {
 public:


  virtual ~CbmService_GetSysInfoIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoIds_result__isset {
  _CbmService_GetSysInfoIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoIds_result__isset;

class CbmService_GetSysInfoIds_result {
 public:

  CbmService_GetSysInfoIds_result(const CbmService_GetSysInfoIds_result&);
  CbmService_GetSysInfoIds_result& operator=(const CbmService_GetSysInfoIds_result&);
  CbmService_GetSysInfoIds_result() {
  }

  virtual ~CbmService_GetSysInfoIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetSysInfoIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetSysInfoIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoIds_presult__isset {
  _CbmService_GetSysInfoIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoIds_presult__isset;

class CbmService_GetSysInfoIds_presult {
 public:


  virtual ~CbmService_GetSysInfoIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetSysInfoIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetSysInfoNames_args {
 public:

  CbmService_GetSysInfoNames_args(const CbmService_GetSysInfoNames_args&);
  CbmService_GetSysInfoNames_args& operator=(const CbmService_GetSysInfoNames_args&);
  CbmService_GetSysInfoNames_args() {
  }

  virtual ~CbmService_GetSysInfoNames_args() throw();

  bool operator == (const CbmService_GetSysInfoNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetSysInfoNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSysInfoNames_pargs {
 public:


  virtual ~CbmService_GetSysInfoNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoNames_result__isset {
  _CbmService_GetSysInfoNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoNames_result__isset;

class CbmService_GetSysInfoNames_result {
 public:

  CbmService_GetSysInfoNames_result(const CbmService_GetSysInfoNames_result&);
  CbmService_GetSysInfoNames_result& operator=(const CbmService_GetSysInfoNames_result&);
  CbmService_GetSysInfoNames_result() {
  }

  virtual ~CbmService_GetSysInfoNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetSysInfoNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetSysInfoNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoNames_presult__isset {
  _CbmService_GetSysInfoNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoNames_presult__isset;

class CbmService_GetSysInfoNames_presult {
 public:


  virtual ~CbmService_GetSysInfoNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetSysInfoNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreSysInfo_args__isset {
  _CbmService_AddMoreSysInfo_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreSysInfo_args__isset;

class CbmService_AddMoreSysInfo_args {
 public:

  CbmService_AddMoreSysInfo_args(const CbmService_AddMoreSysInfo_args&);
  CbmService_AddMoreSysInfo_args& operator=(const CbmService_AddMoreSysInfo_args&);
  CbmService_AddMoreSysInfo_args() {
  }

  virtual ~CbmService_AddMoreSysInfo_args() throw();
  std::vector<SysInfo>  objs;

  _CbmService_AddMoreSysInfo_args__isset __isset;

  void __set_objs(const std::vector<SysInfo> & val);

  bool operator == (const CbmService_AddMoreSysInfo_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreSysInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreSysInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreSysInfo_pargs {
 public:


  virtual ~CbmService_AddMoreSysInfo_pargs() throw();
  const std::vector<SysInfo> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreSysInfo_result {
 public:

  CbmService_AddMoreSysInfo_result(const CbmService_AddMoreSysInfo_result&);
  CbmService_AddMoreSysInfo_result& operator=(const CbmService_AddMoreSysInfo_result&);
  CbmService_AddMoreSysInfo_result() {
  }

  virtual ~CbmService_AddMoreSysInfo_result() throw();

  bool operator == (const CbmService_AddMoreSysInfo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreSysInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreSysInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreSysInfo_presult {
 public:


  virtual ~CbmService_AddMoreSysInfo_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreSysInfo_args__isset {
  _CbmService_DeleteMoreSysInfo_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreSysInfo_args__isset;

class CbmService_DeleteMoreSysInfo_args {
 public:

  CbmService_DeleteMoreSysInfo_args(const CbmService_DeleteMoreSysInfo_args&);
  CbmService_DeleteMoreSysInfo_args& operator=(const CbmService_DeleteMoreSysInfo_args&);
  CbmService_DeleteMoreSysInfo_args() {
  }

  virtual ~CbmService_DeleteMoreSysInfo_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreSysInfo_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreSysInfo_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreSysInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreSysInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreSysInfo_pargs {
 public:


  virtual ~CbmService_DeleteMoreSysInfo_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreSysInfo_result {
 public:

  CbmService_DeleteMoreSysInfo_result(const CbmService_DeleteMoreSysInfo_result&);
  CbmService_DeleteMoreSysInfo_result& operator=(const CbmService_DeleteMoreSysInfo_result&);
  CbmService_DeleteMoreSysInfo_result() {
  }

  virtual ~CbmService_DeleteMoreSysInfo_result() throw();

  bool operator == (const CbmService_DeleteMoreSysInfo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreSysInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreSysInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreSysInfo_presult {
 public:


  virtual ~CbmService_DeleteMoreSysInfo_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetSysInfoByFields_args__isset {
  _CbmService_GetSysInfoByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetSysInfoByFields_args__isset;

class CbmService_GetSysInfoByFields_args {
 public:

  CbmService_GetSysInfoByFields_args(const CbmService_GetSysInfoByFields_args&);
  CbmService_GetSysInfoByFields_args& operator=(const CbmService_GetSysInfoByFields_args&);
  CbmService_GetSysInfoByFields_args() {
  }

  virtual ~CbmService_GetSysInfoByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetSysInfoByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetSysInfoByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSysInfoByFields_pargs {
 public:


  virtual ~CbmService_GetSysInfoByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoByFields_result__isset {
  _CbmService_GetSysInfoByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoByFields_result__isset;

class CbmService_GetSysInfoByFields_result {
 public:

  CbmService_GetSysInfoByFields_result(const CbmService_GetSysInfoByFields_result&);
  CbmService_GetSysInfoByFields_result& operator=(const CbmService_GetSysInfoByFields_result&);
  CbmService_GetSysInfoByFields_result() {
  }

  virtual ~CbmService_GetSysInfoByFields_result() throw();
  SysInfo success;

  _CbmService_GetSysInfoByFields_result__isset __isset;

  void __set_success(const SysInfo& val);

  bool operator == (const CbmService_GetSysInfoByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoByFields_presult__isset {
  _CbmService_GetSysInfoByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoByFields_presult__isset;

class CbmService_GetSysInfoByFields_presult {
 public:


  virtual ~CbmService_GetSysInfoByFields_presult() throw();
  SysInfo* success;

  _CbmService_GetSysInfoByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetSysInfoByFields1_args__isset {
  _CbmService_GetSysInfoByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetSysInfoByFields1_args__isset;

class CbmService_GetSysInfoByFields1_args {
 public:

  CbmService_GetSysInfoByFields1_args(const CbmService_GetSysInfoByFields1_args&);
  CbmService_GetSysInfoByFields1_args& operator=(const CbmService_GetSysInfoByFields1_args&);
  CbmService_GetSysInfoByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetSysInfoByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetSysInfoByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetSysInfoByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSysInfoByFields1_pargs {
 public:


  virtual ~CbmService_GetSysInfoByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoByFields1_result__isset {
  _CbmService_GetSysInfoByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoByFields1_result__isset;

class CbmService_GetSysInfoByFields1_result {
 public:

  CbmService_GetSysInfoByFields1_result(const CbmService_GetSysInfoByFields1_result&);
  CbmService_GetSysInfoByFields1_result& operator=(const CbmService_GetSysInfoByFields1_result&);
  CbmService_GetSysInfoByFields1_result() {
  }

  virtual ~CbmService_GetSysInfoByFields1_result() throw();
  SysInfo success;

  _CbmService_GetSysInfoByFields1_result__isset __isset;

  void __set_success(const SysInfo& val);

  bool operator == (const CbmService_GetSysInfoByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoByFields1_presult__isset {
  _CbmService_GetSysInfoByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoByFields1_presult__isset;

class CbmService_GetSysInfoByFields1_presult {
 public:


  virtual ~CbmService_GetSysInfoByFields1_presult() throw();
  SysInfo* success;

  _CbmService_GetSysInfoByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetSysInfoByFields2_args__isset {
  _CbmService_GetSysInfoByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetSysInfoByFields2_args__isset;

class CbmService_GetSysInfoByFields2_args {
 public:

  CbmService_GetSysInfoByFields2_args(const CbmService_GetSysInfoByFields2_args&);
  CbmService_GetSysInfoByFields2_args& operator=(const CbmService_GetSysInfoByFields2_args&);
  CbmService_GetSysInfoByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetSysInfoByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetSysInfoByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetSysInfoByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSysInfoByFields2_pargs {
 public:


  virtual ~CbmService_GetSysInfoByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoByFields2_result__isset {
  _CbmService_GetSysInfoByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoByFields2_result__isset;

class CbmService_GetSysInfoByFields2_result {
 public:

  CbmService_GetSysInfoByFields2_result(const CbmService_GetSysInfoByFields2_result&);
  CbmService_GetSysInfoByFields2_result& operator=(const CbmService_GetSysInfoByFields2_result&);
  CbmService_GetSysInfoByFields2_result() {
  }

  virtual ~CbmService_GetSysInfoByFields2_result() throw();
  SysInfo success;

  _CbmService_GetSysInfoByFields2_result__isset __isset;

  void __set_success(const SysInfo& val);

  bool operator == (const CbmService_GetSysInfoByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoByFields2_presult__isset {
  _CbmService_GetSysInfoByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoByFields2_presult__isset;

class CbmService_GetSysInfoByFields2_presult {
 public:


  virtual ~CbmService_GetSysInfoByFields2_presult() throw();
  SysInfo* success;

  _CbmService_GetSysInfoByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetSysInfoListByFields_args__isset {
  _CbmService_GetSysInfoListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetSysInfoListByFields_args__isset;

class CbmService_GetSysInfoListByFields_args {
 public:

  CbmService_GetSysInfoListByFields_args(const CbmService_GetSysInfoListByFields_args&);
  CbmService_GetSysInfoListByFields_args& operator=(const CbmService_GetSysInfoListByFields_args&);
  CbmService_GetSysInfoListByFields_args() {
  }

  virtual ~CbmService_GetSysInfoListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetSysInfoListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetSysInfoListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSysInfoListByFields_pargs {
 public:


  virtual ~CbmService_GetSysInfoListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoListByFields_result__isset {
  _CbmService_GetSysInfoListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoListByFields_result__isset;

class CbmService_GetSysInfoListByFields_result {
 public:

  CbmService_GetSysInfoListByFields_result(const CbmService_GetSysInfoListByFields_result&);
  CbmService_GetSysInfoListByFields_result& operator=(const CbmService_GetSysInfoListByFields_result&);
  CbmService_GetSysInfoListByFields_result() {
  }

  virtual ~CbmService_GetSysInfoListByFields_result() throw();
  std::vector<SysInfo>  success;

  _CbmService_GetSysInfoListByFields_result__isset __isset;

  void __set_success(const std::vector<SysInfo> & val);

  bool operator == (const CbmService_GetSysInfoListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoListByFields_presult__isset {
  _CbmService_GetSysInfoListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoListByFields_presult__isset;

class CbmService_GetSysInfoListByFields_presult {
 public:


  virtual ~CbmService_GetSysInfoListByFields_presult() throw();
  std::vector<SysInfo> * success;

  _CbmService_GetSysInfoListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetSysInfoListByFields1_args__isset {
  _CbmService_GetSysInfoListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetSysInfoListByFields1_args__isset;

class CbmService_GetSysInfoListByFields1_args {
 public:

  CbmService_GetSysInfoListByFields1_args(const CbmService_GetSysInfoListByFields1_args&);
  CbmService_GetSysInfoListByFields1_args& operator=(const CbmService_GetSysInfoListByFields1_args&);
  CbmService_GetSysInfoListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetSysInfoListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetSysInfoListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetSysInfoListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSysInfoListByFields1_pargs {
 public:


  virtual ~CbmService_GetSysInfoListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoListByFields1_result__isset {
  _CbmService_GetSysInfoListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoListByFields1_result__isset;

class CbmService_GetSysInfoListByFields1_result {
 public:

  CbmService_GetSysInfoListByFields1_result(const CbmService_GetSysInfoListByFields1_result&);
  CbmService_GetSysInfoListByFields1_result& operator=(const CbmService_GetSysInfoListByFields1_result&);
  CbmService_GetSysInfoListByFields1_result() {
  }

  virtual ~CbmService_GetSysInfoListByFields1_result() throw();
  std::vector<SysInfo>  success;

  _CbmService_GetSysInfoListByFields1_result__isset __isset;

  void __set_success(const std::vector<SysInfo> & val);

  bool operator == (const CbmService_GetSysInfoListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoListByFields1_presult__isset {
  _CbmService_GetSysInfoListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoListByFields1_presult__isset;

class CbmService_GetSysInfoListByFields1_presult {
 public:


  virtual ~CbmService_GetSysInfoListByFields1_presult() throw();
  std::vector<SysInfo> * success;

  _CbmService_GetSysInfoListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetSysInfoListByFields2_args__isset {
  _CbmService_GetSysInfoListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetSysInfoListByFields2_args__isset;

class CbmService_GetSysInfoListByFields2_args {
 public:

  CbmService_GetSysInfoListByFields2_args(const CbmService_GetSysInfoListByFields2_args&);
  CbmService_GetSysInfoListByFields2_args& operator=(const CbmService_GetSysInfoListByFields2_args&);
  CbmService_GetSysInfoListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetSysInfoListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetSysInfoListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetSysInfoListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSysInfoListByFields2_pargs {
 public:


  virtual ~CbmService_GetSysInfoListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoListByFields2_result__isset {
  _CbmService_GetSysInfoListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoListByFields2_result__isset;

class CbmService_GetSysInfoListByFields2_result {
 public:

  CbmService_GetSysInfoListByFields2_result(const CbmService_GetSysInfoListByFields2_result&);
  CbmService_GetSysInfoListByFields2_result& operator=(const CbmService_GetSysInfoListByFields2_result&);
  CbmService_GetSysInfoListByFields2_result() {
  }

  virtual ~CbmService_GetSysInfoListByFields2_result() throw();
  std::vector<SysInfo>  success;

  _CbmService_GetSysInfoListByFields2_result__isset __isset;

  void __set_success(const std::vector<SysInfo> & val);

  bool operator == (const CbmService_GetSysInfoListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSysInfoListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSysInfoListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSysInfoListByFields2_presult__isset {
  _CbmService_GetSysInfoListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSysInfoListByFields2_presult__isset;

class CbmService_GetSysInfoListByFields2_presult {
 public:


  virtual ~CbmService_GetSysInfoListByFields2_presult() throw();
  std::vector<SysInfo> * success;

  _CbmService_GetSysInfoListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddTechMode_args__isset {
  _CbmService_AddTechMode_args__isset() : tech_mode(false) {}
  bool tech_mode :1;
} _CbmService_AddTechMode_args__isset;

class CbmService_AddTechMode_args {
 public:

  CbmService_AddTechMode_args(const CbmService_AddTechMode_args&);
  CbmService_AddTechMode_args& operator=(const CbmService_AddTechMode_args&);
  CbmService_AddTechMode_args() {
  }

  virtual ~CbmService_AddTechMode_args() throw();
  TechMode tech_mode;

  _CbmService_AddTechMode_args__isset __isset;

  void __set_tech_mode(const TechMode& val);

  bool operator == (const CbmService_AddTechMode_args & rhs) const
  {
    if (!(tech_mode == rhs.tech_mode))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddTechMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddTechMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddTechMode_pargs {
 public:


  virtual ~CbmService_AddTechMode_pargs() throw();
  const TechMode* tech_mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddTechMode_result__isset {
  _CbmService_AddTechMode_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddTechMode_result__isset;

class CbmService_AddTechMode_result {
 public:

  CbmService_AddTechMode_result(const CbmService_AddTechMode_result&);
  CbmService_AddTechMode_result& operator=(const CbmService_AddTechMode_result&);
  CbmService_AddTechMode_result() : success(0) {
  }

  virtual ~CbmService_AddTechMode_result() throw();
  int32_t success;

  _CbmService_AddTechMode_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddTechMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddTechMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddTechMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddTechMode_presult__isset {
  _CbmService_AddTechMode_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddTechMode_presult__isset;

class CbmService_AddTechMode_presult {
 public:


  virtual ~CbmService_AddTechMode_presult() throw();
  int32_t* success;

  _CbmService_AddTechMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteTechMode_args__isset {
  _CbmService_DeleteTechMode_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteTechMode_args__isset;

class CbmService_DeleteTechMode_args {
 public:

  CbmService_DeleteTechMode_args(const CbmService_DeleteTechMode_args&);
  CbmService_DeleteTechMode_args& operator=(const CbmService_DeleteTechMode_args&);
  CbmService_DeleteTechMode_args() : id(0) {
  }

  virtual ~CbmService_DeleteTechMode_args() throw();
  int32_t id;

  _CbmService_DeleteTechMode_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteTechMode_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteTechMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteTechMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteTechMode_pargs {
 public:


  virtual ~CbmService_DeleteTechMode_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteTechMode_result__isset {
  _CbmService_DeleteTechMode_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteTechMode_result__isset;

class CbmService_DeleteTechMode_result {
 public:

  CbmService_DeleteTechMode_result(const CbmService_DeleteTechMode_result&);
  CbmService_DeleteTechMode_result& operator=(const CbmService_DeleteTechMode_result&);
  CbmService_DeleteTechMode_result() : success(0) {
  }

  virtual ~CbmService_DeleteTechMode_result() throw();
  bool success;

  _CbmService_DeleteTechMode_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteTechMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteTechMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteTechMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteTechMode_presult__isset {
  _CbmService_DeleteTechMode_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteTechMode_presult__isset;

class CbmService_DeleteTechMode_presult {
 public:


  virtual ~CbmService_DeleteTechMode_presult() throw();
  bool* success;

  _CbmService_DeleteTechMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateTechMode_args__isset {
  _CbmService_UpdateTechMode_args__isset() : tech_mode(false) {}
  bool tech_mode :1;
} _CbmService_UpdateTechMode_args__isset;

class CbmService_UpdateTechMode_args {
 public:

  CbmService_UpdateTechMode_args(const CbmService_UpdateTechMode_args&);
  CbmService_UpdateTechMode_args& operator=(const CbmService_UpdateTechMode_args&);
  CbmService_UpdateTechMode_args() {
  }

  virtual ~CbmService_UpdateTechMode_args() throw();
  TechMode tech_mode;

  _CbmService_UpdateTechMode_args__isset __isset;

  void __set_tech_mode(const TechMode& val);

  bool operator == (const CbmService_UpdateTechMode_args & rhs) const
  {
    if (!(tech_mode == rhs.tech_mode))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateTechMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateTechMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateTechMode_pargs {
 public:


  virtual ~CbmService_UpdateTechMode_pargs() throw();
  const TechMode* tech_mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateTechMode_result__isset {
  _CbmService_UpdateTechMode_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateTechMode_result__isset;

class CbmService_UpdateTechMode_result {
 public:

  CbmService_UpdateTechMode_result(const CbmService_UpdateTechMode_result&);
  CbmService_UpdateTechMode_result& operator=(const CbmService_UpdateTechMode_result&);
  CbmService_UpdateTechMode_result() : success(0) {
  }

  virtual ~CbmService_UpdateTechMode_result() throw();
  bool success;

  _CbmService_UpdateTechMode_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateTechMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateTechMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateTechMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateTechMode_presult__isset {
  _CbmService_UpdateTechMode_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateTechMode_presult__isset;

class CbmService_UpdateTechMode_presult {
 public:


  virtual ~CbmService_UpdateTechMode_presult() throw();
  bool* success;

  _CbmService_UpdateTechMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechModeById_args__isset {
  _CbmService_GetTechModeById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetTechModeById_args__isset;

class CbmService_GetTechModeById_args {
 public:

  CbmService_GetTechModeById_args(const CbmService_GetTechModeById_args&);
  CbmService_GetTechModeById_args& operator=(const CbmService_GetTechModeById_args&);
  CbmService_GetTechModeById_args() : id(0) {
  }

  virtual ~CbmService_GetTechModeById_args() throw();
  int32_t id;

  _CbmService_GetTechModeById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetTechModeById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechModeById_pargs {
 public:


  virtual ~CbmService_GetTechModeById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeById_result__isset {
  _CbmService_GetTechModeById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeById_result__isset;

class CbmService_GetTechModeById_result {
 public:

  CbmService_GetTechModeById_result(const CbmService_GetTechModeById_result&);
  CbmService_GetTechModeById_result& operator=(const CbmService_GetTechModeById_result&);
  CbmService_GetTechModeById_result() {
  }

  virtual ~CbmService_GetTechModeById_result() throw();
  TechMode success;

  _CbmService_GetTechModeById_result__isset __isset;

  void __set_success(const TechMode& val);

  bool operator == (const CbmService_GetTechModeById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeById_presult__isset {
  _CbmService_GetTechModeById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeById_presult__isset;

class CbmService_GetTechModeById_presult {
 public:


  virtual ~CbmService_GetTechModeById_presult() throw();
  TechMode* success;

  _CbmService_GetTechModeById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechModeByForeignKey_args__isset {
  _CbmService_GetTechModeByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetTechModeByForeignKey_args__isset;

class CbmService_GetTechModeByForeignKey_args {
 public:

  CbmService_GetTechModeByForeignKey_args(const CbmService_GetTechModeByForeignKey_args&);
  CbmService_GetTechModeByForeignKey_args& operator=(const CbmService_GetTechModeByForeignKey_args&);
  CbmService_GetTechModeByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetTechModeByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetTechModeByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetTechModeByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechModeByForeignKey_pargs {
 public:


  virtual ~CbmService_GetTechModeByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeByForeignKey_result__isset {
  _CbmService_GetTechModeByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeByForeignKey_result__isset;

class CbmService_GetTechModeByForeignKey_result {
 public:

  CbmService_GetTechModeByForeignKey_result(const CbmService_GetTechModeByForeignKey_result&);
  CbmService_GetTechModeByForeignKey_result& operator=(const CbmService_GetTechModeByForeignKey_result&);
  CbmService_GetTechModeByForeignKey_result() {
  }

  virtual ~CbmService_GetTechModeByForeignKey_result() throw();
  TechMode success;

  _CbmService_GetTechModeByForeignKey_result__isset __isset;

  void __set_success(const TechMode& val);

  bool operator == (const CbmService_GetTechModeByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeByForeignKey_presult__isset {
  _CbmService_GetTechModeByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeByForeignKey_presult__isset;

class CbmService_GetTechModeByForeignKey_presult {
 public:


  virtual ~CbmService_GetTechModeByForeignKey_presult() throw();
  TechMode* success;

  _CbmService_GetTechModeByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetTechModeList_args {
 public:

  CbmService_GetTechModeList_args(const CbmService_GetTechModeList_args&);
  CbmService_GetTechModeList_args& operator=(const CbmService_GetTechModeList_args&);
  CbmService_GetTechModeList_args() {
  }

  virtual ~CbmService_GetTechModeList_args() throw();

  bool operator == (const CbmService_GetTechModeList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetTechModeList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechModeList_pargs {
 public:


  virtual ~CbmService_GetTechModeList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeList_result__isset {
  _CbmService_GetTechModeList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeList_result__isset;

class CbmService_GetTechModeList_result {
 public:

  CbmService_GetTechModeList_result(const CbmService_GetTechModeList_result&);
  CbmService_GetTechModeList_result& operator=(const CbmService_GetTechModeList_result&);
  CbmService_GetTechModeList_result() {
  }

  virtual ~CbmService_GetTechModeList_result() throw();
  std::vector<TechMode>  success;

  _CbmService_GetTechModeList_result__isset __isset;

  void __set_success(const std::vector<TechMode> & val);

  bool operator == (const CbmService_GetTechModeList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeList_presult__isset {
  _CbmService_GetTechModeList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeList_presult__isset;

class CbmService_GetTechModeList_presult {
 public:


  virtual ~CbmService_GetTechModeList_presult() throw();
  std::vector<TechMode> * success;

  _CbmService_GetTechModeList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetTechModeIds_args {
 public:

  CbmService_GetTechModeIds_args(const CbmService_GetTechModeIds_args&);
  CbmService_GetTechModeIds_args& operator=(const CbmService_GetTechModeIds_args&);
  CbmService_GetTechModeIds_args() {
  }

  virtual ~CbmService_GetTechModeIds_args() throw();

  bool operator == (const CbmService_GetTechModeIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetTechModeIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechModeIds_pargs {
 public:


  virtual ~CbmService_GetTechModeIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeIds_result__isset {
  _CbmService_GetTechModeIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeIds_result__isset;

class CbmService_GetTechModeIds_result {
 public:

  CbmService_GetTechModeIds_result(const CbmService_GetTechModeIds_result&);
  CbmService_GetTechModeIds_result& operator=(const CbmService_GetTechModeIds_result&);
  CbmService_GetTechModeIds_result() {
  }

  virtual ~CbmService_GetTechModeIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetTechModeIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetTechModeIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeIds_presult__isset {
  _CbmService_GetTechModeIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeIds_presult__isset;

class CbmService_GetTechModeIds_presult {
 public:


  virtual ~CbmService_GetTechModeIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetTechModeIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetTechModeNames_args {
 public:

  CbmService_GetTechModeNames_args(const CbmService_GetTechModeNames_args&);
  CbmService_GetTechModeNames_args& operator=(const CbmService_GetTechModeNames_args&);
  CbmService_GetTechModeNames_args() {
  }

  virtual ~CbmService_GetTechModeNames_args() throw();

  bool operator == (const CbmService_GetTechModeNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetTechModeNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechModeNames_pargs {
 public:


  virtual ~CbmService_GetTechModeNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeNames_result__isset {
  _CbmService_GetTechModeNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeNames_result__isset;

class CbmService_GetTechModeNames_result {
 public:

  CbmService_GetTechModeNames_result(const CbmService_GetTechModeNames_result&);
  CbmService_GetTechModeNames_result& operator=(const CbmService_GetTechModeNames_result&);
  CbmService_GetTechModeNames_result() {
  }

  virtual ~CbmService_GetTechModeNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetTechModeNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetTechModeNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeNames_presult__isset {
  _CbmService_GetTechModeNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeNames_presult__isset;

class CbmService_GetTechModeNames_presult {
 public:


  virtual ~CbmService_GetTechModeNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetTechModeNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreTechMode_args__isset {
  _CbmService_AddMoreTechMode_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreTechMode_args__isset;

class CbmService_AddMoreTechMode_args {
 public:

  CbmService_AddMoreTechMode_args(const CbmService_AddMoreTechMode_args&);
  CbmService_AddMoreTechMode_args& operator=(const CbmService_AddMoreTechMode_args&);
  CbmService_AddMoreTechMode_args() {
  }

  virtual ~CbmService_AddMoreTechMode_args() throw();
  std::vector<TechMode>  objs;

  _CbmService_AddMoreTechMode_args__isset __isset;

  void __set_objs(const std::vector<TechMode> & val);

  bool operator == (const CbmService_AddMoreTechMode_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreTechMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreTechMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreTechMode_pargs {
 public:


  virtual ~CbmService_AddMoreTechMode_pargs() throw();
  const std::vector<TechMode> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreTechMode_result {
 public:

  CbmService_AddMoreTechMode_result(const CbmService_AddMoreTechMode_result&);
  CbmService_AddMoreTechMode_result& operator=(const CbmService_AddMoreTechMode_result&);
  CbmService_AddMoreTechMode_result() {
  }

  virtual ~CbmService_AddMoreTechMode_result() throw();

  bool operator == (const CbmService_AddMoreTechMode_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreTechMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreTechMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreTechMode_presult {
 public:


  virtual ~CbmService_AddMoreTechMode_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreTechMode_args__isset {
  _CbmService_DeleteMoreTechMode_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreTechMode_args__isset;

class CbmService_DeleteMoreTechMode_args {
 public:

  CbmService_DeleteMoreTechMode_args(const CbmService_DeleteMoreTechMode_args&);
  CbmService_DeleteMoreTechMode_args& operator=(const CbmService_DeleteMoreTechMode_args&);
  CbmService_DeleteMoreTechMode_args() {
  }

  virtual ~CbmService_DeleteMoreTechMode_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreTechMode_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreTechMode_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreTechMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreTechMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreTechMode_pargs {
 public:


  virtual ~CbmService_DeleteMoreTechMode_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreTechMode_result {
 public:

  CbmService_DeleteMoreTechMode_result(const CbmService_DeleteMoreTechMode_result&);
  CbmService_DeleteMoreTechMode_result& operator=(const CbmService_DeleteMoreTechMode_result&);
  CbmService_DeleteMoreTechMode_result() {
  }

  virtual ~CbmService_DeleteMoreTechMode_result() throw();

  bool operator == (const CbmService_DeleteMoreTechMode_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreTechMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreTechMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreTechMode_presult {
 public:


  virtual ~CbmService_DeleteMoreTechMode_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechModeByFields_args__isset {
  _CbmService_GetTechModeByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetTechModeByFields_args__isset;

class CbmService_GetTechModeByFields_args {
 public:

  CbmService_GetTechModeByFields_args(const CbmService_GetTechModeByFields_args&);
  CbmService_GetTechModeByFields_args& operator=(const CbmService_GetTechModeByFields_args&);
  CbmService_GetTechModeByFields_args() {
  }

  virtual ~CbmService_GetTechModeByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetTechModeByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetTechModeByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechModeByFields_pargs {
 public:


  virtual ~CbmService_GetTechModeByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeByFields_result__isset {
  _CbmService_GetTechModeByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeByFields_result__isset;

class CbmService_GetTechModeByFields_result {
 public:

  CbmService_GetTechModeByFields_result(const CbmService_GetTechModeByFields_result&);
  CbmService_GetTechModeByFields_result& operator=(const CbmService_GetTechModeByFields_result&);
  CbmService_GetTechModeByFields_result() {
  }

  virtual ~CbmService_GetTechModeByFields_result() throw();
  TechMode success;

  _CbmService_GetTechModeByFields_result__isset __isset;

  void __set_success(const TechMode& val);

  bool operator == (const CbmService_GetTechModeByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeByFields_presult__isset {
  _CbmService_GetTechModeByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeByFields_presult__isset;

class CbmService_GetTechModeByFields_presult {
 public:


  virtual ~CbmService_GetTechModeByFields_presult() throw();
  TechMode* success;

  _CbmService_GetTechModeByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechModeByFields1_args__isset {
  _CbmService_GetTechModeByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetTechModeByFields1_args__isset;

class CbmService_GetTechModeByFields1_args {
 public:

  CbmService_GetTechModeByFields1_args(const CbmService_GetTechModeByFields1_args&);
  CbmService_GetTechModeByFields1_args& operator=(const CbmService_GetTechModeByFields1_args&);
  CbmService_GetTechModeByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetTechModeByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetTechModeByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetTechModeByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechModeByFields1_pargs {
 public:


  virtual ~CbmService_GetTechModeByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeByFields1_result__isset {
  _CbmService_GetTechModeByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeByFields1_result__isset;

class CbmService_GetTechModeByFields1_result {
 public:

  CbmService_GetTechModeByFields1_result(const CbmService_GetTechModeByFields1_result&);
  CbmService_GetTechModeByFields1_result& operator=(const CbmService_GetTechModeByFields1_result&);
  CbmService_GetTechModeByFields1_result() {
  }

  virtual ~CbmService_GetTechModeByFields1_result() throw();
  TechMode success;

  _CbmService_GetTechModeByFields1_result__isset __isset;

  void __set_success(const TechMode& val);

  bool operator == (const CbmService_GetTechModeByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeByFields1_presult__isset {
  _CbmService_GetTechModeByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeByFields1_presult__isset;

class CbmService_GetTechModeByFields1_presult {
 public:


  virtual ~CbmService_GetTechModeByFields1_presult() throw();
  TechMode* success;

  _CbmService_GetTechModeByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechModeByFields2_args__isset {
  _CbmService_GetTechModeByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetTechModeByFields2_args__isset;

class CbmService_GetTechModeByFields2_args {
 public:

  CbmService_GetTechModeByFields2_args(const CbmService_GetTechModeByFields2_args&);
  CbmService_GetTechModeByFields2_args& operator=(const CbmService_GetTechModeByFields2_args&);
  CbmService_GetTechModeByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetTechModeByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetTechModeByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetTechModeByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechModeByFields2_pargs {
 public:


  virtual ~CbmService_GetTechModeByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeByFields2_result__isset {
  _CbmService_GetTechModeByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeByFields2_result__isset;

class CbmService_GetTechModeByFields2_result {
 public:

  CbmService_GetTechModeByFields2_result(const CbmService_GetTechModeByFields2_result&);
  CbmService_GetTechModeByFields2_result& operator=(const CbmService_GetTechModeByFields2_result&);
  CbmService_GetTechModeByFields2_result() {
  }

  virtual ~CbmService_GetTechModeByFields2_result() throw();
  TechMode success;

  _CbmService_GetTechModeByFields2_result__isset __isset;

  void __set_success(const TechMode& val);

  bool operator == (const CbmService_GetTechModeByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeByFields2_presult__isset {
  _CbmService_GetTechModeByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeByFields2_presult__isset;

class CbmService_GetTechModeByFields2_presult {
 public:


  virtual ~CbmService_GetTechModeByFields2_presult() throw();
  TechMode* success;

  _CbmService_GetTechModeByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechModeListByFields_args__isset {
  _CbmService_GetTechModeListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetTechModeListByFields_args__isset;

class CbmService_GetTechModeListByFields_args {
 public:

  CbmService_GetTechModeListByFields_args(const CbmService_GetTechModeListByFields_args&);
  CbmService_GetTechModeListByFields_args& operator=(const CbmService_GetTechModeListByFields_args&);
  CbmService_GetTechModeListByFields_args() {
  }

  virtual ~CbmService_GetTechModeListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetTechModeListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetTechModeListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechModeListByFields_pargs {
 public:


  virtual ~CbmService_GetTechModeListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeListByFields_result__isset {
  _CbmService_GetTechModeListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeListByFields_result__isset;

class CbmService_GetTechModeListByFields_result {
 public:

  CbmService_GetTechModeListByFields_result(const CbmService_GetTechModeListByFields_result&);
  CbmService_GetTechModeListByFields_result& operator=(const CbmService_GetTechModeListByFields_result&);
  CbmService_GetTechModeListByFields_result() {
  }

  virtual ~CbmService_GetTechModeListByFields_result() throw();
  std::vector<TechMode>  success;

  _CbmService_GetTechModeListByFields_result__isset __isset;

  void __set_success(const std::vector<TechMode> & val);

  bool operator == (const CbmService_GetTechModeListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeListByFields_presult__isset {
  _CbmService_GetTechModeListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeListByFields_presult__isset;

class CbmService_GetTechModeListByFields_presult {
 public:


  virtual ~CbmService_GetTechModeListByFields_presult() throw();
  std::vector<TechMode> * success;

  _CbmService_GetTechModeListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechModeListByFields1_args__isset {
  _CbmService_GetTechModeListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetTechModeListByFields1_args__isset;

class CbmService_GetTechModeListByFields1_args {
 public:

  CbmService_GetTechModeListByFields1_args(const CbmService_GetTechModeListByFields1_args&);
  CbmService_GetTechModeListByFields1_args& operator=(const CbmService_GetTechModeListByFields1_args&);
  CbmService_GetTechModeListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetTechModeListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetTechModeListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetTechModeListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechModeListByFields1_pargs {
 public:


  virtual ~CbmService_GetTechModeListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeListByFields1_result__isset {
  _CbmService_GetTechModeListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeListByFields1_result__isset;

class CbmService_GetTechModeListByFields1_result {
 public:

  CbmService_GetTechModeListByFields1_result(const CbmService_GetTechModeListByFields1_result&);
  CbmService_GetTechModeListByFields1_result& operator=(const CbmService_GetTechModeListByFields1_result&);
  CbmService_GetTechModeListByFields1_result() {
  }

  virtual ~CbmService_GetTechModeListByFields1_result() throw();
  std::vector<TechMode>  success;

  _CbmService_GetTechModeListByFields1_result__isset __isset;

  void __set_success(const std::vector<TechMode> & val);

  bool operator == (const CbmService_GetTechModeListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeListByFields1_presult__isset {
  _CbmService_GetTechModeListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeListByFields1_presult__isset;

class CbmService_GetTechModeListByFields1_presult {
 public:


  virtual ~CbmService_GetTechModeListByFields1_presult() throw();
  std::vector<TechMode> * success;

  _CbmService_GetTechModeListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechModeListByFields2_args__isset {
  _CbmService_GetTechModeListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetTechModeListByFields2_args__isset;

class CbmService_GetTechModeListByFields2_args {
 public:

  CbmService_GetTechModeListByFields2_args(const CbmService_GetTechModeListByFields2_args&);
  CbmService_GetTechModeListByFields2_args& operator=(const CbmService_GetTechModeListByFields2_args&);
  CbmService_GetTechModeListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetTechModeListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetTechModeListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetTechModeListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechModeListByFields2_pargs {
 public:


  virtual ~CbmService_GetTechModeListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeListByFields2_result__isset {
  _CbmService_GetTechModeListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeListByFields2_result__isset;

class CbmService_GetTechModeListByFields2_result {
 public:

  CbmService_GetTechModeListByFields2_result(const CbmService_GetTechModeListByFields2_result&);
  CbmService_GetTechModeListByFields2_result& operator=(const CbmService_GetTechModeListByFields2_result&);
  CbmService_GetTechModeListByFields2_result() {
  }

  virtual ~CbmService_GetTechModeListByFields2_result() throw();
  std::vector<TechMode>  success;

  _CbmService_GetTechModeListByFields2_result__isset __isset;

  void __set_success(const std::vector<TechMode> & val);

  bool operator == (const CbmService_GetTechModeListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechModeListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechModeListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechModeListByFields2_presult__isset {
  _CbmService_GetTechModeListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechModeListByFields2_presult__isset;

class CbmService_GetTechModeListByFields2_presult {
 public:


  virtual ~CbmService_GetTechModeListByFields2_presult() throw();
  std::vector<TechMode> * success;

  _CbmService_GetTechModeListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddTechnology_args__isset {
  _CbmService_AddTechnology_args__isset() : technology(false) {}
  bool technology :1;
} _CbmService_AddTechnology_args__isset;

class CbmService_AddTechnology_args {
 public:

  CbmService_AddTechnology_args(const CbmService_AddTechnology_args&);
  CbmService_AddTechnology_args& operator=(const CbmService_AddTechnology_args&);
  CbmService_AddTechnology_args() {
  }

  virtual ~CbmService_AddTechnology_args() throw();
  Technology technology;

  _CbmService_AddTechnology_args__isset __isset;

  void __set_technology(const Technology& val);

  bool operator == (const CbmService_AddTechnology_args & rhs) const
  {
    if (!(technology == rhs.technology))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddTechnology_pargs {
 public:


  virtual ~CbmService_AddTechnology_pargs() throw();
  const Technology* technology;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddTechnology_result__isset {
  _CbmService_AddTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddTechnology_result__isset;

class CbmService_AddTechnology_result {
 public:

  CbmService_AddTechnology_result(const CbmService_AddTechnology_result&);
  CbmService_AddTechnology_result& operator=(const CbmService_AddTechnology_result&);
  CbmService_AddTechnology_result() : success(0) {
  }

  virtual ~CbmService_AddTechnology_result() throw();
  int32_t success;

  _CbmService_AddTechnology_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddTechnology_presult__isset {
  _CbmService_AddTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddTechnology_presult__isset;

class CbmService_AddTechnology_presult {
 public:


  virtual ~CbmService_AddTechnology_presult() throw();
  int32_t* success;

  _CbmService_AddTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteTechnology_args__isset {
  _CbmService_DeleteTechnology_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteTechnology_args__isset;

class CbmService_DeleteTechnology_args {
 public:

  CbmService_DeleteTechnology_args(const CbmService_DeleteTechnology_args&);
  CbmService_DeleteTechnology_args& operator=(const CbmService_DeleteTechnology_args&);
  CbmService_DeleteTechnology_args() : id(0) {
  }

  virtual ~CbmService_DeleteTechnology_args() throw();
  int32_t id;

  _CbmService_DeleteTechnology_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteTechnology_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteTechnology_pargs {
 public:


  virtual ~CbmService_DeleteTechnology_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteTechnology_result__isset {
  _CbmService_DeleteTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteTechnology_result__isset;

class CbmService_DeleteTechnology_result {
 public:

  CbmService_DeleteTechnology_result(const CbmService_DeleteTechnology_result&);
  CbmService_DeleteTechnology_result& operator=(const CbmService_DeleteTechnology_result&);
  CbmService_DeleteTechnology_result() : success(0) {
  }

  virtual ~CbmService_DeleteTechnology_result() throw();
  bool success;

  _CbmService_DeleteTechnology_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteTechnology_presult__isset {
  _CbmService_DeleteTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteTechnology_presult__isset;

class CbmService_DeleteTechnology_presult {
 public:


  virtual ~CbmService_DeleteTechnology_presult() throw();
  bool* success;

  _CbmService_DeleteTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateTechnology_args__isset {
  _CbmService_UpdateTechnology_args__isset() : technology(false) {}
  bool technology :1;
} _CbmService_UpdateTechnology_args__isset;

class CbmService_UpdateTechnology_args {
 public:

  CbmService_UpdateTechnology_args(const CbmService_UpdateTechnology_args&);
  CbmService_UpdateTechnology_args& operator=(const CbmService_UpdateTechnology_args&);
  CbmService_UpdateTechnology_args() {
  }

  virtual ~CbmService_UpdateTechnology_args() throw();
  Technology technology;

  _CbmService_UpdateTechnology_args__isset __isset;

  void __set_technology(const Technology& val);

  bool operator == (const CbmService_UpdateTechnology_args & rhs) const
  {
    if (!(technology == rhs.technology))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateTechnology_pargs {
 public:


  virtual ~CbmService_UpdateTechnology_pargs() throw();
  const Technology* technology;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateTechnology_result__isset {
  _CbmService_UpdateTechnology_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateTechnology_result__isset;

class CbmService_UpdateTechnology_result {
 public:

  CbmService_UpdateTechnology_result(const CbmService_UpdateTechnology_result&);
  CbmService_UpdateTechnology_result& operator=(const CbmService_UpdateTechnology_result&);
  CbmService_UpdateTechnology_result() : success(0) {
  }

  virtual ~CbmService_UpdateTechnology_result() throw();
  bool success;

  _CbmService_UpdateTechnology_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateTechnology_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateTechnology_presult__isset {
  _CbmService_UpdateTechnology_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateTechnology_presult__isset;

class CbmService_UpdateTechnology_presult {
 public:


  virtual ~CbmService_UpdateTechnology_presult() throw();
  bool* success;

  _CbmService_UpdateTechnology_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechnologyById_args__isset {
  _CbmService_GetTechnologyById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetTechnologyById_args__isset;

class CbmService_GetTechnologyById_args {
 public:

  CbmService_GetTechnologyById_args(const CbmService_GetTechnologyById_args&);
  CbmService_GetTechnologyById_args& operator=(const CbmService_GetTechnologyById_args&);
  CbmService_GetTechnologyById_args() : id(0) {
  }

  virtual ~CbmService_GetTechnologyById_args() throw();
  int32_t id;

  _CbmService_GetTechnologyById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetTechnologyById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechnologyById_pargs {
 public:


  virtual ~CbmService_GetTechnologyById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyById_result__isset {
  _CbmService_GetTechnologyById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyById_result__isset;

class CbmService_GetTechnologyById_result {
 public:

  CbmService_GetTechnologyById_result(const CbmService_GetTechnologyById_result&);
  CbmService_GetTechnologyById_result& operator=(const CbmService_GetTechnologyById_result&);
  CbmService_GetTechnologyById_result() {
  }

  virtual ~CbmService_GetTechnologyById_result() throw();
  Technology success;

  _CbmService_GetTechnologyById_result__isset __isset;

  void __set_success(const Technology& val);

  bool operator == (const CbmService_GetTechnologyById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyById_presult__isset {
  _CbmService_GetTechnologyById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyById_presult__isset;

class CbmService_GetTechnologyById_presult {
 public:


  virtual ~CbmService_GetTechnologyById_presult() throw();
  Technology* success;

  _CbmService_GetTechnologyById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechnologyByForeignKey_args__isset {
  _CbmService_GetTechnologyByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetTechnologyByForeignKey_args__isset;

class CbmService_GetTechnologyByForeignKey_args {
 public:

  CbmService_GetTechnologyByForeignKey_args(const CbmService_GetTechnologyByForeignKey_args&);
  CbmService_GetTechnologyByForeignKey_args& operator=(const CbmService_GetTechnologyByForeignKey_args&);
  CbmService_GetTechnologyByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetTechnologyByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetTechnologyByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetTechnologyByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechnologyByForeignKey_pargs {
 public:


  virtual ~CbmService_GetTechnologyByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyByForeignKey_result__isset {
  _CbmService_GetTechnologyByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyByForeignKey_result__isset;

class CbmService_GetTechnologyByForeignKey_result {
 public:

  CbmService_GetTechnologyByForeignKey_result(const CbmService_GetTechnologyByForeignKey_result&);
  CbmService_GetTechnologyByForeignKey_result& operator=(const CbmService_GetTechnologyByForeignKey_result&);
  CbmService_GetTechnologyByForeignKey_result() {
  }

  virtual ~CbmService_GetTechnologyByForeignKey_result() throw();
  Technology success;

  _CbmService_GetTechnologyByForeignKey_result__isset __isset;

  void __set_success(const Technology& val);

  bool operator == (const CbmService_GetTechnologyByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyByForeignKey_presult__isset {
  _CbmService_GetTechnologyByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyByForeignKey_presult__isset;

class CbmService_GetTechnologyByForeignKey_presult {
 public:


  virtual ~CbmService_GetTechnologyByForeignKey_presult() throw();
  Technology* success;

  _CbmService_GetTechnologyByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetTechnologyList_args {
 public:

  CbmService_GetTechnologyList_args(const CbmService_GetTechnologyList_args&);
  CbmService_GetTechnologyList_args& operator=(const CbmService_GetTechnologyList_args&);
  CbmService_GetTechnologyList_args() {
  }

  virtual ~CbmService_GetTechnologyList_args() throw();

  bool operator == (const CbmService_GetTechnologyList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetTechnologyList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechnologyList_pargs {
 public:


  virtual ~CbmService_GetTechnologyList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyList_result__isset {
  _CbmService_GetTechnologyList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyList_result__isset;

class CbmService_GetTechnologyList_result {
 public:

  CbmService_GetTechnologyList_result(const CbmService_GetTechnologyList_result&);
  CbmService_GetTechnologyList_result& operator=(const CbmService_GetTechnologyList_result&);
  CbmService_GetTechnologyList_result() {
  }

  virtual ~CbmService_GetTechnologyList_result() throw();
  std::vector<Technology>  success;

  _CbmService_GetTechnologyList_result__isset __isset;

  void __set_success(const std::vector<Technology> & val);

  bool operator == (const CbmService_GetTechnologyList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyList_presult__isset {
  _CbmService_GetTechnologyList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyList_presult__isset;

class CbmService_GetTechnologyList_presult {
 public:


  virtual ~CbmService_GetTechnologyList_presult() throw();
  std::vector<Technology> * success;

  _CbmService_GetTechnologyList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetTechnologyIds_args {
 public:

  CbmService_GetTechnologyIds_args(const CbmService_GetTechnologyIds_args&);
  CbmService_GetTechnologyIds_args& operator=(const CbmService_GetTechnologyIds_args&);
  CbmService_GetTechnologyIds_args() {
  }

  virtual ~CbmService_GetTechnologyIds_args() throw();

  bool operator == (const CbmService_GetTechnologyIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetTechnologyIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechnologyIds_pargs {
 public:


  virtual ~CbmService_GetTechnologyIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyIds_result__isset {
  _CbmService_GetTechnologyIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyIds_result__isset;

class CbmService_GetTechnologyIds_result {
 public:

  CbmService_GetTechnologyIds_result(const CbmService_GetTechnologyIds_result&);
  CbmService_GetTechnologyIds_result& operator=(const CbmService_GetTechnologyIds_result&);
  CbmService_GetTechnologyIds_result() {
  }

  virtual ~CbmService_GetTechnologyIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetTechnologyIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetTechnologyIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyIds_presult__isset {
  _CbmService_GetTechnologyIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyIds_presult__isset;

class CbmService_GetTechnologyIds_presult {
 public:


  virtual ~CbmService_GetTechnologyIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetTechnologyIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetTechnologyNames_args {
 public:

  CbmService_GetTechnologyNames_args(const CbmService_GetTechnologyNames_args&);
  CbmService_GetTechnologyNames_args& operator=(const CbmService_GetTechnologyNames_args&);
  CbmService_GetTechnologyNames_args() {
  }

  virtual ~CbmService_GetTechnologyNames_args() throw();

  bool operator == (const CbmService_GetTechnologyNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetTechnologyNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechnologyNames_pargs {
 public:


  virtual ~CbmService_GetTechnologyNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyNames_result__isset {
  _CbmService_GetTechnologyNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyNames_result__isset;

class CbmService_GetTechnologyNames_result {
 public:

  CbmService_GetTechnologyNames_result(const CbmService_GetTechnologyNames_result&);
  CbmService_GetTechnologyNames_result& operator=(const CbmService_GetTechnologyNames_result&);
  CbmService_GetTechnologyNames_result() {
  }

  virtual ~CbmService_GetTechnologyNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetTechnologyNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetTechnologyNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyNames_presult__isset {
  _CbmService_GetTechnologyNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyNames_presult__isset;

class CbmService_GetTechnologyNames_presult {
 public:


  virtual ~CbmService_GetTechnologyNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetTechnologyNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreTechnology_args__isset {
  _CbmService_AddMoreTechnology_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreTechnology_args__isset;

class CbmService_AddMoreTechnology_args {
 public:

  CbmService_AddMoreTechnology_args(const CbmService_AddMoreTechnology_args&);
  CbmService_AddMoreTechnology_args& operator=(const CbmService_AddMoreTechnology_args&);
  CbmService_AddMoreTechnology_args() {
  }

  virtual ~CbmService_AddMoreTechnology_args() throw();
  std::vector<Technology>  objs;

  _CbmService_AddMoreTechnology_args__isset __isset;

  void __set_objs(const std::vector<Technology> & val);

  bool operator == (const CbmService_AddMoreTechnology_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreTechnology_pargs {
 public:


  virtual ~CbmService_AddMoreTechnology_pargs() throw();
  const std::vector<Technology> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreTechnology_result {
 public:

  CbmService_AddMoreTechnology_result(const CbmService_AddMoreTechnology_result&);
  CbmService_AddMoreTechnology_result& operator=(const CbmService_AddMoreTechnology_result&);
  CbmService_AddMoreTechnology_result() {
  }

  virtual ~CbmService_AddMoreTechnology_result() throw();

  bool operator == (const CbmService_AddMoreTechnology_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreTechnology_presult {
 public:


  virtual ~CbmService_AddMoreTechnology_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreTechnology_args__isset {
  _CbmService_DeleteMoreTechnology_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreTechnology_args__isset;

class CbmService_DeleteMoreTechnology_args {
 public:

  CbmService_DeleteMoreTechnology_args(const CbmService_DeleteMoreTechnology_args&);
  CbmService_DeleteMoreTechnology_args& operator=(const CbmService_DeleteMoreTechnology_args&);
  CbmService_DeleteMoreTechnology_args() {
  }

  virtual ~CbmService_DeleteMoreTechnology_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreTechnology_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreTechnology_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreTechnology_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreTechnology_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreTechnology_pargs {
 public:


  virtual ~CbmService_DeleteMoreTechnology_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreTechnology_result {
 public:

  CbmService_DeleteMoreTechnology_result(const CbmService_DeleteMoreTechnology_result&);
  CbmService_DeleteMoreTechnology_result& operator=(const CbmService_DeleteMoreTechnology_result&);
  CbmService_DeleteMoreTechnology_result() {
  }

  virtual ~CbmService_DeleteMoreTechnology_result() throw();

  bool operator == (const CbmService_DeleteMoreTechnology_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreTechnology_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreTechnology_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreTechnology_presult {
 public:


  virtual ~CbmService_DeleteMoreTechnology_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechnologyByFields_args__isset {
  _CbmService_GetTechnologyByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetTechnologyByFields_args__isset;

class CbmService_GetTechnologyByFields_args {
 public:

  CbmService_GetTechnologyByFields_args(const CbmService_GetTechnologyByFields_args&);
  CbmService_GetTechnologyByFields_args& operator=(const CbmService_GetTechnologyByFields_args&);
  CbmService_GetTechnologyByFields_args() {
  }

  virtual ~CbmService_GetTechnologyByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetTechnologyByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetTechnologyByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechnologyByFields_pargs {
 public:


  virtual ~CbmService_GetTechnologyByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyByFields_result__isset {
  _CbmService_GetTechnologyByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyByFields_result__isset;

class CbmService_GetTechnologyByFields_result {
 public:

  CbmService_GetTechnologyByFields_result(const CbmService_GetTechnologyByFields_result&);
  CbmService_GetTechnologyByFields_result& operator=(const CbmService_GetTechnologyByFields_result&);
  CbmService_GetTechnologyByFields_result() {
  }

  virtual ~CbmService_GetTechnologyByFields_result() throw();
  Technology success;

  _CbmService_GetTechnologyByFields_result__isset __isset;

  void __set_success(const Technology& val);

  bool operator == (const CbmService_GetTechnologyByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyByFields_presult__isset {
  _CbmService_GetTechnologyByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyByFields_presult__isset;

class CbmService_GetTechnologyByFields_presult {
 public:


  virtual ~CbmService_GetTechnologyByFields_presult() throw();
  Technology* success;

  _CbmService_GetTechnologyByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechnologyByFields1_args__isset {
  _CbmService_GetTechnologyByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetTechnologyByFields1_args__isset;

class CbmService_GetTechnologyByFields1_args {
 public:

  CbmService_GetTechnologyByFields1_args(const CbmService_GetTechnologyByFields1_args&);
  CbmService_GetTechnologyByFields1_args& operator=(const CbmService_GetTechnologyByFields1_args&);
  CbmService_GetTechnologyByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetTechnologyByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetTechnologyByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetTechnologyByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechnologyByFields1_pargs {
 public:


  virtual ~CbmService_GetTechnologyByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyByFields1_result__isset {
  _CbmService_GetTechnologyByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyByFields1_result__isset;

class CbmService_GetTechnologyByFields1_result {
 public:

  CbmService_GetTechnologyByFields1_result(const CbmService_GetTechnologyByFields1_result&);
  CbmService_GetTechnologyByFields1_result& operator=(const CbmService_GetTechnologyByFields1_result&);
  CbmService_GetTechnologyByFields1_result() {
  }

  virtual ~CbmService_GetTechnologyByFields1_result() throw();
  Technology success;

  _CbmService_GetTechnologyByFields1_result__isset __isset;

  void __set_success(const Technology& val);

  bool operator == (const CbmService_GetTechnologyByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyByFields1_presult__isset {
  _CbmService_GetTechnologyByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyByFields1_presult__isset;

class CbmService_GetTechnologyByFields1_presult {
 public:


  virtual ~CbmService_GetTechnologyByFields1_presult() throw();
  Technology* success;

  _CbmService_GetTechnologyByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechnologyByFields2_args__isset {
  _CbmService_GetTechnologyByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetTechnologyByFields2_args__isset;

class CbmService_GetTechnologyByFields2_args {
 public:

  CbmService_GetTechnologyByFields2_args(const CbmService_GetTechnologyByFields2_args&);
  CbmService_GetTechnologyByFields2_args& operator=(const CbmService_GetTechnologyByFields2_args&);
  CbmService_GetTechnologyByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetTechnologyByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetTechnologyByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetTechnologyByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechnologyByFields2_pargs {
 public:


  virtual ~CbmService_GetTechnologyByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyByFields2_result__isset {
  _CbmService_GetTechnologyByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyByFields2_result__isset;

class CbmService_GetTechnologyByFields2_result {
 public:

  CbmService_GetTechnologyByFields2_result(const CbmService_GetTechnologyByFields2_result&);
  CbmService_GetTechnologyByFields2_result& operator=(const CbmService_GetTechnologyByFields2_result&);
  CbmService_GetTechnologyByFields2_result() {
  }

  virtual ~CbmService_GetTechnologyByFields2_result() throw();
  Technology success;

  _CbmService_GetTechnologyByFields2_result__isset __isset;

  void __set_success(const Technology& val);

  bool operator == (const CbmService_GetTechnologyByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyByFields2_presult__isset {
  _CbmService_GetTechnologyByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyByFields2_presult__isset;

class CbmService_GetTechnologyByFields2_presult {
 public:


  virtual ~CbmService_GetTechnologyByFields2_presult() throw();
  Technology* success;

  _CbmService_GetTechnologyByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechnologyListByFields_args__isset {
  _CbmService_GetTechnologyListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetTechnologyListByFields_args__isset;

class CbmService_GetTechnologyListByFields_args {
 public:

  CbmService_GetTechnologyListByFields_args(const CbmService_GetTechnologyListByFields_args&);
  CbmService_GetTechnologyListByFields_args& operator=(const CbmService_GetTechnologyListByFields_args&);
  CbmService_GetTechnologyListByFields_args() {
  }

  virtual ~CbmService_GetTechnologyListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetTechnologyListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetTechnologyListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechnologyListByFields_pargs {
 public:


  virtual ~CbmService_GetTechnologyListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyListByFields_result__isset {
  _CbmService_GetTechnologyListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyListByFields_result__isset;

class CbmService_GetTechnologyListByFields_result {
 public:

  CbmService_GetTechnologyListByFields_result(const CbmService_GetTechnologyListByFields_result&);
  CbmService_GetTechnologyListByFields_result& operator=(const CbmService_GetTechnologyListByFields_result&);
  CbmService_GetTechnologyListByFields_result() {
  }

  virtual ~CbmService_GetTechnologyListByFields_result() throw();
  std::vector<Technology>  success;

  _CbmService_GetTechnologyListByFields_result__isset __isset;

  void __set_success(const std::vector<Technology> & val);

  bool operator == (const CbmService_GetTechnologyListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyListByFields_presult__isset {
  _CbmService_GetTechnologyListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyListByFields_presult__isset;

class CbmService_GetTechnologyListByFields_presult {
 public:


  virtual ~CbmService_GetTechnologyListByFields_presult() throw();
  std::vector<Technology> * success;

  _CbmService_GetTechnologyListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechnologyListByFields1_args__isset {
  _CbmService_GetTechnologyListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetTechnologyListByFields1_args__isset;

class CbmService_GetTechnologyListByFields1_args {
 public:

  CbmService_GetTechnologyListByFields1_args(const CbmService_GetTechnologyListByFields1_args&);
  CbmService_GetTechnologyListByFields1_args& operator=(const CbmService_GetTechnologyListByFields1_args&);
  CbmService_GetTechnologyListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetTechnologyListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetTechnologyListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetTechnologyListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechnologyListByFields1_pargs {
 public:


  virtual ~CbmService_GetTechnologyListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyListByFields1_result__isset {
  _CbmService_GetTechnologyListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyListByFields1_result__isset;

class CbmService_GetTechnologyListByFields1_result {
 public:

  CbmService_GetTechnologyListByFields1_result(const CbmService_GetTechnologyListByFields1_result&);
  CbmService_GetTechnologyListByFields1_result& operator=(const CbmService_GetTechnologyListByFields1_result&);
  CbmService_GetTechnologyListByFields1_result() {
  }

  virtual ~CbmService_GetTechnologyListByFields1_result() throw();
  std::vector<Technology>  success;

  _CbmService_GetTechnologyListByFields1_result__isset __isset;

  void __set_success(const std::vector<Technology> & val);

  bool operator == (const CbmService_GetTechnologyListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyListByFields1_presult__isset {
  _CbmService_GetTechnologyListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyListByFields1_presult__isset;

class CbmService_GetTechnologyListByFields1_presult {
 public:


  virtual ~CbmService_GetTechnologyListByFields1_presult() throw();
  std::vector<Technology> * success;

  _CbmService_GetTechnologyListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTechnologyListByFields2_args__isset {
  _CbmService_GetTechnologyListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetTechnologyListByFields2_args__isset;

class CbmService_GetTechnologyListByFields2_args {
 public:

  CbmService_GetTechnologyListByFields2_args(const CbmService_GetTechnologyListByFields2_args&);
  CbmService_GetTechnologyListByFields2_args& operator=(const CbmService_GetTechnologyListByFields2_args&);
  CbmService_GetTechnologyListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetTechnologyListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetTechnologyListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetTechnologyListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTechnologyListByFields2_pargs {
 public:


  virtual ~CbmService_GetTechnologyListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyListByFields2_result__isset {
  _CbmService_GetTechnologyListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyListByFields2_result__isset;

class CbmService_GetTechnologyListByFields2_result {
 public:

  CbmService_GetTechnologyListByFields2_result(const CbmService_GetTechnologyListByFields2_result&);
  CbmService_GetTechnologyListByFields2_result& operator=(const CbmService_GetTechnologyListByFields2_result&);
  CbmService_GetTechnologyListByFields2_result() {
  }

  virtual ~CbmService_GetTechnologyListByFields2_result() throw();
  std::vector<Technology>  success;

  _CbmService_GetTechnologyListByFields2_result__isset __isset;

  void __set_success(const std::vector<Technology> & val);

  bool operator == (const CbmService_GetTechnologyListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTechnologyListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTechnologyListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTechnologyListByFields2_presult__isset {
  _CbmService_GetTechnologyListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTechnologyListByFields2_presult__isset;

class CbmService_GetTechnologyListByFields2_presult {
 public:


  virtual ~CbmService_GetTechnologyListByFields2_presult() throw();
  std::vector<Technology> * success;

  _CbmService_GetTechnologyListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddTopoGeo_args__isset {
  _CbmService_AddTopoGeo_args__isset() : topo_geo(false) {}
  bool topo_geo :1;
} _CbmService_AddTopoGeo_args__isset;

class CbmService_AddTopoGeo_args {
 public:

  CbmService_AddTopoGeo_args(const CbmService_AddTopoGeo_args&);
  CbmService_AddTopoGeo_args& operator=(const CbmService_AddTopoGeo_args&);
  CbmService_AddTopoGeo_args() {
  }

  virtual ~CbmService_AddTopoGeo_args() throw();
  TopoGeo topo_geo;

  _CbmService_AddTopoGeo_args__isset __isset;

  void __set_topo_geo(const TopoGeo& val);

  bool operator == (const CbmService_AddTopoGeo_args & rhs) const
  {
    if (!(topo_geo == rhs.topo_geo))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddTopoGeo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddTopoGeo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddTopoGeo_pargs {
 public:


  virtual ~CbmService_AddTopoGeo_pargs() throw();
  const TopoGeo* topo_geo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddTopoGeo_result__isset {
  _CbmService_AddTopoGeo_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddTopoGeo_result__isset;

class CbmService_AddTopoGeo_result {
 public:

  CbmService_AddTopoGeo_result(const CbmService_AddTopoGeo_result&);
  CbmService_AddTopoGeo_result& operator=(const CbmService_AddTopoGeo_result&);
  CbmService_AddTopoGeo_result() : success(0) {
  }

  virtual ~CbmService_AddTopoGeo_result() throw();
  int32_t success;

  _CbmService_AddTopoGeo_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddTopoGeo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddTopoGeo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddTopoGeo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddTopoGeo_presult__isset {
  _CbmService_AddTopoGeo_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddTopoGeo_presult__isset;

class CbmService_AddTopoGeo_presult {
 public:


  virtual ~CbmService_AddTopoGeo_presult() throw();
  int32_t* success;

  _CbmService_AddTopoGeo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteTopoGeo_args__isset {
  _CbmService_DeleteTopoGeo_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteTopoGeo_args__isset;

class CbmService_DeleteTopoGeo_args {
 public:

  CbmService_DeleteTopoGeo_args(const CbmService_DeleteTopoGeo_args&);
  CbmService_DeleteTopoGeo_args& operator=(const CbmService_DeleteTopoGeo_args&);
  CbmService_DeleteTopoGeo_args() : id(0) {
  }

  virtual ~CbmService_DeleteTopoGeo_args() throw();
  int32_t id;

  _CbmService_DeleteTopoGeo_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteTopoGeo_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteTopoGeo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteTopoGeo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteTopoGeo_pargs {
 public:


  virtual ~CbmService_DeleteTopoGeo_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteTopoGeo_result__isset {
  _CbmService_DeleteTopoGeo_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteTopoGeo_result__isset;

class CbmService_DeleteTopoGeo_result {
 public:

  CbmService_DeleteTopoGeo_result(const CbmService_DeleteTopoGeo_result&);
  CbmService_DeleteTopoGeo_result& operator=(const CbmService_DeleteTopoGeo_result&);
  CbmService_DeleteTopoGeo_result() : success(0) {
  }

  virtual ~CbmService_DeleteTopoGeo_result() throw();
  bool success;

  _CbmService_DeleteTopoGeo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteTopoGeo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteTopoGeo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteTopoGeo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteTopoGeo_presult__isset {
  _CbmService_DeleteTopoGeo_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteTopoGeo_presult__isset;

class CbmService_DeleteTopoGeo_presult {
 public:


  virtual ~CbmService_DeleteTopoGeo_presult() throw();
  bool* success;

  _CbmService_DeleteTopoGeo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateTopoGeo_args__isset {
  _CbmService_UpdateTopoGeo_args__isset() : topo_geo(false) {}
  bool topo_geo :1;
} _CbmService_UpdateTopoGeo_args__isset;

class CbmService_UpdateTopoGeo_args {
 public:

  CbmService_UpdateTopoGeo_args(const CbmService_UpdateTopoGeo_args&);
  CbmService_UpdateTopoGeo_args& operator=(const CbmService_UpdateTopoGeo_args&);
  CbmService_UpdateTopoGeo_args() {
  }

  virtual ~CbmService_UpdateTopoGeo_args() throw();
  TopoGeo topo_geo;

  _CbmService_UpdateTopoGeo_args__isset __isset;

  void __set_topo_geo(const TopoGeo& val);

  bool operator == (const CbmService_UpdateTopoGeo_args & rhs) const
  {
    if (!(topo_geo == rhs.topo_geo))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateTopoGeo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateTopoGeo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateTopoGeo_pargs {
 public:


  virtual ~CbmService_UpdateTopoGeo_pargs() throw();
  const TopoGeo* topo_geo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateTopoGeo_result__isset {
  _CbmService_UpdateTopoGeo_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateTopoGeo_result__isset;

class CbmService_UpdateTopoGeo_result {
 public:

  CbmService_UpdateTopoGeo_result(const CbmService_UpdateTopoGeo_result&);
  CbmService_UpdateTopoGeo_result& operator=(const CbmService_UpdateTopoGeo_result&);
  CbmService_UpdateTopoGeo_result() : success(0) {
  }

  virtual ~CbmService_UpdateTopoGeo_result() throw();
  bool success;

  _CbmService_UpdateTopoGeo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateTopoGeo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateTopoGeo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateTopoGeo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateTopoGeo_presult__isset {
  _CbmService_UpdateTopoGeo_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateTopoGeo_presult__isset;

class CbmService_UpdateTopoGeo_presult {
 public:


  virtual ~CbmService_UpdateTopoGeo_presult() throw();
  bool* success;

  _CbmService_UpdateTopoGeo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTopoGeoById_args__isset {
  _CbmService_GetTopoGeoById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetTopoGeoById_args__isset;

class CbmService_GetTopoGeoById_args {
 public:

  CbmService_GetTopoGeoById_args(const CbmService_GetTopoGeoById_args&);
  CbmService_GetTopoGeoById_args& operator=(const CbmService_GetTopoGeoById_args&);
  CbmService_GetTopoGeoById_args() : id(0) {
  }

  virtual ~CbmService_GetTopoGeoById_args() throw();
  int32_t id;

  _CbmService_GetTopoGeoById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetTopoGeoById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTopoGeoById_pargs {
 public:


  virtual ~CbmService_GetTopoGeoById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoById_result__isset {
  _CbmService_GetTopoGeoById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoById_result__isset;

class CbmService_GetTopoGeoById_result {
 public:

  CbmService_GetTopoGeoById_result(const CbmService_GetTopoGeoById_result&);
  CbmService_GetTopoGeoById_result& operator=(const CbmService_GetTopoGeoById_result&);
  CbmService_GetTopoGeoById_result() {
  }

  virtual ~CbmService_GetTopoGeoById_result() throw();
  TopoGeo success;

  _CbmService_GetTopoGeoById_result__isset __isset;

  void __set_success(const TopoGeo& val);

  bool operator == (const CbmService_GetTopoGeoById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoById_presult__isset {
  _CbmService_GetTopoGeoById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoById_presult__isset;

class CbmService_GetTopoGeoById_presult {
 public:


  virtual ~CbmService_GetTopoGeoById_presult() throw();
  TopoGeo* success;

  _CbmService_GetTopoGeoById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTopoGeoByForeignKey_args__isset {
  _CbmService_GetTopoGeoByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetTopoGeoByForeignKey_args__isset;

class CbmService_GetTopoGeoByForeignKey_args {
 public:

  CbmService_GetTopoGeoByForeignKey_args(const CbmService_GetTopoGeoByForeignKey_args&);
  CbmService_GetTopoGeoByForeignKey_args& operator=(const CbmService_GetTopoGeoByForeignKey_args&);
  CbmService_GetTopoGeoByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetTopoGeoByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetTopoGeoByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetTopoGeoByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTopoGeoByForeignKey_pargs {
 public:


  virtual ~CbmService_GetTopoGeoByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoByForeignKey_result__isset {
  _CbmService_GetTopoGeoByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoByForeignKey_result__isset;

class CbmService_GetTopoGeoByForeignKey_result {
 public:

  CbmService_GetTopoGeoByForeignKey_result(const CbmService_GetTopoGeoByForeignKey_result&);
  CbmService_GetTopoGeoByForeignKey_result& operator=(const CbmService_GetTopoGeoByForeignKey_result&);
  CbmService_GetTopoGeoByForeignKey_result() {
  }

  virtual ~CbmService_GetTopoGeoByForeignKey_result() throw();
  TopoGeo success;

  _CbmService_GetTopoGeoByForeignKey_result__isset __isset;

  void __set_success(const TopoGeo& val);

  bool operator == (const CbmService_GetTopoGeoByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoByForeignKey_presult__isset {
  _CbmService_GetTopoGeoByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoByForeignKey_presult__isset;

class CbmService_GetTopoGeoByForeignKey_presult {
 public:


  virtual ~CbmService_GetTopoGeoByForeignKey_presult() throw();
  TopoGeo* success;

  _CbmService_GetTopoGeoByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetTopoGeoList_args {
 public:

  CbmService_GetTopoGeoList_args(const CbmService_GetTopoGeoList_args&);
  CbmService_GetTopoGeoList_args& operator=(const CbmService_GetTopoGeoList_args&);
  CbmService_GetTopoGeoList_args() {
  }

  virtual ~CbmService_GetTopoGeoList_args() throw();

  bool operator == (const CbmService_GetTopoGeoList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTopoGeoList_pargs {
 public:


  virtual ~CbmService_GetTopoGeoList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoList_result__isset {
  _CbmService_GetTopoGeoList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoList_result__isset;

class CbmService_GetTopoGeoList_result {
 public:

  CbmService_GetTopoGeoList_result(const CbmService_GetTopoGeoList_result&);
  CbmService_GetTopoGeoList_result& operator=(const CbmService_GetTopoGeoList_result&);
  CbmService_GetTopoGeoList_result() {
  }

  virtual ~CbmService_GetTopoGeoList_result() throw();
  std::vector<TopoGeo>  success;

  _CbmService_GetTopoGeoList_result__isset __isset;

  void __set_success(const std::vector<TopoGeo> & val);

  bool operator == (const CbmService_GetTopoGeoList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoList_presult__isset {
  _CbmService_GetTopoGeoList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoList_presult__isset;

class CbmService_GetTopoGeoList_presult {
 public:


  virtual ~CbmService_GetTopoGeoList_presult() throw();
  std::vector<TopoGeo> * success;

  _CbmService_GetTopoGeoList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetTopoGeoIds_args {
 public:

  CbmService_GetTopoGeoIds_args(const CbmService_GetTopoGeoIds_args&);
  CbmService_GetTopoGeoIds_args& operator=(const CbmService_GetTopoGeoIds_args&);
  CbmService_GetTopoGeoIds_args() {
  }

  virtual ~CbmService_GetTopoGeoIds_args() throw();

  bool operator == (const CbmService_GetTopoGeoIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTopoGeoIds_pargs {
 public:


  virtual ~CbmService_GetTopoGeoIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoIds_result__isset {
  _CbmService_GetTopoGeoIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoIds_result__isset;

class CbmService_GetTopoGeoIds_result {
 public:

  CbmService_GetTopoGeoIds_result(const CbmService_GetTopoGeoIds_result&);
  CbmService_GetTopoGeoIds_result& operator=(const CbmService_GetTopoGeoIds_result&);
  CbmService_GetTopoGeoIds_result() {
  }

  virtual ~CbmService_GetTopoGeoIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetTopoGeoIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetTopoGeoIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoIds_presult__isset {
  _CbmService_GetTopoGeoIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoIds_presult__isset;

class CbmService_GetTopoGeoIds_presult {
 public:


  virtual ~CbmService_GetTopoGeoIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetTopoGeoIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetTopoGeoNames_args {
 public:

  CbmService_GetTopoGeoNames_args(const CbmService_GetTopoGeoNames_args&);
  CbmService_GetTopoGeoNames_args& operator=(const CbmService_GetTopoGeoNames_args&);
  CbmService_GetTopoGeoNames_args() {
  }

  virtual ~CbmService_GetTopoGeoNames_args() throw();

  bool operator == (const CbmService_GetTopoGeoNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTopoGeoNames_pargs {
 public:


  virtual ~CbmService_GetTopoGeoNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoNames_result__isset {
  _CbmService_GetTopoGeoNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoNames_result__isset;

class CbmService_GetTopoGeoNames_result {
 public:

  CbmService_GetTopoGeoNames_result(const CbmService_GetTopoGeoNames_result&);
  CbmService_GetTopoGeoNames_result& operator=(const CbmService_GetTopoGeoNames_result&);
  CbmService_GetTopoGeoNames_result() {
  }

  virtual ~CbmService_GetTopoGeoNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetTopoGeoNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetTopoGeoNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoNames_presult__isset {
  _CbmService_GetTopoGeoNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoNames_presult__isset;

class CbmService_GetTopoGeoNames_presult {
 public:


  virtual ~CbmService_GetTopoGeoNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetTopoGeoNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreTopoGeo_args__isset {
  _CbmService_AddMoreTopoGeo_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreTopoGeo_args__isset;

class CbmService_AddMoreTopoGeo_args {
 public:

  CbmService_AddMoreTopoGeo_args(const CbmService_AddMoreTopoGeo_args&);
  CbmService_AddMoreTopoGeo_args& operator=(const CbmService_AddMoreTopoGeo_args&);
  CbmService_AddMoreTopoGeo_args() {
  }

  virtual ~CbmService_AddMoreTopoGeo_args() throw();
  std::vector<TopoGeo>  objs;

  _CbmService_AddMoreTopoGeo_args__isset __isset;

  void __set_objs(const std::vector<TopoGeo> & val);

  bool operator == (const CbmService_AddMoreTopoGeo_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreTopoGeo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreTopoGeo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreTopoGeo_pargs {
 public:


  virtual ~CbmService_AddMoreTopoGeo_pargs() throw();
  const std::vector<TopoGeo> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreTopoGeo_result {
 public:

  CbmService_AddMoreTopoGeo_result(const CbmService_AddMoreTopoGeo_result&);
  CbmService_AddMoreTopoGeo_result& operator=(const CbmService_AddMoreTopoGeo_result&);
  CbmService_AddMoreTopoGeo_result() {
  }

  virtual ~CbmService_AddMoreTopoGeo_result() throw();

  bool operator == (const CbmService_AddMoreTopoGeo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreTopoGeo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreTopoGeo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreTopoGeo_presult {
 public:


  virtual ~CbmService_AddMoreTopoGeo_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreTopoGeo_args__isset {
  _CbmService_DeleteMoreTopoGeo_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreTopoGeo_args__isset;

class CbmService_DeleteMoreTopoGeo_args {
 public:

  CbmService_DeleteMoreTopoGeo_args(const CbmService_DeleteMoreTopoGeo_args&);
  CbmService_DeleteMoreTopoGeo_args& operator=(const CbmService_DeleteMoreTopoGeo_args&);
  CbmService_DeleteMoreTopoGeo_args() {
  }

  virtual ~CbmService_DeleteMoreTopoGeo_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreTopoGeo_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreTopoGeo_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreTopoGeo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreTopoGeo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreTopoGeo_pargs {
 public:


  virtual ~CbmService_DeleteMoreTopoGeo_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreTopoGeo_result {
 public:

  CbmService_DeleteMoreTopoGeo_result(const CbmService_DeleteMoreTopoGeo_result&);
  CbmService_DeleteMoreTopoGeo_result& operator=(const CbmService_DeleteMoreTopoGeo_result&);
  CbmService_DeleteMoreTopoGeo_result() {
  }

  virtual ~CbmService_DeleteMoreTopoGeo_result() throw();

  bool operator == (const CbmService_DeleteMoreTopoGeo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreTopoGeo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreTopoGeo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreTopoGeo_presult {
 public:


  virtual ~CbmService_DeleteMoreTopoGeo_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTopoGeoByFields_args__isset {
  _CbmService_GetTopoGeoByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetTopoGeoByFields_args__isset;

class CbmService_GetTopoGeoByFields_args {
 public:

  CbmService_GetTopoGeoByFields_args(const CbmService_GetTopoGeoByFields_args&);
  CbmService_GetTopoGeoByFields_args& operator=(const CbmService_GetTopoGeoByFields_args&);
  CbmService_GetTopoGeoByFields_args() {
  }

  virtual ~CbmService_GetTopoGeoByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetTopoGeoByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetTopoGeoByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTopoGeoByFields_pargs {
 public:


  virtual ~CbmService_GetTopoGeoByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoByFields_result__isset {
  _CbmService_GetTopoGeoByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoByFields_result__isset;

class CbmService_GetTopoGeoByFields_result {
 public:

  CbmService_GetTopoGeoByFields_result(const CbmService_GetTopoGeoByFields_result&);
  CbmService_GetTopoGeoByFields_result& operator=(const CbmService_GetTopoGeoByFields_result&);
  CbmService_GetTopoGeoByFields_result() {
  }

  virtual ~CbmService_GetTopoGeoByFields_result() throw();
  TopoGeo success;

  _CbmService_GetTopoGeoByFields_result__isset __isset;

  void __set_success(const TopoGeo& val);

  bool operator == (const CbmService_GetTopoGeoByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoByFields_presult__isset {
  _CbmService_GetTopoGeoByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoByFields_presult__isset;

class CbmService_GetTopoGeoByFields_presult {
 public:


  virtual ~CbmService_GetTopoGeoByFields_presult() throw();
  TopoGeo* success;

  _CbmService_GetTopoGeoByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTopoGeoByFields1_args__isset {
  _CbmService_GetTopoGeoByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetTopoGeoByFields1_args__isset;

class CbmService_GetTopoGeoByFields1_args {
 public:

  CbmService_GetTopoGeoByFields1_args(const CbmService_GetTopoGeoByFields1_args&);
  CbmService_GetTopoGeoByFields1_args& operator=(const CbmService_GetTopoGeoByFields1_args&);
  CbmService_GetTopoGeoByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetTopoGeoByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetTopoGeoByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetTopoGeoByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTopoGeoByFields1_pargs {
 public:


  virtual ~CbmService_GetTopoGeoByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoByFields1_result__isset {
  _CbmService_GetTopoGeoByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoByFields1_result__isset;

class CbmService_GetTopoGeoByFields1_result {
 public:

  CbmService_GetTopoGeoByFields1_result(const CbmService_GetTopoGeoByFields1_result&);
  CbmService_GetTopoGeoByFields1_result& operator=(const CbmService_GetTopoGeoByFields1_result&);
  CbmService_GetTopoGeoByFields1_result() {
  }

  virtual ~CbmService_GetTopoGeoByFields1_result() throw();
  TopoGeo success;

  _CbmService_GetTopoGeoByFields1_result__isset __isset;

  void __set_success(const TopoGeo& val);

  bool operator == (const CbmService_GetTopoGeoByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoByFields1_presult__isset {
  _CbmService_GetTopoGeoByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoByFields1_presult__isset;

class CbmService_GetTopoGeoByFields1_presult {
 public:


  virtual ~CbmService_GetTopoGeoByFields1_presult() throw();
  TopoGeo* success;

  _CbmService_GetTopoGeoByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTopoGeoByFields2_args__isset {
  _CbmService_GetTopoGeoByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetTopoGeoByFields2_args__isset;

class CbmService_GetTopoGeoByFields2_args {
 public:

  CbmService_GetTopoGeoByFields2_args(const CbmService_GetTopoGeoByFields2_args&);
  CbmService_GetTopoGeoByFields2_args& operator=(const CbmService_GetTopoGeoByFields2_args&);
  CbmService_GetTopoGeoByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetTopoGeoByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetTopoGeoByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetTopoGeoByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTopoGeoByFields2_pargs {
 public:


  virtual ~CbmService_GetTopoGeoByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoByFields2_result__isset {
  _CbmService_GetTopoGeoByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoByFields2_result__isset;

class CbmService_GetTopoGeoByFields2_result {
 public:

  CbmService_GetTopoGeoByFields2_result(const CbmService_GetTopoGeoByFields2_result&);
  CbmService_GetTopoGeoByFields2_result& operator=(const CbmService_GetTopoGeoByFields2_result&);
  CbmService_GetTopoGeoByFields2_result() {
  }

  virtual ~CbmService_GetTopoGeoByFields2_result() throw();
  TopoGeo success;

  _CbmService_GetTopoGeoByFields2_result__isset __isset;

  void __set_success(const TopoGeo& val);

  bool operator == (const CbmService_GetTopoGeoByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoByFields2_presult__isset {
  _CbmService_GetTopoGeoByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoByFields2_presult__isset;

class CbmService_GetTopoGeoByFields2_presult {
 public:


  virtual ~CbmService_GetTopoGeoByFields2_presult() throw();
  TopoGeo* success;

  _CbmService_GetTopoGeoByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTopoGeoListByFields_args__isset {
  _CbmService_GetTopoGeoListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetTopoGeoListByFields_args__isset;

class CbmService_GetTopoGeoListByFields_args {
 public:

  CbmService_GetTopoGeoListByFields_args(const CbmService_GetTopoGeoListByFields_args&);
  CbmService_GetTopoGeoListByFields_args& operator=(const CbmService_GetTopoGeoListByFields_args&);
  CbmService_GetTopoGeoListByFields_args() {
  }

  virtual ~CbmService_GetTopoGeoListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetTopoGeoListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetTopoGeoListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTopoGeoListByFields_pargs {
 public:


  virtual ~CbmService_GetTopoGeoListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoListByFields_result__isset {
  _CbmService_GetTopoGeoListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoListByFields_result__isset;

class CbmService_GetTopoGeoListByFields_result {
 public:

  CbmService_GetTopoGeoListByFields_result(const CbmService_GetTopoGeoListByFields_result&);
  CbmService_GetTopoGeoListByFields_result& operator=(const CbmService_GetTopoGeoListByFields_result&);
  CbmService_GetTopoGeoListByFields_result() {
  }

  virtual ~CbmService_GetTopoGeoListByFields_result() throw();
  std::vector<TopoGeo>  success;

  _CbmService_GetTopoGeoListByFields_result__isset __isset;

  void __set_success(const std::vector<TopoGeo> & val);

  bool operator == (const CbmService_GetTopoGeoListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoListByFields_presult__isset {
  _CbmService_GetTopoGeoListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoListByFields_presult__isset;

class CbmService_GetTopoGeoListByFields_presult {
 public:


  virtual ~CbmService_GetTopoGeoListByFields_presult() throw();
  std::vector<TopoGeo> * success;

  _CbmService_GetTopoGeoListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTopoGeoListByFields1_args__isset {
  _CbmService_GetTopoGeoListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetTopoGeoListByFields1_args__isset;

class CbmService_GetTopoGeoListByFields1_args {
 public:

  CbmService_GetTopoGeoListByFields1_args(const CbmService_GetTopoGeoListByFields1_args&);
  CbmService_GetTopoGeoListByFields1_args& operator=(const CbmService_GetTopoGeoListByFields1_args&);
  CbmService_GetTopoGeoListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetTopoGeoListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetTopoGeoListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetTopoGeoListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTopoGeoListByFields1_pargs {
 public:


  virtual ~CbmService_GetTopoGeoListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoListByFields1_result__isset {
  _CbmService_GetTopoGeoListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoListByFields1_result__isset;

class CbmService_GetTopoGeoListByFields1_result {
 public:

  CbmService_GetTopoGeoListByFields1_result(const CbmService_GetTopoGeoListByFields1_result&);
  CbmService_GetTopoGeoListByFields1_result& operator=(const CbmService_GetTopoGeoListByFields1_result&);
  CbmService_GetTopoGeoListByFields1_result() {
  }

  virtual ~CbmService_GetTopoGeoListByFields1_result() throw();
  std::vector<TopoGeo>  success;

  _CbmService_GetTopoGeoListByFields1_result__isset __isset;

  void __set_success(const std::vector<TopoGeo> & val);

  bool operator == (const CbmService_GetTopoGeoListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoListByFields1_presult__isset {
  _CbmService_GetTopoGeoListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoListByFields1_presult__isset;

class CbmService_GetTopoGeoListByFields1_presult {
 public:


  virtual ~CbmService_GetTopoGeoListByFields1_presult() throw();
  std::vector<TopoGeo> * success;

  _CbmService_GetTopoGeoListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTopoGeoListByFields2_args__isset {
  _CbmService_GetTopoGeoListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetTopoGeoListByFields2_args__isset;

class CbmService_GetTopoGeoListByFields2_args {
 public:

  CbmService_GetTopoGeoListByFields2_args(const CbmService_GetTopoGeoListByFields2_args&);
  CbmService_GetTopoGeoListByFields2_args& operator=(const CbmService_GetTopoGeoListByFields2_args&);
  CbmService_GetTopoGeoListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetTopoGeoListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetTopoGeoListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetTopoGeoListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTopoGeoListByFields2_pargs {
 public:


  virtual ~CbmService_GetTopoGeoListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoListByFields2_result__isset {
  _CbmService_GetTopoGeoListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoListByFields2_result__isset;

class CbmService_GetTopoGeoListByFields2_result {
 public:

  CbmService_GetTopoGeoListByFields2_result(const CbmService_GetTopoGeoListByFields2_result&);
  CbmService_GetTopoGeoListByFields2_result& operator=(const CbmService_GetTopoGeoListByFields2_result&);
  CbmService_GetTopoGeoListByFields2_result() {
  }

  virtual ~CbmService_GetTopoGeoListByFields2_result() throw();
  std::vector<TopoGeo>  success;

  _CbmService_GetTopoGeoListByFields2_result__isset __isset;

  void __set_success(const std::vector<TopoGeo> & val);

  bool operator == (const CbmService_GetTopoGeoListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTopoGeoListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTopoGeoListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTopoGeoListByFields2_presult__isset {
  _CbmService_GetTopoGeoListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTopoGeoListByFields2_presult__isset;

class CbmService_GetTopoGeoListByFields2_presult {
 public:


  virtual ~CbmService_GetTopoGeoListByFields2_presult() throw();
  std::vector<TopoGeo> * success;

  _CbmService_GetTopoGeoListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddTunnel_args__isset {
  _CbmService_AddTunnel_args__isset() : tunnel(false) {}
  bool tunnel :1;
} _CbmService_AddTunnel_args__isset;

class CbmService_AddTunnel_args {
 public:

  CbmService_AddTunnel_args(const CbmService_AddTunnel_args&);
  CbmService_AddTunnel_args& operator=(const CbmService_AddTunnel_args&);
  CbmService_AddTunnel_args() {
  }

  virtual ~CbmService_AddTunnel_args() throw();
  Tunnel tunnel;

  _CbmService_AddTunnel_args__isset __isset;

  void __set_tunnel(const Tunnel& val);

  bool operator == (const CbmService_AddTunnel_args & rhs) const
  {
    if (!(tunnel == rhs.tunnel))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddTunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddTunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddTunnel_pargs {
 public:


  virtual ~CbmService_AddTunnel_pargs() throw();
  const Tunnel* tunnel;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddTunnel_result__isset {
  _CbmService_AddTunnel_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddTunnel_result__isset;

class CbmService_AddTunnel_result {
 public:

  CbmService_AddTunnel_result(const CbmService_AddTunnel_result&);
  CbmService_AddTunnel_result& operator=(const CbmService_AddTunnel_result&);
  CbmService_AddTunnel_result() : success(0) {
  }

  virtual ~CbmService_AddTunnel_result() throw();
  int32_t success;

  _CbmService_AddTunnel_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddTunnel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddTunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddTunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddTunnel_presult__isset {
  _CbmService_AddTunnel_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddTunnel_presult__isset;

class CbmService_AddTunnel_presult {
 public:


  virtual ~CbmService_AddTunnel_presult() throw();
  int32_t* success;

  _CbmService_AddTunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteTunnel_args__isset {
  _CbmService_DeleteTunnel_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteTunnel_args__isset;

class CbmService_DeleteTunnel_args {
 public:

  CbmService_DeleteTunnel_args(const CbmService_DeleteTunnel_args&);
  CbmService_DeleteTunnel_args& operator=(const CbmService_DeleteTunnel_args&);
  CbmService_DeleteTunnel_args() : id(0) {
  }

  virtual ~CbmService_DeleteTunnel_args() throw();
  int32_t id;

  _CbmService_DeleteTunnel_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteTunnel_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteTunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteTunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteTunnel_pargs {
 public:


  virtual ~CbmService_DeleteTunnel_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteTunnel_result__isset {
  _CbmService_DeleteTunnel_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteTunnel_result__isset;

class CbmService_DeleteTunnel_result {
 public:

  CbmService_DeleteTunnel_result(const CbmService_DeleteTunnel_result&);
  CbmService_DeleteTunnel_result& operator=(const CbmService_DeleteTunnel_result&);
  CbmService_DeleteTunnel_result() : success(0) {
  }

  virtual ~CbmService_DeleteTunnel_result() throw();
  bool success;

  _CbmService_DeleteTunnel_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteTunnel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteTunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteTunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteTunnel_presult__isset {
  _CbmService_DeleteTunnel_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteTunnel_presult__isset;

class CbmService_DeleteTunnel_presult {
 public:


  virtual ~CbmService_DeleteTunnel_presult() throw();
  bool* success;

  _CbmService_DeleteTunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateTunnel_args__isset {
  _CbmService_UpdateTunnel_args__isset() : tunnel(false) {}
  bool tunnel :1;
} _CbmService_UpdateTunnel_args__isset;

class CbmService_UpdateTunnel_args {
 public:

  CbmService_UpdateTunnel_args(const CbmService_UpdateTunnel_args&);
  CbmService_UpdateTunnel_args& operator=(const CbmService_UpdateTunnel_args&);
  CbmService_UpdateTunnel_args() {
  }

  virtual ~CbmService_UpdateTunnel_args() throw();
  Tunnel tunnel;

  _CbmService_UpdateTunnel_args__isset __isset;

  void __set_tunnel(const Tunnel& val);

  bool operator == (const CbmService_UpdateTunnel_args & rhs) const
  {
    if (!(tunnel == rhs.tunnel))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateTunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateTunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateTunnel_pargs {
 public:


  virtual ~CbmService_UpdateTunnel_pargs() throw();
  const Tunnel* tunnel;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateTunnel_result__isset {
  _CbmService_UpdateTunnel_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateTunnel_result__isset;

class CbmService_UpdateTunnel_result {
 public:

  CbmService_UpdateTunnel_result(const CbmService_UpdateTunnel_result&);
  CbmService_UpdateTunnel_result& operator=(const CbmService_UpdateTunnel_result&);
  CbmService_UpdateTunnel_result() : success(0) {
  }

  virtual ~CbmService_UpdateTunnel_result() throw();
  bool success;

  _CbmService_UpdateTunnel_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateTunnel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateTunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateTunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateTunnel_presult__isset {
  _CbmService_UpdateTunnel_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateTunnel_presult__isset;

class CbmService_UpdateTunnel_presult {
 public:


  virtual ~CbmService_UpdateTunnel_presult() throw();
  bool* success;

  _CbmService_UpdateTunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTunnelById_args__isset {
  _CbmService_GetTunnelById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetTunnelById_args__isset;

class CbmService_GetTunnelById_args {
 public:

  CbmService_GetTunnelById_args(const CbmService_GetTunnelById_args&);
  CbmService_GetTunnelById_args& operator=(const CbmService_GetTunnelById_args&);
  CbmService_GetTunnelById_args() : id(0) {
  }

  virtual ~CbmService_GetTunnelById_args() throw();
  int32_t id;

  _CbmService_GetTunnelById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetTunnelById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTunnelById_pargs {
 public:


  virtual ~CbmService_GetTunnelById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelById_result__isset {
  _CbmService_GetTunnelById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelById_result__isset;

class CbmService_GetTunnelById_result {
 public:

  CbmService_GetTunnelById_result(const CbmService_GetTunnelById_result&);
  CbmService_GetTunnelById_result& operator=(const CbmService_GetTunnelById_result&);
  CbmService_GetTunnelById_result() {
  }

  virtual ~CbmService_GetTunnelById_result() throw();
  Tunnel success;

  _CbmService_GetTunnelById_result__isset __isset;

  void __set_success(const Tunnel& val);

  bool operator == (const CbmService_GetTunnelById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelById_presult__isset {
  _CbmService_GetTunnelById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelById_presult__isset;

class CbmService_GetTunnelById_presult {
 public:


  virtual ~CbmService_GetTunnelById_presult() throw();
  Tunnel* success;

  _CbmService_GetTunnelById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTunnelByForeignKey_args__isset {
  _CbmService_GetTunnelByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetTunnelByForeignKey_args__isset;

class CbmService_GetTunnelByForeignKey_args {
 public:

  CbmService_GetTunnelByForeignKey_args(const CbmService_GetTunnelByForeignKey_args&);
  CbmService_GetTunnelByForeignKey_args& operator=(const CbmService_GetTunnelByForeignKey_args&);
  CbmService_GetTunnelByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetTunnelByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetTunnelByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetTunnelByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTunnelByForeignKey_pargs {
 public:


  virtual ~CbmService_GetTunnelByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelByForeignKey_result__isset {
  _CbmService_GetTunnelByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelByForeignKey_result__isset;

class CbmService_GetTunnelByForeignKey_result {
 public:

  CbmService_GetTunnelByForeignKey_result(const CbmService_GetTunnelByForeignKey_result&);
  CbmService_GetTunnelByForeignKey_result& operator=(const CbmService_GetTunnelByForeignKey_result&);
  CbmService_GetTunnelByForeignKey_result() {
  }

  virtual ~CbmService_GetTunnelByForeignKey_result() throw();
  Tunnel success;

  _CbmService_GetTunnelByForeignKey_result__isset __isset;

  void __set_success(const Tunnel& val);

  bool operator == (const CbmService_GetTunnelByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelByForeignKey_presult__isset {
  _CbmService_GetTunnelByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelByForeignKey_presult__isset;

class CbmService_GetTunnelByForeignKey_presult {
 public:


  virtual ~CbmService_GetTunnelByForeignKey_presult() throw();
  Tunnel* success;

  _CbmService_GetTunnelByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetTunnelList_args {
 public:

  CbmService_GetTunnelList_args(const CbmService_GetTunnelList_args&);
  CbmService_GetTunnelList_args& operator=(const CbmService_GetTunnelList_args&);
  CbmService_GetTunnelList_args() {
  }

  virtual ~CbmService_GetTunnelList_args() throw();

  bool operator == (const CbmService_GetTunnelList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetTunnelList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTunnelList_pargs {
 public:


  virtual ~CbmService_GetTunnelList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelList_result__isset {
  _CbmService_GetTunnelList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelList_result__isset;

class CbmService_GetTunnelList_result {
 public:

  CbmService_GetTunnelList_result(const CbmService_GetTunnelList_result&);
  CbmService_GetTunnelList_result& operator=(const CbmService_GetTunnelList_result&);
  CbmService_GetTunnelList_result() {
  }

  virtual ~CbmService_GetTunnelList_result() throw();
  std::vector<Tunnel>  success;

  _CbmService_GetTunnelList_result__isset __isset;

  void __set_success(const std::vector<Tunnel> & val);

  bool operator == (const CbmService_GetTunnelList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelList_presult__isset {
  _CbmService_GetTunnelList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelList_presult__isset;

class CbmService_GetTunnelList_presult {
 public:


  virtual ~CbmService_GetTunnelList_presult() throw();
  std::vector<Tunnel> * success;

  _CbmService_GetTunnelList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetTunnelIds_args {
 public:

  CbmService_GetTunnelIds_args(const CbmService_GetTunnelIds_args&);
  CbmService_GetTunnelIds_args& operator=(const CbmService_GetTunnelIds_args&);
  CbmService_GetTunnelIds_args() {
  }

  virtual ~CbmService_GetTunnelIds_args() throw();

  bool operator == (const CbmService_GetTunnelIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetTunnelIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTunnelIds_pargs {
 public:


  virtual ~CbmService_GetTunnelIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelIds_result__isset {
  _CbmService_GetTunnelIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelIds_result__isset;

class CbmService_GetTunnelIds_result {
 public:

  CbmService_GetTunnelIds_result(const CbmService_GetTunnelIds_result&);
  CbmService_GetTunnelIds_result& operator=(const CbmService_GetTunnelIds_result&);
  CbmService_GetTunnelIds_result() {
  }

  virtual ~CbmService_GetTunnelIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetTunnelIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetTunnelIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelIds_presult__isset {
  _CbmService_GetTunnelIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelIds_presult__isset;

class CbmService_GetTunnelIds_presult {
 public:


  virtual ~CbmService_GetTunnelIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetTunnelIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetTunnelNames_args {
 public:

  CbmService_GetTunnelNames_args(const CbmService_GetTunnelNames_args&);
  CbmService_GetTunnelNames_args& operator=(const CbmService_GetTunnelNames_args&);
  CbmService_GetTunnelNames_args() {
  }

  virtual ~CbmService_GetTunnelNames_args() throw();

  bool operator == (const CbmService_GetTunnelNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetTunnelNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTunnelNames_pargs {
 public:


  virtual ~CbmService_GetTunnelNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelNames_result__isset {
  _CbmService_GetTunnelNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelNames_result__isset;

class CbmService_GetTunnelNames_result {
 public:

  CbmService_GetTunnelNames_result(const CbmService_GetTunnelNames_result&);
  CbmService_GetTunnelNames_result& operator=(const CbmService_GetTunnelNames_result&);
  CbmService_GetTunnelNames_result() {
  }

  virtual ~CbmService_GetTunnelNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetTunnelNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetTunnelNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelNames_presult__isset {
  _CbmService_GetTunnelNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelNames_presult__isset;

class CbmService_GetTunnelNames_presult {
 public:


  virtual ~CbmService_GetTunnelNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetTunnelNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreTunnel_args__isset {
  _CbmService_AddMoreTunnel_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreTunnel_args__isset;

class CbmService_AddMoreTunnel_args {
 public:

  CbmService_AddMoreTunnel_args(const CbmService_AddMoreTunnel_args&);
  CbmService_AddMoreTunnel_args& operator=(const CbmService_AddMoreTunnel_args&);
  CbmService_AddMoreTunnel_args() {
  }

  virtual ~CbmService_AddMoreTunnel_args() throw();
  std::vector<Tunnel>  objs;

  _CbmService_AddMoreTunnel_args__isset __isset;

  void __set_objs(const std::vector<Tunnel> & val);

  bool operator == (const CbmService_AddMoreTunnel_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreTunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreTunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreTunnel_pargs {
 public:


  virtual ~CbmService_AddMoreTunnel_pargs() throw();
  const std::vector<Tunnel> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreTunnel_result {
 public:

  CbmService_AddMoreTunnel_result(const CbmService_AddMoreTunnel_result&);
  CbmService_AddMoreTunnel_result& operator=(const CbmService_AddMoreTunnel_result&);
  CbmService_AddMoreTunnel_result() {
  }

  virtual ~CbmService_AddMoreTunnel_result() throw();

  bool operator == (const CbmService_AddMoreTunnel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreTunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreTunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreTunnel_presult {
 public:


  virtual ~CbmService_AddMoreTunnel_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreTunnel_args__isset {
  _CbmService_DeleteMoreTunnel_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreTunnel_args__isset;

class CbmService_DeleteMoreTunnel_args {
 public:

  CbmService_DeleteMoreTunnel_args(const CbmService_DeleteMoreTunnel_args&);
  CbmService_DeleteMoreTunnel_args& operator=(const CbmService_DeleteMoreTunnel_args&);
  CbmService_DeleteMoreTunnel_args() {
  }

  virtual ~CbmService_DeleteMoreTunnel_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreTunnel_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreTunnel_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreTunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreTunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreTunnel_pargs {
 public:


  virtual ~CbmService_DeleteMoreTunnel_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreTunnel_result {
 public:

  CbmService_DeleteMoreTunnel_result(const CbmService_DeleteMoreTunnel_result&);
  CbmService_DeleteMoreTunnel_result& operator=(const CbmService_DeleteMoreTunnel_result&);
  CbmService_DeleteMoreTunnel_result() {
  }

  virtual ~CbmService_DeleteMoreTunnel_result() throw();

  bool operator == (const CbmService_DeleteMoreTunnel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreTunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreTunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreTunnel_presult {
 public:


  virtual ~CbmService_DeleteMoreTunnel_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTunnelByFields_args__isset {
  _CbmService_GetTunnelByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetTunnelByFields_args__isset;

class CbmService_GetTunnelByFields_args {
 public:

  CbmService_GetTunnelByFields_args(const CbmService_GetTunnelByFields_args&);
  CbmService_GetTunnelByFields_args& operator=(const CbmService_GetTunnelByFields_args&);
  CbmService_GetTunnelByFields_args() {
  }

  virtual ~CbmService_GetTunnelByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetTunnelByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetTunnelByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTunnelByFields_pargs {
 public:


  virtual ~CbmService_GetTunnelByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelByFields_result__isset {
  _CbmService_GetTunnelByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelByFields_result__isset;

class CbmService_GetTunnelByFields_result {
 public:

  CbmService_GetTunnelByFields_result(const CbmService_GetTunnelByFields_result&);
  CbmService_GetTunnelByFields_result& operator=(const CbmService_GetTunnelByFields_result&);
  CbmService_GetTunnelByFields_result() {
  }

  virtual ~CbmService_GetTunnelByFields_result() throw();
  Tunnel success;

  _CbmService_GetTunnelByFields_result__isset __isset;

  void __set_success(const Tunnel& val);

  bool operator == (const CbmService_GetTunnelByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelByFields_presult__isset {
  _CbmService_GetTunnelByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelByFields_presult__isset;

class CbmService_GetTunnelByFields_presult {
 public:


  virtual ~CbmService_GetTunnelByFields_presult() throw();
  Tunnel* success;

  _CbmService_GetTunnelByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTunnelByFields1_args__isset {
  _CbmService_GetTunnelByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetTunnelByFields1_args__isset;

class CbmService_GetTunnelByFields1_args {
 public:

  CbmService_GetTunnelByFields1_args(const CbmService_GetTunnelByFields1_args&);
  CbmService_GetTunnelByFields1_args& operator=(const CbmService_GetTunnelByFields1_args&);
  CbmService_GetTunnelByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetTunnelByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetTunnelByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetTunnelByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTunnelByFields1_pargs {
 public:


  virtual ~CbmService_GetTunnelByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelByFields1_result__isset {
  _CbmService_GetTunnelByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelByFields1_result__isset;

class CbmService_GetTunnelByFields1_result {
 public:

  CbmService_GetTunnelByFields1_result(const CbmService_GetTunnelByFields1_result&);
  CbmService_GetTunnelByFields1_result& operator=(const CbmService_GetTunnelByFields1_result&);
  CbmService_GetTunnelByFields1_result() {
  }

  virtual ~CbmService_GetTunnelByFields1_result() throw();
  Tunnel success;

  _CbmService_GetTunnelByFields1_result__isset __isset;

  void __set_success(const Tunnel& val);

  bool operator == (const CbmService_GetTunnelByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelByFields1_presult__isset {
  _CbmService_GetTunnelByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelByFields1_presult__isset;

class CbmService_GetTunnelByFields1_presult {
 public:


  virtual ~CbmService_GetTunnelByFields1_presult() throw();
  Tunnel* success;

  _CbmService_GetTunnelByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTunnelByFields2_args__isset {
  _CbmService_GetTunnelByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetTunnelByFields2_args__isset;

class CbmService_GetTunnelByFields2_args {
 public:

  CbmService_GetTunnelByFields2_args(const CbmService_GetTunnelByFields2_args&);
  CbmService_GetTunnelByFields2_args& operator=(const CbmService_GetTunnelByFields2_args&);
  CbmService_GetTunnelByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetTunnelByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetTunnelByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetTunnelByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTunnelByFields2_pargs {
 public:


  virtual ~CbmService_GetTunnelByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelByFields2_result__isset {
  _CbmService_GetTunnelByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelByFields2_result__isset;

class CbmService_GetTunnelByFields2_result {
 public:

  CbmService_GetTunnelByFields2_result(const CbmService_GetTunnelByFields2_result&);
  CbmService_GetTunnelByFields2_result& operator=(const CbmService_GetTunnelByFields2_result&);
  CbmService_GetTunnelByFields2_result() {
  }

  virtual ~CbmService_GetTunnelByFields2_result() throw();
  Tunnel success;

  _CbmService_GetTunnelByFields2_result__isset __isset;

  void __set_success(const Tunnel& val);

  bool operator == (const CbmService_GetTunnelByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelByFields2_presult__isset {
  _CbmService_GetTunnelByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelByFields2_presult__isset;

class CbmService_GetTunnelByFields2_presult {
 public:


  virtual ~CbmService_GetTunnelByFields2_presult() throw();
  Tunnel* success;

  _CbmService_GetTunnelByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTunnelListByFields_args__isset {
  _CbmService_GetTunnelListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetTunnelListByFields_args__isset;

class CbmService_GetTunnelListByFields_args {
 public:

  CbmService_GetTunnelListByFields_args(const CbmService_GetTunnelListByFields_args&);
  CbmService_GetTunnelListByFields_args& operator=(const CbmService_GetTunnelListByFields_args&);
  CbmService_GetTunnelListByFields_args() {
  }

  virtual ~CbmService_GetTunnelListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetTunnelListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetTunnelListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTunnelListByFields_pargs {
 public:


  virtual ~CbmService_GetTunnelListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelListByFields_result__isset {
  _CbmService_GetTunnelListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelListByFields_result__isset;

class CbmService_GetTunnelListByFields_result {
 public:

  CbmService_GetTunnelListByFields_result(const CbmService_GetTunnelListByFields_result&);
  CbmService_GetTunnelListByFields_result& operator=(const CbmService_GetTunnelListByFields_result&);
  CbmService_GetTunnelListByFields_result() {
  }

  virtual ~CbmService_GetTunnelListByFields_result() throw();
  std::vector<Tunnel>  success;

  _CbmService_GetTunnelListByFields_result__isset __isset;

  void __set_success(const std::vector<Tunnel> & val);

  bool operator == (const CbmService_GetTunnelListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelListByFields_presult__isset {
  _CbmService_GetTunnelListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelListByFields_presult__isset;

class CbmService_GetTunnelListByFields_presult {
 public:


  virtual ~CbmService_GetTunnelListByFields_presult() throw();
  std::vector<Tunnel> * success;

  _CbmService_GetTunnelListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTunnelListByFields1_args__isset {
  _CbmService_GetTunnelListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetTunnelListByFields1_args__isset;

class CbmService_GetTunnelListByFields1_args {
 public:

  CbmService_GetTunnelListByFields1_args(const CbmService_GetTunnelListByFields1_args&);
  CbmService_GetTunnelListByFields1_args& operator=(const CbmService_GetTunnelListByFields1_args&);
  CbmService_GetTunnelListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetTunnelListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetTunnelListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetTunnelListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTunnelListByFields1_pargs {
 public:


  virtual ~CbmService_GetTunnelListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelListByFields1_result__isset {
  _CbmService_GetTunnelListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelListByFields1_result__isset;

class CbmService_GetTunnelListByFields1_result {
 public:

  CbmService_GetTunnelListByFields1_result(const CbmService_GetTunnelListByFields1_result&);
  CbmService_GetTunnelListByFields1_result& operator=(const CbmService_GetTunnelListByFields1_result&);
  CbmService_GetTunnelListByFields1_result() {
  }

  virtual ~CbmService_GetTunnelListByFields1_result() throw();
  std::vector<Tunnel>  success;

  _CbmService_GetTunnelListByFields1_result__isset __isset;

  void __set_success(const std::vector<Tunnel> & val);

  bool operator == (const CbmService_GetTunnelListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelListByFields1_presult__isset {
  _CbmService_GetTunnelListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelListByFields1_presult__isset;

class CbmService_GetTunnelListByFields1_presult {
 public:


  virtual ~CbmService_GetTunnelListByFields1_presult() throw();
  std::vector<Tunnel> * success;

  _CbmService_GetTunnelListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetTunnelListByFields2_args__isset {
  _CbmService_GetTunnelListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetTunnelListByFields2_args__isset;

class CbmService_GetTunnelListByFields2_args {
 public:

  CbmService_GetTunnelListByFields2_args(const CbmService_GetTunnelListByFields2_args&);
  CbmService_GetTunnelListByFields2_args& operator=(const CbmService_GetTunnelListByFields2_args&);
  CbmService_GetTunnelListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetTunnelListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetTunnelListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetTunnelListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetTunnelListByFields2_pargs {
 public:


  virtual ~CbmService_GetTunnelListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelListByFields2_result__isset {
  _CbmService_GetTunnelListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelListByFields2_result__isset;

class CbmService_GetTunnelListByFields2_result {
 public:

  CbmService_GetTunnelListByFields2_result(const CbmService_GetTunnelListByFields2_result&);
  CbmService_GetTunnelListByFields2_result& operator=(const CbmService_GetTunnelListByFields2_result&);
  CbmService_GetTunnelListByFields2_result() {
  }

  virtual ~CbmService_GetTunnelListByFields2_result() throw();
  std::vector<Tunnel>  success;

  _CbmService_GetTunnelListByFields2_result__isset __isset;

  void __set_success(const std::vector<Tunnel> & val);

  bool operator == (const CbmService_GetTunnelListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetTunnelListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetTunnelListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetTunnelListByFields2_presult__isset {
  _CbmService_GetTunnelListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetTunnelListByFields2_presult__isset;

class CbmService_GetTunnelListByFields2_presult {
 public:


  virtual ~CbmService_GetTunnelListByFields2_presult() throw();
  std::vector<Tunnel> * success;

  _CbmService_GetTunnelListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddWorkArea_args__isset {
  _CbmService_AddWorkArea_args__isset() : work_area(false) {}
  bool work_area :1;
} _CbmService_AddWorkArea_args__isset;

class CbmService_AddWorkArea_args {
 public:

  CbmService_AddWorkArea_args(const CbmService_AddWorkArea_args&);
  CbmService_AddWorkArea_args& operator=(const CbmService_AddWorkArea_args&);
  CbmService_AddWorkArea_args() {
  }

  virtual ~CbmService_AddWorkArea_args() throw();
  WorkArea work_area;

  _CbmService_AddWorkArea_args__isset __isset;

  void __set_work_area(const WorkArea& val);

  bool operator == (const CbmService_AddWorkArea_args & rhs) const
  {
    if (!(work_area == rhs.work_area))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddWorkArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddWorkArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddWorkArea_pargs {
 public:


  virtual ~CbmService_AddWorkArea_pargs() throw();
  const WorkArea* work_area;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddWorkArea_result__isset {
  _CbmService_AddWorkArea_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddWorkArea_result__isset;

class CbmService_AddWorkArea_result {
 public:

  CbmService_AddWorkArea_result(const CbmService_AddWorkArea_result&);
  CbmService_AddWorkArea_result& operator=(const CbmService_AddWorkArea_result&);
  CbmService_AddWorkArea_result() : success(0) {
  }

  virtual ~CbmService_AddWorkArea_result() throw();
  int32_t success;

  _CbmService_AddWorkArea_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddWorkArea_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddWorkArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddWorkArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddWorkArea_presult__isset {
  _CbmService_AddWorkArea_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddWorkArea_presult__isset;

class CbmService_AddWorkArea_presult {
 public:


  virtual ~CbmService_AddWorkArea_presult() throw();
  int32_t* success;

  _CbmService_AddWorkArea_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteWorkArea_args__isset {
  _CbmService_DeleteWorkArea_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteWorkArea_args__isset;

class CbmService_DeleteWorkArea_args {
 public:

  CbmService_DeleteWorkArea_args(const CbmService_DeleteWorkArea_args&);
  CbmService_DeleteWorkArea_args& operator=(const CbmService_DeleteWorkArea_args&);
  CbmService_DeleteWorkArea_args() : id(0) {
  }

  virtual ~CbmService_DeleteWorkArea_args() throw();
  int32_t id;

  _CbmService_DeleteWorkArea_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteWorkArea_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteWorkArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteWorkArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteWorkArea_pargs {
 public:


  virtual ~CbmService_DeleteWorkArea_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteWorkArea_result__isset {
  _CbmService_DeleteWorkArea_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteWorkArea_result__isset;

class CbmService_DeleteWorkArea_result {
 public:

  CbmService_DeleteWorkArea_result(const CbmService_DeleteWorkArea_result&);
  CbmService_DeleteWorkArea_result& operator=(const CbmService_DeleteWorkArea_result&);
  CbmService_DeleteWorkArea_result() : success(0) {
  }

  virtual ~CbmService_DeleteWorkArea_result() throw();
  bool success;

  _CbmService_DeleteWorkArea_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteWorkArea_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteWorkArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteWorkArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteWorkArea_presult__isset {
  _CbmService_DeleteWorkArea_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteWorkArea_presult__isset;

class CbmService_DeleteWorkArea_presult {
 public:


  virtual ~CbmService_DeleteWorkArea_presult() throw();
  bool* success;

  _CbmService_DeleteWorkArea_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateWorkArea_args__isset {
  _CbmService_UpdateWorkArea_args__isset() : work_area(false) {}
  bool work_area :1;
} _CbmService_UpdateWorkArea_args__isset;

class CbmService_UpdateWorkArea_args {
 public:

  CbmService_UpdateWorkArea_args(const CbmService_UpdateWorkArea_args&);
  CbmService_UpdateWorkArea_args& operator=(const CbmService_UpdateWorkArea_args&);
  CbmService_UpdateWorkArea_args() {
  }

  virtual ~CbmService_UpdateWorkArea_args() throw();
  WorkArea work_area;

  _CbmService_UpdateWorkArea_args__isset __isset;

  void __set_work_area(const WorkArea& val);

  bool operator == (const CbmService_UpdateWorkArea_args & rhs) const
  {
    if (!(work_area == rhs.work_area))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateWorkArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateWorkArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateWorkArea_pargs {
 public:


  virtual ~CbmService_UpdateWorkArea_pargs() throw();
  const WorkArea* work_area;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateWorkArea_result__isset {
  _CbmService_UpdateWorkArea_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateWorkArea_result__isset;

class CbmService_UpdateWorkArea_result {
 public:

  CbmService_UpdateWorkArea_result(const CbmService_UpdateWorkArea_result&);
  CbmService_UpdateWorkArea_result& operator=(const CbmService_UpdateWorkArea_result&);
  CbmService_UpdateWorkArea_result() : success(0) {
  }

  virtual ~CbmService_UpdateWorkArea_result() throw();
  bool success;

  _CbmService_UpdateWorkArea_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateWorkArea_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateWorkArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateWorkArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateWorkArea_presult__isset {
  _CbmService_UpdateWorkArea_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateWorkArea_presult__isset;

class CbmService_UpdateWorkArea_presult {
 public:


  virtual ~CbmService_UpdateWorkArea_presult() throw();
  bool* success;

  _CbmService_UpdateWorkArea_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkAreaById_args__isset {
  _CbmService_GetWorkAreaById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetWorkAreaById_args__isset;

class CbmService_GetWorkAreaById_args {
 public:

  CbmService_GetWorkAreaById_args(const CbmService_GetWorkAreaById_args&);
  CbmService_GetWorkAreaById_args& operator=(const CbmService_GetWorkAreaById_args&);
  CbmService_GetWorkAreaById_args() : id(0) {
  }

  virtual ~CbmService_GetWorkAreaById_args() throw();
  int32_t id;

  _CbmService_GetWorkAreaById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetWorkAreaById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreaById_pargs {
 public:


  virtual ~CbmService_GetWorkAreaById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaById_result__isset {
  _CbmService_GetWorkAreaById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaById_result__isset;

class CbmService_GetWorkAreaById_result {
 public:

  CbmService_GetWorkAreaById_result(const CbmService_GetWorkAreaById_result&);
  CbmService_GetWorkAreaById_result& operator=(const CbmService_GetWorkAreaById_result&);
  CbmService_GetWorkAreaById_result() {
  }

  virtual ~CbmService_GetWorkAreaById_result() throw();
  WorkArea success;

  _CbmService_GetWorkAreaById_result__isset __isset;

  void __set_success(const WorkArea& val);

  bool operator == (const CbmService_GetWorkAreaById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaById_presult__isset {
  _CbmService_GetWorkAreaById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaById_presult__isset;

class CbmService_GetWorkAreaById_presult {
 public:


  virtual ~CbmService_GetWorkAreaById_presult() throw();
  WorkArea* success;

  _CbmService_GetWorkAreaById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkAreaByForeignKey_args__isset {
  _CbmService_GetWorkAreaByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetWorkAreaByForeignKey_args__isset;

class CbmService_GetWorkAreaByForeignKey_args {
 public:

  CbmService_GetWorkAreaByForeignKey_args(const CbmService_GetWorkAreaByForeignKey_args&);
  CbmService_GetWorkAreaByForeignKey_args& operator=(const CbmService_GetWorkAreaByForeignKey_args&);
  CbmService_GetWorkAreaByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetWorkAreaByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetWorkAreaByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetWorkAreaByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreaByForeignKey_pargs {
 public:


  virtual ~CbmService_GetWorkAreaByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaByForeignKey_result__isset {
  _CbmService_GetWorkAreaByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaByForeignKey_result__isset;

class CbmService_GetWorkAreaByForeignKey_result {
 public:

  CbmService_GetWorkAreaByForeignKey_result(const CbmService_GetWorkAreaByForeignKey_result&);
  CbmService_GetWorkAreaByForeignKey_result& operator=(const CbmService_GetWorkAreaByForeignKey_result&);
  CbmService_GetWorkAreaByForeignKey_result() {
  }

  virtual ~CbmService_GetWorkAreaByForeignKey_result() throw();
  WorkArea success;

  _CbmService_GetWorkAreaByForeignKey_result__isset __isset;

  void __set_success(const WorkArea& val);

  bool operator == (const CbmService_GetWorkAreaByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaByForeignKey_presult__isset {
  _CbmService_GetWorkAreaByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaByForeignKey_presult__isset;

class CbmService_GetWorkAreaByForeignKey_presult {
 public:


  virtual ~CbmService_GetWorkAreaByForeignKey_presult() throw();
  WorkArea* success;

  _CbmService_GetWorkAreaByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetWorkAreaList_args {
 public:

  CbmService_GetWorkAreaList_args(const CbmService_GetWorkAreaList_args&);
  CbmService_GetWorkAreaList_args& operator=(const CbmService_GetWorkAreaList_args&);
  CbmService_GetWorkAreaList_args() {
  }

  virtual ~CbmService_GetWorkAreaList_args() throw();

  bool operator == (const CbmService_GetWorkAreaList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreaList_pargs {
 public:


  virtual ~CbmService_GetWorkAreaList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaList_result__isset {
  _CbmService_GetWorkAreaList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaList_result__isset;

class CbmService_GetWorkAreaList_result {
 public:

  CbmService_GetWorkAreaList_result(const CbmService_GetWorkAreaList_result&);
  CbmService_GetWorkAreaList_result& operator=(const CbmService_GetWorkAreaList_result&);
  CbmService_GetWorkAreaList_result() {
  }

  virtual ~CbmService_GetWorkAreaList_result() throw();
  std::vector<WorkArea>  success;

  _CbmService_GetWorkAreaList_result__isset __isset;

  void __set_success(const std::vector<WorkArea> & val);

  bool operator == (const CbmService_GetWorkAreaList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaList_presult__isset {
  _CbmService_GetWorkAreaList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaList_presult__isset;

class CbmService_GetWorkAreaList_presult {
 public:


  virtual ~CbmService_GetWorkAreaList_presult() throw();
  std::vector<WorkArea> * success;

  _CbmService_GetWorkAreaList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetWorkAreaIds_args {
 public:

  CbmService_GetWorkAreaIds_args(const CbmService_GetWorkAreaIds_args&);
  CbmService_GetWorkAreaIds_args& operator=(const CbmService_GetWorkAreaIds_args&);
  CbmService_GetWorkAreaIds_args() {
  }

  virtual ~CbmService_GetWorkAreaIds_args() throw();

  bool operator == (const CbmService_GetWorkAreaIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreaIds_pargs {
 public:


  virtual ~CbmService_GetWorkAreaIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaIds_result__isset {
  _CbmService_GetWorkAreaIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaIds_result__isset;

class CbmService_GetWorkAreaIds_result {
 public:

  CbmService_GetWorkAreaIds_result(const CbmService_GetWorkAreaIds_result&);
  CbmService_GetWorkAreaIds_result& operator=(const CbmService_GetWorkAreaIds_result&);
  CbmService_GetWorkAreaIds_result() {
  }

  virtual ~CbmService_GetWorkAreaIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetWorkAreaIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetWorkAreaIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaIds_presult__isset {
  _CbmService_GetWorkAreaIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaIds_presult__isset;

class CbmService_GetWorkAreaIds_presult {
 public:


  virtual ~CbmService_GetWorkAreaIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetWorkAreaIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetWorkAreaNames_args {
 public:

  CbmService_GetWorkAreaNames_args(const CbmService_GetWorkAreaNames_args&);
  CbmService_GetWorkAreaNames_args& operator=(const CbmService_GetWorkAreaNames_args&);
  CbmService_GetWorkAreaNames_args() {
  }

  virtual ~CbmService_GetWorkAreaNames_args() throw();

  bool operator == (const CbmService_GetWorkAreaNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreaNames_pargs {
 public:


  virtual ~CbmService_GetWorkAreaNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaNames_result__isset {
  _CbmService_GetWorkAreaNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaNames_result__isset;

class CbmService_GetWorkAreaNames_result {
 public:

  CbmService_GetWorkAreaNames_result(const CbmService_GetWorkAreaNames_result&);
  CbmService_GetWorkAreaNames_result& operator=(const CbmService_GetWorkAreaNames_result&);
  CbmService_GetWorkAreaNames_result() {
  }

  virtual ~CbmService_GetWorkAreaNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetWorkAreaNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetWorkAreaNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaNames_presult__isset {
  _CbmService_GetWorkAreaNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaNames_presult__isset;

class CbmService_GetWorkAreaNames_presult {
 public:


  virtual ~CbmService_GetWorkAreaNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetWorkAreaNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreWorkArea_args__isset {
  _CbmService_AddMoreWorkArea_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreWorkArea_args__isset;

class CbmService_AddMoreWorkArea_args {
 public:

  CbmService_AddMoreWorkArea_args(const CbmService_AddMoreWorkArea_args&);
  CbmService_AddMoreWorkArea_args& operator=(const CbmService_AddMoreWorkArea_args&);
  CbmService_AddMoreWorkArea_args() {
  }

  virtual ~CbmService_AddMoreWorkArea_args() throw();
  std::vector<WorkArea>  objs;

  _CbmService_AddMoreWorkArea_args__isset __isset;

  void __set_objs(const std::vector<WorkArea> & val);

  bool operator == (const CbmService_AddMoreWorkArea_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreWorkArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreWorkArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreWorkArea_pargs {
 public:


  virtual ~CbmService_AddMoreWorkArea_pargs() throw();
  const std::vector<WorkArea> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreWorkArea_result {
 public:

  CbmService_AddMoreWorkArea_result(const CbmService_AddMoreWorkArea_result&);
  CbmService_AddMoreWorkArea_result& operator=(const CbmService_AddMoreWorkArea_result&);
  CbmService_AddMoreWorkArea_result() {
  }

  virtual ~CbmService_AddMoreWorkArea_result() throw();

  bool operator == (const CbmService_AddMoreWorkArea_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreWorkArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreWorkArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreWorkArea_presult {
 public:


  virtual ~CbmService_AddMoreWorkArea_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreWorkArea_args__isset {
  _CbmService_DeleteMoreWorkArea_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreWorkArea_args__isset;

class CbmService_DeleteMoreWorkArea_args {
 public:

  CbmService_DeleteMoreWorkArea_args(const CbmService_DeleteMoreWorkArea_args&);
  CbmService_DeleteMoreWorkArea_args& operator=(const CbmService_DeleteMoreWorkArea_args&);
  CbmService_DeleteMoreWorkArea_args() {
  }

  virtual ~CbmService_DeleteMoreWorkArea_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreWorkArea_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreWorkArea_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreWorkArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreWorkArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreWorkArea_pargs {
 public:


  virtual ~CbmService_DeleteMoreWorkArea_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreWorkArea_result {
 public:

  CbmService_DeleteMoreWorkArea_result(const CbmService_DeleteMoreWorkArea_result&);
  CbmService_DeleteMoreWorkArea_result& operator=(const CbmService_DeleteMoreWorkArea_result&);
  CbmService_DeleteMoreWorkArea_result() {
  }

  virtual ~CbmService_DeleteMoreWorkArea_result() throw();

  bool operator == (const CbmService_DeleteMoreWorkArea_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreWorkArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreWorkArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreWorkArea_presult {
 public:


  virtual ~CbmService_DeleteMoreWorkArea_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkAreaByFields_args__isset {
  _CbmService_GetWorkAreaByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetWorkAreaByFields_args__isset;

class CbmService_GetWorkAreaByFields_args {
 public:

  CbmService_GetWorkAreaByFields_args(const CbmService_GetWorkAreaByFields_args&);
  CbmService_GetWorkAreaByFields_args& operator=(const CbmService_GetWorkAreaByFields_args&);
  CbmService_GetWorkAreaByFields_args() {
  }

  virtual ~CbmService_GetWorkAreaByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetWorkAreaByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetWorkAreaByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreaByFields_pargs {
 public:


  virtual ~CbmService_GetWorkAreaByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaByFields_result__isset {
  _CbmService_GetWorkAreaByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaByFields_result__isset;

class CbmService_GetWorkAreaByFields_result {
 public:

  CbmService_GetWorkAreaByFields_result(const CbmService_GetWorkAreaByFields_result&);
  CbmService_GetWorkAreaByFields_result& operator=(const CbmService_GetWorkAreaByFields_result&);
  CbmService_GetWorkAreaByFields_result() {
  }

  virtual ~CbmService_GetWorkAreaByFields_result() throw();
  WorkArea success;

  _CbmService_GetWorkAreaByFields_result__isset __isset;

  void __set_success(const WorkArea& val);

  bool operator == (const CbmService_GetWorkAreaByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaByFields_presult__isset {
  _CbmService_GetWorkAreaByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaByFields_presult__isset;

class CbmService_GetWorkAreaByFields_presult {
 public:


  virtual ~CbmService_GetWorkAreaByFields_presult() throw();
  WorkArea* success;

  _CbmService_GetWorkAreaByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkAreaByFields1_args__isset {
  _CbmService_GetWorkAreaByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetWorkAreaByFields1_args__isset;

class CbmService_GetWorkAreaByFields1_args {
 public:

  CbmService_GetWorkAreaByFields1_args(const CbmService_GetWorkAreaByFields1_args&);
  CbmService_GetWorkAreaByFields1_args& operator=(const CbmService_GetWorkAreaByFields1_args&);
  CbmService_GetWorkAreaByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetWorkAreaByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetWorkAreaByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetWorkAreaByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreaByFields1_pargs {
 public:


  virtual ~CbmService_GetWorkAreaByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaByFields1_result__isset {
  _CbmService_GetWorkAreaByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaByFields1_result__isset;

class CbmService_GetWorkAreaByFields1_result {
 public:

  CbmService_GetWorkAreaByFields1_result(const CbmService_GetWorkAreaByFields1_result&);
  CbmService_GetWorkAreaByFields1_result& operator=(const CbmService_GetWorkAreaByFields1_result&);
  CbmService_GetWorkAreaByFields1_result() {
  }

  virtual ~CbmService_GetWorkAreaByFields1_result() throw();
  WorkArea success;

  _CbmService_GetWorkAreaByFields1_result__isset __isset;

  void __set_success(const WorkArea& val);

  bool operator == (const CbmService_GetWorkAreaByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaByFields1_presult__isset {
  _CbmService_GetWorkAreaByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaByFields1_presult__isset;

class CbmService_GetWorkAreaByFields1_presult {
 public:


  virtual ~CbmService_GetWorkAreaByFields1_presult() throw();
  WorkArea* success;

  _CbmService_GetWorkAreaByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkAreaByFields2_args__isset {
  _CbmService_GetWorkAreaByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetWorkAreaByFields2_args__isset;

class CbmService_GetWorkAreaByFields2_args {
 public:

  CbmService_GetWorkAreaByFields2_args(const CbmService_GetWorkAreaByFields2_args&);
  CbmService_GetWorkAreaByFields2_args& operator=(const CbmService_GetWorkAreaByFields2_args&);
  CbmService_GetWorkAreaByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetWorkAreaByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetWorkAreaByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetWorkAreaByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreaByFields2_pargs {
 public:


  virtual ~CbmService_GetWorkAreaByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaByFields2_result__isset {
  _CbmService_GetWorkAreaByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaByFields2_result__isset;

class CbmService_GetWorkAreaByFields2_result {
 public:

  CbmService_GetWorkAreaByFields2_result(const CbmService_GetWorkAreaByFields2_result&);
  CbmService_GetWorkAreaByFields2_result& operator=(const CbmService_GetWorkAreaByFields2_result&);
  CbmService_GetWorkAreaByFields2_result() {
  }

  virtual ~CbmService_GetWorkAreaByFields2_result() throw();
  WorkArea success;

  _CbmService_GetWorkAreaByFields2_result__isset __isset;

  void __set_success(const WorkArea& val);

  bool operator == (const CbmService_GetWorkAreaByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaByFields2_presult__isset {
  _CbmService_GetWorkAreaByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaByFields2_presult__isset;

class CbmService_GetWorkAreaByFields2_presult {
 public:


  virtual ~CbmService_GetWorkAreaByFields2_presult() throw();
  WorkArea* success;

  _CbmService_GetWorkAreaByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkAreaListByFields_args__isset {
  _CbmService_GetWorkAreaListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetWorkAreaListByFields_args__isset;

class CbmService_GetWorkAreaListByFields_args {
 public:

  CbmService_GetWorkAreaListByFields_args(const CbmService_GetWorkAreaListByFields_args&);
  CbmService_GetWorkAreaListByFields_args& operator=(const CbmService_GetWorkAreaListByFields_args&);
  CbmService_GetWorkAreaListByFields_args() {
  }

  virtual ~CbmService_GetWorkAreaListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetWorkAreaListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetWorkAreaListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreaListByFields_pargs {
 public:


  virtual ~CbmService_GetWorkAreaListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaListByFields_result__isset {
  _CbmService_GetWorkAreaListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaListByFields_result__isset;

class CbmService_GetWorkAreaListByFields_result {
 public:

  CbmService_GetWorkAreaListByFields_result(const CbmService_GetWorkAreaListByFields_result&);
  CbmService_GetWorkAreaListByFields_result& operator=(const CbmService_GetWorkAreaListByFields_result&);
  CbmService_GetWorkAreaListByFields_result() {
  }

  virtual ~CbmService_GetWorkAreaListByFields_result() throw();
  std::vector<WorkArea>  success;

  _CbmService_GetWorkAreaListByFields_result__isset __isset;

  void __set_success(const std::vector<WorkArea> & val);

  bool operator == (const CbmService_GetWorkAreaListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaListByFields_presult__isset {
  _CbmService_GetWorkAreaListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaListByFields_presult__isset;

class CbmService_GetWorkAreaListByFields_presult {
 public:


  virtual ~CbmService_GetWorkAreaListByFields_presult() throw();
  std::vector<WorkArea> * success;

  _CbmService_GetWorkAreaListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkAreaListByFields1_args__isset {
  _CbmService_GetWorkAreaListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetWorkAreaListByFields1_args__isset;

class CbmService_GetWorkAreaListByFields1_args {
 public:

  CbmService_GetWorkAreaListByFields1_args(const CbmService_GetWorkAreaListByFields1_args&);
  CbmService_GetWorkAreaListByFields1_args& operator=(const CbmService_GetWorkAreaListByFields1_args&);
  CbmService_GetWorkAreaListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetWorkAreaListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetWorkAreaListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetWorkAreaListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreaListByFields1_pargs {
 public:


  virtual ~CbmService_GetWorkAreaListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaListByFields1_result__isset {
  _CbmService_GetWorkAreaListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaListByFields1_result__isset;

class CbmService_GetWorkAreaListByFields1_result {
 public:

  CbmService_GetWorkAreaListByFields1_result(const CbmService_GetWorkAreaListByFields1_result&);
  CbmService_GetWorkAreaListByFields1_result& operator=(const CbmService_GetWorkAreaListByFields1_result&);
  CbmService_GetWorkAreaListByFields1_result() {
  }

  virtual ~CbmService_GetWorkAreaListByFields1_result() throw();
  std::vector<WorkArea>  success;

  _CbmService_GetWorkAreaListByFields1_result__isset __isset;

  void __set_success(const std::vector<WorkArea> & val);

  bool operator == (const CbmService_GetWorkAreaListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaListByFields1_presult__isset {
  _CbmService_GetWorkAreaListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaListByFields1_presult__isset;

class CbmService_GetWorkAreaListByFields1_presult {
 public:


  virtual ~CbmService_GetWorkAreaListByFields1_presult() throw();
  std::vector<WorkArea> * success;

  _CbmService_GetWorkAreaListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkAreaListByFields2_args__isset {
  _CbmService_GetWorkAreaListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetWorkAreaListByFields2_args__isset;

class CbmService_GetWorkAreaListByFields2_args {
 public:

  CbmService_GetWorkAreaListByFields2_args(const CbmService_GetWorkAreaListByFields2_args&);
  CbmService_GetWorkAreaListByFields2_args& operator=(const CbmService_GetWorkAreaListByFields2_args&);
  CbmService_GetWorkAreaListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetWorkAreaListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetWorkAreaListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetWorkAreaListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreaListByFields2_pargs {
 public:


  virtual ~CbmService_GetWorkAreaListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaListByFields2_result__isset {
  _CbmService_GetWorkAreaListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaListByFields2_result__isset;

class CbmService_GetWorkAreaListByFields2_result {
 public:

  CbmService_GetWorkAreaListByFields2_result(const CbmService_GetWorkAreaListByFields2_result&);
  CbmService_GetWorkAreaListByFields2_result& operator=(const CbmService_GetWorkAreaListByFields2_result&);
  CbmService_GetWorkAreaListByFields2_result() {
  }

  virtual ~CbmService_GetWorkAreaListByFields2_result() throw();
  std::vector<WorkArea>  success;

  _CbmService_GetWorkAreaListByFields2_result__isset __isset;

  void __set_success(const std::vector<WorkArea> & val);

  bool operator == (const CbmService_GetWorkAreaListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaListByFields2_presult__isset {
  _CbmService_GetWorkAreaListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaListByFields2_presult__isset;

class CbmService_GetWorkAreaListByFields2_presult {
 public:


  virtual ~CbmService_GetWorkAreaListByFields2_presult() throw();
  std::vector<WorkArea> * success;

  _CbmService_GetWorkAreaListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddWorkSurf_args__isset {
  _CbmService_AddWorkSurf_args__isset() : work_surf(false) {}
  bool work_surf :1;
} _CbmService_AddWorkSurf_args__isset;

class CbmService_AddWorkSurf_args {
 public:

  CbmService_AddWorkSurf_args(const CbmService_AddWorkSurf_args&);
  CbmService_AddWorkSurf_args& operator=(const CbmService_AddWorkSurf_args&);
  CbmService_AddWorkSurf_args() {
  }

  virtual ~CbmService_AddWorkSurf_args() throw();
  WorkSurf work_surf;

  _CbmService_AddWorkSurf_args__isset __isset;

  void __set_work_surf(const WorkSurf& val);

  bool operator == (const CbmService_AddWorkSurf_args & rhs) const
  {
    if (!(work_surf == rhs.work_surf))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddWorkSurf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddWorkSurf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddWorkSurf_pargs {
 public:


  virtual ~CbmService_AddWorkSurf_pargs() throw();
  const WorkSurf* work_surf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddWorkSurf_result__isset {
  _CbmService_AddWorkSurf_result__isset() : success(false) {}
  bool success :1;
} _CbmService_AddWorkSurf_result__isset;

class CbmService_AddWorkSurf_result {
 public:

  CbmService_AddWorkSurf_result(const CbmService_AddWorkSurf_result&);
  CbmService_AddWorkSurf_result& operator=(const CbmService_AddWorkSurf_result&);
  CbmService_AddWorkSurf_result() : success(0) {
  }

  virtual ~CbmService_AddWorkSurf_result() throw();
  int32_t success;

  _CbmService_AddWorkSurf_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_AddWorkSurf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddWorkSurf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddWorkSurf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_AddWorkSurf_presult__isset {
  _CbmService_AddWorkSurf_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_AddWorkSurf_presult__isset;

class CbmService_AddWorkSurf_presult {
 public:


  virtual ~CbmService_AddWorkSurf_presult() throw();
  int32_t* success;

  _CbmService_AddWorkSurf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteWorkSurf_args__isset {
  _CbmService_DeleteWorkSurf_args__isset() : id(false) {}
  bool id :1;
} _CbmService_DeleteWorkSurf_args__isset;

class CbmService_DeleteWorkSurf_args {
 public:

  CbmService_DeleteWorkSurf_args(const CbmService_DeleteWorkSurf_args&);
  CbmService_DeleteWorkSurf_args& operator=(const CbmService_DeleteWorkSurf_args&);
  CbmService_DeleteWorkSurf_args() : id(0) {
  }

  virtual ~CbmService_DeleteWorkSurf_args() throw();
  int32_t id;

  _CbmService_DeleteWorkSurf_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_DeleteWorkSurf_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteWorkSurf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteWorkSurf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteWorkSurf_pargs {
 public:


  virtual ~CbmService_DeleteWorkSurf_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteWorkSurf_result__isset {
  _CbmService_DeleteWorkSurf_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteWorkSurf_result__isset;

class CbmService_DeleteWorkSurf_result {
 public:

  CbmService_DeleteWorkSurf_result(const CbmService_DeleteWorkSurf_result&);
  CbmService_DeleteWorkSurf_result& operator=(const CbmService_DeleteWorkSurf_result&);
  CbmService_DeleteWorkSurf_result() : success(0) {
  }

  virtual ~CbmService_DeleteWorkSurf_result() throw();
  bool success;

  _CbmService_DeleteWorkSurf_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_DeleteWorkSurf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteWorkSurf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteWorkSurf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DeleteWorkSurf_presult__isset {
  _CbmService_DeleteWorkSurf_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DeleteWorkSurf_presult__isset;

class CbmService_DeleteWorkSurf_presult {
 public:


  virtual ~CbmService_DeleteWorkSurf_presult() throw();
  bool* success;

  _CbmService_DeleteWorkSurf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_UpdateWorkSurf_args__isset {
  _CbmService_UpdateWorkSurf_args__isset() : work_surf(false) {}
  bool work_surf :1;
} _CbmService_UpdateWorkSurf_args__isset;

class CbmService_UpdateWorkSurf_args {
 public:

  CbmService_UpdateWorkSurf_args(const CbmService_UpdateWorkSurf_args&);
  CbmService_UpdateWorkSurf_args& operator=(const CbmService_UpdateWorkSurf_args&);
  CbmService_UpdateWorkSurf_args() {
  }

  virtual ~CbmService_UpdateWorkSurf_args() throw();
  WorkSurf work_surf;

  _CbmService_UpdateWorkSurf_args__isset __isset;

  void __set_work_surf(const WorkSurf& val);

  bool operator == (const CbmService_UpdateWorkSurf_args & rhs) const
  {
    if (!(work_surf == rhs.work_surf))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateWorkSurf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateWorkSurf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_UpdateWorkSurf_pargs {
 public:


  virtual ~CbmService_UpdateWorkSurf_pargs() throw();
  const WorkSurf* work_surf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateWorkSurf_result__isset {
  _CbmService_UpdateWorkSurf_result__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateWorkSurf_result__isset;

class CbmService_UpdateWorkSurf_result {
 public:

  CbmService_UpdateWorkSurf_result(const CbmService_UpdateWorkSurf_result&);
  CbmService_UpdateWorkSurf_result& operator=(const CbmService_UpdateWorkSurf_result&);
  CbmService_UpdateWorkSurf_result() : success(0) {
  }

  virtual ~CbmService_UpdateWorkSurf_result() throw();
  bool success;

  _CbmService_UpdateWorkSurf_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const CbmService_UpdateWorkSurf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_UpdateWorkSurf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_UpdateWorkSurf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_UpdateWorkSurf_presult__isset {
  _CbmService_UpdateWorkSurf_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_UpdateWorkSurf_presult__isset;

class CbmService_UpdateWorkSurf_presult {
 public:


  virtual ~CbmService_UpdateWorkSurf_presult() throw();
  bool* success;

  _CbmService_UpdateWorkSurf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkSurfById_args__isset {
  _CbmService_GetWorkSurfById_args__isset() : id(false) {}
  bool id :1;
} _CbmService_GetWorkSurfById_args__isset;

class CbmService_GetWorkSurfById_args {
 public:

  CbmService_GetWorkSurfById_args(const CbmService_GetWorkSurfById_args&);
  CbmService_GetWorkSurfById_args& operator=(const CbmService_GetWorkSurfById_args&);
  CbmService_GetWorkSurfById_args() : id(0) {
  }

  virtual ~CbmService_GetWorkSurfById_args() throw();
  int32_t id;

  _CbmService_GetWorkSurfById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetWorkSurfById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfById_pargs {
 public:


  virtual ~CbmService_GetWorkSurfById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfById_result__isset {
  _CbmService_GetWorkSurfById_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfById_result__isset;

class CbmService_GetWorkSurfById_result {
 public:

  CbmService_GetWorkSurfById_result(const CbmService_GetWorkSurfById_result&);
  CbmService_GetWorkSurfById_result& operator=(const CbmService_GetWorkSurfById_result&);
  CbmService_GetWorkSurfById_result() {
  }

  virtual ~CbmService_GetWorkSurfById_result() throw();
  WorkSurf success;

  _CbmService_GetWorkSurfById_result__isset __isset;

  void __set_success(const WorkSurf& val);

  bool operator == (const CbmService_GetWorkSurfById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfById_presult__isset {
  _CbmService_GetWorkSurfById_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfById_presult__isset;

class CbmService_GetWorkSurfById_presult {
 public:


  virtual ~CbmService_GetWorkSurfById_presult() throw();
  WorkSurf* success;

  _CbmService_GetWorkSurfById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkSurfByForeignKey_args__isset {
  _CbmService_GetWorkSurfByForeignKey_args__isset() : fkey(false), id(false) {}
  bool fkey :1;
  bool id :1;
} _CbmService_GetWorkSurfByForeignKey_args__isset;

class CbmService_GetWorkSurfByForeignKey_args {
 public:

  CbmService_GetWorkSurfByForeignKey_args(const CbmService_GetWorkSurfByForeignKey_args&);
  CbmService_GetWorkSurfByForeignKey_args& operator=(const CbmService_GetWorkSurfByForeignKey_args&);
  CbmService_GetWorkSurfByForeignKey_args() : fkey(), id(0) {
  }

  virtual ~CbmService_GetWorkSurfByForeignKey_args() throw();
  std::string fkey;
  int32_t id;

  _CbmService_GetWorkSurfByForeignKey_args__isset __isset;

  void __set_fkey(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const CbmService_GetWorkSurfByForeignKey_args & rhs) const
  {
    if (!(fkey == rhs.fkey))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfByForeignKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfByForeignKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfByForeignKey_pargs {
 public:


  virtual ~CbmService_GetWorkSurfByForeignKey_pargs() throw();
  const std::string* fkey;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfByForeignKey_result__isset {
  _CbmService_GetWorkSurfByForeignKey_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfByForeignKey_result__isset;

class CbmService_GetWorkSurfByForeignKey_result {
 public:

  CbmService_GetWorkSurfByForeignKey_result(const CbmService_GetWorkSurfByForeignKey_result&);
  CbmService_GetWorkSurfByForeignKey_result& operator=(const CbmService_GetWorkSurfByForeignKey_result&);
  CbmService_GetWorkSurfByForeignKey_result() {
  }

  virtual ~CbmService_GetWorkSurfByForeignKey_result() throw();
  WorkSurf success;

  _CbmService_GetWorkSurfByForeignKey_result__isset __isset;

  void __set_success(const WorkSurf& val);

  bool operator == (const CbmService_GetWorkSurfByForeignKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfByForeignKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfByForeignKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfByForeignKey_presult__isset {
  _CbmService_GetWorkSurfByForeignKey_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfByForeignKey_presult__isset;

class CbmService_GetWorkSurfByForeignKey_presult {
 public:


  virtual ~CbmService_GetWorkSurfByForeignKey_presult() throw();
  WorkSurf* success;

  _CbmService_GetWorkSurfByForeignKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetWorkSurfList_args {
 public:

  CbmService_GetWorkSurfList_args(const CbmService_GetWorkSurfList_args&);
  CbmService_GetWorkSurfList_args& operator=(const CbmService_GetWorkSurfList_args&);
  CbmService_GetWorkSurfList_args() {
  }

  virtual ~CbmService_GetWorkSurfList_args() throw();

  bool operator == (const CbmService_GetWorkSurfList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfList_pargs {
 public:


  virtual ~CbmService_GetWorkSurfList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfList_result__isset {
  _CbmService_GetWorkSurfList_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfList_result__isset;

class CbmService_GetWorkSurfList_result {
 public:

  CbmService_GetWorkSurfList_result(const CbmService_GetWorkSurfList_result&);
  CbmService_GetWorkSurfList_result& operator=(const CbmService_GetWorkSurfList_result&);
  CbmService_GetWorkSurfList_result() {
  }

  virtual ~CbmService_GetWorkSurfList_result() throw();
  std::vector<WorkSurf>  success;

  _CbmService_GetWorkSurfList_result__isset __isset;

  void __set_success(const std::vector<WorkSurf> & val);

  bool operator == (const CbmService_GetWorkSurfList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfList_presult__isset {
  _CbmService_GetWorkSurfList_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfList_presult__isset;

class CbmService_GetWorkSurfList_presult {
 public:


  virtual ~CbmService_GetWorkSurfList_presult() throw();
  std::vector<WorkSurf> * success;

  _CbmService_GetWorkSurfList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetWorkSurfIds_args {
 public:

  CbmService_GetWorkSurfIds_args(const CbmService_GetWorkSurfIds_args&);
  CbmService_GetWorkSurfIds_args& operator=(const CbmService_GetWorkSurfIds_args&);
  CbmService_GetWorkSurfIds_args() {
  }

  virtual ~CbmService_GetWorkSurfIds_args() throw();

  bool operator == (const CbmService_GetWorkSurfIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfIds_pargs {
 public:


  virtual ~CbmService_GetWorkSurfIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfIds_result__isset {
  _CbmService_GetWorkSurfIds_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfIds_result__isset;

class CbmService_GetWorkSurfIds_result {
 public:

  CbmService_GetWorkSurfIds_result(const CbmService_GetWorkSurfIds_result&);
  CbmService_GetWorkSurfIds_result& operator=(const CbmService_GetWorkSurfIds_result&);
  CbmService_GetWorkSurfIds_result() {
  }

  virtual ~CbmService_GetWorkSurfIds_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetWorkSurfIds_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetWorkSurfIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfIds_presult__isset {
  _CbmService_GetWorkSurfIds_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfIds_presult__isset;

class CbmService_GetWorkSurfIds_presult {
 public:


  virtual ~CbmService_GetWorkSurfIds_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetWorkSurfIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetWorkSurfNames_args {
 public:

  CbmService_GetWorkSurfNames_args(const CbmService_GetWorkSurfNames_args&);
  CbmService_GetWorkSurfNames_args& operator=(const CbmService_GetWorkSurfNames_args&);
  CbmService_GetWorkSurfNames_args() {
  }

  virtual ~CbmService_GetWorkSurfNames_args() throw();

  bool operator == (const CbmService_GetWorkSurfNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfNames_pargs {
 public:


  virtual ~CbmService_GetWorkSurfNames_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfNames_result__isset {
  _CbmService_GetWorkSurfNames_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfNames_result__isset;

class CbmService_GetWorkSurfNames_result {
 public:

  CbmService_GetWorkSurfNames_result(const CbmService_GetWorkSurfNames_result&);
  CbmService_GetWorkSurfNames_result& operator=(const CbmService_GetWorkSurfNames_result&);
  CbmService_GetWorkSurfNames_result() {
  }

  virtual ~CbmService_GetWorkSurfNames_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetWorkSurfNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetWorkSurfNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfNames_presult__isset {
  _CbmService_GetWorkSurfNames_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfNames_presult__isset;

class CbmService_GetWorkSurfNames_presult {
 public:


  virtual ~CbmService_GetWorkSurfNames_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetWorkSurfNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_AddMoreWorkSurf_args__isset {
  _CbmService_AddMoreWorkSurf_args__isset() : objs(false) {}
  bool objs :1;
} _CbmService_AddMoreWorkSurf_args__isset;

class CbmService_AddMoreWorkSurf_args {
 public:

  CbmService_AddMoreWorkSurf_args(const CbmService_AddMoreWorkSurf_args&);
  CbmService_AddMoreWorkSurf_args& operator=(const CbmService_AddMoreWorkSurf_args&);
  CbmService_AddMoreWorkSurf_args() {
  }

  virtual ~CbmService_AddMoreWorkSurf_args() throw();
  std::vector<WorkSurf>  objs;

  _CbmService_AddMoreWorkSurf_args__isset __isset;

  void __set_objs(const std::vector<WorkSurf> & val);

  bool operator == (const CbmService_AddMoreWorkSurf_args & rhs) const
  {
    if (!(objs == rhs.objs))
      return false;
    return true;
  }
  bool operator != (const CbmService_AddMoreWorkSurf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreWorkSurf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreWorkSurf_pargs {
 public:


  virtual ~CbmService_AddMoreWorkSurf_pargs() throw();
  const std::vector<WorkSurf> * objs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreWorkSurf_result {
 public:

  CbmService_AddMoreWorkSurf_result(const CbmService_AddMoreWorkSurf_result&);
  CbmService_AddMoreWorkSurf_result& operator=(const CbmService_AddMoreWorkSurf_result&);
  CbmService_AddMoreWorkSurf_result() {
  }

  virtual ~CbmService_AddMoreWorkSurf_result() throw();

  bool operator == (const CbmService_AddMoreWorkSurf_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_AddMoreWorkSurf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_AddMoreWorkSurf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_AddMoreWorkSurf_presult {
 public:


  virtual ~CbmService_AddMoreWorkSurf_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DeleteMoreWorkSurf_args__isset {
  _CbmService_DeleteMoreWorkSurf_args__isset() : obj_ids(false) {}
  bool obj_ids :1;
} _CbmService_DeleteMoreWorkSurf_args__isset;

class CbmService_DeleteMoreWorkSurf_args {
 public:

  CbmService_DeleteMoreWorkSurf_args(const CbmService_DeleteMoreWorkSurf_args&);
  CbmService_DeleteMoreWorkSurf_args& operator=(const CbmService_DeleteMoreWorkSurf_args&);
  CbmService_DeleteMoreWorkSurf_args() {
  }

  virtual ~CbmService_DeleteMoreWorkSurf_args() throw();
  std::vector<int32_t>  obj_ids;

  _CbmService_DeleteMoreWorkSurf_args__isset __isset;

  void __set_obj_ids(const std::vector<int32_t> & val);

  bool operator == (const CbmService_DeleteMoreWorkSurf_args & rhs) const
  {
    if (!(obj_ids == rhs.obj_ids))
      return false;
    return true;
  }
  bool operator != (const CbmService_DeleteMoreWorkSurf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreWorkSurf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreWorkSurf_pargs {
 public:


  virtual ~CbmService_DeleteMoreWorkSurf_pargs() throw();
  const std::vector<int32_t> * obj_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreWorkSurf_result {
 public:

  CbmService_DeleteMoreWorkSurf_result(const CbmService_DeleteMoreWorkSurf_result&);
  CbmService_DeleteMoreWorkSurf_result& operator=(const CbmService_DeleteMoreWorkSurf_result&);
  CbmService_DeleteMoreWorkSurf_result() {
  }

  virtual ~CbmService_DeleteMoreWorkSurf_result() throw();

  bool operator == (const CbmService_DeleteMoreWorkSurf_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_DeleteMoreWorkSurf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DeleteMoreWorkSurf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DeleteMoreWorkSurf_presult {
 public:


  virtual ~CbmService_DeleteMoreWorkSurf_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkSurfByFields_args__isset {
  _CbmService_GetWorkSurfByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetWorkSurfByFields_args__isset;

class CbmService_GetWorkSurfByFields_args {
 public:

  CbmService_GetWorkSurfByFields_args(const CbmService_GetWorkSurfByFields_args&);
  CbmService_GetWorkSurfByFields_args& operator=(const CbmService_GetWorkSurfByFields_args&);
  CbmService_GetWorkSurfByFields_args() {
  }

  virtual ~CbmService_GetWorkSurfByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetWorkSurfByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetWorkSurfByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfByFields_pargs {
 public:


  virtual ~CbmService_GetWorkSurfByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfByFields_result__isset {
  _CbmService_GetWorkSurfByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfByFields_result__isset;

class CbmService_GetWorkSurfByFields_result {
 public:

  CbmService_GetWorkSurfByFields_result(const CbmService_GetWorkSurfByFields_result&);
  CbmService_GetWorkSurfByFields_result& operator=(const CbmService_GetWorkSurfByFields_result&);
  CbmService_GetWorkSurfByFields_result() {
  }

  virtual ~CbmService_GetWorkSurfByFields_result() throw();
  WorkSurf success;

  _CbmService_GetWorkSurfByFields_result__isset __isset;

  void __set_success(const WorkSurf& val);

  bool operator == (const CbmService_GetWorkSurfByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfByFields_presult__isset {
  _CbmService_GetWorkSurfByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfByFields_presult__isset;

class CbmService_GetWorkSurfByFields_presult {
 public:


  virtual ~CbmService_GetWorkSurfByFields_presult() throw();
  WorkSurf* success;

  _CbmService_GetWorkSurfByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkSurfByFields1_args__isset {
  _CbmService_GetWorkSurfByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetWorkSurfByFields1_args__isset;

class CbmService_GetWorkSurfByFields1_args {
 public:

  CbmService_GetWorkSurfByFields1_args(const CbmService_GetWorkSurfByFields1_args&);
  CbmService_GetWorkSurfByFields1_args& operator=(const CbmService_GetWorkSurfByFields1_args&);
  CbmService_GetWorkSurfByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetWorkSurfByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetWorkSurfByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetWorkSurfByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfByFields1_pargs {
 public:


  virtual ~CbmService_GetWorkSurfByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfByFields1_result__isset {
  _CbmService_GetWorkSurfByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfByFields1_result__isset;

class CbmService_GetWorkSurfByFields1_result {
 public:

  CbmService_GetWorkSurfByFields1_result(const CbmService_GetWorkSurfByFields1_result&);
  CbmService_GetWorkSurfByFields1_result& operator=(const CbmService_GetWorkSurfByFields1_result&);
  CbmService_GetWorkSurfByFields1_result() {
  }

  virtual ~CbmService_GetWorkSurfByFields1_result() throw();
  WorkSurf success;

  _CbmService_GetWorkSurfByFields1_result__isset __isset;

  void __set_success(const WorkSurf& val);

  bool operator == (const CbmService_GetWorkSurfByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfByFields1_presult__isset {
  _CbmService_GetWorkSurfByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfByFields1_presult__isset;

class CbmService_GetWorkSurfByFields1_presult {
 public:


  virtual ~CbmService_GetWorkSurfByFields1_presult() throw();
  WorkSurf* success;

  _CbmService_GetWorkSurfByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkSurfByFields2_args__isset {
  _CbmService_GetWorkSurfByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetWorkSurfByFields2_args__isset;

class CbmService_GetWorkSurfByFields2_args {
 public:

  CbmService_GetWorkSurfByFields2_args(const CbmService_GetWorkSurfByFields2_args&);
  CbmService_GetWorkSurfByFields2_args& operator=(const CbmService_GetWorkSurfByFields2_args&);
  CbmService_GetWorkSurfByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetWorkSurfByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetWorkSurfByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetWorkSurfByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfByFields2_pargs {
 public:


  virtual ~CbmService_GetWorkSurfByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfByFields2_result__isset {
  _CbmService_GetWorkSurfByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfByFields2_result__isset;

class CbmService_GetWorkSurfByFields2_result {
 public:

  CbmService_GetWorkSurfByFields2_result(const CbmService_GetWorkSurfByFields2_result&);
  CbmService_GetWorkSurfByFields2_result& operator=(const CbmService_GetWorkSurfByFields2_result&);
  CbmService_GetWorkSurfByFields2_result() {
  }

  virtual ~CbmService_GetWorkSurfByFields2_result() throw();
  WorkSurf success;

  _CbmService_GetWorkSurfByFields2_result__isset __isset;

  void __set_success(const WorkSurf& val);

  bool operator == (const CbmService_GetWorkSurfByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfByFields2_presult__isset {
  _CbmService_GetWorkSurfByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfByFields2_presult__isset;

class CbmService_GetWorkSurfByFields2_presult {
 public:


  virtual ~CbmService_GetWorkSurfByFields2_presult() throw();
  WorkSurf* success;

  _CbmService_GetWorkSurfByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkSurfListByFields_args__isset {
  _CbmService_GetWorkSurfListByFields_args__isset() : fields(false) {}
  bool fields :1;
} _CbmService_GetWorkSurfListByFields_args__isset;

class CbmService_GetWorkSurfListByFields_args {
 public:

  CbmService_GetWorkSurfListByFields_args(const CbmService_GetWorkSurfListByFields_args&);
  CbmService_GetWorkSurfListByFields_args& operator=(const CbmService_GetWorkSurfListByFields_args&);
  CbmService_GetWorkSurfListByFields_args() {
  }

  virtual ~CbmService_GetWorkSurfListByFields_args() throw();
  std::map<std::string, std::string>  fields;

  _CbmService_GetWorkSurfListByFields_args__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val);

  bool operator == (const CbmService_GetWorkSurfListByFields_args & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfListByFields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfListByFields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfListByFields_pargs {
 public:


  virtual ~CbmService_GetWorkSurfListByFields_pargs() throw();
  const std::map<std::string, std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfListByFields_result__isset {
  _CbmService_GetWorkSurfListByFields_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfListByFields_result__isset;

class CbmService_GetWorkSurfListByFields_result {
 public:

  CbmService_GetWorkSurfListByFields_result(const CbmService_GetWorkSurfListByFields_result&);
  CbmService_GetWorkSurfListByFields_result& operator=(const CbmService_GetWorkSurfListByFields_result&);
  CbmService_GetWorkSurfListByFields_result() {
  }

  virtual ~CbmService_GetWorkSurfListByFields_result() throw();
  std::vector<WorkSurf>  success;

  _CbmService_GetWorkSurfListByFields_result__isset __isset;

  void __set_success(const std::vector<WorkSurf> & val);

  bool operator == (const CbmService_GetWorkSurfListByFields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfListByFields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfListByFields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfListByFields_presult__isset {
  _CbmService_GetWorkSurfListByFields_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfListByFields_presult__isset;

class CbmService_GetWorkSurfListByFields_presult {
 public:


  virtual ~CbmService_GetWorkSurfListByFields_presult() throw();
  std::vector<WorkSurf> * success;

  _CbmService_GetWorkSurfListByFields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkSurfListByFields1_args__isset {
  _CbmService_GetWorkSurfListByFields1_args__isset() : field(false), value(false) {}
  bool field :1;
  bool value :1;
} _CbmService_GetWorkSurfListByFields1_args__isset;

class CbmService_GetWorkSurfListByFields1_args {
 public:

  CbmService_GetWorkSurfListByFields1_args(const CbmService_GetWorkSurfListByFields1_args&);
  CbmService_GetWorkSurfListByFields1_args& operator=(const CbmService_GetWorkSurfListByFields1_args&);
  CbmService_GetWorkSurfListByFields1_args() : field(), value() {
  }

  virtual ~CbmService_GetWorkSurfListByFields1_args() throw();
  std::string field;
  std::string value;

  _CbmService_GetWorkSurfListByFields1_args__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const CbmService_GetWorkSurfListByFields1_args & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfListByFields1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfListByFields1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfListByFields1_pargs {
 public:


  virtual ~CbmService_GetWorkSurfListByFields1_pargs() throw();
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfListByFields1_result__isset {
  _CbmService_GetWorkSurfListByFields1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfListByFields1_result__isset;

class CbmService_GetWorkSurfListByFields1_result {
 public:

  CbmService_GetWorkSurfListByFields1_result(const CbmService_GetWorkSurfListByFields1_result&);
  CbmService_GetWorkSurfListByFields1_result& operator=(const CbmService_GetWorkSurfListByFields1_result&);
  CbmService_GetWorkSurfListByFields1_result() {
  }

  virtual ~CbmService_GetWorkSurfListByFields1_result() throw();
  std::vector<WorkSurf>  success;

  _CbmService_GetWorkSurfListByFields1_result__isset __isset;

  void __set_success(const std::vector<WorkSurf> & val);

  bool operator == (const CbmService_GetWorkSurfListByFields1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfListByFields1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfListByFields1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfListByFields1_presult__isset {
  _CbmService_GetWorkSurfListByFields1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfListByFields1_presult__isset;

class CbmService_GetWorkSurfListByFields1_presult {
 public:


  virtual ~CbmService_GetWorkSurfListByFields1_presult() throw();
  std::vector<WorkSurf> * success;

  _CbmService_GetWorkSurfListByFields1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkSurfListByFields2_args__isset {
  _CbmService_GetWorkSurfListByFields2_args__isset() : field1(false), value1(false), field2(false), value2(false) {}
  bool field1 :1;
  bool value1 :1;
  bool field2 :1;
  bool value2 :1;
} _CbmService_GetWorkSurfListByFields2_args__isset;

class CbmService_GetWorkSurfListByFields2_args {
 public:

  CbmService_GetWorkSurfListByFields2_args(const CbmService_GetWorkSurfListByFields2_args&);
  CbmService_GetWorkSurfListByFields2_args& operator=(const CbmService_GetWorkSurfListByFields2_args&);
  CbmService_GetWorkSurfListByFields2_args() : field1(), value1(), field2(), value2() {
  }

  virtual ~CbmService_GetWorkSurfListByFields2_args() throw();
  std::string field1;
  std::string value1;
  std::string field2;
  std::string value2;

  _CbmService_GetWorkSurfListByFields2_args__isset __isset;

  void __set_field1(const std::string& val);

  void __set_value1(const std::string& val);

  void __set_field2(const std::string& val);

  void __set_value2(const std::string& val);

  bool operator == (const CbmService_GetWorkSurfListByFields2_args & rhs) const
  {
    if (!(field1 == rhs.field1))
      return false;
    if (!(value1 == rhs.value1))
      return false;
    if (!(field2 == rhs.field2))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfListByFields2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfListByFields2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfListByFields2_pargs {
 public:


  virtual ~CbmService_GetWorkSurfListByFields2_pargs() throw();
  const std::string* field1;
  const std::string* value1;
  const std::string* field2;
  const std::string* value2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfListByFields2_result__isset {
  _CbmService_GetWorkSurfListByFields2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfListByFields2_result__isset;

class CbmService_GetWorkSurfListByFields2_result {
 public:

  CbmService_GetWorkSurfListByFields2_result(const CbmService_GetWorkSurfListByFields2_result&);
  CbmService_GetWorkSurfListByFields2_result& operator=(const CbmService_GetWorkSurfListByFields2_result&);
  CbmService_GetWorkSurfListByFields2_result() {
  }

  virtual ~CbmService_GetWorkSurfListByFields2_result() throw();
  std::vector<WorkSurf>  success;

  _CbmService_GetWorkSurfListByFields2_result__isset __isset;

  void __set_success(const std::vector<WorkSurf> & val);

  bool operator == (const CbmService_GetWorkSurfListByFields2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfListByFields2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfListByFields2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfListByFields2_presult__isset {
  _CbmService_GetWorkSurfListByFields2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfListByFields2_presult__isset;

class CbmService_GetWorkSurfListByFields2_presult {
 public:


  virtual ~CbmService_GetWorkSurfListByFields2_presult() throw();
  std::vector<WorkSurf> * success;

  _CbmService_GetWorkSurfListByFields2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_InitSampleRegion_args {
 public:

  CbmService_InitSampleRegion_args(const CbmService_InitSampleRegion_args&);
  CbmService_InitSampleRegion_args& operator=(const CbmService_InitSampleRegion_args&);
  CbmService_InitSampleRegion_args() {
  }

  virtual ~CbmService_InitSampleRegion_args() throw();

  bool operator == (const CbmService_InitSampleRegion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_InitSampleRegion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_InitSampleRegion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_InitSampleRegion_pargs {
 public:


  virtual ~CbmService_InitSampleRegion_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_InitSampleRegion_result {
 public:

  CbmService_InitSampleRegion_result(const CbmService_InitSampleRegion_result&);
  CbmService_InitSampleRegion_result& operator=(const CbmService_InitSampleRegion_result&);
  CbmService_InitSampleRegion_result() {
  }

  virtual ~CbmService_InitSampleRegion_result() throw();

  bool operator == (const CbmService_InitSampleRegion_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_InitSampleRegion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_InitSampleRegion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_InitSampleRegion_presult {
 public:


  virtual ~CbmService_InitSampleRegion_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetOnlineAccountId_args {
 public:

  CbmService_GetOnlineAccountId_args(const CbmService_GetOnlineAccountId_args&);
  CbmService_GetOnlineAccountId_args& operator=(const CbmService_GetOnlineAccountId_args&);
  CbmService_GetOnlineAccountId_args() {
  }

  virtual ~CbmService_GetOnlineAccountId_args() throw();

  bool operator == (const CbmService_GetOnlineAccountId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetOnlineAccountId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetOnlineAccountId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetOnlineAccountId_pargs {
 public:


  virtual ~CbmService_GetOnlineAccountId_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetOnlineAccountId_result__isset {
  _CbmService_GetOnlineAccountId_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetOnlineAccountId_result__isset;

class CbmService_GetOnlineAccountId_result {
 public:

  CbmService_GetOnlineAccountId_result(const CbmService_GetOnlineAccountId_result&);
  CbmService_GetOnlineAccountId_result& operator=(const CbmService_GetOnlineAccountId_result&);
  CbmService_GetOnlineAccountId_result() : success(0) {
  }

  virtual ~CbmService_GetOnlineAccountId_result() throw();
  int32_t success;

  _CbmService_GetOnlineAccountId_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_GetOnlineAccountId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetOnlineAccountId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetOnlineAccountId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetOnlineAccountId_presult__isset {
  _CbmService_GetOnlineAccountId_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetOnlineAccountId_presult__isset;

class CbmService_GetOnlineAccountId_presult {
 public:


  virtual ~CbmService_GetOnlineAccountId_presult() throw();
  int32_t* success;

  _CbmService_GetOnlineAccountId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetOnlineMine_args {
 public:

  CbmService_GetOnlineMine_args(const CbmService_GetOnlineMine_args&);
  CbmService_GetOnlineMine_args& operator=(const CbmService_GetOnlineMine_args&);
  CbmService_GetOnlineMine_args() {
  }

  virtual ~CbmService_GetOnlineMine_args() throw();

  bool operator == (const CbmService_GetOnlineMine_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetOnlineMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetOnlineMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetOnlineMine_pargs {
 public:


  virtual ~CbmService_GetOnlineMine_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetOnlineMine_result__isset {
  _CbmService_GetOnlineMine_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetOnlineMine_result__isset;

class CbmService_GetOnlineMine_result {
 public:

  CbmService_GetOnlineMine_result(const CbmService_GetOnlineMine_result&);
  CbmService_GetOnlineMine_result& operator=(const CbmService_GetOnlineMine_result&);
  CbmService_GetOnlineMine_result() {
  }

  virtual ~CbmService_GetOnlineMine_result() throw();
  Mine success;

  _CbmService_GetOnlineMine_result__isset __isset;

  void __set_success(const Mine& val);

  bool operator == (const CbmService_GetOnlineMine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetOnlineMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetOnlineMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetOnlineMine_presult__isset {
  _CbmService_GetOnlineMine_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetOnlineMine_presult__isset;

class CbmService_GetOnlineMine_presult {
 public:


  virtual ~CbmService_GetOnlineMine_presult() throw();
  Mine* success;

  _CbmService_GetOnlineMine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_VerifyMineAccount_args__isset {
  _CbmService_VerifyMineAccount_args__isset() : username(false), pwd(false) {}
  bool username :1;
  bool pwd :1;
} _CbmService_VerifyMineAccount_args__isset;

class CbmService_VerifyMineAccount_args {
 public:

  CbmService_VerifyMineAccount_args(const CbmService_VerifyMineAccount_args&);
  CbmService_VerifyMineAccount_args& operator=(const CbmService_VerifyMineAccount_args&);
  CbmService_VerifyMineAccount_args() : username(), pwd() {
  }

  virtual ~CbmService_VerifyMineAccount_args() throw();
  std::string username;
  std::string pwd;

  _CbmService_VerifyMineAccount_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_pwd(const std::string& val);

  bool operator == (const CbmService_VerifyMineAccount_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(pwd == rhs.pwd))
      return false;
    return true;
  }
  bool operator != (const CbmService_VerifyMineAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_VerifyMineAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_VerifyMineAccount_pargs {
 public:


  virtual ~CbmService_VerifyMineAccount_pargs() throw();
  const std::string* username;
  const std::string* pwd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_VerifyMineAccount_result__isset {
  _CbmService_VerifyMineAccount_result__isset() : success(false) {}
  bool success :1;
} _CbmService_VerifyMineAccount_result__isset;

class CbmService_VerifyMineAccount_result {
 public:

  CbmService_VerifyMineAccount_result(const CbmService_VerifyMineAccount_result&);
  CbmService_VerifyMineAccount_result& operator=(const CbmService_VerifyMineAccount_result&);
  CbmService_VerifyMineAccount_result() : success(0) {
  }

  virtual ~CbmService_VerifyMineAccount_result() throw();
  int32_t success;

  _CbmService_VerifyMineAccount_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_VerifyMineAccount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_VerifyMineAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_VerifyMineAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_VerifyMineAccount_presult__isset {
  _CbmService_VerifyMineAccount_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_VerifyMineAccount_presult__isset;

class CbmService_VerifyMineAccount_presult {
 public:


  virtual ~CbmService_VerifyMineAccount_presult() throw();
  int32_t* success;

  _CbmService_VerifyMineAccount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetMineRegionsOfBase_args__isset {
  _CbmService_GetMineRegionsOfBase_args__isset() : baseName(false) {}
  bool baseName :1;
} _CbmService_GetMineRegionsOfBase_args__isset;

class CbmService_GetMineRegionsOfBase_args {
 public:

  CbmService_GetMineRegionsOfBase_args(const CbmService_GetMineRegionsOfBase_args&);
  CbmService_GetMineRegionsOfBase_args& operator=(const CbmService_GetMineRegionsOfBase_args&);
  CbmService_GetMineRegionsOfBase_args() : baseName() {
  }

  virtual ~CbmService_GetMineRegionsOfBase_args() throw();
  std::string baseName;

  _CbmService_GetMineRegionsOfBase_args__isset __isset;

  void __set_baseName(const std::string& val);

  bool operator == (const CbmService_GetMineRegionsOfBase_args & rhs) const
  {
    if (!(baseName == rhs.baseName))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionsOfBase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionsOfBase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetMineRegionsOfBase_pargs {
 public:


  virtual ~CbmService_GetMineRegionsOfBase_pargs() throw();
  const std::string* baseName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionsOfBase_result__isset {
  _CbmService_GetMineRegionsOfBase_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionsOfBase_result__isset;

class CbmService_GetMineRegionsOfBase_result {
 public:

  CbmService_GetMineRegionsOfBase_result(const CbmService_GetMineRegionsOfBase_result&);
  CbmService_GetMineRegionsOfBase_result& operator=(const CbmService_GetMineRegionsOfBase_result&);
  CbmService_GetMineRegionsOfBase_result() {
  }

  virtual ~CbmService_GetMineRegionsOfBase_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetMineRegionsOfBase_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetMineRegionsOfBase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetMineRegionsOfBase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetMineRegionsOfBase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetMineRegionsOfBase_presult__isset {
  _CbmService_GetMineRegionsOfBase_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetMineRegionsOfBase_presult__isset;

class CbmService_GetMineRegionsOfBase_presult {
 public:


  virtual ~CbmService_GetMineRegionsOfBase_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetMineRegionsOfBase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetBaseByRegion_args__isset {
  _CbmService_GetBaseByRegion_args__isset() : regionName(false) {}
  bool regionName :1;
} _CbmService_GetBaseByRegion_args__isset;

class CbmService_GetBaseByRegion_args {
 public:

  CbmService_GetBaseByRegion_args(const CbmService_GetBaseByRegion_args&);
  CbmService_GetBaseByRegion_args& operator=(const CbmService_GetBaseByRegion_args&);
  CbmService_GetBaseByRegion_args() : regionName() {
  }

  virtual ~CbmService_GetBaseByRegion_args() throw();
  std::string regionName;

  _CbmService_GetBaseByRegion_args__isset __isset;

  void __set_regionName(const std::string& val);

  bool operator == (const CbmService_GetBaseByRegion_args & rhs) const
  {
    if (!(regionName == rhs.regionName))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetBaseByRegion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetBaseByRegion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetBaseByRegion_pargs {
 public:


  virtual ~CbmService_GetBaseByRegion_pargs() throw();
  const std::string* regionName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetBaseByRegion_result__isset {
  _CbmService_GetBaseByRegion_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetBaseByRegion_result__isset;

class CbmService_GetBaseByRegion_result {
 public:

  CbmService_GetBaseByRegion_result(const CbmService_GetBaseByRegion_result&);
  CbmService_GetBaseByRegion_result& operator=(const CbmService_GetBaseByRegion_result&);
  CbmService_GetBaseByRegion_result() : success() {
  }

  virtual ~CbmService_GetBaseByRegion_result() throw();
  std::string success;

  _CbmService_GetBaseByRegion_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const CbmService_GetBaseByRegion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetBaseByRegion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetBaseByRegion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetBaseByRegion_presult__isset {
  _CbmService_GetBaseByRegion_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetBaseByRegion_presult__isset;

class CbmService_GetBaseByRegion_presult {
 public:


  virtual ~CbmService_GetBaseByRegion_presult() throw();
  std::string* success;

  _CbmService_GetBaseByRegion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetSampleMineOfRegion_args__isset {
  _CbmService_GetSampleMineOfRegion_args__isset() : regionName(false) {}
  bool regionName :1;
} _CbmService_GetSampleMineOfRegion_args__isset;

class CbmService_GetSampleMineOfRegion_args {
 public:

  CbmService_GetSampleMineOfRegion_args(const CbmService_GetSampleMineOfRegion_args&);
  CbmService_GetSampleMineOfRegion_args& operator=(const CbmService_GetSampleMineOfRegion_args&);
  CbmService_GetSampleMineOfRegion_args() : regionName() {
  }

  virtual ~CbmService_GetSampleMineOfRegion_args() throw();
  std::string regionName;

  _CbmService_GetSampleMineOfRegion_args__isset __isset;

  void __set_regionName(const std::string& val);

  bool operator == (const CbmService_GetSampleMineOfRegion_args & rhs) const
  {
    if (!(regionName == rhs.regionName))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSampleMineOfRegion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSampleMineOfRegion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSampleMineOfRegion_pargs {
 public:


  virtual ~CbmService_GetSampleMineOfRegion_pargs() throw();
  const std::string* regionName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSampleMineOfRegion_result__isset {
  _CbmService_GetSampleMineOfRegion_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSampleMineOfRegion_result__isset;

class CbmService_GetSampleMineOfRegion_result {
 public:

  CbmService_GetSampleMineOfRegion_result(const CbmService_GetSampleMineOfRegion_result&);
  CbmService_GetSampleMineOfRegion_result& operator=(const CbmService_GetSampleMineOfRegion_result&);
  CbmService_GetSampleMineOfRegion_result() {
  }

  virtual ~CbmService_GetSampleMineOfRegion_result() throw();
  Mine success;

  _CbmService_GetSampleMineOfRegion_result__isset __isset;

  void __set_success(const Mine& val);

  bool operator == (const CbmService_GetSampleMineOfRegion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSampleMineOfRegion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSampleMineOfRegion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSampleMineOfRegion_presult__isset {
  _CbmService_GetSampleMineOfRegion_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSampleMineOfRegion_presult__isset;

class CbmService_GetSampleMineOfRegion_presult {
 public:


  virtual ~CbmService_GetSampleMineOfRegion_presult() throw();
  Mine* success;

  _CbmService_GetSampleMineOfRegion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetSampleCoalOfRegion_args__isset {
  _CbmService_GetSampleCoalOfRegion_args__isset() : regionName(false) {}
  bool regionName :1;
} _CbmService_GetSampleCoalOfRegion_args__isset;

class CbmService_GetSampleCoalOfRegion_args {
 public:

  CbmService_GetSampleCoalOfRegion_args(const CbmService_GetSampleCoalOfRegion_args&);
  CbmService_GetSampleCoalOfRegion_args& operator=(const CbmService_GetSampleCoalOfRegion_args&);
  CbmService_GetSampleCoalOfRegion_args() : regionName() {
  }

  virtual ~CbmService_GetSampleCoalOfRegion_args() throw();
  std::string regionName;

  _CbmService_GetSampleCoalOfRegion_args__isset __isset;

  void __set_regionName(const std::string& val);

  bool operator == (const CbmService_GetSampleCoalOfRegion_args & rhs) const
  {
    if (!(regionName == rhs.regionName))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSampleCoalOfRegion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSampleCoalOfRegion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetSampleCoalOfRegion_pargs {
 public:


  virtual ~CbmService_GetSampleCoalOfRegion_pargs() throw();
  const std::string* regionName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSampleCoalOfRegion_result__isset {
  _CbmService_GetSampleCoalOfRegion_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSampleCoalOfRegion_result__isset;

class CbmService_GetSampleCoalOfRegion_result {
 public:

  CbmService_GetSampleCoalOfRegion_result(const CbmService_GetSampleCoalOfRegion_result&);
  CbmService_GetSampleCoalOfRegion_result& operator=(const CbmService_GetSampleCoalOfRegion_result&);
  CbmService_GetSampleCoalOfRegion_result() {
  }

  virtual ~CbmService_GetSampleCoalOfRegion_result() throw();
  Coal success;

  _CbmService_GetSampleCoalOfRegion_result__isset __isset;

  void __set_success(const Coal& val);

  bool operator == (const CbmService_GetSampleCoalOfRegion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetSampleCoalOfRegion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetSampleCoalOfRegion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetSampleCoalOfRegion_presult__isset {
  _CbmService_GetSampleCoalOfRegion_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetSampleCoalOfRegion_presult__isset;

class CbmService_GetSampleCoalOfRegion_presult {
 public:


  virtual ~CbmService_GetSampleCoalOfRegion_presult() throw();
  Coal* success;

  _CbmService_GetSampleCoalOfRegion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetCoalNamesOfMine_args__isset {
  _CbmService_GetCoalNamesOfMine_args__isset() : mine_id(false) {}
  bool mine_id :1;
} _CbmService_GetCoalNamesOfMine_args__isset;

class CbmService_GetCoalNamesOfMine_args {
 public:

  CbmService_GetCoalNamesOfMine_args(const CbmService_GetCoalNamesOfMine_args&);
  CbmService_GetCoalNamesOfMine_args& operator=(const CbmService_GetCoalNamesOfMine_args&);
  CbmService_GetCoalNamesOfMine_args() : mine_id(0) {
  }

  virtual ~CbmService_GetCoalNamesOfMine_args() throw();
  int32_t mine_id;

  _CbmService_GetCoalNamesOfMine_args__isset __isset;

  void __set_mine_id(const int32_t val);

  bool operator == (const CbmService_GetCoalNamesOfMine_args & rhs) const
  {
    if (!(mine_id == rhs.mine_id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalNamesOfMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalNamesOfMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalNamesOfMine_pargs {
 public:


  virtual ~CbmService_GetCoalNamesOfMine_pargs() throw();
  const int32_t* mine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalNamesOfMine_result__isset {
  _CbmService_GetCoalNamesOfMine_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalNamesOfMine_result__isset;

class CbmService_GetCoalNamesOfMine_result {
 public:

  CbmService_GetCoalNamesOfMine_result(const CbmService_GetCoalNamesOfMine_result&);
  CbmService_GetCoalNamesOfMine_result& operator=(const CbmService_GetCoalNamesOfMine_result&);
  CbmService_GetCoalNamesOfMine_result() {
  }

  virtual ~CbmService_GetCoalNamesOfMine_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetCoalNamesOfMine_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetCoalNamesOfMine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalNamesOfMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalNamesOfMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalNamesOfMine_presult__isset {
  _CbmService_GetCoalNamesOfMine_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalNamesOfMine_presult__isset;

class CbmService_GetCoalNamesOfMine_presult {
 public:


  virtual ~CbmService_GetCoalNamesOfMine_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetCoalNamesOfMine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetCoalIdsOfMine_args__isset {
  _CbmService_GetCoalIdsOfMine_args__isset() : mine_id(false) {}
  bool mine_id :1;
} _CbmService_GetCoalIdsOfMine_args__isset;

class CbmService_GetCoalIdsOfMine_args {
 public:

  CbmService_GetCoalIdsOfMine_args(const CbmService_GetCoalIdsOfMine_args&);
  CbmService_GetCoalIdsOfMine_args& operator=(const CbmService_GetCoalIdsOfMine_args&);
  CbmService_GetCoalIdsOfMine_args() : mine_id(0) {
  }

  virtual ~CbmService_GetCoalIdsOfMine_args() throw();
  int32_t mine_id;

  _CbmService_GetCoalIdsOfMine_args__isset __isset;

  void __set_mine_id(const int32_t val);

  bool operator == (const CbmService_GetCoalIdsOfMine_args & rhs) const
  {
    if (!(mine_id == rhs.mine_id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalIdsOfMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalIdsOfMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetCoalIdsOfMine_pargs {
 public:


  virtual ~CbmService_GetCoalIdsOfMine_pargs() throw();
  const int32_t* mine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalIdsOfMine_result__isset {
  _CbmService_GetCoalIdsOfMine_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalIdsOfMine_result__isset;

class CbmService_GetCoalIdsOfMine_result {
 public:

  CbmService_GetCoalIdsOfMine_result(const CbmService_GetCoalIdsOfMine_result&);
  CbmService_GetCoalIdsOfMine_result& operator=(const CbmService_GetCoalIdsOfMine_result&);
  CbmService_GetCoalIdsOfMine_result() {
  }

  virtual ~CbmService_GetCoalIdsOfMine_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetCoalIdsOfMine_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetCoalIdsOfMine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetCoalIdsOfMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetCoalIdsOfMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetCoalIdsOfMine_presult__isset {
  _CbmService_GetCoalIdsOfMine_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetCoalIdsOfMine_presult__isset;

class CbmService_GetCoalIdsOfMine_presult {
 public:


  virtual ~CbmService_GetCoalIdsOfMine_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetCoalIdsOfMine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkAreasOfMine_args__isset {
  _CbmService_GetWorkAreasOfMine_args__isset() : mine_id(false) {}
  bool mine_id :1;
} _CbmService_GetWorkAreasOfMine_args__isset;

class CbmService_GetWorkAreasOfMine_args {
 public:

  CbmService_GetWorkAreasOfMine_args(const CbmService_GetWorkAreasOfMine_args&);
  CbmService_GetWorkAreasOfMine_args& operator=(const CbmService_GetWorkAreasOfMine_args&);
  CbmService_GetWorkAreasOfMine_args() : mine_id(0) {
  }

  virtual ~CbmService_GetWorkAreasOfMine_args() throw();
  int32_t mine_id;

  _CbmService_GetWorkAreasOfMine_args__isset __isset;

  void __set_mine_id(const int32_t val);

  bool operator == (const CbmService_GetWorkAreasOfMine_args & rhs) const
  {
    if (!(mine_id == rhs.mine_id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreasOfMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreasOfMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreasOfMine_pargs {
 public:


  virtual ~CbmService_GetWorkAreasOfMine_pargs() throw();
  const int32_t* mine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreasOfMine_result__isset {
  _CbmService_GetWorkAreasOfMine_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreasOfMine_result__isset;

class CbmService_GetWorkAreasOfMine_result {
 public:

  CbmService_GetWorkAreasOfMine_result(const CbmService_GetWorkAreasOfMine_result&);
  CbmService_GetWorkAreasOfMine_result& operator=(const CbmService_GetWorkAreasOfMine_result&);
  CbmService_GetWorkAreasOfMine_result() {
  }

  virtual ~CbmService_GetWorkAreasOfMine_result() throw();
  std::vector<WorkArea>  success;

  _CbmService_GetWorkAreasOfMine_result__isset __isset;

  void __set_success(const std::vector<WorkArea> & val);

  bool operator == (const CbmService_GetWorkAreasOfMine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreasOfMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreasOfMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreasOfMine_presult__isset {
  _CbmService_GetWorkAreasOfMine_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreasOfMine_presult__isset;

class CbmService_GetWorkAreasOfMine_presult {
 public:


  virtual ~CbmService_GetWorkAreasOfMine_presult() throw();
  std::vector<WorkArea> * success;

  _CbmService_GetWorkAreasOfMine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkSurfsOfMine_args__isset {
  _CbmService_GetWorkSurfsOfMine_args__isset() : mine_id(false) {}
  bool mine_id :1;
} _CbmService_GetWorkSurfsOfMine_args__isset;

class CbmService_GetWorkSurfsOfMine_args {
 public:

  CbmService_GetWorkSurfsOfMine_args(const CbmService_GetWorkSurfsOfMine_args&);
  CbmService_GetWorkSurfsOfMine_args& operator=(const CbmService_GetWorkSurfsOfMine_args&);
  CbmService_GetWorkSurfsOfMine_args() : mine_id(0) {
  }

  virtual ~CbmService_GetWorkSurfsOfMine_args() throw();
  int32_t mine_id;

  _CbmService_GetWorkSurfsOfMine_args__isset __isset;

  void __set_mine_id(const int32_t val);

  bool operator == (const CbmService_GetWorkSurfsOfMine_args & rhs) const
  {
    if (!(mine_id == rhs.mine_id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfsOfMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfsOfMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfsOfMine_pargs {
 public:


  virtual ~CbmService_GetWorkSurfsOfMine_pargs() throw();
  const int32_t* mine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfsOfMine_result__isset {
  _CbmService_GetWorkSurfsOfMine_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfsOfMine_result__isset;

class CbmService_GetWorkSurfsOfMine_result {
 public:

  CbmService_GetWorkSurfsOfMine_result(const CbmService_GetWorkSurfsOfMine_result&);
  CbmService_GetWorkSurfsOfMine_result& operator=(const CbmService_GetWorkSurfsOfMine_result&);
  CbmService_GetWorkSurfsOfMine_result() {
  }

  virtual ~CbmService_GetWorkSurfsOfMine_result() throw();
  std::vector<WorkSurf>  success;

  _CbmService_GetWorkSurfsOfMine_result__isset __isset;

  void __set_success(const std::vector<WorkSurf> & val);

  bool operator == (const CbmService_GetWorkSurfsOfMine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfsOfMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfsOfMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfsOfMine_presult__isset {
  _CbmService_GetWorkSurfsOfMine_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfsOfMine_presult__isset;

class CbmService_GetWorkSurfsOfMine_presult {
 public:


  virtual ~CbmService_GetWorkSurfsOfMine_presult() throw();
  std::vector<WorkSurf> * success;

  _CbmService_GetWorkSurfsOfMine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingSurfsOfMine_args__isset {
  _CbmService_GetDrillingSurfsOfMine_args__isset() : mine_id(false) {}
  bool mine_id :1;
} _CbmService_GetDrillingSurfsOfMine_args__isset;

class CbmService_GetDrillingSurfsOfMine_args {
 public:

  CbmService_GetDrillingSurfsOfMine_args(const CbmService_GetDrillingSurfsOfMine_args&);
  CbmService_GetDrillingSurfsOfMine_args& operator=(const CbmService_GetDrillingSurfsOfMine_args&);
  CbmService_GetDrillingSurfsOfMine_args() : mine_id(0) {
  }

  virtual ~CbmService_GetDrillingSurfsOfMine_args() throw();
  int32_t mine_id;

  _CbmService_GetDrillingSurfsOfMine_args__isset __isset;

  void __set_mine_id(const int32_t val);

  bool operator == (const CbmService_GetDrillingSurfsOfMine_args & rhs) const
  {
    if (!(mine_id == rhs.mine_id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfsOfMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfsOfMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfsOfMine_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfsOfMine_pargs() throw();
  const int32_t* mine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfsOfMine_result__isset {
  _CbmService_GetDrillingSurfsOfMine_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfsOfMine_result__isset;

class CbmService_GetDrillingSurfsOfMine_result {
 public:

  CbmService_GetDrillingSurfsOfMine_result(const CbmService_GetDrillingSurfsOfMine_result&);
  CbmService_GetDrillingSurfsOfMine_result& operator=(const CbmService_GetDrillingSurfsOfMine_result&);
  CbmService_GetDrillingSurfsOfMine_result() {
  }

  virtual ~CbmService_GetDrillingSurfsOfMine_result() throw();
  std::vector<DrillingSurf>  success;

  _CbmService_GetDrillingSurfsOfMine_result__isset __isset;

  void __set_success(const std::vector<DrillingSurf> & val);

  bool operator == (const CbmService_GetDrillingSurfsOfMine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfsOfMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfsOfMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfsOfMine_presult__isset {
  _CbmService_GetDrillingSurfsOfMine_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfsOfMine_presult__isset;

class CbmService_GetDrillingSurfsOfMine_presult {
 public:


  virtual ~CbmService_GetDrillingSurfsOfMine_presult() throw();
  std::vector<DrillingSurf> * success;

  _CbmService_GetDrillingSurfsOfMine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkAreaIdsOfMine_args__isset {
  _CbmService_GetWorkAreaIdsOfMine_args__isset() : mine_id(false) {}
  bool mine_id :1;
} _CbmService_GetWorkAreaIdsOfMine_args__isset;

class CbmService_GetWorkAreaIdsOfMine_args {
 public:

  CbmService_GetWorkAreaIdsOfMine_args(const CbmService_GetWorkAreaIdsOfMine_args&);
  CbmService_GetWorkAreaIdsOfMine_args& operator=(const CbmService_GetWorkAreaIdsOfMine_args&);
  CbmService_GetWorkAreaIdsOfMine_args() : mine_id(0) {
  }

  virtual ~CbmService_GetWorkAreaIdsOfMine_args() throw();
  int32_t mine_id;

  _CbmService_GetWorkAreaIdsOfMine_args__isset __isset;

  void __set_mine_id(const int32_t val);

  bool operator == (const CbmService_GetWorkAreaIdsOfMine_args & rhs) const
  {
    if (!(mine_id == rhs.mine_id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaIdsOfMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaIdsOfMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkAreaIdsOfMine_pargs {
 public:


  virtual ~CbmService_GetWorkAreaIdsOfMine_pargs() throw();
  const int32_t* mine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaIdsOfMine_result__isset {
  _CbmService_GetWorkAreaIdsOfMine_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaIdsOfMine_result__isset;

class CbmService_GetWorkAreaIdsOfMine_result {
 public:

  CbmService_GetWorkAreaIdsOfMine_result(const CbmService_GetWorkAreaIdsOfMine_result&);
  CbmService_GetWorkAreaIdsOfMine_result& operator=(const CbmService_GetWorkAreaIdsOfMine_result&);
  CbmService_GetWorkAreaIdsOfMine_result() {
  }

  virtual ~CbmService_GetWorkAreaIdsOfMine_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetWorkAreaIdsOfMine_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetWorkAreaIdsOfMine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkAreaIdsOfMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkAreaIdsOfMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkAreaIdsOfMine_presult__isset {
  _CbmService_GetWorkAreaIdsOfMine_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkAreaIdsOfMine_presult__isset;

class CbmService_GetWorkAreaIdsOfMine_presult {
 public:


  virtual ~CbmService_GetWorkAreaIdsOfMine_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetWorkAreaIdsOfMine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetWorkSurfIdsOfMine_args__isset {
  _CbmService_GetWorkSurfIdsOfMine_args__isset() : mine_id(false) {}
  bool mine_id :1;
} _CbmService_GetWorkSurfIdsOfMine_args__isset;

class CbmService_GetWorkSurfIdsOfMine_args {
 public:

  CbmService_GetWorkSurfIdsOfMine_args(const CbmService_GetWorkSurfIdsOfMine_args&);
  CbmService_GetWorkSurfIdsOfMine_args& operator=(const CbmService_GetWorkSurfIdsOfMine_args&);
  CbmService_GetWorkSurfIdsOfMine_args() : mine_id(0) {
  }

  virtual ~CbmService_GetWorkSurfIdsOfMine_args() throw();
  int32_t mine_id;

  _CbmService_GetWorkSurfIdsOfMine_args__isset __isset;

  void __set_mine_id(const int32_t val);

  bool operator == (const CbmService_GetWorkSurfIdsOfMine_args & rhs) const
  {
    if (!(mine_id == rhs.mine_id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfIdsOfMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfIdsOfMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetWorkSurfIdsOfMine_pargs {
 public:


  virtual ~CbmService_GetWorkSurfIdsOfMine_pargs() throw();
  const int32_t* mine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfIdsOfMine_result__isset {
  _CbmService_GetWorkSurfIdsOfMine_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfIdsOfMine_result__isset;

class CbmService_GetWorkSurfIdsOfMine_result {
 public:

  CbmService_GetWorkSurfIdsOfMine_result(const CbmService_GetWorkSurfIdsOfMine_result&);
  CbmService_GetWorkSurfIdsOfMine_result& operator=(const CbmService_GetWorkSurfIdsOfMine_result&);
  CbmService_GetWorkSurfIdsOfMine_result() {
  }

  virtual ~CbmService_GetWorkSurfIdsOfMine_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetWorkSurfIdsOfMine_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetWorkSurfIdsOfMine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetWorkSurfIdsOfMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetWorkSurfIdsOfMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetWorkSurfIdsOfMine_presult__isset {
  _CbmService_GetWorkSurfIdsOfMine_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetWorkSurfIdsOfMine_presult__isset;

class CbmService_GetWorkSurfIdsOfMine_presult {
 public:


  virtual ~CbmService_GetWorkSurfIdsOfMine_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetWorkSurfIdsOfMine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_GetDrillingSurfIdsOfMine_args__isset {
  _CbmService_GetDrillingSurfIdsOfMine_args__isset() : mine_id(false) {}
  bool mine_id :1;
} _CbmService_GetDrillingSurfIdsOfMine_args__isset;

class CbmService_GetDrillingSurfIdsOfMine_args {
 public:

  CbmService_GetDrillingSurfIdsOfMine_args(const CbmService_GetDrillingSurfIdsOfMine_args&);
  CbmService_GetDrillingSurfIdsOfMine_args& operator=(const CbmService_GetDrillingSurfIdsOfMine_args&);
  CbmService_GetDrillingSurfIdsOfMine_args() : mine_id(0) {
  }

  virtual ~CbmService_GetDrillingSurfIdsOfMine_args() throw();
  int32_t mine_id;

  _CbmService_GetDrillingSurfIdsOfMine_args__isset __isset;

  void __set_mine_id(const int32_t val);

  bool operator == (const CbmService_GetDrillingSurfIdsOfMine_args & rhs) const
  {
    if (!(mine_id == rhs.mine_id))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfIdsOfMine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfIdsOfMine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetDrillingSurfIdsOfMine_pargs {
 public:


  virtual ~CbmService_GetDrillingSurfIdsOfMine_pargs() throw();
  const int32_t* mine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfIdsOfMine_result__isset {
  _CbmService_GetDrillingSurfIdsOfMine_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfIdsOfMine_result__isset;

class CbmService_GetDrillingSurfIdsOfMine_result {
 public:

  CbmService_GetDrillingSurfIdsOfMine_result(const CbmService_GetDrillingSurfIdsOfMine_result&);
  CbmService_GetDrillingSurfIdsOfMine_result& operator=(const CbmService_GetDrillingSurfIdsOfMine_result&);
  CbmService_GetDrillingSurfIdsOfMine_result() {
  }

  virtual ~CbmService_GetDrillingSurfIdsOfMine_result() throw();
  std::vector<int32_t>  success;

  _CbmService_GetDrillingSurfIdsOfMine_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const CbmService_GetDrillingSurfIdsOfMine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetDrillingSurfIdsOfMine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetDrillingSurfIdsOfMine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetDrillingSurfIdsOfMine_presult__isset {
  _CbmService_GetDrillingSurfIdsOfMine_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetDrillingSurfIdsOfMine_presult__isset;

class CbmService_GetDrillingSurfIdsOfMine_presult {
 public:


  virtual ~CbmService_GetDrillingSurfIdsOfMine_presult() throw();
  std::vector<int32_t> * success;

  _CbmService_GetDrillingSurfIdsOfMine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DifficultEval_args__isset {
  _CbmService_DifficultEval_args__isset() : coal(false) {}
  bool coal :1;
} _CbmService_DifficultEval_args__isset;

class CbmService_DifficultEval_args {
 public:

  CbmService_DifficultEval_args(const CbmService_DifficultEval_args&);
  CbmService_DifficultEval_args& operator=(const CbmService_DifficultEval_args&);
  CbmService_DifficultEval_args() {
  }

  virtual ~CbmService_DifficultEval_args() throw();
  Coal coal;

  _CbmService_DifficultEval_args__isset __isset;

  void __set_coal(const Coal& val);

  bool operator == (const CbmService_DifficultEval_args & rhs) const
  {
    if (!(coal == rhs.coal))
      return false;
    return true;
  }
  bool operator != (const CbmService_DifficultEval_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DifficultEval_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DifficultEval_pargs {
 public:


  virtual ~CbmService_DifficultEval_pargs() throw();
  const Coal* coal;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DifficultEval_result__isset {
  _CbmService_DifficultEval_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DifficultEval_result__isset;

class CbmService_DifficultEval_result {
 public:

  CbmService_DifficultEval_result(const CbmService_DifficultEval_result&);
  CbmService_DifficultEval_result& operator=(const CbmService_DifficultEval_result&);
  CbmService_DifficultEval_result() : success(0) {
  }

  virtual ~CbmService_DifficultEval_result() throw();
  int32_t success;

  _CbmService_DifficultEval_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_DifficultEval_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DifficultEval_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DifficultEval_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DifficultEval_presult__isset {
  _CbmService_DifficultEval_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DifficultEval_presult__isset;

class CbmService_DifficultEval_presult {
 public:


  virtual ~CbmService_DifficultEval_presult() throw();
  int32_t* success;

  _CbmService_DifficultEval_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DifficultEvalString_args__isset {
  _CbmService_DifficultEvalString_args__isset() : coal(false) {}
  bool coal :1;
} _CbmService_DifficultEvalString_args__isset;

class CbmService_DifficultEvalString_args {
 public:

  CbmService_DifficultEvalString_args(const CbmService_DifficultEvalString_args&);
  CbmService_DifficultEvalString_args& operator=(const CbmService_DifficultEvalString_args&);
  CbmService_DifficultEvalString_args() {
  }

  virtual ~CbmService_DifficultEvalString_args() throw();
  Coal coal;

  _CbmService_DifficultEvalString_args__isset __isset;

  void __set_coal(const Coal& val);

  bool operator == (const CbmService_DifficultEvalString_args & rhs) const
  {
    if (!(coal == rhs.coal))
      return false;
    return true;
  }
  bool operator != (const CbmService_DifficultEvalString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DifficultEvalString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DifficultEvalString_pargs {
 public:


  virtual ~CbmService_DifficultEvalString_pargs() throw();
  const Coal* coal;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DifficultEvalString_result__isset {
  _CbmService_DifficultEvalString_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DifficultEvalString_result__isset;

class CbmService_DifficultEvalString_result {
 public:

  CbmService_DifficultEvalString_result(const CbmService_DifficultEvalString_result&);
  CbmService_DifficultEvalString_result& operator=(const CbmService_DifficultEvalString_result&);
  CbmService_DifficultEvalString_result() : success() {
  }

  virtual ~CbmService_DifficultEvalString_result() throw();
  std::string success;

  _CbmService_DifficultEvalString_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const CbmService_DifficultEvalString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DifficultEvalString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DifficultEvalString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DifficultEvalString_presult__isset {
  _CbmService_DifficultEvalString_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DifficultEvalString_presult__isset;

class CbmService_DifficultEvalString_presult {
 public:


  virtual ~CbmService_DifficultEvalString_presult() throw();
  std::string* success;

  _CbmService_DifficultEvalString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_MineGasReservesW1_args__isset {
  _CbmService_MineGasReservesW1_args__isset() : mine_id(false) {}
  bool mine_id :1;
} _CbmService_MineGasReservesW1_args__isset;

class CbmService_MineGasReservesW1_args {
 public:

  CbmService_MineGasReservesW1_args(const CbmService_MineGasReservesW1_args&);
  CbmService_MineGasReservesW1_args& operator=(const CbmService_MineGasReservesW1_args&);
  CbmService_MineGasReservesW1_args() : mine_id(0) {
  }

  virtual ~CbmService_MineGasReservesW1_args() throw();
  int32_t mine_id;

  _CbmService_MineGasReservesW1_args__isset __isset;

  void __set_mine_id(const int32_t val);

  bool operator == (const CbmService_MineGasReservesW1_args & rhs) const
  {
    if (!(mine_id == rhs.mine_id))
      return false;
    return true;
  }
  bool operator != (const CbmService_MineGasReservesW1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_MineGasReservesW1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_MineGasReservesW1_pargs {
 public:


  virtual ~CbmService_MineGasReservesW1_pargs() throw();
  const int32_t* mine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_MineGasReservesW1_result__isset {
  _CbmService_MineGasReservesW1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_MineGasReservesW1_result__isset;

class CbmService_MineGasReservesW1_result {
 public:

  CbmService_MineGasReservesW1_result(const CbmService_MineGasReservesW1_result&);
  CbmService_MineGasReservesW1_result& operator=(const CbmService_MineGasReservesW1_result&);
  CbmService_MineGasReservesW1_result() : success(0) {
  }

  virtual ~CbmService_MineGasReservesW1_result() throw();
  double success;

  _CbmService_MineGasReservesW1_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CbmService_MineGasReservesW1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_MineGasReservesW1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_MineGasReservesW1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_MineGasReservesW1_presult__isset {
  _CbmService_MineGasReservesW1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_MineGasReservesW1_presult__isset;

class CbmService_MineGasReservesW1_presult {
 public:


  virtual ~CbmService_MineGasReservesW1_presult() throw();
  double* success;

  _CbmService_MineGasReservesW1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_MineGasReservesW2_args__isset {
  _CbmService_MineGasReservesW2_args__isset() : mine_id(false) {}
  bool mine_id :1;
} _CbmService_MineGasReservesW2_args__isset;

class CbmService_MineGasReservesW2_args {
 public:

  CbmService_MineGasReservesW2_args(const CbmService_MineGasReservesW2_args&);
  CbmService_MineGasReservesW2_args& operator=(const CbmService_MineGasReservesW2_args&);
  CbmService_MineGasReservesW2_args() : mine_id(0) {
  }

  virtual ~CbmService_MineGasReservesW2_args() throw();
  int32_t mine_id;

  _CbmService_MineGasReservesW2_args__isset __isset;

  void __set_mine_id(const int32_t val);

  bool operator == (const CbmService_MineGasReservesW2_args & rhs) const
  {
    if (!(mine_id == rhs.mine_id))
      return false;
    return true;
  }
  bool operator != (const CbmService_MineGasReservesW2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_MineGasReservesW2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_MineGasReservesW2_pargs {
 public:


  virtual ~CbmService_MineGasReservesW2_pargs() throw();
  const int32_t* mine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_MineGasReservesW2_result__isset {
  _CbmService_MineGasReservesW2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_MineGasReservesW2_result__isset;

class CbmService_MineGasReservesW2_result {
 public:

  CbmService_MineGasReservesW2_result(const CbmService_MineGasReservesW2_result&);
  CbmService_MineGasReservesW2_result& operator=(const CbmService_MineGasReservesW2_result&);
  CbmService_MineGasReservesW2_result() : success(0) {
  }

  virtual ~CbmService_MineGasReservesW2_result() throw();
  double success;

  _CbmService_MineGasReservesW2_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CbmService_MineGasReservesW2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_MineGasReservesW2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_MineGasReservesW2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_MineGasReservesW2_presult__isset {
  _CbmService_MineGasReservesW2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_MineGasReservesW2_presult__isset;

class CbmService_MineGasReservesW2_presult {
 public:


  virtual ~CbmService_MineGasReservesW2_presult() throw();
  double* success;

  _CbmService_MineGasReservesW2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_WorkAreaGasFlow_args__isset {
  _CbmService_WorkAreaGasFlow_args__isset() : work_area(false), K1(false) {}
  bool work_area :1;
  bool K1 :1;
} _CbmService_WorkAreaGasFlow_args__isset;

class CbmService_WorkAreaGasFlow_args {
 public:

  CbmService_WorkAreaGasFlow_args(const CbmService_WorkAreaGasFlow_args&);
  CbmService_WorkAreaGasFlow_args& operator=(const CbmService_WorkAreaGasFlow_args&);
  CbmService_WorkAreaGasFlow_args() : K1(0) {
  }

  virtual ~CbmService_WorkAreaGasFlow_args() throw();
  WorkArea work_area;
  double K1;

  _CbmService_WorkAreaGasFlow_args__isset __isset;

  void __set_work_area(const WorkArea& val);

  void __set_K1(const double val);

  bool operator == (const CbmService_WorkAreaGasFlow_args & rhs) const
  {
    if (!(work_area == rhs.work_area))
      return false;
    if (!(K1 == rhs.K1))
      return false;
    return true;
  }
  bool operator != (const CbmService_WorkAreaGasFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_WorkAreaGasFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_WorkAreaGasFlow_pargs {
 public:


  virtual ~CbmService_WorkAreaGasFlow_pargs() throw();
  const WorkArea* work_area;
  const double* K1;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_WorkAreaGasFlow_result__isset {
  _CbmService_WorkAreaGasFlow_result__isset() : success(false) {}
  bool success :1;
} _CbmService_WorkAreaGasFlow_result__isset;

class CbmService_WorkAreaGasFlow_result {
 public:

  CbmService_WorkAreaGasFlow_result(const CbmService_WorkAreaGasFlow_result&);
  CbmService_WorkAreaGasFlow_result& operator=(const CbmService_WorkAreaGasFlow_result&);
  CbmService_WorkAreaGasFlow_result() : success(0) {
  }

  virtual ~CbmService_WorkAreaGasFlow_result() throw();
  double success;

  _CbmService_WorkAreaGasFlow_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CbmService_WorkAreaGasFlow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_WorkAreaGasFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_WorkAreaGasFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_WorkAreaGasFlow_presult__isset {
  _CbmService_WorkAreaGasFlow_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_WorkAreaGasFlow_presult__isset;

class CbmService_WorkAreaGasFlow_presult {
 public:


  virtual ~CbmService_WorkAreaGasFlow_presult() throw();
  double* success;

  _CbmService_WorkAreaGasFlow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_MineGasFlow_args__isset {
  _CbmService_MineGasFlow_args__isset() : mine(false) {}
  bool mine :1;
} _CbmService_MineGasFlow_args__isset;

class CbmService_MineGasFlow_args {
 public:

  CbmService_MineGasFlow_args(const CbmService_MineGasFlow_args&);
  CbmService_MineGasFlow_args& operator=(const CbmService_MineGasFlow_args&);
  CbmService_MineGasFlow_args() {
  }

  virtual ~CbmService_MineGasFlow_args() throw();
  Mine mine;

  _CbmService_MineGasFlow_args__isset __isset;

  void __set_mine(const Mine& val);

  bool operator == (const CbmService_MineGasFlow_args & rhs) const
  {
    if (!(mine == rhs.mine))
      return false;
    return true;
  }
  bool operator != (const CbmService_MineGasFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_MineGasFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_MineGasFlow_pargs {
 public:


  virtual ~CbmService_MineGasFlow_pargs() throw();
  const Mine* mine;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_MineGasFlow_result__isset {
  _CbmService_MineGasFlow_result__isset() : success(false) {}
  bool success :1;
} _CbmService_MineGasFlow_result__isset;

class CbmService_MineGasFlow_result {
 public:

  CbmService_MineGasFlow_result(const CbmService_MineGasFlow_result&);
  CbmService_MineGasFlow_result& operator=(const CbmService_MineGasFlow_result&);
  CbmService_MineGasFlow_result() : success(0) {
  }

  virtual ~CbmService_MineGasFlow_result() throw();
  double success;

  _CbmService_MineGasFlow_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CbmService_MineGasFlow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_MineGasFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_MineGasFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_MineGasFlow_presult__isset {
  _CbmService_MineGasFlow_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_MineGasFlow_presult__isset;

class CbmService_MineGasFlow_presult {
 public:


  virtual ~CbmService_MineGasFlow_presult() throw();
  double* success;

  _CbmService_MineGasFlow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_WorkSurfGasFlow1_args__isset {
  _CbmService_WorkSurfGasFlow1_args__isset() : coal(false), work_area(false), work_surf(false) {}
  bool coal :1;
  bool work_area :1;
  bool work_surf :1;
} _CbmService_WorkSurfGasFlow1_args__isset;

class CbmService_WorkSurfGasFlow1_args {
 public:

  CbmService_WorkSurfGasFlow1_args(const CbmService_WorkSurfGasFlow1_args&);
  CbmService_WorkSurfGasFlow1_args& operator=(const CbmService_WorkSurfGasFlow1_args&);
  CbmService_WorkSurfGasFlow1_args() {
  }

  virtual ~CbmService_WorkSurfGasFlow1_args() throw();
  Coal coal;
  WorkArea work_area;
  WorkSurf work_surf;

  _CbmService_WorkSurfGasFlow1_args__isset __isset;

  void __set_coal(const Coal& val);

  void __set_work_area(const WorkArea& val);

  void __set_work_surf(const WorkSurf& val);

  bool operator == (const CbmService_WorkSurfGasFlow1_args & rhs) const
  {
    if (!(coal == rhs.coal))
      return false;
    if (!(work_area == rhs.work_area))
      return false;
    if (!(work_surf == rhs.work_surf))
      return false;
    return true;
  }
  bool operator != (const CbmService_WorkSurfGasFlow1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_WorkSurfGasFlow1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_WorkSurfGasFlow1_pargs {
 public:


  virtual ~CbmService_WorkSurfGasFlow1_pargs() throw();
  const Coal* coal;
  const WorkArea* work_area;
  const WorkSurf* work_surf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_WorkSurfGasFlow1_result__isset {
  _CbmService_WorkSurfGasFlow1_result__isset() : success(false) {}
  bool success :1;
} _CbmService_WorkSurfGasFlow1_result__isset;

class CbmService_WorkSurfGasFlow1_result {
 public:

  CbmService_WorkSurfGasFlow1_result(const CbmService_WorkSurfGasFlow1_result&);
  CbmService_WorkSurfGasFlow1_result& operator=(const CbmService_WorkSurfGasFlow1_result&);
  CbmService_WorkSurfGasFlow1_result() : success(0) {
  }

  virtual ~CbmService_WorkSurfGasFlow1_result() throw();
  double success;

  _CbmService_WorkSurfGasFlow1_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CbmService_WorkSurfGasFlow1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_WorkSurfGasFlow1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_WorkSurfGasFlow1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_WorkSurfGasFlow1_presult__isset {
  _CbmService_WorkSurfGasFlow1_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_WorkSurfGasFlow1_presult__isset;

class CbmService_WorkSurfGasFlow1_presult {
 public:


  virtual ~CbmService_WorkSurfGasFlow1_presult() throw();
  double* success;

  _CbmService_WorkSurfGasFlow1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_WorkSurfGasFlow2_args__isset {
  _CbmService_WorkSurfGasFlow2_args__isset() : coal(false), work_area(false), work_surf(false) {}
  bool coal :1;
  bool work_area :1;
  bool work_surf :1;
} _CbmService_WorkSurfGasFlow2_args__isset;

class CbmService_WorkSurfGasFlow2_args {
 public:

  CbmService_WorkSurfGasFlow2_args(const CbmService_WorkSurfGasFlow2_args&);
  CbmService_WorkSurfGasFlow2_args& operator=(const CbmService_WorkSurfGasFlow2_args&);
  CbmService_WorkSurfGasFlow2_args() {
  }

  virtual ~CbmService_WorkSurfGasFlow2_args() throw();
  Coal coal;
  WorkArea work_area;
  WorkSurf work_surf;

  _CbmService_WorkSurfGasFlow2_args__isset __isset;

  void __set_coal(const Coal& val);

  void __set_work_area(const WorkArea& val);

  void __set_work_surf(const WorkSurf& val);

  bool operator == (const CbmService_WorkSurfGasFlow2_args & rhs) const
  {
    if (!(coal == rhs.coal))
      return false;
    if (!(work_area == rhs.work_area))
      return false;
    if (!(work_surf == rhs.work_surf))
      return false;
    return true;
  }
  bool operator != (const CbmService_WorkSurfGasFlow2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_WorkSurfGasFlow2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_WorkSurfGasFlow2_pargs {
 public:


  virtual ~CbmService_WorkSurfGasFlow2_pargs() throw();
  const Coal* coal;
  const WorkArea* work_area;
  const WorkSurf* work_surf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_WorkSurfGasFlow2_result__isset {
  _CbmService_WorkSurfGasFlow2_result__isset() : success(false) {}
  bool success :1;
} _CbmService_WorkSurfGasFlow2_result__isset;

class CbmService_WorkSurfGasFlow2_result {
 public:

  CbmService_WorkSurfGasFlow2_result(const CbmService_WorkSurfGasFlow2_result&);
  CbmService_WorkSurfGasFlow2_result& operator=(const CbmService_WorkSurfGasFlow2_result&);
  CbmService_WorkSurfGasFlow2_result() : success(0) {
  }

  virtual ~CbmService_WorkSurfGasFlow2_result() throw();
  double success;

  _CbmService_WorkSurfGasFlow2_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const CbmService_WorkSurfGasFlow2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_WorkSurfGasFlow2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_WorkSurfGasFlow2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_WorkSurfGasFlow2_presult__isset {
  _CbmService_WorkSurfGasFlow2_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_WorkSurfGasFlow2_presult__isset;

class CbmService_WorkSurfGasFlow2_presult {
 public:


  virtual ~CbmService_WorkSurfGasFlow2_presult() throw();
  double* success;

  _CbmService_WorkSurfGasFlow2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CbmService_DrillingSurfGasFlow_args__isset {
  _CbmService_DrillingSurfGasFlow_args__isset() : coal(false), drilling_surf(false), tunnel(false) {}
  bool coal :1;
  bool drilling_surf :1;
  bool tunnel :1;
} _CbmService_DrillingSurfGasFlow_args__isset;

class CbmService_DrillingSurfGasFlow_args {
 public:

  CbmService_DrillingSurfGasFlow_args(const CbmService_DrillingSurfGasFlow_args&);
  CbmService_DrillingSurfGasFlow_args& operator=(const CbmService_DrillingSurfGasFlow_args&);
  CbmService_DrillingSurfGasFlow_args() {
  }

  virtual ~CbmService_DrillingSurfGasFlow_args() throw();
  Coal coal;
  DrillingSurf drilling_surf;
  Tunnel tunnel;

  _CbmService_DrillingSurfGasFlow_args__isset __isset;

  void __set_coal(const Coal& val);

  void __set_drilling_surf(const DrillingSurf& val);

  void __set_tunnel(const Tunnel& val);

  bool operator == (const CbmService_DrillingSurfGasFlow_args & rhs) const
  {
    if (!(coal == rhs.coal))
      return false;
    if (!(drilling_surf == rhs.drilling_surf))
      return false;
    if (!(tunnel == rhs.tunnel))
      return false;
    return true;
  }
  bool operator != (const CbmService_DrillingSurfGasFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DrillingSurfGasFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_DrillingSurfGasFlow_pargs {
 public:


  virtual ~CbmService_DrillingSurfGasFlow_pargs() throw();
  const Coal* coal;
  const DrillingSurf* drilling_surf;
  const Tunnel* tunnel;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DrillingSurfGasFlow_result__isset {
  _CbmService_DrillingSurfGasFlow_result__isset() : success(false) {}
  bool success :1;
} _CbmService_DrillingSurfGasFlow_result__isset;

class CbmService_DrillingSurfGasFlow_result {
 public:

  CbmService_DrillingSurfGasFlow_result(const CbmService_DrillingSurfGasFlow_result&);
  CbmService_DrillingSurfGasFlow_result& operator=(const CbmService_DrillingSurfGasFlow_result&);
  CbmService_DrillingSurfGasFlow_result() {
  }

  virtual ~CbmService_DrillingSurfGasFlow_result() throw();
  DrillingSurfGasFlowResult success;

  _CbmService_DrillingSurfGasFlow_result__isset __isset;

  void __set_success(const DrillingSurfGasFlowResult& val);

  bool operator == (const CbmService_DrillingSurfGasFlow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_DrillingSurfGasFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_DrillingSurfGasFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_DrillingSurfGasFlow_presult__isset {
  _CbmService_DrillingSurfGasFlow_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_DrillingSurfGasFlow_presult__isset;

class CbmService_DrillingSurfGasFlow_presult {
 public:


  virtual ~CbmService_DrillingSurfGasFlow_presult() throw();
  DrillingSurfGasFlowResult* success;

  _CbmService_DrillingSurfGasFlow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CbmServiceClient : virtual public CbmServiceIf {
 public:
  CbmServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CbmServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t AddAccount(const Account& account);
  void send_AddAccount(const Account& account);
  int32_t recv_AddAccount();
  bool DeleteAccount(const int32_t id);
  void send_DeleteAccount(const int32_t id);
  bool recv_DeleteAccount();
  bool UpdateAccount(const Account& account);
  void send_UpdateAccount(const Account& account);
  bool recv_UpdateAccount();
  void GetAccountById(Account& _return, const int32_t id);
  void send_GetAccountById(const int32_t id);
  void recv_GetAccountById(Account& _return);
  void GetAccountByForeignKey(Account& _return, const std::string& fkey, const int32_t id);
  void send_GetAccountByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetAccountByForeignKey(Account& _return);
  void GetAccountList(std::vector<Account> & _return);
  void send_GetAccountList();
  void recv_GetAccountList(std::vector<Account> & _return);
  void GetAccountIds(std::vector<int32_t> & _return);
  void send_GetAccountIds();
  void recv_GetAccountIds(std::vector<int32_t> & _return);
  void GetAccountNames(std::vector<std::string> & _return);
  void send_GetAccountNames();
  void recv_GetAccountNames(std::vector<std::string> & _return);
  void AddMoreAccount(const std::vector<Account> & objs);
  void send_AddMoreAccount(const std::vector<Account> & objs);
  void recv_AddMoreAccount();
  void DeleteMoreAccount(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreAccount(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreAccount();
  void GetAccountByFields(Account& _return, const std::map<std::string, std::string> & fields);
  void send_GetAccountByFields(const std::map<std::string, std::string> & fields);
  void recv_GetAccountByFields(Account& _return);
  void GetAccountByFields1(Account& _return, const std::string& field, const std::string& value);
  void send_GetAccountByFields1(const std::string& field, const std::string& value);
  void recv_GetAccountByFields1(Account& _return);
  void GetAccountByFields2(Account& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetAccountByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetAccountByFields2(Account& _return);
  void GetAccountListByFields(std::vector<Account> & _return, const std::map<std::string, std::string> & fields);
  void send_GetAccountListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetAccountListByFields(std::vector<Account> & _return);
  void GetAccountListByFields1(std::vector<Account> & _return, const std::string& field, const std::string& value);
  void send_GetAccountListByFields1(const std::string& field, const std::string& value);
  void recv_GetAccountListByFields1(std::vector<Account> & _return);
  void GetAccountListByFields2(std::vector<Account> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetAccountListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetAccountListByFields2(std::vector<Account> & _return);
  int32_t AddAdjLayer(const AdjLayer& adj_layer);
  void send_AddAdjLayer(const AdjLayer& adj_layer);
  int32_t recv_AddAdjLayer();
  bool DeleteAdjLayer(const int32_t id);
  void send_DeleteAdjLayer(const int32_t id);
  bool recv_DeleteAdjLayer();
  bool UpdateAdjLayer(const AdjLayer& adj_layer);
  void send_UpdateAdjLayer(const AdjLayer& adj_layer);
  bool recv_UpdateAdjLayer();
  void GetAdjLayerById(AdjLayer& _return, const int32_t id);
  void send_GetAdjLayerById(const int32_t id);
  void recv_GetAdjLayerById(AdjLayer& _return);
  void GetAdjLayerByForeignKey(AdjLayer& _return, const std::string& fkey, const int32_t id);
  void send_GetAdjLayerByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetAdjLayerByForeignKey(AdjLayer& _return);
  void GetAdjLayerList(std::vector<AdjLayer> & _return);
  void send_GetAdjLayerList();
  void recv_GetAdjLayerList(std::vector<AdjLayer> & _return);
  void GetAdjLayerIds(std::vector<int32_t> & _return);
  void send_GetAdjLayerIds();
  void recv_GetAdjLayerIds(std::vector<int32_t> & _return);
  void GetAdjLayerNames(std::vector<std::string> & _return);
  void send_GetAdjLayerNames();
  void recv_GetAdjLayerNames(std::vector<std::string> & _return);
  void AddMoreAdjLayer(const std::vector<AdjLayer> & objs);
  void send_AddMoreAdjLayer(const std::vector<AdjLayer> & objs);
  void recv_AddMoreAdjLayer();
  void DeleteMoreAdjLayer(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreAdjLayer(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreAdjLayer();
  void GetAdjLayerByFields(AdjLayer& _return, const std::map<std::string, std::string> & fields);
  void send_GetAdjLayerByFields(const std::map<std::string, std::string> & fields);
  void recv_GetAdjLayerByFields(AdjLayer& _return);
  void GetAdjLayerByFields1(AdjLayer& _return, const std::string& field, const std::string& value);
  void send_GetAdjLayerByFields1(const std::string& field, const std::string& value);
  void recv_GetAdjLayerByFields1(AdjLayer& _return);
  void GetAdjLayerByFields2(AdjLayer& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetAdjLayerByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetAdjLayerByFields2(AdjLayer& _return);
  void GetAdjLayerListByFields(std::vector<AdjLayer> & _return, const std::map<std::string, std::string> & fields);
  void send_GetAdjLayerListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetAdjLayerListByFields(std::vector<AdjLayer> & _return);
  void GetAdjLayerListByFields1(std::vector<AdjLayer> & _return, const std::string& field, const std::string& value);
  void send_GetAdjLayerListByFields1(const std::string& field, const std::string& value);
  void recv_GetAdjLayerListByFields1(std::vector<AdjLayer> & _return);
  void GetAdjLayerListByFields2(std::vector<AdjLayer> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetAdjLayerListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetAdjLayerListByFields2(std::vector<AdjLayer> & _return);
  int32_t AddCoal(const Coal& coal);
  void send_AddCoal(const Coal& coal);
  int32_t recv_AddCoal();
  bool DeleteCoal(const int32_t id);
  void send_DeleteCoal(const int32_t id);
  bool recv_DeleteCoal();
  bool UpdateCoal(const Coal& coal);
  void send_UpdateCoal(const Coal& coal);
  bool recv_UpdateCoal();
  void GetCoalById(Coal& _return, const int32_t id);
  void send_GetCoalById(const int32_t id);
  void recv_GetCoalById(Coal& _return);
  void GetCoalByForeignKey(Coal& _return, const std::string& fkey, const int32_t id);
  void send_GetCoalByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetCoalByForeignKey(Coal& _return);
  void GetCoalList(std::vector<Coal> & _return);
  void send_GetCoalList();
  void recv_GetCoalList(std::vector<Coal> & _return);
  void GetCoalIds(std::vector<int32_t> & _return);
  void send_GetCoalIds();
  void recv_GetCoalIds(std::vector<int32_t> & _return);
  void GetCoalNames(std::vector<std::string> & _return);
  void send_GetCoalNames();
  void recv_GetCoalNames(std::vector<std::string> & _return);
  void AddMoreCoal(const std::vector<Coal> & objs);
  void send_AddMoreCoal(const std::vector<Coal> & objs);
  void recv_AddMoreCoal();
  void DeleteMoreCoal(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreCoal(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreCoal();
  void GetCoalByFields(Coal& _return, const std::map<std::string, std::string> & fields);
  void send_GetCoalByFields(const std::map<std::string, std::string> & fields);
  void recv_GetCoalByFields(Coal& _return);
  void GetCoalByFields1(Coal& _return, const std::string& field, const std::string& value);
  void send_GetCoalByFields1(const std::string& field, const std::string& value);
  void recv_GetCoalByFields1(Coal& _return);
  void GetCoalByFields2(Coal& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetCoalByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetCoalByFields2(Coal& _return);
  void GetCoalListByFields(std::vector<Coal> & _return, const std::map<std::string, std::string> & fields);
  void send_GetCoalListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetCoalListByFields(std::vector<Coal> & _return);
  void GetCoalListByFields1(std::vector<Coal> & _return, const std::string& field, const std::string& value);
  void send_GetCoalListByFields1(const std::string& field, const std::string& value);
  void recv_GetCoalListByFields1(std::vector<Coal> & _return);
  void GetCoalListByFields2(std::vector<Coal> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetCoalListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetCoalListByFields2(std::vector<Coal> & _return);
  int32_t AddComplexity(const Complexity& complexity);
  void send_AddComplexity(const Complexity& complexity);
  int32_t recv_AddComplexity();
  bool DeleteComplexity(const int32_t id);
  void send_DeleteComplexity(const int32_t id);
  bool recv_DeleteComplexity();
  bool UpdateComplexity(const Complexity& complexity);
  void send_UpdateComplexity(const Complexity& complexity);
  bool recv_UpdateComplexity();
  void GetComplexityById(Complexity& _return, const int32_t id);
  void send_GetComplexityById(const int32_t id);
  void recv_GetComplexityById(Complexity& _return);
  void GetComplexityByForeignKey(Complexity& _return, const std::string& fkey, const int32_t id);
  void send_GetComplexityByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetComplexityByForeignKey(Complexity& _return);
  void GetComplexityList(std::vector<Complexity> & _return);
  void send_GetComplexityList();
  void recv_GetComplexityList(std::vector<Complexity> & _return);
  void GetComplexityIds(std::vector<int32_t> & _return);
  void send_GetComplexityIds();
  void recv_GetComplexityIds(std::vector<int32_t> & _return);
  void GetComplexityNames(std::vector<std::string> & _return);
  void send_GetComplexityNames();
  void recv_GetComplexityNames(std::vector<std::string> & _return);
  void AddMoreComplexity(const std::vector<Complexity> & objs);
  void send_AddMoreComplexity(const std::vector<Complexity> & objs);
  void recv_AddMoreComplexity();
  void DeleteMoreComplexity(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreComplexity(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreComplexity();
  void GetComplexityByFields(Complexity& _return, const std::map<std::string, std::string> & fields);
  void send_GetComplexityByFields(const std::map<std::string, std::string> & fields);
  void recv_GetComplexityByFields(Complexity& _return);
  void GetComplexityByFields1(Complexity& _return, const std::string& field, const std::string& value);
  void send_GetComplexityByFields1(const std::string& field, const std::string& value);
  void recv_GetComplexityByFields1(Complexity& _return);
  void GetComplexityByFields2(Complexity& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetComplexityByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetComplexityByFields2(Complexity& _return);
  void GetComplexityListByFields(std::vector<Complexity> & _return, const std::map<std::string, std::string> & fields);
  void send_GetComplexityListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetComplexityListByFields(std::vector<Complexity> & _return);
  void GetComplexityListByFields1(std::vector<Complexity> & _return, const std::string& field, const std::string& value);
  void send_GetComplexityListByFields1(const std::string& field, const std::string& value);
  void recv_GetComplexityListByFields1(std::vector<Complexity> & _return);
  void GetComplexityListByFields2(std::vector<Complexity> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetComplexityListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetComplexityListByFields2(std::vector<Complexity> & _return);
  int32_t AddDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& design_drilling_surf_technology);
  void send_AddDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& design_drilling_surf_technology);
  int32_t recv_AddDesignDrillingSurfTechnology();
  bool DeleteDesignDrillingSurfTechnology(const int32_t id);
  void send_DeleteDesignDrillingSurfTechnology(const int32_t id);
  bool recv_DeleteDesignDrillingSurfTechnology();
  bool UpdateDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& design_drilling_surf_technology);
  void send_UpdateDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& design_drilling_surf_technology);
  bool recv_UpdateDesignDrillingSurfTechnology();
  void GetDesignDrillingSurfTechnologyById(DesignDrillingSurfTechnology& _return, const int32_t id);
  void send_GetDesignDrillingSurfTechnologyById(const int32_t id);
  void recv_GetDesignDrillingSurfTechnologyById(DesignDrillingSurfTechnology& _return);
  void GetDesignDrillingSurfTechnologyByForeignKey(DesignDrillingSurfTechnology& _return, const std::string& fkey, const int32_t id);
  void send_GetDesignDrillingSurfTechnologyByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDesignDrillingSurfTechnologyByForeignKey(DesignDrillingSurfTechnology& _return);
  void GetDesignDrillingSurfTechnologyList(std::vector<DesignDrillingSurfTechnology> & _return);
  void send_GetDesignDrillingSurfTechnologyList();
  void recv_GetDesignDrillingSurfTechnologyList(std::vector<DesignDrillingSurfTechnology> & _return);
  void GetDesignDrillingSurfTechnologyIds(std::vector<int32_t> & _return);
  void send_GetDesignDrillingSurfTechnologyIds();
  void recv_GetDesignDrillingSurfTechnologyIds(std::vector<int32_t> & _return);
  void GetDesignDrillingSurfTechnologyNames(std::vector<std::string> & _return);
  void send_GetDesignDrillingSurfTechnologyNames();
  void recv_GetDesignDrillingSurfTechnologyNames(std::vector<std::string> & _return);
  void AddMoreDesignDrillingSurfTechnology(const std::vector<DesignDrillingSurfTechnology> & objs);
  void send_AddMoreDesignDrillingSurfTechnology(const std::vector<DesignDrillingSurfTechnology> & objs);
  void recv_AddMoreDesignDrillingSurfTechnology();
  void DeleteMoreDesignDrillingSurfTechnology(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreDesignDrillingSurfTechnology(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDesignDrillingSurfTechnology();
  void GetDesignDrillingSurfTechnologyByFields(DesignDrillingSurfTechnology& _return, const std::map<std::string, std::string> & fields);
  void send_GetDesignDrillingSurfTechnologyByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignDrillingSurfTechnologyByFields(DesignDrillingSurfTechnology& _return);
  void GetDesignDrillingSurfTechnologyByFields1(DesignDrillingSurfTechnology& _return, const std::string& field, const std::string& value);
  void send_GetDesignDrillingSurfTechnologyByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignDrillingSurfTechnologyByFields1(DesignDrillingSurfTechnology& _return);
  void GetDesignDrillingSurfTechnologyByFields2(DesignDrillingSurfTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDesignDrillingSurfTechnologyByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignDrillingSurfTechnologyByFields2(DesignDrillingSurfTechnology& _return);
  void GetDesignDrillingSurfTechnologyListByFields(std::vector<DesignDrillingSurfTechnology> & _return, const std::map<std::string, std::string> & fields);
  void send_GetDesignDrillingSurfTechnologyListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignDrillingSurfTechnologyListByFields(std::vector<DesignDrillingSurfTechnology> & _return);
  void GetDesignDrillingSurfTechnologyListByFields1(std::vector<DesignDrillingSurfTechnology> & _return, const std::string& field, const std::string& value);
  void send_GetDesignDrillingSurfTechnologyListByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignDrillingSurfTechnologyListByFields1(std::vector<DesignDrillingSurfTechnology> & _return);
  void GetDesignDrillingSurfTechnologyListByFields2(std::vector<DesignDrillingSurfTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDesignDrillingSurfTechnologyListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignDrillingSurfTechnologyListByFields2(std::vector<DesignDrillingSurfTechnology> & _return);
  int32_t AddDesignGoafTechnology(const DesignGoafTechnology& design_goaf_technology);
  void send_AddDesignGoafTechnology(const DesignGoafTechnology& design_goaf_technology);
  int32_t recv_AddDesignGoafTechnology();
  bool DeleteDesignGoafTechnology(const int32_t id);
  void send_DeleteDesignGoafTechnology(const int32_t id);
  bool recv_DeleteDesignGoafTechnology();
  bool UpdateDesignGoafTechnology(const DesignGoafTechnology& design_goaf_technology);
  void send_UpdateDesignGoafTechnology(const DesignGoafTechnology& design_goaf_technology);
  bool recv_UpdateDesignGoafTechnology();
  void GetDesignGoafTechnologyById(DesignGoafTechnology& _return, const int32_t id);
  void send_GetDesignGoafTechnologyById(const int32_t id);
  void recv_GetDesignGoafTechnologyById(DesignGoafTechnology& _return);
  void GetDesignGoafTechnologyByForeignKey(DesignGoafTechnology& _return, const std::string& fkey, const int32_t id);
  void send_GetDesignGoafTechnologyByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDesignGoafTechnologyByForeignKey(DesignGoafTechnology& _return);
  void GetDesignGoafTechnologyList(std::vector<DesignGoafTechnology> & _return);
  void send_GetDesignGoafTechnologyList();
  void recv_GetDesignGoafTechnologyList(std::vector<DesignGoafTechnology> & _return);
  void GetDesignGoafTechnologyIds(std::vector<int32_t> & _return);
  void send_GetDesignGoafTechnologyIds();
  void recv_GetDesignGoafTechnologyIds(std::vector<int32_t> & _return);
  void GetDesignGoafTechnologyNames(std::vector<std::string> & _return);
  void send_GetDesignGoafTechnologyNames();
  void recv_GetDesignGoafTechnologyNames(std::vector<std::string> & _return);
  void AddMoreDesignGoafTechnology(const std::vector<DesignGoafTechnology> & objs);
  void send_AddMoreDesignGoafTechnology(const std::vector<DesignGoafTechnology> & objs);
  void recv_AddMoreDesignGoafTechnology();
  void DeleteMoreDesignGoafTechnology(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreDesignGoafTechnology(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDesignGoafTechnology();
  void GetDesignGoafTechnologyByFields(DesignGoafTechnology& _return, const std::map<std::string, std::string> & fields);
  void send_GetDesignGoafTechnologyByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignGoafTechnologyByFields(DesignGoafTechnology& _return);
  void GetDesignGoafTechnologyByFields1(DesignGoafTechnology& _return, const std::string& field, const std::string& value);
  void send_GetDesignGoafTechnologyByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignGoafTechnologyByFields1(DesignGoafTechnology& _return);
  void GetDesignGoafTechnologyByFields2(DesignGoafTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDesignGoafTechnologyByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignGoafTechnologyByFields2(DesignGoafTechnology& _return);
  void GetDesignGoafTechnologyListByFields(std::vector<DesignGoafTechnology> & _return, const std::map<std::string, std::string> & fields);
  void send_GetDesignGoafTechnologyListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignGoafTechnologyListByFields(std::vector<DesignGoafTechnology> & _return);
  void GetDesignGoafTechnologyListByFields1(std::vector<DesignGoafTechnology> & _return, const std::string& field, const std::string& value);
  void send_GetDesignGoafTechnologyListByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignGoafTechnologyListByFields1(std::vector<DesignGoafTechnology> & _return);
  void GetDesignGoafTechnologyListByFields2(std::vector<DesignGoafTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDesignGoafTechnologyListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignGoafTechnologyListByFields2(std::vector<DesignGoafTechnology> & _return);
  int32_t AddDesignPore(const DesignPore& design_pore);
  void send_AddDesignPore(const DesignPore& design_pore);
  int32_t recv_AddDesignPore();
  bool DeleteDesignPore(const int32_t id);
  void send_DeleteDesignPore(const int32_t id);
  bool recv_DeleteDesignPore();
  bool UpdateDesignPore(const DesignPore& design_pore);
  void send_UpdateDesignPore(const DesignPore& design_pore);
  bool recv_UpdateDesignPore();
  void GetDesignPoreById(DesignPore& _return, const int32_t id);
  void send_GetDesignPoreById(const int32_t id);
  void recv_GetDesignPoreById(DesignPore& _return);
  void GetDesignPoreByForeignKey(DesignPore& _return, const std::string& fkey, const int32_t id);
  void send_GetDesignPoreByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDesignPoreByForeignKey(DesignPore& _return);
  void GetDesignPoreList(std::vector<DesignPore> & _return);
  void send_GetDesignPoreList();
  void recv_GetDesignPoreList(std::vector<DesignPore> & _return);
  void GetDesignPoreIds(std::vector<int32_t> & _return);
  void send_GetDesignPoreIds();
  void recv_GetDesignPoreIds(std::vector<int32_t> & _return);
  void GetDesignPoreNames(std::vector<std::string> & _return);
  void send_GetDesignPoreNames();
  void recv_GetDesignPoreNames(std::vector<std::string> & _return);
  void AddMoreDesignPore(const std::vector<DesignPore> & objs);
  void send_AddMoreDesignPore(const std::vector<DesignPore> & objs);
  void recv_AddMoreDesignPore();
  void DeleteMoreDesignPore(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreDesignPore(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDesignPore();
  void GetDesignPoreByFields(DesignPore& _return, const std::map<std::string, std::string> & fields);
  void send_GetDesignPoreByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignPoreByFields(DesignPore& _return);
  void GetDesignPoreByFields1(DesignPore& _return, const std::string& field, const std::string& value);
  void send_GetDesignPoreByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignPoreByFields1(DesignPore& _return);
  void GetDesignPoreByFields2(DesignPore& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDesignPoreByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignPoreByFields2(DesignPore& _return);
  void GetDesignPoreListByFields(std::vector<DesignPore> & _return, const std::map<std::string, std::string> & fields);
  void send_GetDesignPoreListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignPoreListByFields(std::vector<DesignPore> & _return);
  void GetDesignPoreListByFields1(std::vector<DesignPore> & _return, const std::string& field, const std::string& value);
  void send_GetDesignPoreListByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignPoreListByFields1(std::vector<DesignPore> & _return);
  void GetDesignPoreListByFields2(std::vector<DesignPore> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDesignPoreListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignPoreListByFields2(std::vector<DesignPore> & _return);
  int32_t AddDesignSite(const DesignSite& design_site);
  void send_AddDesignSite(const DesignSite& design_site);
  int32_t recv_AddDesignSite();
  bool DeleteDesignSite(const int32_t id);
  void send_DeleteDesignSite(const int32_t id);
  bool recv_DeleteDesignSite();
  bool UpdateDesignSite(const DesignSite& design_site);
  void send_UpdateDesignSite(const DesignSite& design_site);
  bool recv_UpdateDesignSite();
  void GetDesignSiteById(DesignSite& _return, const int32_t id);
  void send_GetDesignSiteById(const int32_t id);
  void recv_GetDesignSiteById(DesignSite& _return);
  void GetDesignSiteByForeignKey(DesignSite& _return, const std::string& fkey, const int32_t id);
  void send_GetDesignSiteByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDesignSiteByForeignKey(DesignSite& _return);
  void GetDesignSiteList(std::vector<DesignSite> & _return);
  void send_GetDesignSiteList();
  void recv_GetDesignSiteList(std::vector<DesignSite> & _return);
  void GetDesignSiteIds(std::vector<int32_t> & _return);
  void send_GetDesignSiteIds();
  void recv_GetDesignSiteIds(std::vector<int32_t> & _return);
  void GetDesignSiteNames(std::vector<std::string> & _return);
  void send_GetDesignSiteNames();
  void recv_GetDesignSiteNames(std::vector<std::string> & _return);
  void AddMoreDesignSite(const std::vector<DesignSite> & objs);
  void send_AddMoreDesignSite(const std::vector<DesignSite> & objs);
  void recv_AddMoreDesignSite();
  void DeleteMoreDesignSite(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreDesignSite(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDesignSite();
  void GetDesignSiteByFields(DesignSite& _return, const std::map<std::string, std::string> & fields);
  void send_GetDesignSiteByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignSiteByFields(DesignSite& _return);
  void GetDesignSiteByFields1(DesignSite& _return, const std::string& field, const std::string& value);
  void send_GetDesignSiteByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignSiteByFields1(DesignSite& _return);
  void GetDesignSiteByFields2(DesignSite& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDesignSiteByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignSiteByFields2(DesignSite& _return);
  void GetDesignSiteListByFields(std::vector<DesignSite> & _return, const std::map<std::string, std::string> & fields);
  void send_GetDesignSiteListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignSiteListByFields(std::vector<DesignSite> & _return);
  void GetDesignSiteListByFields1(std::vector<DesignSite> & _return, const std::string& field, const std::string& value);
  void send_GetDesignSiteListByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignSiteListByFields1(std::vector<DesignSite> & _return);
  void GetDesignSiteListByFields2(std::vector<DesignSite> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDesignSiteListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignSiteListByFields2(std::vector<DesignSite> & _return);
  int32_t AddDesignTechnology(const DesignTechnology& design_technology);
  void send_AddDesignTechnology(const DesignTechnology& design_technology);
  int32_t recv_AddDesignTechnology();
  bool DeleteDesignTechnology(const int32_t id);
  void send_DeleteDesignTechnology(const int32_t id);
  bool recv_DeleteDesignTechnology();
  bool UpdateDesignTechnology(const DesignTechnology& design_technology);
  void send_UpdateDesignTechnology(const DesignTechnology& design_technology);
  bool recv_UpdateDesignTechnology();
  void GetDesignTechnologyById(DesignTechnology& _return, const int32_t id);
  void send_GetDesignTechnologyById(const int32_t id);
  void recv_GetDesignTechnologyById(DesignTechnology& _return);
  void GetDesignTechnologyByForeignKey(DesignTechnology& _return, const std::string& fkey, const int32_t id);
  void send_GetDesignTechnologyByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDesignTechnologyByForeignKey(DesignTechnology& _return);
  void GetDesignTechnologyList(std::vector<DesignTechnology> & _return);
  void send_GetDesignTechnologyList();
  void recv_GetDesignTechnologyList(std::vector<DesignTechnology> & _return);
  void GetDesignTechnologyIds(std::vector<int32_t> & _return);
  void send_GetDesignTechnologyIds();
  void recv_GetDesignTechnologyIds(std::vector<int32_t> & _return);
  void GetDesignTechnologyNames(std::vector<std::string> & _return);
  void send_GetDesignTechnologyNames();
  void recv_GetDesignTechnologyNames(std::vector<std::string> & _return);
  void AddMoreDesignTechnology(const std::vector<DesignTechnology> & objs);
  void send_AddMoreDesignTechnology(const std::vector<DesignTechnology> & objs);
  void recv_AddMoreDesignTechnology();
  void DeleteMoreDesignTechnology(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreDesignTechnology(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDesignTechnology();
  void GetDesignTechnologyByFields(DesignTechnology& _return, const std::map<std::string, std::string> & fields);
  void send_GetDesignTechnologyByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignTechnologyByFields(DesignTechnology& _return);
  void GetDesignTechnologyByFields1(DesignTechnology& _return, const std::string& field, const std::string& value);
  void send_GetDesignTechnologyByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignTechnologyByFields1(DesignTechnology& _return);
  void GetDesignTechnologyByFields2(DesignTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDesignTechnologyByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignTechnologyByFields2(DesignTechnology& _return);
  void GetDesignTechnologyListByFields(std::vector<DesignTechnology> & _return, const std::map<std::string, std::string> & fields);
  void send_GetDesignTechnologyListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignTechnologyListByFields(std::vector<DesignTechnology> & _return);
  void GetDesignTechnologyListByFields1(std::vector<DesignTechnology> & _return, const std::string& field, const std::string& value);
  void send_GetDesignTechnologyListByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignTechnologyListByFields1(std::vector<DesignTechnology> & _return);
  void GetDesignTechnologyListByFields2(std::vector<DesignTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDesignTechnologyListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignTechnologyListByFields2(std::vector<DesignTechnology> & _return);
  int32_t AddDesignWorkSurfTechnology(const DesignWorkSurfTechnology& design_work_surf_technology);
  void send_AddDesignWorkSurfTechnology(const DesignWorkSurfTechnology& design_work_surf_technology);
  int32_t recv_AddDesignWorkSurfTechnology();
  bool DeleteDesignWorkSurfTechnology(const int32_t id);
  void send_DeleteDesignWorkSurfTechnology(const int32_t id);
  bool recv_DeleteDesignWorkSurfTechnology();
  bool UpdateDesignWorkSurfTechnology(const DesignWorkSurfTechnology& design_work_surf_technology);
  void send_UpdateDesignWorkSurfTechnology(const DesignWorkSurfTechnology& design_work_surf_technology);
  bool recv_UpdateDesignWorkSurfTechnology();
  void GetDesignWorkSurfTechnologyById(DesignWorkSurfTechnology& _return, const int32_t id);
  void send_GetDesignWorkSurfTechnologyById(const int32_t id);
  void recv_GetDesignWorkSurfTechnologyById(DesignWorkSurfTechnology& _return);
  void GetDesignWorkSurfTechnologyByForeignKey(DesignWorkSurfTechnology& _return, const std::string& fkey, const int32_t id);
  void send_GetDesignWorkSurfTechnologyByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDesignWorkSurfTechnologyByForeignKey(DesignWorkSurfTechnology& _return);
  void GetDesignWorkSurfTechnologyList(std::vector<DesignWorkSurfTechnology> & _return);
  void send_GetDesignWorkSurfTechnologyList();
  void recv_GetDesignWorkSurfTechnologyList(std::vector<DesignWorkSurfTechnology> & _return);
  void GetDesignWorkSurfTechnologyIds(std::vector<int32_t> & _return);
  void send_GetDesignWorkSurfTechnologyIds();
  void recv_GetDesignWorkSurfTechnologyIds(std::vector<int32_t> & _return);
  void GetDesignWorkSurfTechnologyNames(std::vector<std::string> & _return);
  void send_GetDesignWorkSurfTechnologyNames();
  void recv_GetDesignWorkSurfTechnologyNames(std::vector<std::string> & _return);
  void AddMoreDesignWorkSurfTechnology(const std::vector<DesignWorkSurfTechnology> & objs);
  void send_AddMoreDesignWorkSurfTechnology(const std::vector<DesignWorkSurfTechnology> & objs);
  void recv_AddMoreDesignWorkSurfTechnology();
  void DeleteMoreDesignWorkSurfTechnology(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreDesignWorkSurfTechnology(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDesignWorkSurfTechnology();
  void GetDesignWorkSurfTechnologyByFields(DesignWorkSurfTechnology& _return, const std::map<std::string, std::string> & fields);
  void send_GetDesignWorkSurfTechnologyByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignWorkSurfTechnologyByFields(DesignWorkSurfTechnology& _return);
  void GetDesignWorkSurfTechnologyByFields1(DesignWorkSurfTechnology& _return, const std::string& field, const std::string& value);
  void send_GetDesignWorkSurfTechnologyByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignWorkSurfTechnologyByFields1(DesignWorkSurfTechnology& _return);
  void GetDesignWorkSurfTechnologyByFields2(DesignWorkSurfTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDesignWorkSurfTechnologyByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignWorkSurfTechnologyByFields2(DesignWorkSurfTechnology& _return);
  void GetDesignWorkSurfTechnologyListByFields(std::vector<DesignWorkSurfTechnology> & _return, const std::map<std::string, std::string> & fields);
  void send_GetDesignWorkSurfTechnologyListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignWorkSurfTechnologyListByFields(std::vector<DesignWorkSurfTechnology> & _return);
  void GetDesignWorkSurfTechnologyListByFields1(std::vector<DesignWorkSurfTechnology> & _return, const std::string& field, const std::string& value);
  void send_GetDesignWorkSurfTechnologyListByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignWorkSurfTechnologyListByFields1(std::vector<DesignWorkSurfTechnology> & _return);
  void GetDesignWorkSurfTechnologyListByFields2(std::vector<DesignWorkSurfTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDesignWorkSurfTechnologyListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignWorkSurfTechnologyListByFields2(std::vector<DesignWorkSurfTechnology> & _return);
  int32_t AddDrillingRadiusParam(const DrillingRadiusParam& drilling_radius_param);
  void send_AddDrillingRadiusParam(const DrillingRadiusParam& drilling_radius_param);
  int32_t recv_AddDrillingRadiusParam();
  bool DeleteDrillingRadiusParam(const int32_t id);
  void send_DeleteDrillingRadiusParam(const int32_t id);
  bool recv_DeleteDrillingRadiusParam();
  bool UpdateDrillingRadiusParam(const DrillingRadiusParam& drilling_radius_param);
  void send_UpdateDrillingRadiusParam(const DrillingRadiusParam& drilling_radius_param);
  bool recv_UpdateDrillingRadiusParam();
  void GetDrillingRadiusParamById(DrillingRadiusParam& _return, const int32_t id);
  void send_GetDrillingRadiusParamById(const int32_t id);
  void recv_GetDrillingRadiusParamById(DrillingRadiusParam& _return);
  void GetDrillingRadiusParamByForeignKey(DrillingRadiusParam& _return, const std::string& fkey, const int32_t id);
  void send_GetDrillingRadiusParamByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDrillingRadiusParamByForeignKey(DrillingRadiusParam& _return);
  void GetDrillingRadiusParamList(std::vector<DrillingRadiusParam> & _return);
  void send_GetDrillingRadiusParamList();
  void recv_GetDrillingRadiusParamList(std::vector<DrillingRadiusParam> & _return);
  void GetDrillingRadiusParamIds(std::vector<int32_t> & _return);
  void send_GetDrillingRadiusParamIds();
  void recv_GetDrillingRadiusParamIds(std::vector<int32_t> & _return);
  void GetDrillingRadiusParamNames(std::vector<std::string> & _return);
  void send_GetDrillingRadiusParamNames();
  void recv_GetDrillingRadiusParamNames(std::vector<std::string> & _return);
  void AddMoreDrillingRadiusParam(const std::vector<DrillingRadiusParam> & objs);
  void send_AddMoreDrillingRadiusParam(const std::vector<DrillingRadiusParam> & objs);
  void recv_AddMoreDrillingRadiusParam();
  void DeleteMoreDrillingRadiusParam(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreDrillingRadiusParam(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDrillingRadiusParam();
  void GetDrillingRadiusParamByFields(DrillingRadiusParam& _return, const std::map<std::string, std::string> & fields);
  void send_GetDrillingRadiusParamByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDrillingRadiusParamByFields(DrillingRadiusParam& _return);
  void GetDrillingRadiusParamByFields1(DrillingRadiusParam& _return, const std::string& field, const std::string& value);
  void send_GetDrillingRadiusParamByFields1(const std::string& field, const std::string& value);
  void recv_GetDrillingRadiusParamByFields1(DrillingRadiusParam& _return);
  void GetDrillingRadiusParamByFields2(DrillingRadiusParam& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDrillingRadiusParamByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDrillingRadiusParamByFields2(DrillingRadiusParam& _return);
  void GetDrillingRadiusParamListByFields(std::vector<DrillingRadiusParam> & _return, const std::map<std::string, std::string> & fields);
  void send_GetDrillingRadiusParamListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDrillingRadiusParamListByFields(std::vector<DrillingRadiusParam> & _return);
  void GetDrillingRadiusParamListByFields1(std::vector<DrillingRadiusParam> & _return, const std::string& field, const std::string& value);
  void send_GetDrillingRadiusParamListByFields1(const std::string& field, const std::string& value);
  void recv_GetDrillingRadiusParamListByFields1(std::vector<DrillingRadiusParam> & _return);
  void GetDrillingRadiusParamListByFields2(std::vector<DrillingRadiusParam> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDrillingRadiusParamListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDrillingRadiusParamListByFields2(std::vector<DrillingRadiusParam> & _return);
  int32_t AddDrillingSurf(const DrillingSurf& drilling_surf);
  void send_AddDrillingSurf(const DrillingSurf& drilling_surf);
  int32_t recv_AddDrillingSurf();
  bool DeleteDrillingSurf(const int32_t id);
  void send_DeleteDrillingSurf(const int32_t id);
  bool recv_DeleteDrillingSurf();
  bool UpdateDrillingSurf(const DrillingSurf& drilling_surf);
  void send_UpdateDrillingSurf(const DrillingSurf& drilling_surf);
  bool recv_UpdateDrillingSurf();
  void GetDrillingSurfById(DrillingSurf& _return, const int32_t id);
  void send_GetDrillingSurfById(const int32_t id);
  void recv_GetDrillingSurfById(DrillingSurf& _return);
  void GetDrillingSurfByForeignKey(DrillingSurf& _return, const std::string& fkey, const int32_t id);
  void send_GetDrillingSurfByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDrillingSurfByForeignKey(DrillingSurf& _return);
  void GetDrillingSurfList(std::vector<DrillingSurf> & _return);
  void send_GetDrillingSurfList();
  void recv_GetDrillingSurfList(std::vector<DrillingSurf> & _return);
  void GetDrillingSurfIds(std::vector<int32_t> & _return);
  void send_GetDrillingSurfIds();
  void recv_GetDrillingSurfIds(std::vector<int32_t> & _return);
  void GetDrillingSurfNames(std::vector<std::string> & _return);
  void send_GetDrillingSurfNames();
  void recv_GetDrillingSurfNames(std::vector<std::string> & _return);
  void AddMoreDrillingSurf(const std::vector<DrillingSurf> & objs);
  void send_AddMoreDrillingSurf(const std::vector<DrillingSurf> & objs);
  void recv_AddMoreDrillingSurf();
  void DeleteMoreDrillingSurf(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreDrillingSurf(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDrillingSurf();
  void GetDrillingSurfByFields(DrillingSurf& _return, const std::map<std::string, std::string> & fields);
  void send_GetDrillingSurfByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDrillingSurfByFields(DrillingSurf& _return);
  void GetDrillingSurfByFields1(DrillingSurf& _return, const std::string& field, const std::string& value);
  void send_GetDrillingSurfByFields1(const std::string& field, const std::string& value);
  void recv_GetDrillingSurfByFields1(DrillingSurf& _return);
  void GetDrillingSurfByFields2(DrillingSurf& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDrillingSurfByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDrillingSurfByFields2(DrillingSurf& _return);
  void GetDrillingSurfListByFields(std::vector<DrillingSurf> & _return, const std::map<std::string, std::string> & fields);
  void send_GetDrillingSurfListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDrillingSurfListByFields(std::vector<DrillingSurf> & _return);
  void GetDrillingSurfListByFields1(std::vector<DrillingSurf> & _return, const std::string& field, const std::string& value);
  void send_GetDrillingSurfListByFields1(const std::string& field, const std::string& value);
  void recv_GetDrillingSurfListByFields1(std::vector<DrillingSurf> & _return);
  void GetDrillingSurfListByFields2(std::vector<DrillingSurf> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetDrillingSurfListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDrillingSurfListByFields2(std::vector<DrillingSurf> & _return);
  int32_t AddEvalUnit(const EvalUnit& eval_unit);
  void send_AddEvalUnit(const EvalUnit& eval_unit);
  int32_t recv_AddEvalUnit();
  bool DeleteEvalUnit(const int32_t id);
  void send_DeleteEvalUnit(const int32_t id);
  bool recv_DeleteEvalUnit();
  bool UpdateEvalUnit(const EvalUnit& eval_unit);
  void send_UpdateEvalUnit(const EvalUnit& eval_unit);
  bool recv_UpdateEvalUnit();
  void GetEvalUnitById(EvalUnit& _return, const int32_t id);
  void send_GetEvalUnitById(const int32_t id);
  void recv_GetEvalUnitById(EvalUnit& _return);
  void GetEvalUnitByForeignKey(EvalUnit& _return, const std::string& fkey, const int32_t id);
  void send_GetEvalUnitByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetEvalUnitByForeignKey(EvalUnit& _return);
  void GetEvalUnitList(std::vector<EvalUnit> & _return);
  void send_GetEvalUnitList();
  void recv_GetEvalUnitList(std::vector<EvalUnit> & _return);
  void GetEvalUnitIds(std::vector<int32_t> & _return);
  void send_GetEvalUnitIds();
  void recv_GetEvalUnitIds(std::vector<int32_t> & _return);
  void GetEvalUnitNames(std::vector<std::string> & _return);
  void send_GetEvalUnitNames();
  void recv_GetEvalUnitNames(std::vector<std::string> & _return);
  void AddMoreEvalUnit(const std::vector<EvalUnit> & objs);
  void send_AddMoreEvalUnit(const std::vector<EvalUnit> & objs);
  void recv_AddMoreEvalUnit();
  void DeleteMoreEvalUnit(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreEvalUnit(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreEvalUnit();
  void GetEvalUnitByFields(EvalUnit& _return, const std::map<std::string, std::string> & fields);
  void send_GetEvalUnitByFields(const std::map<std::string, std::string> & fields);
  void recv_GetEvalUnitByFields(EvalUnit& _return);
  void GetEvalUnitByFields1(EvalUnit& _return, const std::string& field, const std::string& value);
  void send_GetEvalUnitByFields1(const std::string& field, const std::string& value);
  void recv_GetEvalUnitByFields1(EvalUnit& _return);
  void GetEvalUnitByFields2(EvalUnit& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetEvalUnitByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetEvalUnitByFields2(EvalUnit& _return);
  void GetEvalUnitListByFields(std::vector<EvalUnit> & _return, const std::map<std::string, std::string> & fields);
  void send_GetEvalUnitListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetEvalUnitListByFields(std::vector<EvalUnit> & _return);
  void GetEvalUnitListByFields1(std::vector<EvalUnit> & _return, const std::string& field, const std::string& value);
  void send_GetEvalUnitListByFields1(const std::string& field, const std::string& value);
  void recv_GetEvalUnitListByFields1(std::vector<EvalUnit> & _return);
  void GetEvalUnitListByFields2(std::vector<EvalUnit> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetEvalUnitListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetEvalUnitListByFields2(std::vector<EvalUnit> & _return);
  int32_t AddHighDrillingPore(const HighDrillingPore& high_drilling_pore);
  void send_AddHighDrillingPore(const HighDrillingPore& high_drilling_pore);
  int32_t recv_AddHighDrillingPore();
  bool DeleteHighDrillingPore(const int32_t id);
  void send_DeleteHighDrillingPore(const int32_t id);
  bool recv_DeleteHighDrillingPore();
  bool UpdateHighDrillingPore(const HighDrillingPore& high_drilling_pore);
  void send_UpdateHighDrillingPore(const HighDrillingPore& high_drilling_pore);
  bool recv_UpdateHighDrillingPore();
  void GetHighDrillingPoreById(HighDrillingPore& _return, const int32_t id);
  void send_GetHighDrillingPoreById(const int32_t id);
  void recv_GetHighDrillingPoreById(HighDrillingPore& _return);
  void GetHighDrillingPoreByForeignKey(HighDrillingPore& _return, const std::string& fkey, const int32_t id);
  void send_GetHighDrillingPoreByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetHighDrillingPoreByForeignKey(HighDrillingPore& _return);
  void GetHighDrillingPoreList(std::vector<HighDrillingPore> & _return);
  void send_GetHighDrillingPoreList();
  void recv_GetHighDrillingPoreList(std::vector<HighDrillingPore> & _return);
  void GetHighDrillingPoreIds(std::vector<int32_t> & _return);
  void send_GetHighDrillingPoreIds();
  void recv_GetHighDrillingPoreIds(std::vector<int32_t> & _return);
  void GetHighDrillingPoreNames(std::vector<std::string> & _return);
  void send_GetHighDrillingPoreNames();
  void recv_GetHighDrillingPoreNames(std::vector<std::string> & _return);
  void AddMoreHighDrillingPore(const std::vector<HighDrillingPore> & objs);
  void send_AddMoreHighDrillingPore(const std::vector<HighDrillingPore> & objs);
  void recv_AddMoreHighDrillingPore();
  void DeleteMoreHighDrillingPore(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreHighDrillingPore(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreHighDrillingPore();
  void GetHighDrillingPoreByFields(HighDrillingPore& _return, const std::map<std::string, std::string> & fields);
  void send_GetHighDrillingPoreByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingPoreByFields(HighDrillingPore& _return);
  void GetHighDrillingPoreByFields1(HighDrillingPore& _return, const std::string& field, const std::string& value);
  void send_GetHighDrillingPoreByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingPoreByFields1(HighDrillingPore& _return);
  void GetHighDrillingPoreByFields2(HighDrillingPore& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetHighDrillingPoreByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingPoreByFields2(HighDrillingPore& _return);
  void GetHighDrillingPoreListByFields(std::vector<HighDrillingPore> & _return, const std::map<std::string, std::string> & fields);
  void send_GetHighDrillingPoreListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingPoreListByFields(std::vector<HighDrillingPore> & _return);
  void GetHighDrillingPoreListByFields1(std::vector<HighDrillingPore> & _return, const std::string& field, const std::string& value);
  void send_GetHighDrillingPoreListByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingPoreListByFields1(std::vector<HighDrillingPore> & _return);
  void GetHighDrillingPoreListByFields2(std::vector<HighDrillingPore> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetHighDrillingPoreListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingPoreListByFields2(std::vector<HighDrillingPore> & _return);
  int32_t AddHighDrillingPoreParam(const HighDrillingPoreParam& high_drilling_pore_param);
  void send_AddHighDrillingPoreParam(const HighDrillingPoreParam& high_drilling_pore_param);
  int32_t recv_AddHighDrillingPoreParam();
  bool DeleteHighDrillingPoreParam(const int32_t id);
  void send_DeleteHighDrillingPoreParam(const int32_t id);
  bool recv_DeleteHighDrillingPoreParam();
  bool UpdateHighDrillingPoreParam(const HighDrillingPoreParam& high_drilling_pore_param);
  void send_UpdateHighDrillingPoreParam(const HighDrillingPoreParam& high_drilling_pore_param);
  bool recv_UpdateHighDrillingPoreParam();
  void GetHighDrillingPoreParamById(HighDrillingPoreParam& _return, const int32_t id);
  void send_GetHighDrillingPoreParamById(const int32_t id);
  void recv_GetHighDrillingPoreParamById(HighDrillingPoreParam& _return);
  void GetHighDrillingPoreParamByForeignKey(HighDrillingPoreParam& _return, const std::string& fkey, const int32_t id);
  void send_GetHighDrillingPoreParamByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetHighDrillingPoreParamByForeignKey(HighDrillingPoreParam& _return);
  void GetHighDrillingPoreParamList(std::vector<HighDrillingPoreParam> & _return);
  void send_GetHighDrillingPoreParamList();
  void recv_GetHighDrillingPoreParamList(std::vector<HighDrillingPoreParam> & _return);
  void GetHighDrillingPoreParamIds(std::vector<int32_t> & _return);
  void send_GetHighDrillingPoreParamIds();
  void recv_GetHighDrillingPoreParamIds(std::vector<int32_t> & _return);
  void GetHighDrillingPoreParamNames(std::vector<std::string> & _return);
  void send_GetHighDrillingPoreParamNames();
  void recv_GetHighDrillingPoreParamNames(std::vector<std::string> & _return);
  void AddMoreHighDrillingPoreParam(const std::vector<HighDrillingPoreParam> & objs);
  void send_AddMoreHighDrillingPoreParam(const std::vector<HighDrillingPoreParam> & objs);
  void recv_AddMoreHighDrillingPoreParam();
  void DeleteMoreHighDrillingPoreParam(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreHighDrillingPoreParam(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreHighDrillingPoreParam();
  void GetHighDrillingPoreParamByFields(HighDrillingPoreParam& _return, const std::map<std::string, std::string> & fields);
  void send_GetHighDrillingPoreParamByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingPoreParamByFields(HighDrillingPoreParam& _return);
  void GetHighDrillingPoreParamByFields1(HighDrillingPoreParam& _return, const std::string& field, const std::string& value);
  void send_GetHighDrillingPoreParamByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingPoreParamByFields1(HighDrillingPoreParam& _return);
  void GetHighDrillingPoreParamByFields2(HighDrillingPoreParam& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetHighDrillingPoreParamByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingPoreParamByFields2(HighDrillingPoreParam& _return);
  void GetHighDrillingPoreParamListByFields(std::vector<HighDrillingPoreParam> & _return, const std::map<std::string, std::string> & fields);
  void send_GetHighDrillingPoreParamListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingPoreParamListByFields(std::vector<HighDrillingPoreParam> & _return);
  void GetHighDrillingPoreParamListByFields1(std::vector<HighDrillingPoreParam> & _return, const std::string& field, const std::string& value);
  void send_GetHighDrillingPoreParamListByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingPoreParamListByFields1(std::vector<HighDrillingPoreParam> & _return);
  void GetHighDrillingPoreParamListByFields2(std::vector<HighDrillingPoreParam> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetHighDrillingPoreParamListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingPoreParamListByFields2(std::vector<HighDrillingPoreParam> & _return);
  int32_t AddHighDrillingSiteParam(const HighDrillingSiteParam& high_drilling_site_param);
  void send_AddHighDrillingSiteParam(const HighDrillingSiteParam& high_drilling_site_param);
  int32_t recv_AddHighDrillingSiteParam();
  bool DeleteHighDrillingSiteParam(const int32_t id);
  void send_DeleteHighDrillingSiteParam(const int32_t id);
  bool recv_DeleteHighDrillingSiteParam();
  bool UpdateHighDrillingSiteParam(const HighDrillingSiteParam& high_drilling_site_param);
  void send_UpdateHighDrillingSiteParam(const HighDrillingSiteParam& high_drilling_site_param);
  bool recv_UpdateHighDrillingSiteParam();
  void GetHighDrillingSiteParamById(HighDrillingSiteParam& _return, const int32_t id);
  void send_GetHighDrillingSiteParamById(const int32_t id);
  void recv_GetHighDrillingSiteParamById(HighDrillingSiteParam& _return);
  void GetHighDrillingSiteParamByForeignKey(HighDrillingSiteParam& _return, const std::string& fkey, const int32_t id);
  void send_GetHighDrillingSiteParamByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetHighDrillingSiteParamByForeignKey(HighDrillingSiteParam& _return);
  void GetHighDrillingSiteParamList(std::vector<HighDrillingSiteParam> & _return);
  void send_GetHighDrillingSiteParamList();
  void recv_GetHighDrillingSiteParamList(std::vector<HighDrillingSiteParam> & _return);
  void GetHighDrillingSiteParamIds(std::vector<int32_t> & _return);
  void send_GetHighDrillingSiteParamIds();
  void recv_GetHighDrillingSiteParamIds(std::vector<int32_t> & _return);
  void GetHighDrillingSiteParamNames(std::vector<std::string> & _return);
  void send_GetHighDrillingSiteParamNames();
  void recv_GetHighDrillingSiteParamNames(std::vector<std::string> & _return);
  void AddMoreHighDrillingSiteParam(const std::vector<HighDrillingSiteParam> & objs);
  void send_AddMoreHighDrillingSiteParam(const std::vector<HighDrillingSiteParam> & objs);
  void recv_AddMoreHighDrillingSiteParam();
  void DeleteMoreHighDrillingSiteParam(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreHighDrillingSiteParam(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreHighDrillingSiteParam();
  void GetHighDrillingSiteParamByFields(HighDrillingSiteParam& _return, const std::map<std::string, std::string> & fields);
  void send_GetHighDrillingSiteParamByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingSiteParamByFields(HighDrillingSiteParam& _return);
  void GetHighDrillingSiteParamByFields1(HighDrillingSiteParam& _return, const std::string& field, const std::string& value);
  void send_GetHighDrillingSiteParamByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingSiteParamByFields1(HighDrillingSiteParam& _return);
  void GetHighDrillingSiteParamByFields2(HighDrillingSiteParam& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetHighDrillingSiteParamByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingSiteParamByFields2(HighDrillingSiteParam& _return);
  void GetHighDrillingSiteParamListByFields(std::vector<HighDrillingSiteParam> & _return, const std::map<std::string, std::string> & fields);
  void send_GetHighDrillingSiteParamListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingSiteParamListByFields(std::vector<HighDrillingSiteParam> & _return);
  void GetHighDrillingSiteParamListByFields1(std::vector<HighDrillingSiteParam> & _return, const std::string& field, const std::string& value);
  void send_GetHighDrillingSiteParamListByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingSiteParamListByFields1(std::vector<HighDrillingSiteParam> & _return);
  void GetHighDrillingSiteParamListByFields2(std::vector<HighDrillingSiteParam> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetHighDrillingSiteParamListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingSiteParamListByFields2(std::vector<HighDrillingSiteParam> & _return);
  int32_t AddHighDrillingTunnel(const HighDrillingTunnel& high_drilling_tunnel);
  void send_AddHighDrillingTunnel(const HighDrillingTunnel& high_drilling_tunnel);
  int32_t recv_AddHighDrillingTunnel();
  bool DeleteHighDrillingTunnel(const int32_t id);
  void send_DeleteHighDrillingTunnel(const int32_t id);
  bool recv_DeleteHighDrillingTunnel();
  bool UpdateHighDrillingTunnel(const HighDrillingTunnel& high_drilling_tunnel);
  void send_UpdateHighDrillingTunnel(const HighDrillingTunnel& high_drilling_tunnel);
  bool recv_UpdateHighDrillingTunnel();
  void GetHighDrillingTunnelById(HighDrillingTunnel& _return, const int32_t id);
  void send_GetHighDrillingTunnelById(const int32_t id);
  void recv_GetHighDrillingTunnelById(HighDrillingTunnel& _return);
  void GetHighDrillingTunnelByForeignKey(HighDrillingTunnel& _return, const std::string& fkey, const int32_t id);
  void send_GetHighDrillingTunnelByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetHighDrillingTunnelByForeignKey(HighDrillingTunnel& _return);
  void GetHighDrillingTunnelList(std::vector<HighDrillingTunnel> & _return);
  void send_GetHighDrillingTunnelList();
  void recv_GetHighDrillingTunnelList(std::vector<HighDrillingTunnel> & _return);
  void GetHighDrillingTunnelIds(std::vector<int32_t> & _return);
  void send_GetHighDrillingTunnelIds();
  void recv_GetHighDrillingTunnelIds(std::vector<int32_t> & _return);
  void GetHighDrillingTunnelNames(std::vector<std::string> & _return);
  void send_GetHighDrillingTunnelNames();
  void recv_GetHighDrillingTunnelNames(std::vector<std::string> & _return);
  void AddMoreHighDrillingTunnel(const std::vector<HighDrillingTunnel> & objs);
  void send_AddMoreHighDrillingTunnel(const std::vector<HighDrillingTunnel> & objs);
  void recv_AddMoreHighDrillingTunnel();
  void DeleteMoreHighDrillingTunnel(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreHighDrillingTunnel(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreHighDrillingTunnel();
  void GetHighDrillingTunnelByFields(HighDrillingTunnel& _return, const std::map<std::string, std::string> & fields);
  void send_GetHighDrillingTunnelByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingTunnelByFields(HighDrillingTunnel& _return);
  void GetHighDrillingTunnelByFields1(HighDrillingTunnel& _return, const std::string& field, const std::string& value);
  void send_GetHighDrillingTunnelByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingTunnelByFields1(HighDrillingTunnel& _return);
  void GetHighDrillingTunnelByFields2(HighDrillingTunnel& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetHighDrillingTunnelByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingTunnelByFields2(HighDrillingTunnel& _return);
  void GetHighDrillingTunnelListByFields(std::vector<HighDrillingTunnel> & _return, const std::map<std::string, std::string> & fields);
  void send_GetHighDrillingTunnelListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingTunnelListByFields(std::vector<HighDrillingTunnel> & _return);
  void GetHighDrillingTunnelListByFields1(std::vector<HighDrillingTunnel> & _return, const std::string& field, const std::string& value);
  void send_GetHighDrillingTunnelListByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingTunnelListByFields1(std::vector<HighDrillingTunnel> & _return);
  void GetHighDrillingTunnelListByFields2(std::vector<HighDrillingTunnel> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetHighDrillingTunnelListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingTunnelListByFields2(std::vector<HighDrillingTunnel> & _return);
  int32_t AddHydrGeo(const HydrGeo& hydr_geo);
  void send_AddHydrGeo(const HydrGeo& hydr_geo);
  int32_t recv_AddHydrGeo();
  bool DeleteHydrGeo(const int32_t id);
  void send_DeleteHydrGeo(const int32_t id);
  bool recv_DeleteHydrGeo();
  bool UpdateHydrGeo(const HydrGeo& hydr_geo);
  void send_UpdateHydrGeo(const HydrGeo& hydr_geo);
  bool recv_UpdateHydrGeo();
  void GetHydrGeoById(HydrGeo& _return, const int32_t id);
  void send_GetHydrGeoById(const int32_t id);
  void recv_GetHydrGeoById(HydrGeo& _return);
  void GetHydrGeoByForeignKey(HydrGeo& _return, const std::string& fkey, const int32_t id);
  void send_GetHydrGeoByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetHydrGeoByForeignKey(HydrGeo& _return);
  void GetHydrGeoList(std::vector<HydrGeo> & _return);
  void send_GetHydrGeoList();
  void recv_GetHydrGeoList(std::vector<HydrGeo> & _return);
  void GetHydrGeoIds(std::vector<int32_t> & _return);
  void send_GetHydrGeoIds();
  void recv_GetHydrGeoIds(std::vector<int32_t> & _return);
  void GetHydrGeoNames(std::vector<std::string> & _return);
  void send_GetHydrGeoNames();
  void recv_GetHydrGeoNames(std::vector<std::string> & _return);
  void AddMoreHydrGeo(const std::vector<HydrGeo> & objs);
  void send_AddMoreHydrGeo(const std::vector<HydrGeo> & objs);
  void recv_AddMoreHydrGeo();
  void DeleteMoreHydrGeo(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreHydrGeo(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreHydrGeo();
  void GetHydrGeoByFields(HydrGeo& _return, const std::map<std::string, std::string> & fields);
  void send_GetHydrGeoByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHydrGeoByFields(HydrGeo& _return);
  void GetHydrGeoByFields1(HydrGeo& _return, const std::string& field, const std::string& value);
  void send_GetHydrGeoByFields1(const std::string& field, const std::string& value);
  void recv_GetHydrGeoByFields1(HydrGeo& _return);
  void GetHydrGeoByFields2(HydrGeo& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetHydrGeoByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHydrGeoByFields2(HydrGeo& _return);
  void GetHydrGeoListByFields(std::vector<HydrGeo> & _return, const std::map<std::string, std::string> & fields);
  void send_GetHydrGeoListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHydrGeoListByFields(std::vector<HydrGeo> & _return);
  void GetHydrGeoListByFields1(std::vector<HydrGeo> & _return, const std::string& field, const std::string& value);
  void send_GetHydrGeoListByFields1(const std::string& field, const std::string& value);
  void recv_GetHydrGeoListByFields1(std::vector<HydrGeo> & _return);
  void GetHydrGeoListByFields2(std::vector<HydrGeo> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetHydrGeoListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHydrGeoListByFields2(std::vector<HydrGeo> & _return);
  int32_t AddMine(const Mine& mine);
  void send_AddMine(const Mine& mine);
  int32_t recv_AddMine();
  bool DeleteMine(const int32_t id);
  void send_DeleteMine(const int32_t id);
  bool recv_DeleteMine();
  bool UpdateMine(const Mine& mine);
  void send_UpdateMine(const Mine& mine);
  bool recv_UpdateMine();
  void GetMineById(Mine& _return, const int32_t id);
  void send_GetMineById(const int32_t id);
  void recv_GetMineById(Mine& _return);
  void GetMineByForeignKey(Mine& _return, const std::string& fkey, const int32_t id);
  void send_GetMineByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetMineByForeignKey(Mine& _return);
  void GetMineList(std::vector<Mine> & _return);
  void send_GetMineList();
  void recv_GetMineList(std::vector<Mine> & _return);
  void GetMineIds(std::vector<int32_t> & _return);
  void send_GetMineIds();
  void recv_GetMineIds(std::vector<int32_t> & _return);
  void GetMineNames(std::vector<std::string> & _return);
  void send_GetMineNames();
  void recv_GetMineNames(std::vector<std::string> & _return);
  void AddMoreMine(const std::vector<Mine> & objs);
  void send_AddMoreMine(const std::vector<Mine> & objs);
  void recv_AddMoreMine();
  void DeleteMoreMine(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreMine(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreMine();
  void GetMineByFields(Mine& _return, const std::map<std::string, std::string> & fields);
  void send_GetMineByFields(const std::map<std::string, std::string> & fields);
  void recv_GetMineByFields(Mine& _return);
  void GetMineByFields1(Mine& _return, const std::string& field, const std::string& value);
  void send_GetMineByFields1(const std::string& field, const std::string& value);
  void recv_GetMineByFields1(Mine& _return);
  void GetMineByFields2(Mine& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetMineByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetMineByFields2(Mine& _return);
  void GetMineListByFields(std::vector<Mine> & _return, const std::map<std::string, std::string> & fields);
  void send_GetMineListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetMineListByFields(std::vector<Mine> & _return);
  void GetMineListByFields1(std::vector<Mine> & _return, const std::string& field, const std::string& value);
  void send_GetMineListByFields1(const std::string& field, const std::string& value);
  void recv_GetMineListByFields1(std::vector<Mine> & _return);
  void GetMineListByFields2(std::vector<Mine> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetMineListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetMineListByFields2(std::vector<Mine> & _return);
  int32_t AddMineBase(const MineBase& mine_base);
  void send_AddMineBase(const MineBase& mine_base);
  int32_t recv_AddMineBase();
  bool DeleteMineBase(const int32_t id);
  void send_DeleteMineBase(const int32_t id);
  bool recv_DeleteMineBase();
  bool UpdateMineBase(const MineBase& mine_base);
  void send_UpdateMineBase(const MineBase& mine_base);
  bool recv_UpdateMineBase();
  void GetMineBaseById(MineBase& _return, const int32_t id);
  void send_GetMineBaseById(const int32_t id);
  void recv_GetMineBaseById(MineBase& _return);
  void GetMineBaseByForeignKey(MineBase& _return, const std::string& fkey, const int32_t id);
  void send_GetMineBaseByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetMineBaseByForeignKey(MineBase& _return);
  void GetMineBaseList(std::vector<MineBase> & _return);
  void send_GetMineBaseList();
  void recv_GetMineBaseList(std::vector<MineBase> & _return);
  void GetMineBaseIds(std::vector<int32_t> & _return);
  void send_GetMineBaseIds();
  void recv_GetMineBaseIds(std::vector<int32_t> & _return);
  void GetMineBaseNames(std::vector<std::string> & _return);
  void send_GetMineBaseNames();
  void recv_GetMineBaseNames(std::vector<std::string> & _return);
  void AddMoreMineBase(const std::vector<MineBase> & objs);
  void send_AddMoreMineBase(const std::vector<MineBase> & objs);
  void recv_AddMoreMineBase();
  void DeleteMoreMineBase(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreMineBase(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreMineBase();
  void GetMineBaseByFields(MineBase& _return, const std::map<std::string, std::string> & fields);
  void send_GetMineBaseByFields(const std::map<std::string, std::string> & fields);
  void recv_GetMineBaseByFields(MineBase& _return);
  void GetMineBaseByFields1(MineBase& _return, const std::string& field, const std::string& value);
  void send_GetMineBaseByFields1(const std::string& field, const std::string& value);
  void recv_GetMineBaseByFields1(MineBase& _return);
  void GetMineBaseByFields2(MineBase& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetMineBaseByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetMineBaseByFields2(MineBase& _return);
  void GetMineBaseListByFields(std::vector<MineBase> & _return, const std::map<std::string, std::string> & fields);
  void send_GetMineBaseListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetMineBaseListByFields(std::vector<MineBase> & _return);
  void GetMineBaseListByFields1(std::vector<MineBase> & _return, const std::string& field, const std::string& value);
  void send_GetMineBaseListByFields1(const std::string& field, const std::string& value);
  void recv_GetMineBaseListByFields1(std::vector<MineBase> & _return);
  void GetMineBaseListByFields2(std::vector<MineBase> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetMineBaseListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetMineBaseListByFields2(std::vector<MineBase> & _return);
  int32_t AddMineRegion(const MineRegion& mine_region);
  void send_AddMineRegion(const MineRegion& mine_region);
  int32_t recv_AddMineRegion();
  bool DeleteMineRegion(const int32_t id);
  void send_DeleteMineRegion(const int32_t id);
  bool recv_DeleteMineRegion();
  bool UpdateMineRegion(const MineRegion& mine_region);
  void send_UpdateMineRegion(const MineRegion& mine_region);
  bool recv_UpdateMineRegion();
  void GetMineRegionById(MineRegion& _return, const int32_t id);
  void send_GetMineRegionById(const int32_t id);
  void recv_GetMineRegionById(MineRegion& _return);
  void GetMineRegionByForeignKey(MineRegion& _return, const std::string& fkey, const int32_t id);
  void send_GetMineRegionByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetMineRegionByForeignKey(MineRegion& _return);
  void GetMineRegionList(std::vector<MineRegion> & _return);
  void send_GetMineRegionList();
  void recv_GetMineRegionList(std::vector<MineRegion> & _return);
  void GetMineRegionIds(std::vector<int32_t> & _return);
  void send_GetMineRegionIds();
  void recv_GetMineRegionIds(std::vector<int32_t> & _return);
  void GetMineRegionNames(std::vector<std::string> & _return);
  void send_GetMineRegionNames();
  void recv_GetMineRegionNames(std::vector<std::string> & _return);
  void AddMoreMineRegion(const std::vector<MineRegion> & objs);
  void send_AddMoreMineRegion(const std::vector<MineRegion> & objs);
  void recv_AddMoreMineRegion();
  void DeleteMoreMineRegion(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreMineRegion(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreMineRegion();
  void GetMineRegionByFields(MineRegion& _return, const std::map<std::string, std::string> & fields);
  void send_GetMineRegionByFields(const std::map<std::string, std::string> & fields);
  void recv_GetMineRegionByFields(MineRegion& _return);
  void GetMineRegionByFields1(MineRegion& _return, const std::string& field, const std::string& value);
  void send_GetMineRegionByFields1(const std::string& field, const std::string& value);
  void recv_GetMineRegionByFields1(MineRegion& _return);
  void GetMineRegionByFields2(MineRegion& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetMineRegionByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetMineRegionByFields2(MineRegion& _return);
  void GetMineRegionListByFields(std::vector<MineRegion> & _return, const std::map<std::string, std::string> & fields);
  void send_GetMineRegionListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetMineRegionListByFields(std::vector<MineRegion> & _return);
  void GetMineRegionListByFields1(std::vector<MineRegion> & _return, const std::string& field, const std::string& value);
  void send_GetMineRegionListByFields1(const std::string& field, const std::string& value);
  void recv_GetMineRegionListByFields1(std::vector<MineRegion> & _return);
  void GetMineRegionListByFields2(std::vector<MineRegion> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetMineRegionListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetMineRegionListByFields2(std::vector<MineRegion> & _return);
  int32_t AddPoreFlow(const PoreFlow& pore_flow);
  void send_AddPoreFlow(const PoreFlow& pore_flow);
  int32_t recv_AddPoreFlow();
  bool DeletePoreFlow(const int32_t id);
  void send_DeletePoreFlow(const int32_t id);
  bool recv_DeletePoreFlow();
  bool UpdatePoreFlow(const PoreFlow& pore_flow);
  void send_UpdatePoreFlow(const PoreFlow& pore_flow);
  bool recv_UpdatePoreFlow();
  void GetPoreFlowById(PoreFlow& _return, const int32_t id);
  void send_GetPoreFlowById(const int32_t id);
  void recv_GetPoreFlowById(PoreFlow& _return);
  void GetPoreFlowByForeignKey(PoreFlow& _return, const std::string& fkey, const int32_t id);
  void send_GetPoreFlowByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetPoreFlowByForeignKey(PoreFlow& _return);
  void GetPoreFlowList(std::vector<PoreFlow> & _return);
  void send_GetPoreFlowList();
  void recv_GetPoreFlowList(std::vector<PoreFlow> & _return);
  void GetPoreFlowIds(std::vector<int32_t> & _return);
  void send_GetPoreFlowIds();
  void recv_GetPoreFlowIds(std::vector<int32_t> & _return);
  void GetPoreFlowNames(std::vector<std::string> & _return);
  void send_GetPoreFlowNames();
  void recv_GetPoreFlowNames(std::vector<std::string> & _return);
  void AddMorePoreFlow(const std::vector<PoreFlow> & objs);
  void send_AddMorePoreFlow(const std::vector<PoreFlow> & objs);
  void recv_AddMorePoreFlow();
  void DeleteMorePoreFlow(const std::vector<int32_t> & obj_ids);
  void send_DeleteMorePoreFlow(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMorePoreFlow();
  void GetPoreFlowByFields(PoreFlow& _return, const std::map<std::string, std::string> & fields);
  void send_GetPoreFlowByFields(const std::map<std::string, std::string> & fields);
  void recv_GetPoreFlowByFields(PoreFlow& _return);
  void GetPoreFlowByFields1(PoreFlow& _return, const std::string& field, const std::string& value);
  void send_GetPoreFlowByFields1(const std::string& field, const std::string& value);
  void recv_GetPoreFlowByFields1(PoreFlow& _return);
  void GetPoreFlowByFields2(PoreFlow& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetPoreFlowByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetPoreFlowByFields2(PoreFlow& _return);
  void GetPoreFlowListByFields(std::vector<PoreFlow> & _return, const std::map<std::string, std::string> & fields);
  void send_GetPoreFlowListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetPoreFlowListByFields(std::vector<PoreFlow> & _return);
  void GetPoreFlowListByFields1(std::vector<PoreFlow> & _return, const std::string& field, const std::string& value);
  void send_GetPoreFlowListByFields1(const std::string& field, const std::string& value);
  void recv_GetPoreFlowListByFields1(std::vector<PoreFlow> & _return);
  void GetPoreFlowListByFields2(std::vector<PoreFlow> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetPoreFlowListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetPoreFlowListByFields2(std::vector<PoreFlow> & _return);
  int32_t AddPoreSize(const PoreSize& pore_size);
  void send_AddPoreSize(const PoreSize& pore_size);
  int32_t recv_AddPoreSize();
  bool DeletePoreSize(const int32_t id);
  void send_DeletePoreSize(const int32_t id);
  bool recv_DeletePoreSize();
  bool UpdatePoreSize(const PoreSize& pore_size);
  void send_UpdatePoreSize(const PoreSize& pore_size);
  bool recv_UpdatePoreSize();
  void GetPoreSizeById(PoreSize& _return, const int32_t id);
  void send_GetPoreSizeById(const int32_t id);
  void recv_GetPoreSizeById(PoreSize& _return);
  void GetPoreSizeByForeignKey(PoreSize& _return, const std::string& fkey, const int32_t id);
  void send_GetPoreSizeByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetPoreSizeByForeignKey(PoreSize& _return);
  void GetPoreSizeList(std::vector<PoreSize> & _return);
  void send_GetPoreSizeList();
  void recv_GetPoreSizeList(std::vector<PoreSize> & _return);
  void GetPoreSizeIds(std::vector<int32_t> & _return);
  void send_GetPoreSizeIds();
  void recv_GetPoreSizeIds(std::vector<int32_t> & _return);
  void GetPoreSizeNames(std::vector<std::string> & _return);
  void send_GetPoreSizeNames();
  void recv_GetPoreSizeNames(std::vector<std::string> & _return);
  void AddMorePoreSize(const std::vector<PoreSize> & objs);
  void send_AddMorePoreSize(const std::vector<PoreSize> & objs);
  void recv_AddMorePoreSize();
  void DeleteMorePoreSize(const std::vector<int32_t> & obj_ids);
  void send_DeleteMorePoreSize(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMorePoreSize();
  void GetPoreSizeByFields(PoreSize& _return, const std::map<std::string, std::string> & fields);
  void send_GetPoreSizeByFields(const std::map<std::string, std::string> & fields);
  void recv_GetPoreSizeByFields(PoreSize& _return);
  void GetPoreSizeByFields1(PoreSize& _return, const std::string& field, const std::string& value);
  void send_GetPoreSizeByFields1(const std::string& field, const std::string& value);
  void recv_GetPoreSizeByFields1(PoreSize& _return);
  void GetPoreSizeByFields2(PoreSize& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetPoreSizeByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetPoreSizeByFields2(PoreSize& _return);
  void GetPoreSizeListByFields(std::vector<PoreSize> & _return, const std::map<std::string, std::string> & fields);
  void send_GetPoreSizeListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetPoreSizeListByFields(std::vector<PoreSize> & _return);
  void GetPoreSizeListByFields1(std::vector<PoreSize> & _return, const std::string& field, const std::string& value);
  void send_GetPoreSizeListByFields1(const std::string& field, const std::string& value);
  void recv_GetPoreSizeListByFields1(std::vector<PoreSize> & _return);
  void GetPoreSizeListByFields2(std::vector<PoreSize> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetPoreSizeListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetPoreSizeListByFields2(std::vector<PoreSize> & _return);
  int32_t AddResAbundance(const ResAbundance& res_abundance);
  void send_AddResAbundance(const ResAbundance& res_abundance);
  int32_t recv_AddResAbundance();
  bool DeleteResAbundance(const int32_t id);
  void send_DeleteResAbundance(const int32_t id);
  bool recv_DeleteResAbundance();
  bool UpdateResAbundance(const ResAbundance& res_abundance);
  void send_UpdateResAbundance(const ResAbundance& res_abundance);
  bool recv_UpdateResAbundance();
  void GetResAbundanceById(ResAbundance& _return, const int32_t id);
  void send_GetResAbundanceById(const int32_t id);
  void recv_GetResAbundanceById(ResAbundance& _return);
  void GetResAbundanceByForeignKey(ResAbundance& _return, const std::string& fkey, const int32_t id);
  void send_GetResAbundanceByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetResAbundanceByForeignKey(ResAbundance& _return);
  void GetResAbundanceList(std::vector<ResAbundance> & _return);
  void send_GetResAbundanceList();
  void recv_GetResAbundanceList(std::vector<ResAbundance> & _return);
  void GetResAbundanceIds(std::vector<int32_t> & _return);
  void send_GetResAbundanceIds();
  void recv_GetResAbundanceIds(std::vector<int32_t> & _return);
  void GetResAbundanceNames(std::vector<std::string> & _return);
  void send_GetResAbundanceNames();
  void recv_GetResAbundanceNames(std::vector<std::string> & _return);
  void AddMoreResAbundance(const std::vector<ResAbundance> & objs);
  void send_AddMoreResAbundance(const std::vector<ResAbundance> & objs);
  void recv_AddMoreResAbundance();
  void DeleteMoreResAbundance(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreResAbundance(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreResAbundance();
  void GetResAbundanceByFields(ResAbundance& _return, const std::map<std::string, std::string> & fields);
  void send_GetResAbundanceByFields(const std::map<std::string, std::string> & fields);
  void recv_GetResAbundanceByFields(ResAbundance& _return);
  void GetResAbundanceByFields1(ResAbundance& _return, const std::string& field, const std::string& value);
  void send_GetResAbundanceByFields1(const std::string& field, const std::string& value);
  void recv_GetResAbundanceByFields1(ResAbundance& _return);
  void GetResAbundanceByFields2(ResAbundance& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetResAbundanceByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetResAbundanceByFields2(ResAbundance& _return);
  void GetResAbundanceListByFields(std::vector<ResAbundance> & _return, const std::map<std::string, std::string> & fields);
  void send_GetResAbundanceListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetResAbundanceListByFields(std::vector<ResAbundance> & _return);
  void GetResAbundanceListByFields1(std::vector<ResAbundance> & _return, const std::string& field, const std::string& value);
  void send_GetResAbundanceListByFields1(const std::string& field, const std::string& value);
  void recv_GetResAbundanceListByFields1(std::vector<ResAbundance> & _return);
  void GetResAbundanceListByFields2(std::vector<ResAbundance> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetResAbundanceListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetResAbundanceListByFields2(std::vector<ResAbundance> & _return);
  int32_t AddRock(const Rock& rock);
  void send_AddRock(const Rock& rock);
  int32_t recv_AddRock();
  bool DeleteRock(const int32_t id);
  void send_DeleteRock(const int32_t id);
  bool recv_DeleteRock();
  bool UpdateRock(const Rock& rock);
  void send_UpdateRock(const Rock& rock);
  bool recv_UpdateRock();
  void GetRockById(Rock& _return, const int32_t id);
  void send_GetRockById(const int32_t id);
  void recv_GetRockById(Rock& _return);
  void GetRockByForeignKey(Rock& _return, const std::string& fkey, const int32_t id);
  void send_GetRockByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetRockByForeignKey(Rock& _return);
  void GetRockList(std::vector<Rock> & _return);
  void send_GetRockList();
  void recv_GetRockList(std::vector<Rock> & _return);
  void GetRockIds(std::vector<int32_t> & _return);
  void send_GetRockIds();
  void recv_GetRockIds(std::vector<int32_t> & _return);
  void GetRockNames(std::vector<std::string> & _return);
  void send_GetRockNames();
  void recv_GetRockNames(std::vector<std::string> & _return);
  void AddMoreRock(const std::vector<Rock> & objs);
  void send_AddMoreRock(const std::vector<Rock> & objs);
  void recv_AddMoreRock();
  void DeleteMoreRock(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreRock(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreRock();
  void GetRockByFields(Rock& _return, const std::map<std::string, std::string> & fields);
  void send_GetRockByFields(const std::map<std::string, std::string> & fields);
  void recv_GetRockByFields(Rock& _return);
  void GetRockByFields1(Rock& _return, const std::string& field, const std::string& value);
  void send_GetRockByFields1(const std::string& field, const std::string& value);
  void recv_GetRockByFields1(Rock& _return);
  void GetRockByFields2(Rock& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetRockByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetRockByFields2(Rock& _return);
  void GetRockListByFields(std::vector<Rock> & _return, const std::map<std::string, std::string> & fields);
  void send_GetRockListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetRockListByFields(std::vector<Rock> & _return);
  void GetRockListByFields1(std::vector<Rock> & _return, const std::string& field, const std::string& value);
  void send_GetRockListByFields1(const std::string& field, const std::string& value);
  void recv_GetRockListByFields1(std::vector<Rock> & _return);
  void GetRockListByFields2(std::vector<Rock> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetRockListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetRockListByFields2(std::vector<Rock> & _return);
  int32_t AddSysInfo(const SysInfo& sys_info);
  void send_AddSysInfo(const SysInfo& sys_info);
  int32_t recv_AddSysInfo();
  bool DeleteSysInfo(const int32_t id);
  void send_DeleteSysInfo(const int32_t id);
  bool recv_DeleteSysInfo();
  bool UpdateSysInfo(const SysInfo& sys_info);
  void send_UpdateSysInfo(const SysInfo& sys_info);
  bool recv_UpdateSysInfo();
  void GetSysInfoById(SysInfo& _return, const int32_t id);
  void send_GetSysInfoById(const int32_t id);
  void recv_GetSysInfoById(SysInfo& _return);
  void GetSysInfoByForeignKey(SysInfo& _return, const std::string& fkey, const int32_t id);
  void send_GetSysInfoByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetSysInfoByForeignKey(SysInfo& _return);
  void GetSysInfoList(std::vector<SysInfo> & _return);
  void send_GetSysInfoList();
  void recv_GetSysInfoList(std::vector<SysInfo> & _return);
  void GetSysInfoIds(std::vector<int32_t> & _return);
  void send_GetSysInfoIds();
  void recv_GetSysInfoIds(std::vector<int32_t> & _return);
  void GetSysInfoNames(std::vector<std::string> & _return);
  void send_GetSysInfoNames();
  void recv_GetSysInfoNames(std::vector<std::string> & _return);
  void AddMoreSysInfo(const std::vector<SysInfo> & objs);
  void send_AddMoreSysInfo(const std::vector<SysInfo> & objs);
  void recv_AddMoreSysInfo();
  void DeleteMoreSysInfo(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreSysInfo(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreSysInfo();
  void GetSysInfoByFields(SysInfo& _return, const std::map<std::string, std::string> & fields);
  void send_GetSysInfoByFields(const std::map<std::string, std::string> & fields);
  void recv_GetSysInfoByFields(SysInfo& _return);
  void GetSysInfoByFields1(SysInfo& _return, const std::string& field, const std::string& value);
  void send_GetSysInfoByFields1(const std::string& field, const std::string& value);
  void recv_GetSysInfoByFields1(SysInfo& _return);
  void GetSysInfoByFields2(SysInfo& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetSysInfoByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetSysInfoByFields2(SysInfo& _return);
  void GetSysInfoListByFields(std::vector<SysInfo> & _return, const std::map<std::string, std::string> & fields);
  void send_GetSysInfoListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetSysInfoListByFields(std::vector<SysInfo> & _return);
  void GetSysInfoListByFields1(std::vector<SysInfo> & _return, const std::string& field, const std::string& value);
  void send_GetSysInfoListByFields1(const std::string& field, const std::string& value);
  void recv_GetSysInfoListByFields1(std::vector<SysInfo> & _return);
  void GetSysInfoListByFields2(std::vector<SysInfo> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetSysInfoListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetSysInfoListByFields2(std::vector<SysInfo> & _return);
  int32_t AddTechMode(const TechMode& tech_mode);
  void send_AddTechMode(const TechMode& tech_mode);
  int32_t recv_AddTechMode();
  bool DeleteTechMode(const int32_t id);
  void send_DeleteTechMode(const int32_t id);
  bool recv_DeleteTechMode();
  bool UpdateTechMode(const TechMode& tech_mode);
  void send_UpdateTechMode(const TechMode& tech_mode);
  bool recv_UpdateTechMode();
  void GetTechModeById(TechMode& _return, const int32_t id);
  void send_GetTechModeById(const int32_t id);
  void recv_GetTechModeById(TechMode& _return);
  void GetTechModeByForeignKey(TechMode& _return, const std::string& fkey, const int32_t id);
  void send_GetTechModeByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetTechModeByForeignKey(TechMode& _return);
  void GetTechModeList(std::vector<TechMode> & _return);
  void send_GetTechModeList();
  void recv_GetTechModeList(std::vector<TechMode> & _return);
  void GetTechModeIds(std::vector<int32_t> & _return);
  void send_GetTechModeIds();
  void recv_GetTechModeIds(std::vector<int32_t> & _return);
  void GetTechModeNames(std::vector<std::string> & _return);
  void send_GetTechModeNames();
  void recv_GetTechModeNames(std::vector<std::string> & _return);
  void AddMoreTechMode(const std::vector<TechMode> & objs);
  void send_AddMoreTechMode(const std::vector<TechMode> & objs);
  void recv_AddMoreTechMode();
  void DeleteMoreTechMode(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreTechMode(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreTechMode();
  void GetTechModeByFields(TechMode& _return, const std::map<std::string, std::string> & fields);
  void send_GetTechModeByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTechModeByFields(TechMode& _return);
  void GetTechModeByFields1(TechMode& _return, const std::string& field, const std::string& value);
  void send_GetTechModeByFields1(const std::string& field, const std::string& value);
  void recv_GetTechModeByFields1(TechMode& _return);
  void GetTechModeByFields2(TechMode& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetTechModeByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTechModeByFields2(TechMode& _return);
  void GetTechModeListByFields(std::vector<TechMode> & _return, const std::map<std::string, std::string> & fields);
  void send_GetTechModeListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTechModeListByFields(std::vector<TechMode> & _return);
  void GetTechModeListByFields1(std::vector<TechMode> & _return, const std::string& field, const std::string& value);
  void send_GetTechModeListByFields1(const std::string& field, const std::string& value);
  void recv_GetTechModeListByFields1(std::vector<TechMode> & _return);
  void GetTechModeListByFields2(std::vector<TechMode> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetTechModeListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTechModeListByFields2(std::vector<TechMode> & _return);
  int32_t AddTechnology(const Technology& technology);
  void send_AddTechnology(const Technology& technology);
  int32_t recv_AddTechnology();
  bool DeleteTechnology(const int32_t id);
  void send_DeleteTechnology(const int32_t id);
  bool recv_DeleteTechnology();
  bool UpdateTechnology(const Technology& technology);
  void send_UpdateTechnology(const Technology& technology);
  bool recv_UpdateTechnology();
  void GetTechnologyById(Technology& _return, const int32_t id);
  void send_GetTechnologyById(const int32_t id);
  void recv_GetTechnologyById(Technology& _return);
  void GetTechnologyByForeignKey(Technology& _return, const std::string& fkey, const int32_t id);
  void send_GetTechnologyByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetTechnologyByForeignKey(Technology& _return);
  void GetTechnologyList(std::vector<Technology> & _return);
  void send_GetTechnologyList();
  void recv_GetTechnologyList(std::vector<Technology> & _return);
  void GetTechnologyIds(std::vector<int32_t> & _return);
  void send_GetTechnologyIds();
  void recv_GetTechnologyIds(std::vector<int32_t> & _return);
  void GetTechnologyNames(std::vector<std::string> & _return);
  void send_GetTechnologyNames();
  void recv_GetTechnologyNames(std::vector<std::string> & _return);
  void AddMoreTechnology(const std::vector<Technology> & objs);
  void send_AddMoreTechnology(const std::vector<Technology> & objs);
  void recv_AddMoreTechnology();
  void DeleteMoreTechnology(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreTechnology(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreTechnology();
  void GetTechnologyByFields(Technology& _return, const std::map<std::string, std::string> & fields);
  void send_GetTechnologyByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTechnologyByFields(Technology& _return);
  void GetTechnologyByFields1(Technology& _return, const std::string& field, const std::string& value);
  void send_GetTechnologyByFields1(const std::string& field, const std::string& value);
  void recv_GetTechnologyByFields1(Technology& _return);
  void GetTechnologyByFields2(Technology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetTechnologyByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTechnologyByFields2(Technology& _return);
  void GetTechnologyListByFields(std::vector<Technology> & _return, const std::map<std::string, std::string> & fields);
  void send_GetTechnologyListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTechnologyListByFields(std::vector<Technology> & _return);
  void GetTechnologyListByFields1(std::vector<Technology> & _return, const std::string& field, const std::string& value);
  void send_GetTechnologyListByFields1(const std::string& field, const std::string& value);
  void recv_GetTechnologyListByFields1(std::vector<Technology> & _return);
  void GetTechnologyListByFields2(std::vector<Technology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetTechnologyListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTechnologyListByFields2(std::vector<Technology> & _return);
  int32_t AddTopoGeo(const TopoGeo& topo_geo);
  void send_AddTopoGeo(const TopoGeo& topo_geo);
  int32_t recv_AddTopoGeo();
  bool DeleteTopoGeo(const int32_t id);
  void send_DeleteTopoGeo(const int32_t id);
  bool recv_DeleteTopoGeo();
  bool UpdateTopoGeo(const TopoGeo& topo_geo);
  void send_UpdateTopoGeo(const TopoGeo& topo_geo);
  bool recv_UpdateTopoGeo();
  void GetTopoGeoById(TopoGeo& _return, const int32_t id);
  void send_GetTopoGeoById(const int32_t id);
  void recv_GetTopoGeoById(TopoGeo& _return);
  void GetTopoGeoByForeignKey(TopoGeo& _return, const std::string& fkey, const int32_t id);
  void send_GetTopoGeoByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetTopoGeoByForeignKey(TopoGeo& _return);
  void GetTopoGeoList(std::vector<TopoGeo> & _return);
  void send_GetTopoGeoList();
  void recv_GetTopoGeoList(std::vector<TopoGeo> & _return);
  void GetTopoGeoIds(std::vector<int32_t> & _return);
  void send_GetTopoGeoIds();
  void recv_GetTopoGeoIds(std::vector<int32_t> & _return);
  void GetTopoGeoNames(std::vector<std::string> & _return);
  void send_GetTopoGeoNames();
  void recv_GetTopoGeoNames(std::vector<std::string> & _return);
  void AddMoreTopoGeo(const std::vector<TopoGeo> & objs);
  void send_AddMoreTopoGeo(const std::vector<TopoGeo> & objs);
  void recv_AddMoreTopoGeo();
  void DeleteMoreTopoGeo(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreTopoGeo(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreTopoGeo();
  void GetTopoGeoByFields(TopoGeo& _return, const std::map<std::string, std::string> & fields);
  void send_GetTopoGeoByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTopoGeoByFields(TopoGeo& _return);
  void GetTopoGeoByFields1(TopoGeo& _return, const std::string& field, const std::string& value);
  void send_GetTopoGeoByFields1(const std::string& field, const std::string& value);
  void recv_GetTopoGeoByFields1(TopoGeo& _return);
  void GetTopoGeoByFields2(TopoGeo& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetTopoGeoByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTopoGeoByFields2(TopoGeo& _return);
  void GetTopoGeoListByFields(std::vector<TopoGeo> & _return, const std::map<std::string, std::string> & fields);
  void send_GetTopoGeoListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTopoGeoListByFields(std::vector<TopoGeo> & _return);
  void GetTopoGeoListByFields1(std::vector<TopoGeo> & _return, const std::string& field, const std::string& value);
  void send_GetTopoGeoListByFields1(const std::string& field, const std::string& value);
  void recv_GetTopoGeoListByFields1(std::vector<TopoGeo> & _return);
  void GetTopoGeoListByFields2(std::vector<TopoGeo> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetTopoGeoListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTopoGeoListByFields2(std::vector<TopoGeo> & _return);
  int32_t AddTunnel(const Tunnel& tunnel);
  void send_AddTunnel(const Tunnel& tunnel);
  int32_t recv_AddTunnel();
  bool DeleteTunnel(const int32_t id);
  void send_DeleteTunnel(const int32_t id);
  bool recv_DeleteTunnel();
  bool UpdateTunnel(const Tunnel& tunnel);
  void send_UpdateTunnel(const Tunnel& tunnel);
  bool recv_UpdateTunnel();
  void GetTunnelById(Tunnel& _return, const int32_t id);
  void send_GetTunnelById(const int32_t id);
  void recv_GetTunnelById(Tunnel& _return);
  void GetTunnelByForeignKey(Tunnel& _return, const std::string& fkey, const int32_t id);
  void send_GetTunnelByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetTunnelByForeignKey(Tunnel& _return);
  void GetTunnelList(std::vector<Tunnel> & _return);
  void send_GetTunnelList();
  void recv_GetTunnelList(std::vector<Tunnel> & _return);
  void GetTunnelIds(std::vector<int32_t> & _return);
  void send_GetTunnelIds();
  void recv_GetTunnelIds(std::vector<int32_t> & _return);
  void GetTunnelNames(std::vector<std::string> & _return);
  void send_GetTunnelNames();
  void recv_GetTunnelNames(std::vector<std::string> & _return);
  void AddMoreTunnel(const std::vector<Tunnel> & objs);
  void send_AddMoreTunnel(const std::vector<Tunnel> & objs);
  void recv_AddMoreTunnel();
  void DeleteMoreTunnel(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreTunnel(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreTunnel();
  void GetTunnelByFields(Tunnel& _return, const std::map<std::string, std::string> & fields);
  void send_GetTunnelByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTunnelByFields(Tunnel& _return);
  void GetTunnelByFields1(Tunnel& _return, const std::string& field, const std::string& value);
  void send_GetTunnelByFields1(const std::string& field, const std::string& value);
  void recv_GetTunnelByFields1(Tunnel& _return);
  void GetTunnelByFields2(Tunnel& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetTunnelByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTunnelByFields2(Tunnel& _return);
  void GetTunnelListByFields(std::vector<Tunnel> & _return, const std::map<std::string, std::string> & fields);
  void send_GetTunnelListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTunnelListByFields(std::vector<Tunnel> & _return);
  void GetTunnelListByFields1(std::vector<Tunnel> & _return, const std::string& field, const std::string& value);
  void send_GetTunnelListByFields1(const std::string& field, const std::string& value);
  void recv_GetTunnelListByFields1(std::vector<Tunnel> & _return);
  void GetTunnelListByFields2(std::vector<Tunnel> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetTunnelListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTunnelListByFields2(std::vector<Tunnel> & _return);
  int32_t AddWorkArea(const WorkArea& work_area);
  void send_AddWorkArea(const WorkArea& work_area);
  int32_t recv_AddWorkArea();
  bool DeleteWorkArea(const int32_t id);
  void send_DeleteWorkArea(const int32_t id);
  bool recv_DeleteWorkArea();
  bool UpdateWorkArea(const WorkArea& work_area);
  void send_UpdateWorkArea(const WorkArea& work_area);
  bool recv_UpdateWorkArea();
  void GetWorkAreaById(WorkArea& _return, const int32_t id);
  void send_GetWorkAreaById(const int32_t id);
  void recv_GetWorkAreaById(WorkArea& _return);
  void GetWorkAreaByForeignKey(WorkArea& _return, const std::string& fkey, const int32_t id);
  void send_GetWorkAreaByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetWorkAreaByForeignKey(WorkArea& _return);
  void GetWorkAreaList(std::vector<WorkArea> & _return);
  void send_GetWorkAreaList();
  void recv_GetWorkAreaList(std::vector<WorkArea> & _return);
  void GetWorkAreaIds(std::vector<int32_t> & _return);
  void send_GetWorkAreaIds();
  void recv_GetWorkAreaIds(std::vector<int32_t> & _return);
  void GetWorkAreaNames(std::vector<std::string> & _return);
  void send_GetWorkAreaNames();
  void recv_GetWorkAreaNames(std::vector<std::string> & _return);
  void AddMoreWorkArea(const std::vector<WorkArea> & objs);
  void send_AddMoreWorkArea(const std::vector<WorkArea> & objs);
  void recv_AddMoreWorkArea();
  void DeleteMoreWorkArea(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreWorkArea(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreWorkArea();
  void GetWorkAreaByFields(WorkArea& _return, const std::map<std::string, std::string> & fields);
  void send_GetWorkAreaByFields(const std::map<std::string, std::string> & fields);
  void recv_GetWorkAreaByFields(WorkArea& _return);
  void GetWorkAreaByFields1(WorkArea& _return, const std::string& field, const std::string& value);
  void send_GetWorkAreaByFields1(const std::string& field, const std::string& value);
  void recv_GetWorkAreaByFields1(WorkArea& _return);
  void GetWorkAreaByFields2(WorkArea& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetWorkAreaByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetWorkAreaByFields2(WorkArea& _return);
  void GetWorkAreaListByFields(std::vector<WorkArea> & _return, const std::map<std::string, std::string> & fields);
  void send_GetWorkAreaListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetWorkAreaListByFields(std::vector<WorkArea> & _return);
  void GetWorkAreaListByFields1(std::vector<WorkArea> & _return, const std::string& field, const std::string& value);
  void send_GetWorkAreaListByFields1(const std::string& field, const std::string& value);
  void recv_GetWorkAreaListByFields1(std::vector<WorkArea> & _return);
  void GetWorkAreaListByFields2(std::vector<WorkArea> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetWorkAreaListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetWorkAreaListByFields2(std::vector<WorkArea> & _return);
  int32_t AddWorkSurf(const WorkSurf& work_surf);
  void send_AddWorkSurf(const WorkSurf& work_surf);
  int32_t recv_AddWorkSurf();
  bool DeleteWorkSurf(const int32_t id);
  void send_DeleteWorkSurf(const int32_t id);
  bool recv_DeleteWorkSurf();
  bool UpdateWorkSurf(const WorkSurf& work_surf);
  void send_UpdateWorkSurf(const WorkSurf& work_surf);
  bool recv_UpdateWorkSurf();
  void GetWorkSurfById(WorkSurf& _return, const int32_t id);
  void send_GetWorkSurfById(const int32_t id);
  void recv_GetWorkSurfById(WorkSurf& _return);
  void GetWorkSurfByForeignKey(WorkSurf& _return, const std::string& fkey, const int32_t id);
  void send_GetWorkSurfByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetWorkSurfByForeignKey(WorkSurf& _return);
  void GetWorkSurfList(std::vector<WorkSurf> & _return);
  void send_GetWorkSurfList();
  void recv_GetWorkSurfList(std::vector<WorkSurf> & _return);
  void GetWorkSurfIds(std::vector<int32_t> & _return);
  void send_GetWorkSurfIds();
  void recv_GetWorkSurfIds(std::vector<int32_t> & _return);
  void GetWorkSurfNames(std::vector<std::string> & _return);
  void send_GetWorkSurfNames();
  void recv_GetWorkSurfNames(std::vector<std::string> & _return);
  void AddMoreWorkSurf(const std::vector<WorkSurf> & objs);
  void send_AddMoreWorkSurf(const std::vector<WorkSurf> & objs);
  void recv_AddMoreWorkSurf();
  void DeleteMoreWorkSurf(const std::vector<int32_t> & obj_ids);
  void send_DeleteMoreWorkSurf(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreWorkSurf();
  void GetWorkSurfByFields(WorkSurf& _return, const std::map<std::string, std::string> & fields);
  void send_GetWorkSurfByFields(const std::map<std::string, std::string> & fields);
  void recv_GetWorkSurfByFields(WorkSurf& _return);
  void GetWorkSurfByFields1(WorkSurf& _return, const std::string& field, const std::string& value);
  void send_GetWorkSurfByFields1(const std::string& field, const std::string& value);
  void recv_GetWorkSurfByFields1(WorkSurf& _return);
  void GetWorkSurfByFields2(WorkSurf& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetWorkSurfByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetWorkSurfByFields2(WorkSurf& _return);
  void GetWorkSurfListByFields(std::vector<WorkSurf> & _return, const std::map<std::string, std::string> & fields);
  void send_GetWorkSurfListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetWorkSurfListByFields(std::vector<WorkSurf> & _return);
  void GetWorkSurfListByFields1(std::vector<WorkSurf> & _return, const std::string& field, const std::string& value);
  void send_GetWorkSurfListByFields1(const std::string& field, const std::string& value);
  void recv_GetWorkSurfListByFields1(std::vector<WorkSurf> & _return);
  void GetWorkSurfListByFields2(std::vector<WorkSurf> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void send_GetWorkSurfListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetWorkSurfListByFields2(std::vector<WorkSurf> & _return);
  void InitSampleRegion();
  void send_InitSampleRegion();
  void recv_InitSampleRegion();
  int32_t GetOnlineAccountId();
  void send_GetOnlineAccountId();
  int32_t recv_GetOnlineAccountId();
  void GetOnlineMine(Mine& _return);
  void send_GetOnlineMine();
  void recv_GetOnlineMine(Mine& _return);
  int32_t VerifyMineAccount(const std::string& username, const std::string& pwd);
  void send_VerifyMineAccount(const std::string& username, const std::string& pwd);
  int32_t recv_VerifyMineAccount();
  void GetMineRegionsOfBase(std::vector<std::string> & _return, const std::string& baseName);
  void send_GetMineRegionsOfBase(const std::string& baseName);
  void recv_GetMineRegionsOfBase(std::vector<std::string> & _return);
  void GetBaseByRegion(std::string& _return, const std::string& regionName);
  void send_GetBaseByRegion(const std::string& regionName);
  void recv_GetBaseByRegion(std::string& _return);
  void GetSampleMineOfRegion(Mine& _return, const std::string& regionName);
  void send_GetSampleMineOfRegion(const std::string& regionName);
  void recv_GetSampleMineOfRegion(Mine& _return);
  void GetSampleCoalOfRegion(Coal& _return, const std::string& regionName);
  void send_GetSampleCoalOfRegion(const std::string& regionName);
  void recv_GetSampleCoalOfRegion(Coal& _return);
  void GetCoalNamesOfMine(std::vector<std::string> & _return, const int32_t mine_id);
  void send_GetCoalNamesOfMine(const int32_t mine_id);
  void recv_GetCoalNamesOfMine(std::vector<std::string> & _return);
  void GetCoalIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id);
  void send_GetCoalIdsOfMine(const int32_t mine_id);
  void recv_GetCoalIdsOfMine(std::vector<int32_t> & _return);
  void GetWorkAreasOfMine(std::vector<WorkArea> & _return, const int32_t mine_id);
  void send_GetWorkAreasOfMine(const int32_t mine_id);
  void recv_GetWorkAreasOfMine(std::vector<WorkArea> & _return);
  void GetWorkSurfsOfMine(std::vector<WorkSurf> & _return, const int32_t mine_id);
  void send_GetWorkSurfsOfMine(const int32_t mine_id);
  void recv_GetWorkSurfsOfMine(std::vector<WorkSurf> & _return);
  void GetDrillingSurfsOfMine(std::vector<DrillingSurf> & _return, const int32_t mine_id);
  void send_GetDrillingSurfsOfMine(const int32_t mine_id);
  void recv_GetDrillingSurfsOfMine(std::vector<DrillingSurf> & _return);
  void GetWorkAreaIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id);
  void send_GetWorkAreaIdsOfMine(const int32_t mine_id);
  void recv_GetWorkAreaIdsOfMine(std::vector<int32_t> & _return);
  void GetWorkSurfIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id);
  void send_GetWorkSurfIdsOfMine(const int32_t mine_id);
  void recv_GetWorkSurfIdsOfMine(std::vector<int32_t> & _return);
  void GetDrillingSurfIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id);
  void send_GetDrillingSurfIdsOfMine(const int32_t mine_id);
  void recv_GetDrillingSurfIdsOfMine(std::vector<int32_t> & _return);
  int32_t DifficultEval(const Coal& coal);
  void send_DifficultEval(const Coal& coal);
  int32_t recv_DifficultEval();
  void DifficultEvalString(std::string& _return, const Coal& coal);
  void send_DifficultEvalString(const Coal& coal);
  void recv_DifficultEvalString(std::string& _return);
  double MineGasReservesW1(const int32_t mine_id);
  void send_MineGasReservesW1(const int32_t mine_id);
  double recv_MineGasReservesW1();
  double MineGasReservesW2(const int32_t mine_id);
  void send_MineGasReservesW2(const int32_t mine_id);
  double recv_MineGasReservesW2();
  double WorkAreaGasFlow(const WorkArea& work_area, const double K1);
  void send_WorkAreaGasFlow(const WorkArea& work_area, const double K1);
  double recv_WorkAreaGasFlow();
  double MineGasFlow(const Mine& mine);
  void send_MineGasFlow(const Mine& mine);
  double recv_MineGasFlow();
  double WorkSurfGasFlow1(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf);
  void send_WorkSurfGasFlow1(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf);
  double recv_WorkSurfGasFlow1();
  double WorkSurfGasFlow2(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf);
  void send_WorkSurfGasFlow2(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf);
  double recv_WorkSurfGasFlow2();
  void DrillingSurfGasFlow(DrillingSurfGasFlowResult& _return, const Coal& coal, const DrillingSurf& drilling_surf, const Tunnel& tunnel);
  void send_DrillingSurfGasFlow(const Coal& coal, const DrillingSurf& drilling_surf, const Tunnel& tunnel);
  void recv_DrillingSurfGasFlow(DrillingSurfGasFlowResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CbmServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CbmServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CbmServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AddAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddAdjLayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteAdjLayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateAdjLayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAdjLayerById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAdjLayerByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAdjLayerList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAdjLayerIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAdjLayerNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreAdjLayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreAdjLayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAdjLayerByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAdjLayerByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAdjLayerByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAdjLayerListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAdjLayerListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAdjLayerListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddCoal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteCoal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateCoal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreCoal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreCoal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddComplexity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteComplexity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateComplexity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetComplexityById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetComplexityByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetComplexityList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetComplexityIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetComplexityNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreComplexity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreComplexity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetComplexityByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetComplexityByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetComplexityByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetComplexityListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetComplexityListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetComplexityListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddDesignDrillingSurfTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteDesignDrillingSurfTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateDesignDrillingSurfTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignDrillingSurfTechnologyById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignDrillingSurfTechnologyByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignDrillingSurfTechnologyList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignDrillingSurfTechnologyIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignDrillingSurfTechnologyNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreDesignDrillingSurfTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreDesignDrillingSurfTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignDrillingSurfTechnologyByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignDrillingSurfTechnologyByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignDrillingSurfTechnologyByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignDrillingSurfTechnologyListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignDrillingSurfTechnologyListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignDrillingSurfTechnologyListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddDesignGoafTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteDesignGoafTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateDesignGoafTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignGoafTechnologyById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignGoafTechnologyByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignGoafTechnologyList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignGoafTechnologyIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignGoafTechnologyNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreDesignGoafTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreDesignGoafTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignGoafTechnologyByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignGoafTechnologyByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignGoafTechnologyByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignGoafTechnologyListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignGoafTechnologyListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignGoafTechnologyListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddDesignPore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteDesignPore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateDesignPore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignPoreById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignPoreByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignPoreList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignPoreIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignPoreNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreDesignPore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreDesignPore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignPoreByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignPoreByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignPoreByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignPoreListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignPoreListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignPoreListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddDesignSite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteDesignSite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateDesignSite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignSiteById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignSiteByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignSiteList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignSiteIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignSiteNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreDesignSite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreDesignSite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignSiteByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignSiteByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignSiteByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignSiteListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignSiteListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignSiteListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddDesignTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteDesignTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateDesignTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignTechnologyById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignTechnologyByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignTechnologyList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignTechnologyIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignTechnologyNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreDesignTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreDesignTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignTechnologyByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignTechnologyByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignTechnologyByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignTechnologyListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignTechnologyListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignTechnologyListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddDesignWorkSurfTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteDesignWorkSurfTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateDesignWorkSurfTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignWorkSurfTechnologyById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignWorkSurfTechnologyByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignWorkSurfTechnologyList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignWorkSurfTechnologyIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignWorkSurfTechnologyNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreDesignWorkSurfTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreDesignWorkSurfTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignWorkSurfTechnologyByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignWorkSurfTechnologyByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignWorkSurfTechnologyByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignWorkSurfTechnologyListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignWorkSurfTechnologyListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDesignWorkSurfTechnologyListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddDrillingRadiusParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteDrillingRadiusParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateDrillingRadiusParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingRadiusParamById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingRadiusParamByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingRadiusParamList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingRadiusParamIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingRadiusParamNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreDrillingRadiusParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreDrillingRadiusParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingRadiusParamByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingRadiusParamByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingRadiusParamByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingRadiusParamListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingRadiusParamListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingRadiusParamListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddDrillingSurf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteDrillingSurf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateDrillingSurf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreDrillingSurf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreDrillingSurf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddEvalUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteEvalUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateEvalUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEvalUnitById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEvalUnitByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEvalUnitList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEvalUnitIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEvalUnitNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreEvalUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreEvalUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEvalUnitByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEvalUnitByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEvalUnitByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEvalUnitListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEvalUnitListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEvalUnitListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddHighDrillingPore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteHighDrillingPore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateHighDrillingPore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreHighDrillingPore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreHighDrillingPore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddHighDrillingPoreParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteHighDrillingPoreParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateHighDrillingPoreParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreParamById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreParamByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreParamList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreParamIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreParamNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreHighDrillingPoreParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreHighDrillingPoreParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreParamByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreParamByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreParamByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreParamListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreParamListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingPoreParamListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddHighDrillingSiteParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteHighDrillingSiteParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateHighDrillingSiteParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingSiteParamById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingSiteParamByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingSiteParamList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingSiteParamIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingSiteParamNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreHighDrillingSiteParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreHighDrillingSiteParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingSiteParamByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingSiteParamByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingSiteParamByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingSiteParamListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingSiteParamListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingSiteParamListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddHighDrillingTunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteHighDrillingTunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateHighDrillingTunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingTunnelById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingTunnelByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingTunnelList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingTunnelIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingTunnelNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreHighDrillingTunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreHighDrillingTunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingTunnelByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingTunnelByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingTunnelByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingTunnelListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingTunnelListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHighDrillingTunnelListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddHydrGeo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteHydrGeo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateHydrGeo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHydrGeoById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHydrGeoByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHydrGeoList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHydrGeoIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHydrGeoNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreHydrGeo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreHydrGeo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHydrGeoByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHydrGeoByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHydrGeoByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHydrGeoListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHydrGeoListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHydrGeoListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMineBase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMineBase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateMineBase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineBaseById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineBaseByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineBaseList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineBaseIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineBaseNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreMineBase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreMineBase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineBaseByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineBaseByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineBaseByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineBaseListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineBaseListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineBaseListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMineRegion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMineRegion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateMineRegion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineRegionById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineRegionByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineRegionList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineRegionIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineRegionNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreMineRegion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreMineRegion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineRegionByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineRegionByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineRegionByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineRegionListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineRegionListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineRegionListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddPoreFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeletePoreFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdatePoreFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreFlowById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreFlowByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreFlowList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreFlowIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreFlowNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMorePoreFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMorePoreFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreFlowByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreFlowByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreFlowByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreFlowListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreFlowListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreFlowListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddPoreSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeletePoreSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdatePoreSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreSizeById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreSizeByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreSizeList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreSizeIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreSizeNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMorePoreSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMorePoreSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreSizeByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreSizeByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreSizeByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreSizeListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreSizeListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPoreSizeListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddResAbundance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteResAbundance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateResAbundance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResAbundanceById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResAbundanceByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResAbundanceList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResAbundanceIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResAbundanceNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreResAbundance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreResAbundance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResAbundanceByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResAbundanceByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResAbundanceByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResAbundanceListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResAbundanceListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResAbundanceListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddRock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteRock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateRock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRockById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRockByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRockList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRockIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRockNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreRock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreRock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRockByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRockByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRockByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRockListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRockListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRockListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddSysInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteSysInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateSysInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSysInfoById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSysInfoByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSysInfoList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSysInfoIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSysInfoNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreSysInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreSysInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSysInfoByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSysInfoByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSysInfoByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSysInfoListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSysInfoListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSysInfoListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddTechMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteTechMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateTechMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechModeById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechModeByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechModeList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechModeIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechModeNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreTechMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreTechMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechModeByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechModeByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechModeByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechModeListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechModeListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechModeListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechnologyById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechnologyByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechnologyList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechnologyIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechnologyNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreTechnology(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechnologyByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechnologyByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechnologyByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechnologyListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechnologyListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTechnologyListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddTopoGeo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteTopoGeo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateTopoGeo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTopoGeoById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTopoGeoByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTopoGeoList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTopoGeoIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTopoGeoNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreTopoGeo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreTopoGeo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTopoGeoByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTopoGeoByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTopoGeoByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTopoGeoListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTopoGeoListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTopoGeoListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddTunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteTunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateTunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTunnelById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTunnelByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTunnelList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTunnelIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTunnelNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreTunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreTunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTunnelByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTunnelByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTunnelByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTunnelListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTunnelListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTunnelListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddWorkArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteWorkArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateWorkArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreaById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreaByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreaList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreaIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreaNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreWorkArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreWorkArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreaByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreaByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreaByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreaListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreaListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreaListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddWorkSurf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteWorkSurf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateWorkSurf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfByForeignKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddMoreWorkSurf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteMoreWorkSurf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfListByFields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfListByFields1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfListByFields2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_InitSampleRegion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetOnlineAccountId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetOnlineMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_VerifyMineAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMineRegionsOfBase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetBaseByRegion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSampleMineOfRegion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSampleCoalOfRegion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalNamesOfMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoalIdsOfMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreasOfMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfsOfMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfsOfMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkAreaIdsOfMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWorkSurfIdsOfMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDrillingSurfIdsOfMine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DifficultEval(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DifficultEvalString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MineGasReservesW1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MineGasReservesW2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WorkAreaGasFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MineGasFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WorkSurfGasFlow1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WorkSurfGasFlow2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DrillingSurfGasFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CbmServiceProcessor(boost::shared_ptr<CbmServiceIf> iface) :
    iface_(iface) {
    processMap_["AddAccount"] = &CbmServiceProcessor::process_AddAccount;
    processMap_["DeleteAccount"] = &CbmServiceProcessor::process_DeleteAccount;
    processMap_["UpdateAccount"] = &CbmServiceProcessor::process_UpdateAccount;
    processMap_["GetAccountById"] = &CbmServiceProcessor::process_GetAccountById;
    processMap_["GetAccountByForeignKey"] = &CbmServiceProcessor::process_GetAccountByForeignKey;
    processMap_["GetAccountList"] = &CbmServiceProcessor::process_GetAccountList;
    processMap_["GetAccountIds"] = &CbmServiceProcessor::process_GetAccountIds;
    processMap_["GetAccountNames"] = &CbmServiceProcessor::process_GetAccountNames;
    processMap_["AddMoreAccount"] = &CbmServiceProcessor::process_AddMoreAccount;
    processMap_["DeleteMoreAccount"] = &CbmServiceProcessor::process_DeleteMoreAccount;
    processMap_["GetAccountByFields"] = &CbmServiceProcessor::process_GetAccountByFields;
    processMap_["GetAccountByFields1"] = &CbmServiceProcessor::process_GetAccountByFields1;
    processMap_["GetAccountByFields2"] = &CbmServiceProcessor::process_GetAccountByFields2;
    processMap_["GetAccountListByFields"] = &CbmServiceProcessor::process_GetAccountListByFields;
    processMap_["GetAccountListByFields1"] = &CbmServiceProcessor::process_GetAccountListByFields1;
    processMap_["GetAccountListByFields2"] = &CbmServiceProcessor::process_GetAccountListByFields2;
    processMap_["AddAdjLayer"] = &CbmServiceProcessor::process_AddAdjLayer;
    processMap_["DeleteAdjLayer"] = &CbmServiceProcessor::process_DeleteAdjLayer;
    processMap_["UpdateAdjLayer"] = &CbmServiceProcessor::process_UpdateAdjLayer;
    processMap_["GetAdjLayerById"] = &CbmServiceProcessor::process_GetAdjLayerById;
    processMap_["GetAdjLayerByForeignKey"] = &CbmServiceProcessor::process_GetAdjLayerByForeignKey;
    processMap_["GetAdjLayerList"] = &CbmServiceProcessor::process_GetAdjLayerList;
    processMap_["GetAdjLayerIds"] = &CbmServiceProcessor::process_GetAdjLayerIds;
    processMap_["GetAdjLayerNames"] = &CbmServiceProcessor::process_GetAdjLayerNames;
    processMap_["AddMoreAdjLayer"] = &CbmServiceProcessor::process_AddMoreAdjLayer;
    processMap_["DeleteMoreAdjLayer"] = &CbmServiceProcessor::process_DeleteMoreAdjLayer;
    processMap_["GetAdjLayerByFields"] = &CbmServiceProcessor::process_GetAdjLayerByFields;
    processMap_["GetAdjLayerByFields1"] = &CbmServiceProcessor::process_GetAdjLayerByFields1;
    processMap_["GetAdjLayerByFields2"] = &CbmServiceProcessor::process_GetAdjLayerByFields2;
    processMap_["GetAdjLayerListByFields"] = &CbmServiceProcessor::process_GetAdjLayerListByFields;
    processMap_["GetAdjLayerListByFields1"] = &CbmServiceProcessor::process_GetAdjLayerListByFields1;
    processMap_["GetAdjLayerListByFields2"] = &CbmServiceProcessor::process_GetAdjLayerListByFields2;
    processMap_["AddCoal"] = &CbmServiceProcessor::process_AddCoal;
    processMap_["DeleteCoal"] = &CbmServiceProcessor::process_DeleteCoal;
    processMap_["UpdateCoal"] = &CbmServiceProcessor::process_UpdateCoal;
    processMap_["GetCoalById"] = &CbmServiceProcessor::process_GetCoalById;
    processMap_["GetCoalByForeignKey"] = &CbmServiceProcessor::process_GetCoalByForeignKey;
    processMap_["GetCoalList"] = &CbmServiceProcessor::process_GetCoalList;
    processMap_["GetCoalIds"] = &CbmServiceProcessor::process_GetCoalIds;
    processMap_["GetCoalNames"] = &CbmServiceProcessor::process_GetCoalNames;
    processMap_["AddMoreCoal"] = &CbmServiceProcessor::process_AddMoreCoal;
    processMap_["DeleteMoreCoal"] = &CbmServiceProcessor::process_DeleteMoreCoal;
    processMap_["GetCoalByFields"] = &CbmServiceProcessor::process_GetCoalByFields;
    processMap_["GetCoalByFields1"] = &CbmServiceProcessor::process_GetCoalByFields1;
    processMap_["GetCoalByFields2"] = &CbmServiceProcessor::process_GetCoalByFields2;
    processMap_["GetCoalListByFields"] = &CbmServiceProcessor::process_GetCoalListByFields;
    processMap_["GetCoalListByFields1"] = &CbmServiceProcessor::process_GetCoalListByFields1;
    processMap_["GetCoalListByFields2"] = &CbmServiceProcessor::process_GetCoalListByFields2;
    processMap_["AddComplexity"] = &CbmServiceProcessor::process_AddComplexity;
    processMap_["DeleteComplexity"] = &CbmServiceProcessor::process_DeleteComplexity;
    processMap_["UpdateComplexity"] = &CbmServiceProcessor::process_UpdateComplexity;
    processMap_["GetComplexityById"] = &CbmServiceProcessor::process_GetComplexityById;
    processMap_["GetComplexityByForeignKey"] = &CbmServiceProcessor::process_GetComplexityByForeignKey;
    processMap_["GetComplexityList"] = &CbmServiceProcessor::process_GetComplexityList;
    processMap_["GetComplexityIds"] = &CbmServiceProcessor::process_GetComplexityIds;
    processMap_["GetComplexityNames"] = &CbmServiceProcessor::process_GetComplexityNames;
    processMap_["AddMoreComplexity"] = &CbmServiceProcessor::process_AddMoreComplexity;
    processMap_["DeleteMoreComplexity"] = &CbmServiceProcessor::process_DeleteMoreComplexity;
    processMap_["GetComplexityByFields"] = &CbmServiceProcessor::process_GetComplexityByFields;
    processMap_["GetComplexityByFields1"] = &CbmServiceProcessor::process_GetComplexityByFields1;
    processMap_["GetComplexityByFields2"] = &CbmServiceProcessor::process_GetComplexityByFields2;
    processMap_["GetComplexityListByFields"] = &CbmServiceProcessor::process_GetComplexityListByFields;
    processMap_["GetComplexityListByFields1"] = &CbmServiceProcessor::process_GetComplexityListByFields1;
    processMap_["GetComplexityListByFields2"] = &CbmServiceProcessor::process_GetComplexityListByFields2;
    processMap_["AddDesignDrillingSurfTechnology"] = &CbmServiceProcessor::process_AddDesignDrillingSurfTechnology;
    processMap_["DeleteDesignDrillingSurfTechnology"] = &CbmServiceProcessor::process_DeleteDesignDrillingSurfTechnology;
    processMap_["UpdateDesignDrillingSurfTechnology"] = &CbmServiceProcessor::process_UpdateDesignDrillingSurfTechnology;
    processMap_["GetDesignDrillingSurfTechnologyById"] = &CbmServiceProcessor::process_GetDesignDrillingSurfTechnologyById;
    processMap_["GetDesignDrillingSurfTechnologyByForeignKey"] = &CbmServiceProcessor::process_GetDesignDrillingSurfTechnologyByForeignKey;
    processMap_["GetDesignDrillingSurfTechnologyList"] = &CbmServiceProcessor::process_GetDesignDrillingSurfTechnologyList;
    processMap_["GetDesignDrillingSurfTechnologyIds"] = &CbmServiceProcessor::process_GetDesignDrillingSurfTechnologyIds;
    processMap_["GetDesignDrillingSurfTechnologyNames"] = &CbmServiceProcessor::process_GetDesignDrillingSurfTechnologyNames;
    processMap_["AddMoreDesignDrillingSurfTechnology"] = &CbmServiceProcessor::process_AddMoreDesignDrillingSurfTechnology;
    processMap_["DeleteMoreDesignDrillingSurfTechnology"] = &CbmServiceProcessor::process_DeleteMoreDesignDrillingSurfTechnology;
    processMap_["GetDesignDrillingSurfTechnologyByFields"] = &CbmServiceProcessor::process_GetDesignDrillingSurfTechnologyByFields;
    processMap_["GetDesignDrillingSurfTechnologyByFields1"] = &CbmServiceProcessor::process_GetDesignDrillingSurfTechnologyByFields1;
    processMap_["GetDesignDrillingSurfTechnologyByFields2"] = &CbmServiceProcessor::process_GetDesignDrillingSurfTechnologyByFields2;
    processMap_["GetDesignDrillingSurfTechnologyListByFields"] = &CbmServiceProcessor::process_GetDesignDrillingSurfTechnologyListByFields;
    processMap_["GetDesignDrillingSurfTechnologyListByFields1"] = &CbmServiceProcessor::process_GetDesignDrillingSurfTechnologyListByFields1;
    processMap_["GetDesignDrillingSurfTechnologyListByFields2"] = &CbmServiceProcessor::process_GetDesignDrillingSurfTechnologyListByFields2;
    processMap_["AddDesignGoafTechnology"] = &CbmServiceProcessor::process_AddDesignGoafTechnology;
    processMap_["DeleteDesignGoafTechnology"] = &CbmServiceProcessor::process_DeleteDesignGoafTechnology;
    processMap_["UpdateDesignGoafTechnology"] = &CbmServiceProcessor::process_UpdateDesignGoafTechnology;
    processMap_["GetDesignGoafTechnologyById"] = &CbmServiceProcessor::process_GetDesignGoafTechnologyById;
    processMap_["GetDesignGoafTechnologyByForeignKey"] = &CbmServiceProcessor::process_GetDesignGoafTechnologyByForeignKey;
    processMap_["GetDesignGoafTechnologyList"] = &CbmServiceProcessor::process_GetDesignGoafTechnologyList;
    processMap_["GetDesignGoafTechnologyIds"] = &CbmServiceProcessor::process_GetDesignGoafTechnologyIds;
    processMap_["GetDesignGoafTechnologyNames"] = &CbmServiceProcessor::process_GetDesignGoafTechnologyNames;
    processMap_["AddMoreDesignGoafTechnology"] = &CbmServiceProcessor::process_AddMoreDesignGoafTechnology;
    processMap_["DeleteMoreDesignGoafTechnology"] = &CbmServiceProcessor::process_DeleteMoreDesignGoafTechnology;
    processMap_["GetDesignGoafTechnologyByFields"] = &CbmServiceProcessor::process_GetDesignGoafTechnologyByFields;
    processMap_["GetDesignGoafTechnologyByFields1"] = &CbmServiceProcessor::process_GetDesignGoafTechnologyByFields1;
    processMap_["GetDesignGoafTechnologyByFields2"] = &CbmServiceProcessor::process_GetDesignGoafTechnologyByFields2;
    processMap_["GetDesignGoafTechnologyListByFields"] = &CbmServiceProcessor::process_GetDesignGoafTechnologyListByFields;
    processMap_["GetDesignGoafTechnologyListByFields1"] = &CbmServiceProcessor::process_GetDesignGoafTechnologyListByFields1;
    processMap_["GetDesignGoafTechnologyListByFields2"] = &CbmServiceProcessor::process_GetDesignGoafTechnologyListByFields2;
    processMap_["AddDesignPore"] = &CbmServiceProcessor::process_AddDesignPore;
    processMap_["DeleteDesignPore"] = &CbmServiceProcessor::process_DeleteDesignPore;
    processMap_["UpdateDesignPore"] = &CbmServiceProcessor::process_UpdateDesignPore;
    processMap_["GetDesignPoreById"] = &CbmServiceProcessor::process_GetDesignPoreById;
    processMap_["GetDesignPoreByForeignKey"] = &CbmServiceProcessor::process_GetDesignPoreByForeignKey;
    processMap_["GetDesignPoreList"] = &CbmServiceProcessor::process_GetDesignPoreList;
    processMap_["GetDesignPoreIds"] = &CbmServiceProcessor::process_GetDesignPoreIds;
    processMap_["GetDesignPoreNames"] = &CbmServiceProcessor::process_GetDesignPoreNames;
    processMap_["AddMoreDesignPore"] = &CbmServiceProcessor::process_AddMoreDesignPore;
    processMap_["DeleteMoreDesignPore"] = &CbmServiceProcessor::process_DeleteMoreDesignPore;
    processMap_["GetDesignPoreByFields"] = &CbmServiceProcessor::process_GetDesignPoreByFields;
    processMap_["GetDesignPoreByFields1"] = &CbmServiceProcessor::process_GetDesignPoreByFields1;
    processMap_["GetDesignPoreByFields2"] = &CbmServiceProcessor::process_GetDesignPoreByFields2;
    processMap_["GetDesignPoreListByFields"] = &CbmServiceProcessor::process_GetDesignPoreListByFields;
    processMap_["GetDesignPoreListByFields1"] = &CbmServiceProcessor::process_GetDesignPoreListByFields1;
    processMap_["GetDesignPoreListByFields2"] = &CbmServiceProcessor::process_GetDesignPoreListByFields2;
    processMap_["AddDesignSite"] = &CbmServiceProcessor::process_AddDesignSite;
    processMap_["DeleteDesignSite"] = &CbmServiceProcessor::process_DeleteDesignSite;
    processMap_["UpdateDesignSite"] = &CbmServiceProcessor::process_UpdateDesignSite;
    processMap_["GetDesignSiteById"] = &CbmServiceProcessor::process_GetDesignSiteById;
    processMap_["GetDesignSiteByForeignKey"] = &CbmServiceProcessor::process_GetDesignSiteByForeignKey;
    processMap_["GetDesignSiteList"] = &CbmServiceProcessor::process_GetDesignSiteList;
    processMap_["GetDesignSiteIds"] = &CbmServiceProcessor::process_GetDesignSiteIds;
    processMap_["GetDesignSiteNames"] = &CbmServiceProcessor::process_GetDesignSiteNames;
    processMap_["AddMoreDesignSite"] = &CbmServiceProcessor::process_AddMoreDesignSite;
    processMap_["DeleteMoreDesignSite"] = &CbmServiceProcessor::process_DeleteMoreDesignSite;
    processMap_["GetDesignSiteByFields"] = &CbmServiceProcessor::process_GetDesignSiteByFields;
    processMap_["GetDesignSiteByFields1"] = &CbmServiceProcessor::process_GetDesignSiteByFields1;
    processMap_["GetDesignSiteByFields2"] = &CbmServiceProcessor::process_GetDesignSiteByFields2;
    processMap_["GetDesignSiteListByFields"] = &CbmServiceProcessor::process_GetDesignSiteListByFields;
    processMap_["GetDesignSiteListByFields1"] = &CbmServiceProcessor::process_GetDesignSiteListByFields1;
    processMap_["GetDesignSiteListByFields2"] = &CbmServiceProcessor::process_GetDesignSiteListByFields2;
    processMap_["AddDesignTechnology"] = &CbmServiceProcessor::process_AddDesignTechnology;
    processMap_["DeleteDesignTechnology"] = &CbmServiceProcessor::process_DeleteDesignTechnology;
    processMap_["UpdateDesignTechnology"] = &CbmServiceProcessor::process_UpdateDesignTechnology;
    processMap_["GetDesignTechnologyById"] = &CbmServiceProcessor::process_GetDesignTechnologyById;
    processMap_["GetDesignTechnologyByForeignKey"] = &CbmServiceProcessor::process_GetDesignTechnologyByForeignKey;
    processMap_["GetDesignTechnologyList"] = &CbmServiceProcessor::process_GetDesignTechnologyList;
    processMap_["GetDesignTechnologyIds"] = &CbmServiceProcessor::process_GetDesignTechnologyIds;
    processMap_["GetDesignTechnologyNames"] = &CbmServiceProcessor::process_GetDesignTechnologyNames;
    processMap_["AddMoreDesignTechnology"] = &CbmServiceProcessor::process_AddMoreDesignTechnology;
    processMap_["DeleteMoreDesignTechnology"] = &CbmServiceProcessor::process_DeleteMoreDesignTechnology;
    processMap_["GetDesignTechnologyByFields"] = &CbmServiceProcessor::process_GetDesignTechnologyByFields;
    processMap_["GetDesignTechnologyByFields1"] = &CbmServiceProcessor::process_GetDesignTechnologyByFields1;
    processMap_["GetDesignTechnologyByFields2"] = &CbmServiceProcessor::process_GetDesignTechnologyByFields2;
    processMap_["GetDesignTechnologyListByFields"] = &CbmServiceProcessor::process_GetDesignTechnologyListByFields;
    processMap_["GetDesignTechnologyListByFields1"] = &CbmServiceProcessor::process_GetDesignTechnologyListByFields1;
    processMap_["GetDesignTechnologyListByFields2"] = &CbmServiceProcessor::process_GetDesignTechnologyListByFields2;
    processMap_["AddDesignWorkSurfTechnology"] = &CbmServiceProcessor::process_AddDesignWorkSurfTechnology;
    processMap_["DeleteDesignWorkSurfTechnology"] = &CbmServiceProcessor::process_DeleteDesignWorkSurfTechnology;
    processMap_["UpdateDesignWorkSurfTechnology"] = &CbmServiceProcessor::process_UpdateDesignWorkSurfTechnology;
    processMap_["GetDesignWorkSurfTechnologyById"] = &CbmServiceProcessor::process_GetDesignWorkSurfTechnologyById;
    processMap_["GetDesignWorkSurfTechnologyByForeignKey"] = &CbmServiceProcessor::process_GetDesignWorkSurfTechnologyByForeignKey;
    processMap_["GetDesignWorkSurfTechnologyList"] = &CbmServiceProcessor::process_GetDesignWorkSurfTechnologyList;
    processMap_["GetDesignWorkSurfTechnologyIds"] = &CbmServiceProcessor::process_GetDesignWorkSurfTechnologyIds;
    processMap_["GetDesignWorkSurfTechnologyNames"] = &CbmServiceProcessor::process_GetDesignWorkSurfTechnologyNames;
    processMap_["AddMoreDesignWorkSurfTechnology"] = &CbmServiceProcessor::process_AddMoreDesignWorkSurfTechnology;
    processMap_["DeleteMoreDesignWorkSurfTechnology"] = &CbmServiceProcessor::process_DeleteMoreDesignWorkSurfTechnology;
    processMap_["GetDesignWorkSurfTechnologyByFields"] = &CbmServiceProcessor::process_GetDesignWorkSurfTechnologyByFields;
    processMap_["GetDesignWorkSurfTechnologyByFields1"] = &CbmServiceProcessor::process_GetDesignWorkSurfTechnologyByFields1;
    processMap_["GetDesignWorkSurfTechnologyByFields2"] = &CbmServiceProcessor::process_GetDesignWorkSurfTechnologyByFields2;
    processMap_["GetDesignWorkSurfTechnologyListByFields"] = &CbmServiceProcessor::process_GetDesignWorkSurfTechnologyListByFields;
    processMap_["GetDesignWorkSurfTechnologyListByFields1"] = &CbmServiceProcessor::process_GetDesignWorkSurfTechnologyListByFields1;
    processMap_["GetDesignWorkSurfTechnologyListByFields2"] = &CbmServiceProcessor::process_GetDesignWorkSurfTechnologyListByFields2;
    processMap_["AddDrillingRadiusParam"] = &CbmServiceProcessor::process_AddDrillingRadiusParam;
    processMap_["DeleteDrillingRadiusParam"] = &CbmServiceProcessor::process_DeleteDrillingRadiusParam;
    processMap_["UpdateDrillingRadiusParam"] = &CbmServiceProcessor::process_UpdateDrillingRadiusParam;
    processMap_["GetDrillingRadiusParamById"] = &CbmServiceProcessor::process_GetDrillingRadiusParamById;
    processMap_["GetDrillingRadiusParamByForeignKey"] = &CbmServiceProcessor::process_GetDrillingRadiusParamByForeignKey;
    processMap_["GetDrillingRadiusParamList"] = &CbmServiceProcessor::process_GetDrillingRadiusParamList;
    processMap_["GetDrillingRadiusParamIds"] = &CbmServiceProcessor::process_GetDrillingRadiusParamIds;
    processMap_["GetDrillingRadiusParamNames"] = &CbmServiceProcessor::process_GetDrillingRadiusParamNames;
    processMap_["AddMoreDrillingRadiusParam"] = &CbmServiceProcessor::process_AddMoreDrillingRadiusParam;
    processMap_["DeleteMoreDrillingRadiusParam"] = &CbmServiceProcessor::process_DeleteMoreDrillingRadiusParam;
    processMap_["GetDrillingRadiusParamByFields"] = &CbmServiceProcessor::process_GetDrillingRadiusParamByFields;
    processMap_["GetDrillingRadiusParamByFields1"] = &CbmServiceProcessor::process_GetDrillingRadiusParamByFields1;
    processMap_["GetDrillingRadiusParamByFields2"] = &CbmServiceProcessor::process_GetDrillingRadiusParamByFields2;
    processMap_["GetDrillingRadiusParamListByFields"] = &CbmServiceProcessor::process_GetDrillingRadiusParamListByFields;
    processMap_["GetDrillingRadiusParamListByFields1"] = &CbmServiceProcessor::process_GetDrillingRadiusParamListByFields1;
    processMap_["GetDrillingRadiusParamListByFields2"] = &CbmServiceProcessor::process_GetDrillingRadiusParamListByFields2;
    processMap_["AddDrillingSurf"] = &CbmServiceProcessor::process_AddDrillingSurf;
    processMap_["DeleteDrillingSurf"] = &CbmServiceProcessor::process_DeleteDrillingSurf;
    processMap_["UpdateDrillingSurf"] = &CbmServiceProcessor::process_UpdateDrillingSurf;
    processMap_["GetDrillingSurfById"] = &CbmServiceProcessor::process_GetDrillingSurfById;
    processMap_["GetDrillingSurfByForeignKey"] = &CbmServiceProcessor::process_GetDrillingSurfByForeignKey;
    processMap_["GetDrillingSurfList"] = &CbmServiceProcessor::process_GetDrillingSurfList;
    processMap_["GetDrillingSurfIds"] = &CbmServiceProcessor::process_GetDrillingSurfIds;
    processMap_["GetDrillingSurfNames"] = &CbmServiceProcessor::process_GetDrillingSurfNames;
    processMap_["AddMoreDrillingSurf"] = &CbmServiceProcessor::process_AddMoreDrillingSurf;
    processMap_["DeleteMoreDrillingSurf"] = &CbmServiceProcessor::process_DeleteMoreDrillingSurf;
    processMap_["GetDrillingSurfByFields"] = &CbmServiceProcessor::process_GetDrillingSurfByFields;
    processMap_["GetDrillingSurfByFields1"] = &CbmServiceProcessor::process_GetDrillingSurfByFields1;
    processMap_["GetDrillingSurfByFields2"] = &CbmServiceProcessor::process_GetDrillingSurfByFields2;
    processMap_["GetDrillingSurfListByFields"] = &CbmServiceProcessor::process_GetDrillingSurfListByFields;
    processMap_["GetDrillingSurfListByFields1"] = &CbmServiceProcessor::process_GetDrillingSurfListByFields1;
    processMap_["GetDrillingSurfListByFields2"] = &CbmServiceProcessor::process_GetDrillingSurfListByFields2;
    processMap_["AddEvalUnit"] = &CbmServiceProcessor::process_AddEvalUnit;
    processMap_["DeleteEvalUnit"] = &CbmServiceProcessor::process_DeleteEvalUnit;
    processMap_["UpdateEvalUnit"] = &CbmServiceProcessor::process_UpdateEvalUnit;
    processMap_["GetEvalUnitById"] = &CbmServiceProcessor::process_GetEvalUnitById;
    processMap_["GetEvalUnitByForeignKey"] = &CbmServiceProcessor::process_GetEvalUnitByForeignKey;
    processMap_["GetEvalUnitList"] = &CbmServiceProcessor::process_GetEvalUnitList;
    processMap_["GetEvalUnitIds"] = &CbmServiceProcessor::process_GetEvalUnitIds;
    processMap_["GetEvalUnitNames"] = &CbmServiceProcessor::process_GetEvalUnitNames;
    processMap_["AddMoreEvalUnit"] = &CbmServiceProcessor::process_AddMoreEvalUnit;
    processMap_["DeleteMoreEvalUnit"] = &CbmServiceProcessor::process_DeleteMoreEvalUnit;
    processMap_["GetEvalUnitByFields"] = &CbmServiceProcessor::process_GetEvalUnitByFields;
    processMap_["GetEvalUnitByFields1"] = &CbmServiceProcessor::process_GetEvalUnitByFields1;
    processMap_["GetEvalUnitByFields2"] = &CbmServiceProcessor::process_GetEvalUnitByFields2;
    processMap_["GetEvalUnitListByFields"] = &CbmServiceProcessor::process_GetEvalUnitListByFields;
    processMap_["GetEvalUnitListByFields1"] = &CbmServiceProcessor::process_GetEvalUnitListByFields1;
    processMap_["GetEvalUnitListByFields2"] = &CbmServiceProcessor::process_GetEvalUnitListByFields2;
    processMap_["AddHighDrillingPore"] = &CbmServiceProcessor::process_AddHighDrillingPore;
    processMap_["DeleteHighDrillingPore"] = &CbmServiceProcessor::process_DeleteHighDrillingPore;
    processMap_["UpdateHighDrillingPore"] = &CbmServiceProcessor::process_UpdateHighDrillingPore;
    processMap_["GetHighDrillingPoreById"] = &CbmServiceProcessor::process_GetHighDrillingPoreById;
    processMap_["GetHighDrillingPoreByForeignKey"] = &CbmServiceProcessor::process_GetHighDrillingPoreByForeignKey;
    processMap_["GetHighDrillingPoreList"] = &CbmServiceProcessor::process_GetHighDrillingPoreList;
    processMap_["GetHighDrillingPoreIds"] = &CbmServiceProcessor::process_GetHighDrillingPoreIds;
    processMap_["GetHighDrillingPoreNames"] = &CbmServiceProcessor::process_GetHighDrillingPoreNames;
    processMap_["AddMoreHighDrillingPore"] = &CbmServiceProcessor::process_AddMoreHighDrillingPore;
    processMap_["DeleteMoreHighDrillingPore"] = &CbmServiceProcessor::process_DeleteMoreHighDrillingPore;
    processMap_["GetHighDrillingPoreByFields"] = &CbmServiceProcessor::process_GetHighDrillingPoreByFields;
    processMap_["GetHighDrillingPoreByFields1"] = &CbmServiceProcessor::process_GetHighDrillingPoreByFields1;
    processMap_["GetHighDrillingPoreByFields2"] = &CbmServiceProcessor::process_GetHighDrillingPoreByFields2;
    processMap_["GetHighDrillingPoreListByFields"] = &CbmServiceProcessor::process_GetHighDrillingPoreListByFields;
    processMap_["GetHighDrillingPoreListByFields1"] = &CbmServiceProcessor::process_GetHighDrillingPoreListByFields1;
    processMap_["GetHighDrillingPoreListByFields2"] = &CbmServiceProcessor::process_GetHighDrillingPoreListByFields2;
    processMap_["AddHighDrillingPoreParam"] = &CbmServiceProcessor::process_AddHighDrillingPoreParam;
    processMap_["DeleteHighDrillingPoreParam"] = &CbmServiceProcessor::process_DeleteHighDrillingPoreParam;
    processMap_["UpdateHighDrillingPoreParam"] = &CbmServiceProcessor::process_UpdateHighDrillingPoreParam;
    processMap_["GetHighDrillingPoreParamById"] = &CbmServiceProcessor::process_GetHighDrillingPoreParamById;
    processMap_["GetHighDrillingPoreParamByForeignKey"] = &CbmServiceProcessor::process_GetHighDrillingPoreParamByForeignKey;
    processMap_["GetHighDrillingPoreParamList"] = &CbmServiceProcessor::process_GetHighDrillingPoreParamList;
    processMap_["GetHighDrillingPoreParamIds"] = &CbmServiceProcessor::process_GetHighDrillingPoreParamIds;
    processMap_["GetHighDrillingPoreParamNames"] = &CbmServiceProcessor::process_GetHighDrillingPoreParamNames;
    processMap_["AddMoreHighDrillingPoreParam"] = &CbmServiceProcessor::process_AddMoreHighDrillingPoreParam;
    processMap_["DeleteMoreHighDrillingPoreParam"] = &CbmServiceProcessor::process_DeleteMoreHighDrillingPoreParam;
    processMap_["GetHighDrillingPoreParamByFields"] = &CbmServiceProcessor::process_GetHighDrillingPoreParamByFields;
    processMap_["GetHighDrillingPoreParamByFields1"] = &CbmServiceProcessor::process_GetHighDrillingPoreParamByFields1;
    processMap_["GetHighDrillingPoreParamByFields2"] = &CbmServiceProcessor::process_GetHighDrillingPoreParamByFields2;
    processMap_["GetHighDrillingPoreParamListByFields"] = &CbmServiceProcessor::process_GetHighDrillingPoreParamListByFields;
    processMap_["GetHighDrillingPoreParamListByFields1"] = &CbmServiceProcessor::process_GetHighDrillingPoreParamListByFields1;
    processMap_["GetHighDrillingPoreParamListByFields2"] = &CbmServiceProcessor::process_GetHighDrillingPoreParamListByFields2;
    processMap_["AddHighDrillingSiteParam"] = &CbmServiceProcessor::process_AddHighDrillingSiteParam;
    processMap_["DeleteHighDrillingSiteParam"] = &CbmServiceProcessor::process_DeleteHighDrillingSiteParam;
    processMap_["UpdateHighDrillingSiteParam"] = &CbmServiceProcessor::process_UpdateHighDrillingSiteParam;
    processMap_["GetHighDrillingSiteParamById"] = &CbmServiceProcessor::process_GetHighDrillingSiteParamById;
    processMap_["GetHighDrillingSiteParamByForeignKey"] = &CbmServiceProcessor::process_GetHighDrillingSiteParamByForeignKey;
    processMap_["GetHighDrillingSiteParamList"] = &CbmServiceProcessor::process_GetHighDrillingSiteParamList;
    processMap_["GetHighDrillingSiteParamIds"] = &CbmServiceProcessor::process_GetHighDrillingSiteParamIds;
    processMap_["GetHighDrillingSiteParamNames"] = &CbmServiceProcessor::process_GetHighDrillingSiteParamNames;
    processMap_["AddMoreHighDrillingSiteParam"] = &CbmServiceProcessor::process_AddMoreHighDrillingSiteParam;
    processMap_["DeleteMoreHighDrillingSiteParam"] = &CbmServiceProcessor::process_DeleteMoreHighDrillingSiteParam;
    processMap_["GetHighDrillingSiteParamByFields"] = &CbmServiceProcessor::process_GetHighDrillingSiteParamByFields;
    processMap_["GetHighDrillingSiteParamByFields1"] = &CbmServiceProcessor::process_GetHighDrillingSiteParamByFields1;
    processMap_["GetHighDrillingSiteParamByFields2"] = &CbmServiceProcessor::process_GetHighDrillingSiteParamByFields2;
    processMap_["GetHighDrillingSiteParamListByFields"] = &CbmServiceProcessor::process_GetHighDrillingSiteParamListByFields;
    processMap_["GetHighDrillingSiteParamListByFields1"] = &CbmServiceProcessor::process_GetHighDrillingSiteParamListByFields1;
    processMap_["GetHighDrillingSiteParamListByFields2"] = &CbmServiceProcessor::process_GetHighDrillingSiteParamListByFields2;
    processMap_["AddHighDrillingTunnel"] = &CbmServiceProcessor::process_AddHighDrillingTunnel;
    processMap_["DeleteHighDrillingTunnel"] = &CbmServiceProcessor::process_DeleteHighDrillingTunnel;
    processMap_["UpdateHighDrillingTunnel"] = &CbmServiceProcessor::process_UpdateHighDrillingTunnel;
    processMap_["GetHighDrillingTunnelById"] = &CbmServiceProcessor::process_GetHighDrillingTunnelById;
    processMap_["GetHighDrillingTunnelByForeignKey"] = &CbmServiceProcessor::process_GetHighDrillingTunnelByForeignKey;
    processMap_["GetHighDrillingTunnelList"] = &CbmServiceProcessor::process_GetHighDrillingTunnelList;
    processMap_["GetHighDrillingTunnelIds"] = &CbmServiceProcessor::process_GetHighDrillingTunnelIds;
    processMap_["GetHighDrillingTunnelNames"] = &CbmServiceProcessor::process_GetHighDrillingTunnelNames;
    processMap_["AddMoreHighDrillingTunnel"] = &CbmServiceProcessor::process_AddMoreHighDrillingTunnel;
    processMap_["DeleteMoreHighDrillingTunnel"] = &CbmServiceProcessor::process_DeleteMoreHighDrillingTunnel;
    processMap_["GetHighDrillingTunnelByFields"] = &CbmServiceProcessor::process_GetHighDrillingTunnelByFields;
    processMap_["GetHighDrillingTunnelByFields1"] = &CbmServiceProcessor::process_GetHighDrillingTunnelByFields1;
    processMap_["GetHighDrillingTunnelByFields2"] = &CbmServiceProcessor::process_GetHighDrillingTunnelByFields2;
    processMap_["GetHighDrillingTunnelListByFields"] = &CbmServiceProcessor::process_GetHighDrillingTunnelListByFields;
    processMap_["GetHighDrillingTunnelListByFields1"] = &CbmServiceProcessor::process_GetHighDrillingTunnelListByFields1;
    processMap_["GetHighDrillingTunnelListByFields2"] = &CbmServiceProcessor::process_GetHighDrillingTunnelListByFields2;
    processMap_["AddHydrGeo"] = &CbmServiceProcessor::process_AddHydrGeo;
    processMap_["DeleteHydrGeo"] = &CbmServiceProcessor::process_DeleteHydrGeo;
    processMap_["UpdateHydrGeo"] = &CbmServiceProcessor::process_UpdateHydrGeo;
    processMap_["GetHydrGeoById"] = &CbmServiceProcessor::process_GetHydrGeoById;
    processMap_["GetHydrGeoByForeignKey"] = &CbmServiceProcessor::process_GetHydrGeoByForeignKey;
    processMap_["GetHydrGeoList"] = &CbmServiceProcessor::process_GetHydrGeoList;
    processMap_["GetHydrGeoIds"] = &CbmServiceProcessor::process_GetHydrGeoIds;
    processMap_["GetHydrGeoNames"] = &CbmServiceProcessor::process_GetHydrGeoNames;
    processMap_["AddMoreHydrGeo"] = &CbmServiceProcessor::process_AddMoreHydrGeo;
    processMap_["DeleteMoreHydrGeo"] = &CbmServiceProcessor::process_DeleteMoreHydrGeo;
    processMap_["GetHydrGeoByFields"] = &CbmServiceProcessor::process_GetHydrGeoByFields;
    processMap_["GetHydrGeoByFields1"] = &CbmServiceProcessor::process_GetHydrGeoByFields1;
    processMap_["GetHydrGeoByFields2"] = &CbmServiceProcessor::process_GetHydrGeoByFields2;
    processMap_["GetHydrGeoListByFields"] = &CbmServiceProcessor::process_GetHydrGeoListByFields;
    processMap_["GetHydrGeoListByFields1"] = &CbmServiceProcessor::process_GetHydrGeoListByFields1;
    processMap_["GetHydrGeoListByFields2"] = &CbmServiceProcessor::process_GetHydrGeoListByFields2;
    processMap_["AddMine"] = &CbmServiceProcessor::process_AddMine;
    processMap_["DeleteMine"] = &CbmServiceProcessor::process_DeleteMine;
    processMap_["UpdateMine"] = &CbmServiceProcessor::process_UpdateMine;
    processMap_["GetMineById"] = &CbmServiceProcessor::process_GetMineById;
    processMap_["GetMineByForeignKey"] = &CbmServiceProcessor::process_GetMineByForeignKey;
    processMap_["GetMineList"] = &CbmServiceProcessor::process_GetMineList;
    processMap_["GetMineIds"] = &CbmServiceProcessor::process_GetMineIds;
    processMap_["GetMineNames"] = &CbmServiceProcessor::process_GetMineNames;
    processMap_["AddMoreMine"] = &CbmServiceProcessor::process_AddMoreMine;
    processMap_["DeleteMoreMine"] = &CbmServiceProcessor::process_DeleteMoreMine;
    processMap_["GetMineByFields"] = &CbmServiceProcessor::process_GetMineByFields;
    processMap_["GetMineByFields1"] = &CbmServiceProcessor::process_GetMineByFields1;
    processMap_["GetMineByFields2"] = &CbmServiceProcessor::process_GetMineByFields2;
    processMap_["GetMineListByFields"] = &CbmServiceProcessor::process_GetMineListByFields;
    processMap_["GetMineListByFields1"] = &CbmServiceProcessor::process_GetMineListByFields1;
    processMap_["GetMineListByFields2"] = &CbmServiceProcessor::process_GetMineListByFields2;
    processMap_["AddMineBase"] = &CbmServiceProcessor::process_AddMineBase;
    processMap_["DeleteMineBase"] = &CbmServiceProcessor::process_DeleteMineBase;
    processMap_["UpdateMineBase"] = &CbmServiceProcessor::process_UpdateMineBase;
    processMap_["GetMineBaseById"] = &CbmServiceProcessor::process_GetMineBaseById;
    processMap_["GetMineBaseByForeignKey"] = &CbmServiceProcessor::process_GetMineBaseByForeignKey;
    processMap_["GetMineBaseList"] = &CbmServiceProcessor::process_GetMineBaseList;
    processMap_["GetMineBaseIds"] = &CbmServiceProcessor::process_GetMineBaseIds;
    processMap_["GetMineBaseNames"] = &CbmServiceProcessor::process_GetMineBaseNames;
    processMap_["AddMoreMineBase"] = &CbmServiceProcessor::process_AddMoreMineBase;
    processMap_["DeleteMoreMineBase"] = &CbmServiceProcessor::process_DeleteMoreMineBase;
    processMap_["GetMineBaseByFields"] = &CbmServiceProcessor::process_GetMineBaseByFields;
    processMap_["GetMineBaseByFields1"] = &CbmServiceProcessor::process_GetMineBaseByFields1;
    processMap_["GetMineBaseByFields2"] = &CbmServiceProcessor::process_GetMineBaseByFields2;
    processMap_["GetMineBaseListByFields"] = &CbmServiceProcessor::process_GetMineBaseListByFields;
    processMap_["GetMineBaseListByFields1"] = &CbmServiceProcessor::process_GetMineBaseListByFields1;
    processMap_["GetMineBaseListByFields2"] = &CbmServiceProcessor::process_GetMineBaseListByFields2;
    processMap_["AddMineRegion"] = &CbmServiceProcessor::process_AddMineRegion;
    processMap_["DeleteMineRegion"] = &CbmServiceProcessor::process_DeleteMineRegion;
    processMap_["UpdateMineRegion"] = &CbmServiceProcessor::process_UpdateMineRegion;
    processMap_["GetMineRegionById"] = &CbmServiceProcessor::process_GetMineRegionById;
    processMap_["GetMineRegionByForeignKey"] = &CbmServiceProcessor::process_GetMineRegionByForeignKey;
    processMap_["GetMineRegionList"] = &CbmServiceProcessor::process_GetMineRegionList;
    processMap_["GetMineRegionIds"] = &CbmServiceProcessor::process_GetMineRegionIds;
    processMap_["GetMineRegionNames"] = &CbmServiceProcessor::process_GetMineRegionNames;
    processMap_["AddMoreMineRegion"] = &CbmServiceProcessor::process_AddMoreMineRegion;
    processMap_["DeleteMoreMineRegion"] = &CbmServiceProcessor::process_DeleteMoreMineRegion;
    processMap_["GetMineRegionByFields"] = &CbmServiceProcessor::process_GetMineRegionByFields;
    processMap_["GetMineRegionByFields1"] = &CbmServiceProcessor::process_GetMineRegionByFields1;
    processMap_["GetMineRegionByFields2"] = &CbmServiceProcessor::process_GetMineRegionByFields2;
    processMap_["GetMineRegionListByFields"] = &CbmServiceProcessor::process_GetMineRegionListByFields;
    processMap_["GetMineRegionListByFields1"] = &CbmServiceProcessor::process_GetMineRegionListByFields1;
    processMap_["GetMineRegionListByFields2"] = &CbmServiceProcessor::process_GetMineRegionListByFields2;
    processMap_["AddPoreFlow"] = &CbmServiceProcessor::process_AddPoreFlow;
    processMap_["DeletePoreFlow"] = &CbmServiceProcessor::process_DeletePoreFlow;
    processMap_["UpdatePoreFlow"] = &CbmServiceProcessor::process_UpdatePoreFlow;
    processMap_["GetPoreFlowById"] = &CbmServiceProcessor::process_GetPoreFlowById;
    processMap_["GetPoreFlowByForeignKey"] = &CbmServiceProcessor::process_GetPoreFlowByForeignKey;
    processMap_["GetPoreFlowList"] = &CbmServiceProcessor::process_GetPoreFlowList;
    processMap_["GetPoreFlowIds"] = &CbmServiceProcessor::process_GetPoreFlowIds;
    processMap_["GetPoreFlowNames"] = &CbmServiceProcessor::process_GetPoreFlowNames;
    processMap_["AddMorePoreFlow"] = &CbmServiceProcessor::process_AddMorePoreFlow;
    processMap_["DeleteMorePoreFlow"] = &CbmServiceProcessor::process_DeleteMorePoreFlow;
    processMap_["GetPoreFlowByFields"] = &CbmServiceProcessor::process_GetPoreFlowByFields;
    processMap_["GetPoreFlowByFields1"] = &CbmServiceProcessor::process_GetPoreFlowByFields1;
    processMap_["GetPoreFlowByFields2"] = &CbmServiceProcessor::process_GetPoreFlowByFields2;
    processMap_["GetPoreFlowListByFields"] = &CbmServiceProcessor::process_GetPoreFlowListByFields;
    processMap_["GetPoreFlowListByFields1"] = &CbmServiceProcessor::process_GetPoreFlowListByFields1;
    processMap_["GetPoreFlowListByFields2"] = &CbmServiceProcessor::process_GetPoreFlowListByFields2;
    processMap_["AddPoreSize"] = &CbmServiceProcessor::process_AddPoreSize;
    processMap_["DeletePoreSize"] = &CbmServiceProcessor::process_DeletePoreSize;
    processMap_["UpdatePoreSize"] = &CbmServiceProcessor::process_UpdatePoreSize;
    processMap_["GetPoreSizeById"] = &CbmServiceProcessor::process_GetPoreSizeById;
    processMap_["GetPoreSizeByForeignKey"] = &CbmServiceProcessor::process_GetPoreSizeByForeignKey;
    processMap_["GetPoreSizeList"] = &CbmServiceProcessor::process_GetPoreSizeList;
    processMap_["GetPoreSizeIds"] = &CbmServiceProcessor::process_GetPoreSizeIds;
    processMap_["GetPoreSizeNames"] = &CbmServiceProcessor::process_GetPoreSizeNames;
    processMap_["AddMorePoreSize"] = &CbmServiceProcessor::process_AddMorePoreSize;
    processMap_["DeleteMorePoreSize"] = &CbmServiceProcessor::process_DeleteMorePoreSize;
    processMap_["GetPoreSizeByFields"] = &CbmServiceProcessor::process_GetPoreSizeByFields;
    processMap_["GetPoreSizeByFields1"] = &CbmServiceProcessor::process_GetPoreSizeByFields1;
    processMap_["GetPoreSizeByFields2"] = &CbmServiceProcessor::process_GetPoreSizeByFields2;
    processMap_["GetPoreSizeListByFields"] = &CbmServiceProcessor::process_GetPoreSizeListByFields;
    processMap_["GetPoreSizeListByFields1"] = &CbmServiceProcessor::process_GetPoreSizeListByFields1;
    processMap_["GetPoreSizeListByFields2"] = &CbmServiceProcessor::process_GetPoreSizeListByFields2;
    processMap_["AddResAbundance"] = &CbmServiceProcessor::process_AddResAbundance;
    processMap_["DeleteResAbundance"] = &CbmServiceProcessor::process_DeleteResAbundance;
    processMap_["UpdateResAbundance"] = &CbmServiceProcessor::process_UpdateResAbundance;
    processMap_["GetResAbundanceById"] = &CbmServiceProcessor::process_GetResAbundanceById;
    processMap_["GetResAbundanceByForeignKey"] = &CbmServiceProcessor::process_GetResAbundanceByForeignKey;
    processMap_["GetResAbundanceList"] = &CbmServiceProcessor::process_GetResAbundanceList;
    processMap_["GetResAbundanceIds"] = &CbmServiceProcessor::process_GetResAbundanceIds;
    processMap_["GetResAbundanceNames"] = &CbmServiceProcessor::process_GetResAbundanceNames;
    processMap_["AddMoreResAbundance"] = &CbmServiceProcessor::process_AddMoreResAbundance;
    processMap_["DeleteMoreResAbundance"] = &CbmServiceProcessor::process_DeleteMoreResAbundance;
    processMap_["GetResAbundanceByFields"] = &CbmServiceProcessor::process_GetResAbundanceByFields;
    processMap_["GetResAbundanceByFields1"] = &CbmServiceProcessor::process_GetResAbundanceByFields1;
    processMap_["GetResAbundanceByFields2"] = &CbmServiceProcessor::process_GetResAbundanceByFields2;
    processMap_["GetResAbundanceListByFields"] = &CbmServiceProcessor::process_GetResAbundanceListByFields;
    processMap_["GetResAbundanceListByFields1"] = &CbmServiceProcessor::process_GetResAbundanceListByFields1;
    processMap_["GetResAbundanceListByFields2"] = &CbmServiceProcessor::process_GetResAbundanceListByFields2;
    processMap_["AddRock"] = &CbmServiceProcessor::process_AddRock;
    processMap_["DeleteRock"] = &CbmServiceProcessor::process_DeleteRock;
    processMap_["UpdateRock"] = &CbmServiceProcessor::process_UpdateRock;
    processMap_["GetRockById"] = &CbmServiceProcessor::process_GetRockById;
    processMap_["GetRockByForeignKey"] = &CbmServiceProcessor::process_GetRockByForeignKey;
    processMap_["GetRockList"] = &CbmServiceProcessor::process_GetRockList;
    processMap_["GetRockIds"] = &CbmServiceProcessor::process_GetRockIds;
    processMap_["GetRockNames"] = &CbmServiceProcessor::process_GetRockNames;
    processMap_["AddMoreRock"] = &CbmServiceProcessor::process_AddMoreRock;
    processMap_["DeleteMoreRock"] = &CbmServiceProcessor::process_DeleteMoreRock;
    processMap_["GetRockByFields"] = &CbmServiceProcessor::process_GetRockByFields;
    processMap_["GetRockByFields1"] = &CbmServiceProcessor::process_GetRockByFields1;
    processMap_["GetRockByFields2"] = &CbmServiceProcessor::process_GetRockByFields2;
    processMap_["GetRockListByFields"] = &CbmServiceProcessor::process_GetRockListByFields;
    processMap_["GetRockListByFields1"] = &CbmServiceProcessor::process_GetRockListByFields1;
    processMap_["GetRockListByFields2"] = &CbmServiceProcessor::process_GetRockListByFields2;
    processMap_["AddSysInfo"] = &CbmServiceProcessor::process_AddSysInfo;
    processMap_["DeleteSysInfo"] = &CbmServiceProcessor::process_DeleteSysInfo;
    processMap_["UpdateSysInfo"] = &CbmServiceProcessor::process_UpdateSysInfo;
    processMap_["GetSysInfoById"] = &CbmServiceProcessor::process_GetSysInfoById;
    processMap_["GetSysInfoByForeignKey"] = &CbmServiceProcessor::process_GetSysInfoByForeignKey;
    processMap_["GetSysInfoList"] = &CbmServiceProcessor::process_GetSysInfoList;
    processMap_["GetSysInfoIds"] = &CbmServiceProcessor::process_GetSysInfoIds;
    processMap_["GetSysInfoNames"] = &CbmServiceProcessor::process_GetSysInfoNames;
    processMap_["AddMoreSysInfo"] = &CbmServiceProcessor::process_AddMoreSysInfo;
    processMap_["DeleteMoreSysInfo"] = &CbmServiceProcessor::process_DeleteMoreSysInfo;
    processMap_["GetSysInfoByFields"] = &CbmServiceProcessor::process_GetSysInfoByFields;
    processMap_["GetSysInfoByFields1"] = &CbmServiceProcessor::process_GetSysInfoByFields1;
    processMap_["GetSysInfoByFields2"] = &CbmServiceProcessor::process_GetSysInfoByFields2;
    processMap_["GetSysInfoListByFields"] = &CbmServiceProcessor::process_GetSysInfoListByFields;
    processMap_["GetSysInfoListByFields1"] = &CbmServiceProcessor::process_GetSysInfoListByFields1;
    processMap_["GetSysInfoListByFields2"] = &CbmServiceProcessor::process_GetSysInfoListByFields2;
    processMap_["AddTechMode"] = &CbmServiceProcessor::process_AddTechMode;
    processMap_["DeleteTechMode"] = &CbmServiceProcessor::process_DeleteTechMode;
    processMap_["UpdateTechMode"] = &CbmServiceProcessor::process_UpdateTechMode;
    processMap_["GetTechModeById"] = &CbmServiceProcessor::process_GetTechModeById;
    processMap_["GetTechModeByForeignKey"] = &CbmServiceProcessor::process_GetTechModeByForeignKey;
    processMap_["GetTechModeList"] = &CbmServiceProcessor::process_GetTechModeList;
    processMap_["GetTechModeIds"] = &CbmServiceProcessor::process_GetTechModeIds;
    processMap_["GetTechModeNames"] = &CbmServiceProcessor::process_GetTechModeNames;
    processMap_["AddMoreTechMode"] = &CbmServiceProcessor::process_AddMoreTechMode;
    processMap_["DeleteMoreTechMode"] = &CbmServiceProcessor::process_DeleteMoreTechMode;
    processMap_["GetTechModeByFields"] = &CbmServiceProcessor::process_GetTechModeByFields;
    processMap_["GetTechModeByFields1"] = &CbmServiceProcessor::process_GetTechModeByFields1;
    processMap_["GetTechModeByFields2"] = &CbmServiceProcessor::process_GetTechModeByFields2;
    processMap_["GetTechModeListByFields"] = &CbmServiceProcessor::process_GetTechModeListByFields;
    processMap_["GetTechModeListByFields1"] = &CbmServiceProcessor::process_GetTechModeListByFields1;
    processMap_["GetTechModeListByFields2"] = &CbmServiceProcessor::process_GetTechModeListByFields2;
    processMap_["AddTechnology"] = &CbmServiceProcessor::process_AddTechnology;
    processMap_["DeleteTechnology"] = &CbmServiceProcessor::process_DeleteTechnology;
    processMap_["UpdateTechnology"] = &CbmServiceProcessor::process_UpdateTechnology;
    processMap_["GetTechnologyById"] = &CbmServiceProcessor::process_GetTechnologyById;
    processMap_["GetTechnologyByForeignKey"] = &CbmServiceProcessor::process_GetTechnologyByForeignKey;
    processMap_["GetTechnologyList"] = &CbmServiceProcessor::process_GetTechnologyList;
    processMap_["GetTechnologyIds"] = &CbmServiceProcessor::process_GetTechnologyIds;
    processMap_["GetTechnologyNames"] = &CbmServiceProcessor::process_GetTechnologyNames;
    processMap_["AddMoreTechnology"] = &CbmServiceProcessor::process_AddMoreTechnology;
    processMap_["DeleteMoreTechnology"] = &CbmServiceProcessor::process_DeleteMoreTechnology;
    processMap_["GetTechnologyByFields"] = &CbmServiceProcessor::process_GetTechnologyByFields;
    processMap_["GetTechnologyByFields1"] = &CbmServiceProcessor::process_GetTechnologyByFields1;
    processMap_["GetTechnologyByFields2"] = &CbmServiceProcessor::process_GetTechnologyByFields2;
    processMap_["GetTechnologyListByFields"] = &CbmServiceProcessor::process_GetTechnologyListByFields;
    processMap_["GetTechnologyListByFields1"] = &CbmServiceProcessor::process_GetTechnologyListByFields1;
    processMap_["GetTechnologyListByFields2"] = &CbmServiceProcessor::process_GetTechnologyListByFields2;
    processMap_["AddTopoGeo"] = &CbmServiceProcessor::process_AddTopoGeo;
    processMap_["DeleteTopoGeo"] = &CbmServiceProcessor::process_DeleteTopoGeo;
    processMap_["UpdateTopoGeo"] = &CbmServiceProcessor::process_UpdateTopoGeo;
    processMap_["GetTopoGeoById"] = &CbmServiceProcessor::process_GetTopoGeoById;
    processMap_["GetTopoGeoByForeignKey"] = &CbmServiceProcessor::process_GetTopoGeoByForeignKey;
    processMap_["GetTopoGeoList"] = &CbmServiceProcessor::process_GetTopoGeoList;
    processMap_["GetTopoGeoIds"] = &CbmServiceProcessor::process_GetTopoGeoIds;
    processMap_["GetTopoGeoNames"] = &CbmServiceProcessor::process_GetTopoGeoNames;
    processMap_["AddMoreTopoGeo"] = &CbmServiceProcessor::process_AddMoreTopoGeo;
    processMap_["DeleteMoreTopoGeo"] = &CbmServiceProcessor::process_DeleteMoreTopoGeo;
    processMap_["GetTopoGeoByFields"] = &CbmServiceProcessor::process_GetTopoGeoByFields;
    processMap_["GetTopoGeoByFields1"] = &CbmServiceProcessor::process_GetTopoGeoByFields1;
    processMap_["GetTopoGeoByFields2"] = &CbmServiceProcessor::process_GetTopoGeoByFields2;
    processMap_["GetTopoGeoListByFields"] = &CbmServiceProcessor::process_GetTopoGeoListByFields;
    processMap_["GetTopoGeoListByFields1"] = &CbmServiceProcessor::process_GetTopoGeoListByFields1;
    processMap_["GetTopoGeoListByFields2"] = &CbmServiceProcessor::process_GetTopoGeoListByFields2;
    processMap_["AddTunnel"] = &CbmServiceProcessor::process_AddTunnel;
    processMap_["DeleteTunnel"] = &CbmServiceProcessor::process_DeleteTunnel;
    processMap_["UpdateTunnel"] = &CbmServiceProcessor::process_UpdateTunnel;
    processMap_["GetTunnelById"] = &CbmServiceProcessor::process_GetTunnelById;
    processMap_["GetTunnelByForeignKey"] = &CbmServiceProcessor::process_GetTunnelByForeignKey;
    processMap_["GetTunnelList"] = &CbmServiceProcessor::process_GetTunnelList;
    processMap_["GetTunnelIds"] = &CbmServiceProcessor::process_GetTunnelIds;
    processMap_["GetTunnelNames"] = &CbmServiceProcessor::process_GetTunnelNames;
    processMap_["AddMoreTunnel"] = &CbmServiceProcessor::process_AddMoreTunnel;
    processMap_["DeleteMoreTunnel"] = &CbmServiceProcessor::process_DeleteMoreTunnel;
    processMap_["GetTunnelByFields"] = &CbmServiceProcessor::process_GetTunnelByFields;
    processMap_["GetTunnelByFields1"] = &CbmServiceProcessor::process_GetTunnelByFields1;
    processMap_["GetTunnelByFields2"] = &CbmServiceProcessor::process_GetTunnelByFields2;
    processMap_["GetTunnelListByFields"] = &CbmServiceProcessor::process_GetTunnelListByFields;
    processMap_["GetTunnelListByFields1"] = &CbmServiceProcessor::process_GetTunnelListByFields1;
    processMap_["GetTunnelListByFields2"] = &CbmServiceProcessor::process_GetTunnelListByFields2;
    processMap_["AddWorkArea"] = &CbmServiceProcessor::process_AddWorkArea;
    processMap_["DeleteWorkArea"] = &CbmServiceProcessor::process_DeleteWorkArea;
    processMap_["UpdateWorkArea"] = &CbmServiceProcessor::process_UpdateWorkArea;
    processMap_["GetWorkAreaById"] = &CbmServiceProcessor::process_GetWorkAreaById;
    processMap_["GetWorkAreaByForeignKey"] = &CbmServiceProcessor::process_GetWorkAreaByForeignKey;
    processMap_["GetWorkAreaList"] = &CbmServiceProcessor::process_GetWorkAreaList;
    processMap_["GetWorkAreaIds"] = &CbmServiceProcessor::process_GetWorkAreaIds;
    processMap_["GetWorkAreaNames"] = &CbmServiceProcessor::process_GetWorkAreaNames;
    processMap_["AddMoreWorkArea"] = &CbmServiceProcessor::process_AddMoreWorkArea;
    processMap_["DeleteMoreWorkArea"] = &CbmServiceProcessor::process_DeleteMoreWorkArea;
    processMap_["GetWorkAreaByFields"] = &CbmServiceProcessor::process_GetWorkAreaByFields;
    processMap_["GetWorkAreaByFields1"] = &CbmServiceProcessor::process_GetWorkAreaByFields1;
    processMap_["GetWorkAreaByFields2"] = &CbmServiceProcessor::process_GetWorkAreaByFields2;
    processMap_["GetWorkAreaListByFields"] = &CbmServiceProcessor::process_GetWorkAreaListByFields;
    processMap_["GetWorkAreaListByFields1"] = &CbmServiceProcessor::process_GetWorkAreaListByFields1;
    processMap_["GetWorkAreaListByFields2"] = &CbmServiceProcessor::process_GetWorkAreaListByFields2;
    processMap_["AddWorkSurf"] = &CbmServiceProcessor::process_AddWorkSurf;
    processMap_["DeleteWorkSurf"] = &CbmServiceProcessor::process_DeleteWorkSurf;
    processMap_["UpdateWorkSurf"] = &CbmServiceProcessor::process_UpdateWorkSurf;
    processMap_["GetWorkSurfById"] = &CbmServiceProcessor::process_GetWorkSurfById;
    processMap_["GetWorkSurfByForeignKey"] = &CbmServiceProcessor::process_GetWorkSurfByForeignKey;
    processMap_["GetWorkSurfList"] = &CbmServiceProcessor::process_GetWorkSurfList;
    processMap_["GetWorkSurfIds"] = &CbmServiceProcessor::process_GetWorkSurfIds;
    processMap_["GetWorkSurfNames"] = &CbmServiceProcessor::process_GetWorkSurfNames;
    processMap_["AddMoreWorkSurf"] = &CbmServiceProcessor::process_AddMoreWorkSurf;
    processMap_["DeleteMoreWorkSurf"] = &CbmServiceProcessor::process_DeleteMoreWorkSurf;
    processMap_["GetWorkSurfByFields"] = &CbmServiceProcessor::process_GetWorkSurfByFields;
    processMap_["GetWorkSurfByFields1"] = &CbmServiceProcessor::process_GetWorkSurfByFields1;
    processMap_["GetWorkSurfByFields2"] = &CbmServiceProcessor::process_GetWorkSurfByFields2;
    processMap_["GetWorkSurfListByFields"] = &CbmServiceProcessor::process_GetWorkSurfListByFields;
    processMap_["GetWorkSurfListByFields1"] = &CbmServiceProcessor::process_GetWorkSurfListByFields1;
    processMap_["GetWorkSurfListByFields2"] = &CbmServiceProcessor::process_GetWorkSurfListByFields2;
    processMap_["InitSampleRegion"] = &CbmServiceProcessor::process_InitSampleRegion;
    processMap_["GetOnlineAccountId"] = &CbmServiceProcessor::process_GetOnlineAccountId;
    processMap_["GetOnlineMine"] = &CbmServiceProcessor::process_GetOnlineMine;
    processMap_["VerifyMineAccount"] = &CbmServiceProcessor::process_VerifyMineAccount;
    processMap_["GetMineRegionsOfBase"] = &CbmServiceProcessor::process_GetMineRegionsOfBase;
    processMap_["GetBaseByRegion"] = &CbmServiceProcessor::process_GetBaseByRegion;
    processMap_["GetSampleMineOfRegion"] = &CbmServiceProcessor::process_GetSampleMineOfRegion;
    processMap_["GetSampleCoalOfRegion"] = &CbmServiceProcessor::process_GetSampleCoalOfRegion;
    processMap_["GetCoalNamesOfMine"] = &CbmServiceProcessor::process_GetCoalNamesOfMine;
    processMap_["GetCoalIdsOfMine"] = &CbmServiceProcessor::process_GetCoalIdsOfMine;
    processMap_["GetWorkAreasOfMine"] = &CbmServiceProcessor::process_GetWorkAreasOfMine;
    processMap_["GetWorkSurfsOfMine"] = &CbmServiceProcessor::process_GetWorkSurfsOfMine;
    processMap_["GetDrillingSurfsOfMine"] = &CbmServiceProcessor::process_GetDrillingSurfsOfMine;
    processMap_["GetWorkAreaIdsOfMine"] = &CbmServiceProcessor::process_GetWorkAreaIdsOfMine;
    processMap_["GetWorkSurfIdsOfMine"] = &CbmServiceProcessor::process_GetWorkSurfIdsOfMine;
    processMap_["GetDrillingSurfIdsOfMine"] = &CbmServiceProcessor::process_GetDrillingSurfIdsOfMine;
    processMap_["DifficultEval"] = &CbmServiceProcessor::process_DifficultEval;
    processMap_["DifficultEvalString"] = &CbmServiceProcessor::process_DifficultEvalString;
    processMap_["MineGasReservesW1"] = &CbmServiceProcessor::process_MineGasReservesW1;
    processMap_["MineGasReservesW2"] = &CbmServiceProcessor::process_MineGasReservesW2;
    processMap_["WorkAreaGasFlow"] = &CbmServiceProcessor::process_WorkAreaGasFlow;
    processMap_["MineGasFlow"] = &CbmServiceProcessor::process_MineGasFlow;
    processMap_["WorkSurfGasFlow1"] = &CbmServiceProcessor::process_WorkSurfGasFlow1;
    processMap_["WorkSurfGasFlow2"] = &CbmServiceProcessor::process_WorkSurfGasFlow2;
    processMap_["DrillingSurfGasFlow"] = &CbmServiceProcessor::process_DrillingSurfGasFlow;
  }

  virtual ~CbmServiceProcessor() {}
};

class CbmServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CbmServiceProcessorFactory(const ::boost::shared_ptr< CbmServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CbmServiceIfFactory > handlerFactory_;
};

class CbmServiceMultiface : virtual public CbmServiceIf {
 public:
  CbmServiceMultiface(std::vector<boost::shared_ptr<CbmServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CbmServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CbmServiceIf> > ifaces_;
  CbmServiceMultiface() {}
  void add(boost::shared_ptr<CbmServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t AddAccount(const Account& account) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddAccount(account);
    }
    return ifaces_[i]->AddAccount(account);
  }

  bool DeleteAccount(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteAccount(id);
    }
    return ifaces_[i]->DeleteAccount(id);
  }

  bool UpdateAccount(const Account& account) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateAccount(account);
    }
    return ifaces_[i]->UpdateAccount(account);
  }

  void GetAccountById(Account& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountById(_return, id);
    }
    ifaces_[i]->GetAccountById(_return, id);
    return;
  }

  void GetAccountByForeignKey(Account& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetAccountByForeignKey(_return, fkey, id);
    return;
  }

  void GetAccountList(std::vector<Account> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountList(_return);
    }
    ifaces_[i]->GetAccountList(_return);
    return;
  }

  void GetAccountIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountIds(_return);
    }
    ifaces_[i]->GetAccountIds(_return);
    return;
  }

  void GetAccountNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountNames(_return);
    }
    ifaces_[i]->GetAccountNames(_return);
    return;
  }

  void AddMoreAccount(const std::vector<Account> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreAccount(objs);
    }
    ifaces_[i]->AddMoreAccount(objs);
  }

  void DeleteMoreAccount(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreAccount(obj_ids);
    }
    ifaces_[i]->DeleteMoreAccount(obj_ids);
  }

  void GetAccountByFields(Account& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountByFields(_return, fields);
    }
    ifaces_[i]->GetAccountByFields(_return, fields);
    return;
  }

  void GetAccountByFields1(Account& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountByFields1(_return, field, value);
    }
    ifaces_[i]->GetAccountByFields1(_return, field, value);
    return;
  }

  void GetAccountByFields2(Account& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetAccountByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetAccountListByFields(std::vector<Account> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountListByFields(_return, fields);
    }
    ifaces_[i]->GetAccountListByFields(_return, fields);
    return;
  }

  void GetAccountListByFields1(std::vector<Account> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountListByFields1(_return, field, value);
    }
    ifaces_[i]->GetAccountListByFields1(_return, field, value);
    return;
  }

  void GetAccountListByFields2(std::vector<Account> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetAccountListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddAdjLayer(const AdjLayer& adj_layer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddAdjLayer(adj_layer);
    }
    return ifaces_[i]->AddAdjLayer(adj_layer);
  }

  bool DeleteAdjLayer(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteAdjLayer(id);
    }
    return ifaces_[i]->DeleteAdjLayer(id);
  }

  bool UpdateAdjLayer(const AdjLayer& adj_layer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateAdjLayer(adj_layer);
    }
    return ifaces_[i]->UpdateAdjLayer(adj_layer);
  }

  void GetAdjLayerById(AdjLayer& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAdjLayerById(_return, id);
    }
    ifaces_[i]->GetAdjLayerById(_return, id);
    return;
  }

  void GetAdjLayerByForeignKey(AdjLayer& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAdjLayerByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetAdjLayerByForeignKey(_return, fkey, id);
    return;
  }

  void GetAdjLayerList(std::vector<AdjLayer> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAdjLayerList(_return);
    }
    ifaces_[i]->GetAdjLayerList(_return);
    return;
  }

  void GetAdjLayerIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAdjLayerIds(_return);
    }
    ifaces_[i]->GetAdjLayerIds(_return);
    return;
  }

  void GetAdjLayerNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAdjLayerNames(_return);
    }
    ifaces_[i]->GetAdjLayerNames(_return);
    return;
  }

  void AddMoreAdjLayer(const std::vector<AdjLayer> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreAdjLayer(objs);
    }
    ifaces_[i]->AddMoreAdjLayer(objs);
  }

  void DeleteMoreAdjLayer(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreAdjLayer(obj_ids);
    }
    ifaces_[i]->DeleteMoreAdjLayer(obj_ids);
  }

  void GetAdjLayerByFields(AdjLayer& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAdjLayerByFields(_return, fields);
    }
    ifaces_[i]->GetAdjLayerByFields(_return, fields);
    return;
  }

  void GetAdjLayerByFields1(AdjLayer& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAdjLayerByFields1(_return, field, value);
    }
    ifaces_[i]->GetAdjLayerByFields1(_return, field, value);
    return;
  }

  void GetAdjLayerByFields2(AdjLayer& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAdjLayerByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetAdjLayerByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetAdjLayerListByFields(std::vector<AdjLayer> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAdjLayerListByFields(_return, fields);
    }
    ifaces_[i]->GetAdjLayerListByFields(_return, fields);
    return;
  }

  void GetAdjLayerListByFields1(std::vector<AdjLayer> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAdjLayerListByFields1(_return, field, value);
    }
    ifaces_[i]->GetAdjLayerListByFields1(_return, field, value);
    return;
  }

  void GetAdjLayerListByFields2(std::vector<AdjLayer> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAdjLayerListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetAdjLayerListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddCoal(const Coal& coal) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddCoal(coal);
    }
    return ifaces_[i]->AddCoal(coal);
  }

  bool DeleteCoal(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteCoal(id);
    }
    return ifaces_[i]->DeleteCoal(id);
  }

  bool UpdateCoal(const Coal& coal) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateCoal(coal);
    }
    return ifaces_[i]->UpdateCoal(coal);
  }

  void GetCoalById(Coal& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalById(_return, id);
    }
    ifaces_[i]->GetCoalById(_return, id);
    return;
  }

  void GetCoalByForeignKey(Coal& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetCoalByForeignKey(_return, fkey, id);
    return;
  }

  void GetCoalList(std::vector<Coal> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalList(_return);
    }
    ifaces_[i]->GetCoalList(_return);
    return;
  }

  void GetCoalIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalIds(_return);
    }
    ifaces_[i]->GetCoalIds(_return);
    return;
  }

  void GetCoalNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalNames(_return);
    }
    ifaces_[i]->GetCoalNames(_return);
    return;
  }

  void AddMoreCoal(const std::vector<Coal> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreCoal(objs);
    }
    ifaces_[i]->AddMoreCoal(objs);
  }

  void DeleteMoreCoal(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreCoal(obj_ids);
    }
    ifaces_[i]->DeleteMoreCoal(obj_ids);
  }

  void GetCoalByFields(Coal& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalByFields(_return, fields);
    }
    ifaces_[i]->GetCoalByFields(_return, fields);
    return;
  }

  void GetCoalByFields1(Coal& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalByFields1(_return, field, value);
    }
    ifaces_[i]->GetCoalByFields1(_return, field, value);
    return;
  }

  void GetCoalByFields2(Coal& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetCoalByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetCoalListByFields(std::vector<Coal> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalListByFields(_return, fields);
    }
    ifaces_[i]->GetCoalListByFields(_return, fields);
    return;
  }

  void GetCoalListByFields1(std::vector<Coal> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalListByFields1(_return, field, value);
    }
    ifaces_[i]->GetCoalListByFields1(_return, field, value);
    return;
  }

  void GetCoalListByFields2(std::vector<Coal> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetCoalListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddComplexity(const Complexity& complexity) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddComplexity(complexity);
    }
    return ifaces_[i]->AddComplexity(complexity);
  }

  bool DeleteComplexity(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteComplexity(id);
    }
    return ifaces_[i]->DeleteComplexity(id);
  }

  bool UpdateComplexity(const Complexity& complexity) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateComplexity(complexity);
    }
    return ifaces_[i]->UpdateComplexity(complexity);
  }

  void GetComplexityById(Complexity& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetComplexityById(_return, id);
    }
    ifaces_[i]->GetComplexityById(_return, id);
    return;
  }

  void GetComplexityByForeignKey(Complexity& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetComplexityByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetComplexityByForeignKey(_return, fkey, id);
    return;
  }

  void GetComplexityList(std::vector<Complexity> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetComplexityList(_return);
    }
    ifaces_[i]->GetComplexityList(_return);
    return;
  }

  void GetComplexityIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetComplexityIds(_return);
    }
    ifaces_[i]->GetComplexityIds(_return);
    return;
  }

  void GetComplexityNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetComplexityNames(_return);
    }
    ifaces_[i]->GetComplexityNames(_return);
    return;
  }

  void AddMoreComplexity(const std::vector<Complexity> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreComplexity(objs);
    }
    ifaces_[i]->AddMoreComplexity(objs);
  }

  void DeleteMoreComplexity(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreComplexity(obj_ids);
    }
    ifaces_[i]->DeleteMoreComplexity(obj_ids);
  }

  void GetComplexityByFields(Complexity& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetComplexityByFields(_return, fields);
    }
    ifaces_[i]->GetComplexityByFields(_return, fields);
    return;
  }

  void GetComplexityByFields1(Complexity& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetComplexityByFields1(_return, field, value);
    }
    ifaces_[i]->GetComplexityByFields1(_return, field, value);
    return;
  }

  void GetComplexityByFields2(Complexity& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetComplexityByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetComplexityByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetComplexityListByFields(std::vector<Complexity> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetComplexityListByFields(_return, fields);
    }
    ifaces_[i]->GetComplexityListByFields(_return, fields);
    return;
  }

  void GetComplexityListByFields1(std::vector<Complexity> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetComplexityListByFields1(_return, field, value);
    }
    ifaces_[i]->GetComplexityListByFields1(_return, field, value);
    return;
  }

  void GetComplexityListByFields2(std::vector<Complexity> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetComplexityListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetComplexityListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& design_drilling_surf_technology) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddDesignDrillingSurfTechnology(design_drilling_surf_technology);
    }
    return ifaces_[i]->AddDesignDrillingSurfTechnology(design_drilling_surf_technology);
  }

  bool DeleteDesignDrillingSurfTechnology(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteDesignDrillingSurfTechnology(id);
    }
    return ifaces_[i]->DeleteDesignDrillingSurfTechnology(id);
  }

  bool UpdateDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& design_drilling_surf_technology) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateDesignDrillingSurfTechnology(design_drilling_surf_technology);
    }
    return ifaces_[i]->UpdateDesignDrillingSurfTechnology(design_drilling_surf_technology);
  }

  void GetDesignDrillingSurfTechnologyById(DesignDrillingSurfTechnology& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignDrillingSurfTechnologyById(_return, id);
    }
    ifaces_[i]->GetDesignDrillingSurfTechnologyById(_return, id);
    return;
  }

  void GetDesignDrillingSurfTechnologyByForeignKey(DesignDrillingSurfTechnology& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignDrillingSurfTechnologyByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetDesignDrillingSurfTechnologyByForeignKey(_return, fkey, id);
    return;
  }

  void GetDesignDrillingSurfTechnologyList(std::vector<DesignDrillingSurfTechnology> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignDrillingSurfTechnologyList(_return);
    }
    ifaces_[i]->GetDesignDrillingSurfTechnologyList(_return);
    return;
  }

  void GetDesignDrillingSurfTechnologyIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignDrillingSurfTechnologyIds(_return);
    }
    ifaces_[i]->GetDesignDrillingSurfTechnologyIds(_return);
    return;
  }

  void GetDesignDrillingSurfTechnologyNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignDrillingSurfTechnologyNames(_return);
    }
    ifaces_[i]->GetDesignDrillingSurfTechnologyNames(_return);
    return;
  }

  void AddMoreDesignDrillingSurfTechnology(const std::vector<DesignDrillingSurfTechnology> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreDesignDrillingSurfTechnology(objs);
    }
    ifaces_[i]->AddMoreDesignDrillingSurfTechnology(objs);
  }

  void DeleteMoreDesignDrillingSurfTechnology(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreDesignDrillingSurfTechnology(obj_ids);
    }
    ifaces_[i]->DeleteMoreDesignDrillingSurfTechnology(obj_ids);
  }

  void GetDesignDrillingSurfTechnologyByFields(DesignDrillingSurfTechnology& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignDrillingSurfTechnologyByFields(_return, fields);
    }
    ifaces_[i]->GetDesignDrillingSurfTechnologyByFields(_return, fields);
    return;
  }

  void GetDesignDrillingSurfTechnologyByFields1(DesignDrillingSurfTechnology& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignDrillingSurfTechnologyByFields1(_return, field, value);
    }
    ifaces_[i]->GetDesignDrillingSurfTechnologyByFields1(_return, field, value);
    return;
  }

  void GetDesignDrillingSurfTechnologyByFields2(DesignDrillingSurfTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignDrillingSurfTechnologyByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDesignDrillingSurfTechnologyByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetDesignDrillingSurfTechnologyListByFields(std::vector<DesignDrillingSurfTechnology> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignDrillingSurfTechnologyListByFields(_return, fields);
    }
    ifaces_[i]->GetDesignDrillingSurfTechnologyListByFields(_return, fields);
    return;
  }

  void GetDesignDrillingSurfTechnologyListByFields1(std::vector<DesignDrillingSurfTechnology> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignDrillingSurfTechnologyListByFields1(_return, field, value);
    }
    ifaces_[i]->GetDesignDrillingSurfTechnologyListByFields1(_return, field, value);
    return;
  }

  void GetDesignDrillingSurfTechnologyListByFields2(std::vector<DesignDrillingSurfTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignDrillingSurfTechnologyListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDesignDrillingSurfTechnologyListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddDesignGoafTechnology(const DesignGoafTechnology& design_goaf_technology) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddDesignGoafTechnology(design_goaf_technology);
    }
    return ifaces_[i]->AddDesignGoafTechnology(design_goaf_technology);
  }

  bool DeleteDesignGoafTechnology(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteDesignGoafTechnology(id);
    }
    return ifaces_[i]->DeleteDesignGoafTechnology(id);
  }

  bool UpdateDesignGoafTechnology(const DesignGoafTechnology& design_goaf_technology) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateDesignGoafTechnology(design_goaf_technology);
    }
    return ifaces_[i]->UpdateDesignGoafTechnology(design_goaf_technology);
  }

  void GetDesignGoafTechnologyById(DesignGoafTechnology& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignGoafTechnologyById(_return, id);
    }
    ifaces_[i]->GetDesignGoafTechnologyById(_return, id);
    return;
  }

  void GetDesignGoafTechnologyByForeignKey(DesignGoafTechnology& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignGoafTechnologyByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetDesignGoafTechnologyByForeignKey(_return, fkey, id);
    return;
  }

  void GetDesignGoafTechnologyList(std::vector<DesignGoafTechnology> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignGoafTechnologyList(_return);
    }
    ifaces_[i]->GetDesignGoafTechnologyList(_return);
    return;
  }

  void GetDesignGoafTechnologyIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignGoafTechnologyIds(_return);
    }
    ifaces_[i]->GetDesignGoafTechnologyIds(_return);
    return;
  }

  void GetDesignGoafTechnologyNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignGoafTechnologyNames(_return);
    }
    ifaces_[i]->GetDesignGoafTechnologyNames(_return);
    return;
  }

  void AddMoreDesignGoafTechnology(const std::vector<DesignGoafTechnology> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreDesignGoafTechnology(objs);
    }
    ifaces_[i]->AddMoreDesignGoafTechnology(objs);
  }

  void DeleteMoreDesignGoafTechnology(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreDesignGoafTechnology(obj_ids);
    }
    ifaces_[i]->DeleteMoreDesignGoafTechnology(obj_ids);
  }

  void GetDesignGoafTechnologyByFields(DesignGoafTechnology& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignGoafTechnologyByFields(_return, fields);
    }
    ifaces_[i]->GetDesignGoafTechnologyByFields(_return, fields);
    return;
  }

  void GetDesignGoafTechnologyByFields1(DesignGoafTechnology& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignGoafTechnologyByFields1(_return, field, value);
    }
    ifaces_[i]->GetDesignGoafTechnologyByFields1(_return, field, value);
    return;
  }

  void GetDesignGoafTechnologyByFields2(DesignGoafTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignGoafTechnologyByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDesignGoafTechnologyByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetDesignGoafTechnologyListByFields(std::vector<DesignGoafTechnology> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignGoafTechnologyListByFields(_return, fields);
    }
    ifaces_[i]->GetDesignGoafTechnologyListByFields(_return, fields);
    return;
  }

  void GetDesignGoafTechnologyListByFields1(std::vector<DesignGoafTechnology> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignGoafTechnologyListByFields1(_return, field, value);
    }
    ifaces_[i]->GetDesignGoafTechnologyListByFields1(_return, field, value);
    return;
  }

  void GetDesignGoafTechnologyListByFields2(std::vector<DesignGoafTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignGoafTechnologyListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDesignGoafTechnologyListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddDesignPore(const DesignPore& design_pore) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddDesignPore(design_pore);
    }
    return ifaces_[i]->AddDesignPore(design_pore);
  }

  bool DeleteDesignPore(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteDesignPore(id);
    }
    return ifaces_[i]->DeleteDesignPore(id);
  }

  bool UpdateDesignPore(const DesignPore& design_pore) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateDesignPore(design_pore);
    }
    return ifaces_[i]->UpdateDesignPore(design_pore);
  }

  void GetDesignPoreById(DesignPore& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignPoreById(_return, id);
    }
    ifaces_[i]->GetDesignPoreById(_return, id);
    return;
  }

  void GetDesignPoreByForeignKey(DesignPore& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignPoreByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetDesignPoreByForeignKey(_return, fkey, id);
    return;
  }

  void GetDesignPoreList(std::vector<DesignPore> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignPoreList(_return);
    }
    ifaces_[i]->GetDesignPoreList(_return);
    return;
  }

  void GetDesignPoreIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignPoreIds(_return);
    }
    ifaces_[i]->GetDesignPoreIds(_return);
    return;
  }

  void GetDesignPoreNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignPoreNames(_return);
    }
    ifaces_[i]->GetDesignPoreNames(_return);
    return;
  }

  void AddMoreDesignPore(const std::vector<DesignPore> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreDesignPore(objs);
    }
    ifaces_[i]->AddMoreDesignPore(objs);
  }

  void DeleteMoreDesignPore(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreDesignPore(obj_ids);
    }
    ifaces_[i]->DeleteMoreDesignPore(obj_ids);
  }

  void GetDesignPoreByFields(DesignPore& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignPoreByFields(_return, fields);
    }
    ifaces_[i]->GetDesignPoreByFields(_return, fields);
    return;
  }

  void GetDesignPoreByFields1(DesignPore& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignPoreByFields1(_return, field, value);
    }
    ifaces_[i]->GetDesignPoreByFields1(_return, field, value);
    return;
  }

  void GetDesignPoreByFields2(DesignPore& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignPoreByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDesignPoreByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetDesignPoreListByFields(std::vector<DesignPore> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignPoreListByFields(_return, fields);
    }
    ifaces_[i]->GetDesignPoreListByFields(_return, fields);
    return;
  }

  void GetDesignPoreListByFields1(std::vector<DesignPore> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignPoreListByFields1(_return, field, value);
    }
    ifaces_[i]->GetDesignPoreListByFields1(_return, field, value);
    return;
  }

  void GetDesignPoreListByFields2(std::vector<DesignPore> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignPoreListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDesignPoreListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddDesignSite(const DesignSite& design_site) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddDesignSite(design_site);
    }
    return ifaces_[i]->AddDesignSite(design_site);
  }

  bool DeleteDesignSite(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteDesignSite(id);
    }
    return ifaces_[i]->DeleteDesignSite(id);
  }

  bool UpdateDesignSite(const DesignSite& design_site) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateDesignSite(design_site);
    }
    return ifaces_[i]->UpdateDesignSite(design_site);
  }

  void GetDesignSiteById(DesignSite& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignSiteById(_return, id);
    }
    ifaces_[i]->GetDesignSiteById(_return, id);
    return;
  }

  void GetDesignSiteByForeignKey(DesignSite& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignSiteByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetDesignSiteByForeignKey(_return, fkey, id);
    return;
  }

  void GetDesignSiteList(std::vector<DesignSite> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignSiteList(_return);
    }
    ifaces_[i]->GetDesignSiteList(_return);
    return;
  }

  void GetDesignSiteIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignSiteIds(_return);
    }
    ifaces_[i]->GetDesignSiteIds(_return);
    return;
  }

  void GetDesignSiteNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignSiteNames(_return);
    }
    ifaces_[i]->GetDesignSiteNames(_return);
    return;
  }

  void AddMoreDesignSite(const std::vector<DesignSite> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreDesignSite(objs);
    }
    ifaces_[i]->AddMoreDesignSite(objs);
  }

  void DeleteMoreDesignSite(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreDesignSite(obj_ids);
    }
    ifaces_[i]->DeleteMoreDesignSite(obj_ids);
  }

  void GetDesignSiteByFields(DesignSite& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignSiteByFields(_return, fields);
    }
    ifaces_[i]->GetDesignSiteByFields(_return, fields);
    return;
  }

  void GetDesignSiteByFields1(DesignSite& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignSiteByFields1(_return, field, value);
    }
    ifaces_[i]->GetDesignSiteByFields1(_return, field, value);
    return;
  }

  void GetDesignSiteByFields2(DesignSite& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignSiteByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDesignSiteByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetDesignSiteListByFields(std::vector<DesignSite> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignSiteListByFields(_return, fields);
    }
    ifaces_[i]->GetDesignSiteListByFields(_return, fields);
    return;
  }

  void GetDesignSiteListByFields1(std::vector<DesignSite> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignSiteListByFields1(_return, field, value);
    }
    ifaces_[i]->GetDesignSiteListByFields1(_return, field, value);
    return;
  }

  void GetDesignSiteListByFields2(std::vector<DesignSite> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignSiteListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDesignSiteListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddDesignTechnology(const DesignTechnology& design_technology) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddDesignTechnology(design_technology);
    }
    return ifaces_[i]->AddDesignTechnology(design_technology);
  }

  bool DeleteDesignTechnology(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteDesignTechnology(id);
    }
    return ifaces_[i]->DeleteDesignTechnology(id);
  }

  bool UpdateDesignTechnology(const DesignTechnology& design_technology) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateDesignTechnology(design_technology);
    }
    return ifaces_[i]->UpdateDesignTechnology(design_technology);
  }

  void GetDesignTechnologyById(DesignTechnology& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignTechnologyById(_return, id);
    }
    ifaces_[i]->GetDesignTechnologyById(_return, id);
    return;
  }

  void GetDesignTechnologyByForeignKey(DesignTechnology& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignTechnologyByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetDesignTechnologyByForeignKey(_return, fkey, id);
    return;
  }

  void GetDesignTechnologyList(std::vector<DesignTechnology> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignTechnologyList(_return);
    }
    ifaces_[i]->GetDesignTechnologyList(_return);
    return;
  }

  void GetDesignTechnologyIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignTechnologyIds(_return);
    }
    ifaces_[i]->GetDesignTechnologyIds(_return);
    return;
  }

  void GetDesignTechnologyNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignTechnologyNames(_return);
    }
    ifaces_[i]->GetDesignTechnologyNames(_return);
    return;
  }

  void AddMoreDesignTechnology(const std::vector<DesignTechnology> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreDesignTechnology(objs);
    }
    ifaces_[i]->AddMoreDesignTechnology(objs);
  }

  void DeleteMoreDesignTechnology(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreDesignTechnology(obj_ids);
    }
    ifaces_[i]->DeleteMoreDesignTechnology(obj_ids);
  }

  void GetDesignTechnologyByFields(DesignTechnology& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignTechnologyByFields(_return, fields);
    }
    ifaces_[i]->GetDesignTechnologyByFields(_return, fields);
    return;
  }

  void GetDesignTechnologyByFields1(DesignTechnology& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignTechnologyByFields1(_return, field, value);
    }
    ifaces_[i]->GetDesignTechnologyByFields1(_return, field, value);
    return;
  }

  void GetDesignTechnologyByFields2(DesignTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignTechnologyByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDesignTechnologyByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetDesignTechnologyListByFields(std::vector<DesignTechnology> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignTechnologyListByFields(_return, fields);
    }
    ifaces_[i]->GetDesignTechnologyListByFields(_return, fields);
    return;
  }

  void GetDesignTechnologyListByFields1(std::vector<DesignTechnology> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignTechnologyListByFields1(_return, field, value);
    }
    ifaces_[i]->GetDesignTechnologyListByFields1(_return, field, value);
    return;
  }

  void GetDesignTechnologyListByFields2(std::vector<DesignTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignTechnologyListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDesignTechnologyListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddDesignWorkSurfTechnology(const DesignWorkSurfTechnology& design_work_surf_technology) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddDesignWorkSurfTechnology(design_work_surf_technology);
    }
    return ifaces_[i]->AddDesignWorkSurfTechnology(design_work_surf_technology);
  }

  bool DeleteDesignWorkSurfTechnology(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteDesignWorkSurfTechnology(id);
    }
    return ifaces_[i]->DeleteDesignWorkSurfTechnology(id);
  }

  bool UpdateDesignWorkSurfTechnology(const DesignWorkSurfTechnology& design_work_surf_technology) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateDesignWorkSurfTechnology(design_work_surf_technology);
    }
    return ifaces_[i]->UpdateDesignWorkSurfTechnology(design_work_surf_technology);
  }

  void GetDesignWorkSurfTechnologyById(DesignWorkSurfTechnology& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignWorkSurfTechnologyById(_return, id);
    }
    ifaces_[i]->GetDesignWorkSurfTechnologyById(_return, id);
    return;
  }

  void GetDesignWorkSurfTechnologyByForeignKey(DesignWorkSurfTechnology& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignWorkSurfTechnologyByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetDesignWorkSurfTechnologyByForeignKey(_return, fkey, id);
    return;
  }

  void GetDesignWorkSurfTechnologyList(std::vector<DesignWorkSurfTechnology> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignWorkSurfTechnologyList(_return);
    }
    ifaces_[i]->GetDesignWorkSurfTechnologyList(_return);
    return;
  }

  void GetDesignWorkSurfTechnologyIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignWorkSurfTechnologyIds(_return);
    }
    ifaces_[i]->GetDesignWorkSurfTechnologyIds(_return);
    return;
  }

  void GetDesignWorkSurfTechnologyNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignWorkSurfTechnologyNames(_return);
    }
    ifaces_[i]->GetDesignWorkSurfTechnologyNames(_return);
    return;
  }

  void AddMoreDesignWorkSurfTechnology(const std::vector<DesignWorkSurfTechnology> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreDesignWorkSurfTechnology(objs);
    }
    ifaces_[i]->AddMoreDesignWorkSurfTechnology(objs);
  }

  void DeleteMoreDesignWorkSurfTechnology(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreDesignWorkSurfTechnology(obj_ids);
    }
    ifaces_[i]->DeleteMoreDesignWorkSurfTechnology(obj_ids);
  }

  void GetDesignWorkSurfTechnologyByFields(DesignWorkSurfTechnology& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignWorkSurfTechnologyByFields(_return, fields);
    }
    ifaces_[i]->GetDesignWorkSurfTechnologyByFields(_return, fields);
    return;
  }

  void GetDesignWorkSurfTechnologyByFields1(DesignWorkSurfTechnology& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignWorkSurfTechnologyByFields1(_return, field, value);
    }
    ifaces_[i]->GetDesignWorkSurfTechnologyByFields1(_return, field, value);
    return;
  }

  void GetDesignWorkSurfTechnologyByFields2(DesignWorkSurfTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignWorkSurfTechnologyByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDesignWorkSurfTechnologyByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetDesignWorkSurfTechnologyListByFields(std::vector<DesignWorkSurfTechnology> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignWorkSurfTechnologyListByFields(_return, fields);
    }
    ifaces_[i]->GetDesignWorkSurfTechnologyListByFields(_return, fields);
    return;
  }

  void GetDesignWorkSurfTechnologyListByFields1(std::vector<DesignWorkSurfTechnology> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignWorkSurfTechnologyListByFields1(_return, field, value);
    }
    ifaces_[i]->GetDesignWorkSurfTechnologyListByFields1(_return, field, value);
    return;
  }

  void GetDesignWorkSurfTechnologyListByFields2(std::vector<DesignWorkSurfTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDesignWorkSurfTechnologyListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDesignWorkSurfTechnologyListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddDrillingRadiusParam(const DrillingRadiusParam& drilling_radius_param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddDrillingRadiusParam(drilling_radius_param);
    }
    return ifaces_[i]->AddDrillingRadiusParam(drilling_radius_param);
  }

  bool DeleteDrillingRadiusParam(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteDrillingRadiusParam(id);
    }
    return ifaces_[i]->DeleteDrillingRadiusParam(id);
  }

  bool UpdateDrillingRadiusParam(const DrillingRadiusParam& drilling_radius_param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateDrillingRadiusParam(drilling_radius_param);
    }
    return ifaces_[i]->UpdateDrillingRadiusParam(drilling_radius_param);
  }

  void GetDrillingRadiusParamById(DrillingRadiusParam& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingRadiusParamById(_return, id);
    }
    ifaces_[i]->GetDrillingRadiusParamById(_return, id);
    return;
  }

  void GetDrillingRadiusParamByForeignKey(DrillingRadiusParam& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingRadiusParamByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetDrillingRadiusParamByForeignKey(_return, fkey, id);
    return;
  }

  void GetDrillingRadiusParamList(std::vector<DrillingRadiusParam> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingRadiusParamList(_return);
    }
    ifaces_[i]->GetDrillingRadiusParamList(_return);
    return;
  }

  void GetDrillingRadiusParamIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingRadiusParamIds(_return);
    }
    ifaces_[i]->GetDrillingRadiusParamIds(_return);
    return;
  }

  void GetDrillingRadiusParamNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingRadiusParamNames(_return);
    }
    ifaces_[i]->GetDrillingRadiusParamNames(_return);
    return;
  }

  void AddMoreDrillingRadiusParam(const std::vector<DrillingRadiusParam> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreDrillingRadiusParam(objs);
    }
    ifaces_[i]->AddMoreDrillingRadiusParam(objs);
  }

  void DeleteMoreDrillingRadiusParam(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreDrillingRadiusParam(obj_ids);
    }
    ifaces_[i]->DeleteMoreDrillingRadiusParam(obj_ids);
  }

  void GetDrillingRadiusParamByFields(DrillingRadiusParam& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingRadiusParamByFields(_return, fields);
    }
    ifaces_[i]->GetDrillingRadiusParamByFields(_return, fields);
    return;
  }

  void GetDrillingRadiusParamByFields1(DrillingRadiusParam& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingRadiusParamByFields1(_return, field, value);
    }
    ifaces_[i]->GetDrillingRadiusParamByFields1(_return, field, value);
    return;
  }

  void GetDrillingRadiusParamByFields2(DrillingRadiusParam& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingRadiusParamByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDrillingRadiusParamByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetDrillingRadiusParamListByFields(std::vector<DrillingRadiusParam> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingRadiusParamListByFields(_return, fields);
    }
    ifaces_[i]->GetDrillingRadiusParamListByFields(_return, fields);
    return;
  }

  void GetDrillingRadiusParamListByFields1(std::vector<DrillingRadiusParam> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingRadiusParamListByFields1(_return, field, value);
    }
    ifaces_[i]->GetDrillingRadiusParamListByFields1(_return, field, value);
    return;
  }

  void GetDrillingRadiusParamListByFields2(std::vector<DrillingRadiusParam> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingRadiusParamListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDrillingRadiusParamListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddDrillingSurf(const DrillingSurf& drilling_surf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddDrillingSurf(drilling_surf);
    }
    return ifaces_[i]->AddDrillingSurf(drilling_surf);
  }

  bool DeleteDrillingSurf(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteDrillingSurf(id);
    }
    return ifaces_[i]->DeleteDrillingSurf(id);
  }

  bool UpdateDrillingSurf(const DrillingSurf& drilling_surf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateDrillingSurf(drilling_surf);
    }
    return ifaces_[i]->UpdateDrillingSurf(drilling_surf);
  }

  void GetDrillingSurfById(DrillingSurf& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfById(_return, id);
    }
    ifaces_[i]->GetDrillingSurfById(_return, id);
    return;
  }

  void GetDrillingSurfByForeignKey(DrillingSurf& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetDrillingSurfByForeignKey(_return, fkey, id);
    return;
  }

  void GetDrillingSurfList(std::vector<DrillingSurf> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfList(_return);
    }
    ifaces_[i]->GetDrillingSurfList(_return);
    return;
  }

  void GetDrillingSurfIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfIds(_return);
    }
    ifaces_[i]->GetDrillingSurfIds(_return);
    return;
  }

  void GetDrillingSurfNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfNames(_return);
    }
    ifaces_[i]->GetDrillingSurfNames(_return);
    return;
  }

  void AddMoreDrillingSurf(const std::vector<DrillingSurf> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreDrillingSurf(objs);
    }
    ifaces_[i]->AddMoreDrillingSurf(objs);
  }

  void DeleteMoreDrillingSurf(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreDrillingSurf(obj_ids);
    }
    ifaces_[i]->DeleteMoreDrillingSurf(obj_ids);
  }

  void GetDrillingSurfByFields(DrillingSurf& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfByFields(_return, fields);
    }
    ifaces_[i]->GetDrillingSurfByFields(_return, fields);
    return;
  }

  void GetDrillingSurfByFields1(DrillingSurf& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfByFields1(_return, field, value);
    }
    ifaces_[i]->GetDrillingSurfByFields1(_return, field, value);
    return;
  }

  void GetDrillingSurfByFields2(DrillingSurf& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDrillingSurfByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetDrillingSurfListByFields(std::vector<DrillingSurf> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfListByFields(_return, fields);
    }
    ifaces_[i]->GetDrillingSurfListByFields(_return, fields);
    return;
  }

  void GetDrillingSurfListByFields1(std::vector<DrillingSurf> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfListByFields1(_return, field, value);
    }
    ifaces_[i]->GetDrillingSurfListByFields1(_return, field, value);
    return;
  }

  void GetDrillingSurfListByFields2(std::vector<DrillingSurf> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetDrillingSurfListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddEvalUnit(const EvalUnit& eval_unit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddEvalUnit(eval_unit);
    }
    return ifaces_[i]->AddEvalUnit(eval_unit);
  }

  bool DeleteEvalUnit(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteEvalUnit(id);
    }
    return ifaces_[i]->DeleteEvalUnit(id);
  }

  bool UpdateEvalUnit(const EvalUnit& eval_unit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateEvalUnit(eval_unit);
    }
    return ifaces_[i]->UpdateEvalUnit(eval_unit);
  }

  void GetEvalUnitById(EvalUnit& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEvalUnitById(_return, id);
    }
    ifaces_[i]->GetEvalUnitById(_return, id);
    return;
  }

  void GetEvalUnitByForeignKey(EvalUnit& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEvalUnitByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetEvalUnitByForeignKey(_return, fkey, id);
    return;
  }

  void GetEvalUnitList(std::vector<EvalUnit> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEvalUnitList(_return);
    }
    ifaces_[i]->GetEvalUnitList(_return);
    return;
  }

  void GetEvalUnitIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEvalUnitIds(_return);
    }
    ifaces_[i]->GetEvalUnitIds(_return);
    return;
  }

  void GetEvalUnitNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEvalUnitNames(_return);
    }
    ifaces_[i]->GetEvalUnitNames(_return);
    return;
  }

  void AddMoreEvalUnit(const std::vector<EvalUnit> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreEvalUnit(objs);
    }
    ifaces_[i]->AddMoreEvalUnit(objs);
  }

  void DeleteMoreEvalUnit(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreEvalUnit(obj_ids);
    }
    ifaces_[i]->DeleteMoreEvalUnit(obj_ids);
  }

  void GetEvalUnitByFields(EvalUnit& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEvalUnitByFields(_return, fields);
    }
    ifaces_[i]->GetEvalUnitByFields(_return, fields);
    return;
  }

  void GetEvalUnitByFields1(EvalUnit& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEvalUnitByFields1(_return, field, value);
    }
    ifaces_[i]->GetEvalUnitByFields1(_return, field, value);
    return;
  }

  void GetEvalUnitByFields2(EvalUnit& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEvalUnitByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetEvalUnitByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetEvalUnitListByFields(std::vector<EvalUnit> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEvalUnitListByFields(_return, fields);
    }
    ifaces_[i]->GetEvalUnitListByFields(_return, fields);
    return;
  }

  void GetEvalUnitListByFields1(std::vector<EvalUnit> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEvalUnitListByFields1(_return, field, value);
    }
    ifaces_[i]->GetEvalUnitListByFields1(_return, field, value);
    return;
  }

  void GetEvalUnitListByFields2(std::vector<EvalUnit> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEvalUnitListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetEvalUnitListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddHighDrillingPore(const HighDrillingPore& high_drilling_pore) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddHighDrillingPore(high_drilling_pore);
    }
    return ifaces_[i]->AddHighDrillingPore(high_drilling_pore);
  }

  bool DeleteHighDrillingPore(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteHighDrillingPore(id);
    }
    return ifaces_[i]->DeleteHighDrillingPore(id);
  }

  bool UpdateHighDrillingPore(const HighDrillingPore& high_drilling_pore) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateHighDrillingPore(high_drilling_pore);
    }
    return ifaces_[i]->UpdateHighDrillingPore(high_drilling_pore);
  }

  void GetHighDrillingPoreById(HighDrillingPore& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreById(_return, id);
    }
    ifaces_[i]->GetHighDrillingPoreById(_return, id);
    return;
  }

  void GetHighDrillingPoreByForeignKey(HighDrillingPore& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetHighDrillingPoreByForeignKey(_return, fkey, id);
    return;
  }

  void GetHighDrillingPoreList(std::vector<HighDrillingPore> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreList(_return);
    }
    ifaces_[i]->GetHighDrillingPoreList(_return);
    return;
  }

  void GetHighDrillingPoreIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreIds(_return);
    }
    ifaces_[i]->GetHighDrillingPoreIds(_return);
    return;
  }

  void GetHighDrillingPoreNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreNames(_return);
    }
    ifaces_[i]->GetHighDrillingPoreNames(_return);
    return;
  }

  void AddMoreHighDrillingPore(const std::vector<HighDrillingPore> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreHighDrillingPore(objs);
    }
    ifaces_[i]->AddMoreHighDrillingPore(objs);
  }

  void DeleteMoreHighDrillingPore(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreHighDrillingPore(obj_ids);
    }
    ifaces_[i]->DeleteMoreHighDrillingPore(obj_ids);
  }

  void GetHighDrillingPoreByFields(HighDrillingPore& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreByFields(_return, fields);
    }
    ifaces_[i]->GetHighDrillingPoreByFields(_return, fields);
    return;
  }

  void GetHighDrillingPoreByFields1(HighDrillingPore& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreByFields1(_return, field, value);
    }
    ifaces_[i]->GetHighDrillingPoreByFields1(_return, field, value);
    return;
  }

  void GetHighDrillingPoreByFields2(HighDrillingPore& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetHighDrillingPoreByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetHighDrillingPoreListByFields(std::vector<HighDrillingPore> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreListByFields(_return, fields);
    }
    ifaces_[i]->GetHighDrillingPoreListByFields(_return, fields);
    return;
  }

  void GetHighDrillingPoreListByFields1(std::vector<HighDrillingPore> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreListByFields1(_return, field, value);
    }
    ifaces_[i]->GetHighDrillingPoreListByFields1(_return, field, value);
    return;
  }

  void GetHighDrillingPoreListByFields2(std::vector<HighDrillingPore> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetHighDrillingPoreListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddHighDrillingPoreParam(const HighDrillingPoreParam& high_drilling_pore_param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddHighDrillingPoreParam(high_drilling_pore_param);
    }
    return ifaces_[i]->AddHighDrillingPoreParam(high_drilling_pore_param);
  }

  bool DeleteHighDrillingPoreParam(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteHighDrillingPoreParam(id);
    }
    return ifaces_[i]->DeleteHighDrillingPoreParam(id);
  }

  bool UpdateHighDrillingPoreParam(const HighDrillingPoreParam& high_drilling_pore_param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateHighDrillingPoreParam(high_drilling_pore_param);
    }
    return ifaces_[i]->UpdateHighDrillingPoreParam(high_drilling_pore_param);
  }

  void GetHighDrillingPoreParamById(HighDrillingPoreParam& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreParamById(_return, id);
    }
    ifaces_[i]->GetHighDrillingPoreParamById(_return, id);
    return;
  }

  void GetHighDrillingPoreParamByForeignKey(HighDrillingPoreParam& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreParamByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetHighDrillingPoreParamByForeignKey(_return, fkey, id);
    return;
  }

  void GetHighDrillingPoreParamList(std::vector<HighDrillingPoreParam> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreParamList(_return);
    }
    ifaces_[i]->GetHighDrillingPoreParamList(_return);
    return;
  }

  void GetHighDrillingPoreParamIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreParamIds(_return);
    }
    ifaces_[i]->GetHighDrillingPoreParamIds(_return);
    return;
  }

  void GetHighDrillingPoreParamNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreParamNames(_return);
    }
    ifaces_[i]->GetHighDrillingPoreParamNames(_return);
    return;
  }

  void AddMoreHighDrillingPoreParam(const std::vector<HighDrillingPoreParam> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreHighDrillingPoreParam(objs);
    }
    ifaces_[i]->AddMoreHighDrillingPoreParam(objs);
  }

  void DeleteMoreHighDrillingPoreParam(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreHighDrillingPoreParam(obj_ids);
    }
    ifaces_[i]->DeleteMoreHighDrillingPoreParam(obj_ids);
  }

  void GetHighDrillingPoreParamByFields(HighDrillingPoreParam& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreParamByFields(_return, fields);
    }
    ifaces_[i]->GetHighDrillingPoreParamByFields(_return, fields);
    return;
  }

  void GetHighDrillingPoreParamByFields1(HighDrillingPoreParam& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreParamByFields1(_return, field, value);
    }
    ifaces_[i]->GetHighDrillingPoreParamByFields1(_return, field, value);
    return;
  }

  void GetHighDrillingPoreParamByFields2(HighDrillingPoreParam& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreParamByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetHighDrillingPoreParamByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetHighDrillingPoreParamListByFields(std::vector<HighDrillingPoreParam> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreParamListByFields(_return, fields);
    }
    ifaces_[i]->GetHighDrillingPoreParamListByFields(_return, fields);
    return;
  }

  void GetHighDrillingPoreParamListByFields1(std::vector<HighDrillingPoreParam> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreParamListByFields1(_return, field, value);
    }
    ifaces_[i]->GetHighDrillingPoreParamListByFields1(_return, field, value);
    return;
  }

  void GetHighDrillingPoreParamListByFields2(std::vector<HighDrillingPoreParam> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingPoreParamListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetHighDrillingPoreParamListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddHighDrillingSiteParam(const HighDrillingSiteParam& high_drilling_site_param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddHighDrillingSiteParam(high_drilling_site_param);
    }
    return ifaces_[i]->AddHighDrillingSiteParam(high_drilling_site_param);
  }

  bool DeleteHighDrillingSiteParam(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteHighDrillingSiteParam(id);
    }
    return ifaces_[i]->DeleteHighDrillingSiteParam(id);
  }

  bool UpdateHighDrillingSiteParam(const HighDrillingSiteParam& high_drilling_site_param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateHighDrillingSiteParam(high_drilling_site_param);
    }
    return ifaces_[i]->UpdateHighDrillingSiteParam(high_drilling_site_param);
  }

  void GetHighDrillingSiteParamById(HighDrillingSiteParam& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingSiteParamById(_return, id);
    }
    ifaces_[i]->GetHighDrillingSiteParamById(_return, id);
    return;
  }

  void GetHighDrillingSiteParamByForeignKey(HighDrillingSiteParam& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingSiteParamByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetHighDrillingSiteParamByForeignKey(_return, fkey, id);
    return;
  }

  void GetHighDrillingSiteParamList(std::vector<HighDrillingSiteParam> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingSiteParamList(_return);
    }
    ifaces_[i]->GetHighDrillingSiteParamList(_return);
    return;
  }

  void GetHighDrillingSiteParamIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingSiteParamIds(_return);
    }
    ifaces_[i]->GetHighDrillingSiteParamIds(_return);
    return;
  }

  void GetHighDrillingSiteParamNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingSiteParamNames(_return);
    }
    ifaces_[i]->GetHighDrillingSiteParamNames(_return);
    return;
  }

  void AddMoreHighDrillingSiteParam(const std::vector<HighDrillingSiteParam> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreHighDrillingSiteParam(objs);
    }
    ifaces_[i]->AddMoreHighDrillingSiteParam(objs);
  }

  void DeleteMoreHighDrillingSiteParam(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreHighDrillingSiteParam(obj_ids);
    }
    ifaces_[i]->DeleteMoreHighDrillingSiteParam(obj_ids);
  }

  void GetHighDrillingSiteParamByFields(HighDrillingSiteParam& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingSiteParamByFields(_return, fields);
    }
    ifaces_[i]->GetHighDrillingSiteParamByFields(_return, fields);
    return;
  }

  void GetHighDrillingSiteParamByFields1(HighDrillingSiteParam& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingSiteParamByFields1(_return, field, value);
    }
    ifaces_[i]->GetHighDrillingSiteParamByFields1(_return, field, value);
    return;
  }

  void GetHighDrillingSiteParamByFields2(HighDrillingSiteParam& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingSiteParamByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetHighDrillingSiteParamByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetHighDrillingSiteParamListByFields(std::vector<HighDrillingSiteParam> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingSiteParamListByFields(_return, fields);
    }
    ifaces_[i]->GetHighDrillingSiteParamListByFields(_return, fields);
    return;
  }

  void GetHighDrillingSiteParamListByFields1(std::vector<HighDrillingSiteParam> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingSiteParamListByFields1(_return, field, value);
    }
    ifaces_[i]->GetHighDrillingSiteParamListByFields1(_return, field, value);
    return;
  }

  void GetHighDrillingSiteParamListByFields2(std::vector<HighDrillingSiteParam> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingSiteParamListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetHighDrillingSiteParamListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddHighDrillingTunnel(const HighDrillingTunnel& high_drilling_tunnel) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddHighDrillingTunnel(high_drilling_tunnel);
    }
    return ifaces_[i]->AddHighDrillingTunnel(high_drilling_tunnel);
  }

  bool DeleteHighDrillingTunnel(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteHighDrillingTunnel(id);
    }
    return ifaces_[i]->DeleteHighDrillingTunnel(id);
  }

  bool UpdateHighDrillingTunnel(const HighDrillingTunnel& high_drilling_tunnel) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateHighDrillingTunnel(high_drilling_tunnel);
    }
    return ifaces_[i]->UpdateHighDrillingTunnel(high_drilling_tunnel);
  }

  void GetHighDrillingTunnelById(HighDrillingTunnel& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingTunnelById(_return, id);
    }
    ifaces_[i]->GetHighDrillingTunnelById(_return, id);
    return;
  }

  void GetHighDrillingTunnelByForeignKey(HighDrillingTunnel& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingTunnelByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetHighDrillingTunnelByForeignKey(_return, fkey, id);
    return;
  }

  void GetHighDrillingTunnelList(std::vector<HighDrillingTunnel> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingTunnelList(_return);
    }
    ifaces_[i]->GetHighDrillingTunnelList(_return);
    return;
  }

  void GetHighDrillingTunnelIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingTunnelIds(_return);
    }
    ifaces_[i]->GetHighDrillingTunnelIds(_return);
    return;
  }

  void GetHighDrillingTunnelNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingTunnelNames(_return);
    }
    ifaces_[i]->GetHighDrillingTunnelNames(_return);
    return;
  }

  void AddMoreHighDrillingTunnel(const std::vector<HighDrillingTunnel> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreHighDrillingTunnel(objs);
    }
    ifaces_[i]->AddMoreHighDrillingTunnel(objs);
  }

  void DeleteMoreHighDrillingTunnel(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreHighDrillingTunnel(obj_ids);
    }
    ifaces_[i]->DeleteMoreHighDrillingTunnel(obj_ids);
  }

  void GetHighDrillingTunnelByFields(HighDrillingTunnel& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingTunnelByFields(_return, fields);
    }
    ifaces_[i]->GetHighDrillingTunnelByFields(_return, fields);
    return;
  }

  void GetHighDrillingTunnelByFields1(HighDrillingTunnel& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingTunnelByFields1(_return, field, value);
    }
    ifaces_[i]->GetHighDrillingTunnelByFields1(_return, field, value);
    return;
  }

  void GetHighDrillingTunnelByFields2(HighDrillingTunnel& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingTunnelByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetHighDrillingTunnelByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetHighDrillingTunnelListByFields(std::vector<HighDrillingTunnel> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingTunnelListByFields(_return, fields);
    }
    ifaces_[i]->GetHighDrillingTunnelListByFields(_return, fields);
    return;
  }

  void GetHighDrillingTunnelListByFields1(std::vector<HighDrillingTunnel> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingTunnelListByFields1(_return, field, value);
    }
    ifaces_[i]->GetHighDrillingTunnelListByFields1(_return, field, value);
    return;
  }

  void GetHighDrillingTunnelListByFields2(std::vector<HighDrillingTunnel> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHighDrillingTunnelListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetHighDrillingTunnelListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddHydrGeo(const HydrGeo& hydr_geo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddHydrGeo(hydr_geo);
    }
    return ifaces_[i]->AddHydrGeo(hydr_geo);
  }

  bool DeleteHydrGeo(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteHydrGeo(id);
    }
    return ifaces_[i]->DeleteHydrGeo(id);
  }

  bool UpdateHydrGeo(const HydrGeo& hydr_geo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateHydrGeo(hydr_geo);
    }
    return ifaces_[i]->UpdateHydrGeo(hydr_geo);
  }

  void GetHydrGeoById(HydrGeo& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHydrGeoById(_return, id);
    }
    ifaces_[i]->GetHydrGeoById(_return, id);
    return;
  }

  void GetHydrGeoByForeignKey(HydrGeo& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHydrGeoByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetHydrGeoByForeignKey(_return, fkey, id);
    return;
  }

  void GetHydrGeoList(std::vector<HydrGeo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHydrGeoList(_return);
    }
    ifaces_[i]->GetHydrGeoList(_return);
    return;
  }

  void GetHydrGeoIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHydrGeoIds(_return);
    }
    ifaces_[i]->GetHydrGeoIds(_return);
    return;
  }

  void GetHydrGeoNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHydrGeoNames(_return);
    }
    ifaces_[i]->GetHydrGeoNames(_return);
    return;
  }

  void AddMoreHydrGeo(const std::vector<HydrGeo> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreHydrGeo(objs);
    }
    ifaces_[i]->AddMoreHydrGeo(objs);
  }

  void DeleteMoreHydrGeo(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreHydrGeo(obj_ids);
    }
    ifaces_[i]->DeleteMoreHydrGeo(obj_ids);
  }

  void GetHydrGeoByFields(HydrGeo& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHydrGeoByFields(_return, fields);
    }
    ifaces_[i]->GetHydrGeoByFields(_return, fields);
    return;
  }

  void GetHydrGeoByFields1(HydrGeo& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHydrGeoByFields1(_return, field, value);
    }
    ifaces_[i]->GetHydrGeoByFields1(_return, field, value);
    return;
  }

  void GetHydrGeoByFields2(HydrGeo& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHydrGeoByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetHydrGeoByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetHydrGeoListByFields(std::vector<HydrGeo> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHydrGeoListByFields(_return, fields);
    }
    ifaces_[i]->GetHydrGeoListByFields(_return, fields);
    return;
  }

  void GetHydrGeoListByFields1(std::vector<HydrGeo> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHydrGeoListByFields1(_return, field, value);
    }
    ifaces_[i]->GetHydrGeoListByFields1(_return, field, value);
    return;
  }

  void GetHydrGeoListByFields2(std::vector<HydrGeo> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHydrGeoListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetHydrGeoListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddMine(const Mine& mine) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMine(mine);
    }
    return ifaces_[i]->AddMine(mine);
  }

  bool DeleteMine(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMine(id);
    }
    return ifaces_[i]->DeleteMine(id);
  }

  bool UpdateMine(const Mine& mine) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateMine(mine);
    }
    return ifaces_[i]->UpdateMine(mine);
  }

  void GetMineById(Mine& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineById(_return, id);
    }
    ifaces_[i]->GetMineById(_return, id);
    return;
  }

  void GetMineByForeignKey(Mine& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetMineByForeignKey(_return, fkey, id);
    return;
  }

  void GetMineList(std::vector<Mine> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineList(_return);
    }
    ifaces_[i]->GetMineList(_return);
    return;
  }

  void GetMineIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineIds(_return);
    }
    ifaces_[i]->GetMineIds(_return);
    return;
  }

  void GetMineNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineNames(_return);
    }
    ifaces_[i]->GetMineNames(_return);
    return;
  }

  void AddMoreMine(const std::vector<Mine> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreMine(objs);
    }
    ifaces_[i]->AddMoreMine(objs);
  }

  void DeleteMoreMine(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreMine(obj_ids);
    }
    ifaces_[i]->DeleteMoreMine(obj_ids);
  }

  void GetMineByFields(Mine& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineByFields(_return, fields);
    }
    ifaces_[i]->GetMineByFields(_return, fields);
    return;
  }

  void GetMineByFields1(Mine& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineByFields1(_return, field, value);
    }
    ifaces_[i]->GetMineByFields1(_return, field, value);
    return;
  }

  void GetMineByFields2(Mine& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetMineByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetMineListByFields(std::vector<Mine> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineListByFields(_return, fields);
    }
    ifaces_[i]->GetMineListByFields(_return, fields);
    return;
  }

  void GetMineListByFields1(std::vector<Mine> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineListByFields1(_return, field, value);
    }
    ifaces_[i]->GetMineListByFields1(_return, field, value);
    return;
  }

  void GetMineListByFields2(std::vector<Mine> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetMineListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddMineBase(const MineBase& mine_base) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMineBase(mine_base);
    }
    return ifaces_[i]->AddMineBase(mine_base);
  }

  bool DeleteMineBase(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMineBase(id);
    }
    return ifaces_[i]->DeleteMineBase(id);
  }

  bool UpdateMineBase(const MineBase& mine_base) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateMineBase(mine_base);
    }
    return ifaces_[i]->UpdateMineBase(mine_base);
  }

  void GetMineBaseById(MineBase& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineBaseById(_return, id);
    }
    ifaces_[i]->GetMineBaseById(_return, id);
    return;
  }

  void GetMineBaseByForeignKey(MineBase& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineBaseByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetMineBaseByForeignKey(_return, fkey, id);
    return;
  }

  void GetMineBaseList(std::vector<MineBase> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineBaseList(_return);
    }
    ifaces_[i]->GetMineBaseList(_return);
    return;
  }

  void GetMineBaseIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineBaseIds(_return);
    }
    ifaces_[i]->GetMineBaseIds(_return);
    return;
  }

  void GetMineBaseNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineBaseNames(_return);
    }
    ifaces_[i]->GetMineBaseNames(_return);
    return;
  }

  void AddMoreMineBase(const std::vector<MineBase> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreMineBase(objs);
    }
    ifaces_[i]->AddMoreMineBase(objs);
  }

  void DeleteMoreMineBase(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreMineBase(obj_ids);
    }
    ifaces_[i]->DeleteMoreMineBase(obj_ids);
  }

  void GetMineBaseByFields(MineBase& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineBaseByFields(_return, fields);
    }
    ifaces_[i]->GetMineBaseByFields(_return, fields);
    return;
  }

  void GetMineBaseByFields1(MineBase& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineBaseByFields1(_return, field, value);
    }
    ifaces_[i]->GetMineBaseByFields1(_return, field, value);
    return;
  }

  void GetMineBaseByFields2(MineBase& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineBaseByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetMineBaseByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetMineBaseListByFields(std::vector<MineBase> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineBaseListByFields(_return, fields);
    }
    ifaces_[i]->GetMineBaseListByFields(_return, fields);
    return;
  }

  void GetMineBaseListByFields1(std::vector<MineBase> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineBaseListByFields1(_return, field, value);
    }
    ifaces_[i]->GetMineBaseListByFields1(_return, field, value);
    return;
  }

  void GetMineBaseListByFields2(std::vector<MineBase> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineBaseListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetMineBaseListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddMineRegion(const MineRegion& mine_region) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMineRegion(mine_region);
    }
    return ifaces_[i]->AddMineRegion(mine_region);
  }

  bool DeleteMineRegion(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMineRegion(id);
    }
    return ifaces_[i]->DeleteMineRegion(id);
  }

  bool UpdateMineRegion(const MineRegion& mine_region) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateMineRegion(mine_region);
    }
    return ifaces_[i]->UpdateMineRegion(mine_region);
  }

  void GetMineRegionById(MineRegion& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineRegionById(_return, id);
    }
    ifaces_[i]->GetMineRegionById(_return, id);
    return;
  }

  void GetMineRegionByForeignKey(MineRegion& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineRegionByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetMineRegionByForeignKey(_return, fkey, id);
    return;
  }

  void GetMineRegionList(std::vector<MineRegion> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineRegionList(_return);
    }
    ifaces_[i]->GetMineRegionList(_return);
    return;
  }

  void GetMineRegionIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineRegionIds(_return);
    }
    ifaces_[i]->GetMineRegionIds(_return);
    return;
  }

  void GetMineRegionNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineRegionNames(_return);
    }
    ifaces_[i]->GetMineRegionNames(_return);
    return;
  }

  void AddMoreMineRegion(const std::vector<MineRegion> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreMineRegion(objs);
    }
    ifaces_[i]->AddMoreMineRegion(objs);
  }

  void DeleteMoreMineRegion(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreMineRegion(obj_ids);
    }
    ifaces_[i]->DeleteMoreMineRegion(obj_ids);
  }

  void GetMineRegionByFields(MineRegion& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineRegionByFields(_return, fields);
    }
    ifaces_[i]->GetMineRegionByFields(_return, fields);
    return;
  }

  void GetMineRegionByFields1(MineRegion& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineRegionByFields1(_return, field, value);
    }
    ifaces_[i]->GetMineRegionByFields1(_return, field, value);
    return;
  }

  void GetMineRegionByFields2(MineRegion& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineRegionByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetMineRegionByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetMineRegionListByFields(std::vector<MineRegion> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineRegionListByFields(_return, fields);
    }
    ifaces_[i]->GetMineRegionListByFields(_return, fields);
    return;
  }

  void GetMineRegionListByFields1(std::vector<MineRegion> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineRegionListByFields1(_return, field, value);
    }
    ifaces_[i]->GetMineRegionListByFields1(_return, field, value);
    return;
  }

  void GetMineRegionListByFields2(std::vector<MineRegion> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineRegionListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetMineRegionListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddPoreFlow(const PoreFlow& pore_flow) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddPoreFlow(pore_flow);
    }
    return ifaces_[i]->AddPoreFlow(pore_flow);
  }

  bool DeletePoreFlow(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeletePoreFlow(id);
    }
    return ifaces_[i]->DeletePoreFlow(id);
  }

  bool UpdatePoreFlow(const PoreFlow& pore_flow) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdatePoreFlow(pore_flow);
    }
    return ifaces_[i]->UpdatePoreFlow(pore_flow);
  }

  void GetPoreFlowById(PoreFlow& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreFlowById(_return, id);
    }
    ifaces_[i]->GetPoreFlowById(_return, id);
    return;
  }

  void GetPoreFlowByForeignKey(PoreFlow& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreFlowByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetPoreFlowByForeignKey(_return, fkey, id);
    return;
  }

  void GetPoreFlowList(std::vector<PoreFlow> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreFlowList(_return);
    }
    ifaces_[i]->GetPoreFlowList(_return);
    return;
  }

  void GetPoreFlowIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreFlowIds(_return);
    }
    ifaces_[i]->GetPoreFlowIds(_return);
    return;
  }

  void GetPoreFlowNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreFlowNames(_return);
    }
    ifaces_[i]->GetPoreFlowNames(_return);
    return;
  }

  void AddMorePoreFlow(const std::vector<PoreFlow> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMorePoreFlow(objs);
    }
    ifaces_[i]->AddMorePoreFlow(objs);
  }

  void DeleteMorePoreFlow(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMorePoreFlow(obj_ids);
    }
    ifaces_[i]->DeleteMorePoreFlow(obj_ids);
  }

  void GetPoreFlowByFields(PoreFlow& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreFlowByFields(_return, fields);
    }
    ifaces_[i]->GetPoreFlowByFields(_return, fields);
    return;
  }

  void GetPoreFlowByFields1(PoreFlow& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreFlowByFields1(_return, field, value);
    }
    ifaces_[i]->GetPoreFlowByFields1(_return, field, value);
    return;
  }

  void GetPoreFlowByFields2(PoreFlow& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreFlowByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetPoreFlowByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetPoreFlowListByFields(std::vector<PoreFlow> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreFlowListByFields(_return, fields);
    }
    ifaces_[i]->GetPoreFlowListByFields(_return, fields);
    return;
  }

  void GetPoreFlowListByFields1(std::vector<PoreFlow> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreFlowListByFields1(_return, field, value);
    }
    ifaces_[i]->GetPoreFlowListByFields1(_return, field, value);
    return;
  }

  void GetPoreFlowListByFields2(std::vector<PoreFlow> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreFlowListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetPoreFlowListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddPoreSize(const PoreSize& pore_size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddPoreSize(pore_size);
    }
    return ifaces_[i]->AddPoreSize(pore_size);
  }

  bool DeletePoreSize(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeletePoreSize(id);
    }
    return ifaces_[i]->DeletePoreSize(id);
  }

  bool UpdatePoreSize(const PoreSize& pore_size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdatePoreSize(pore_size);
    }
    return ifaces_[i]->UpdatePoreSize(pore_size);
  }

  void GetPoreSizeById(PoreSize& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreSizeById(_return, id);
    }
    ifaces_[i]->GetPoreSizeById(_return, id);
    return;
  }

  void GetPoreSizeByForeignKey(PoreSize& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreSizeByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetPoreSizeByForeignKey(_return, fkey, id);
    return;
  }

  void GetPoreSizeList(std::vector<PoreSize> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreSizeList(_return);
    }
    ifaces_[i]->GetPoreSizeList(_return);
    return;
  }

  void GetPoreSizeIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreSizeIds(_return);
    }
    ifaces_[i]->GetPoreSizeIds(_return);
    return;
  }

  void GetPoreSizeNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreSizeNames(_return);
    }
    ifaces_[i]->GetPoreSizeNames(_return);
    return;
  }

  void AddMorePoreSize(const std::vector<PoreSize> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMorePoreSize(objs);
    }
    ifaces_[i]->AddMorePoreSize(objs);
  }

  void DeleteMorePoreSize(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMorePoreSize(obj_ids);
    }
    ifaces_[i]->DeleteMorePoreSize(obj_ids);
  }

  void GetPoreSizeByFields(PoreSize& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreSizeByFields(_return, fields);
    }
    ifaces_[i]->GetPoreSizeByFields(_return, fields);
    return;
  }

  void GetPoreSizeByFields1(PoreSize& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreSizeByFields1(_return, field, value);
    }
    ifaces_[i]->GetPoreSizeByFields1(_return, field, value);
    return;
  }

  void GetPoreSizeByFields2(PoreSize& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreSizeByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetPoreSizeByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetPoreSizeListByFields(std::vector<PoreSize> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreSizeListByFields(_return, fields);
    }
    ifaces_[i]->GetPoreSizeListByFields(_return, fields);
    return;
  }

  void GetPoreSizeListByFields1(std::vector<PoreSize> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreSizeListByFields1(_return, field, value);
    }
    ifaces_[i]->GetPoreSizeListByFields1(_return, field, value);
    return;
  }

  void GetPoreSizeListByFields2(std::vector<PoreSize> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPoreSizeListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetPoreSizeListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddResAbundance(const ResAbundance& res_abundance) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddResAbundance(res_abundance);
    }
    return ifaces_[i]->AddResAbundance(res_abundance);
  }

  bool DeleteResAbundance(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteResAbundance(id);
    }
    return ifaces_[i]->DeleteResAbundance(id);
  }

  bool UpdateResAbundance(const ResAbundance& res_abundance) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateResAbundance(res_abundance);
    }
    return ifaces_[i]->UpdateResAbundance(res_abundance);
  }

  void GetResAbundanceById(ResAbundance& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResAbundanceById(_return, id);
    }
    ifaces_[i]->GetResAbundanceById(_return, id);
    return;
  }

  void GetResAbundanceByForeignKey(ResAbundance& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResAbundanceByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetResAbundanceByForeignKey(_return, fkey, id);
    return;
  }

  void GetResAbundanceList(std::vector<ResAbundance> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResAbundanceList(_return);
    }
    ifaces_[i]->GetResAbundanceList(_return);
    return;
  }

  void GetResAbundanceIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResAbundanceIds(_return);
    }
    ifaces_[i]->GetResAbundanceIds(_return);
    return;
  }

  void GetResAbundanceNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResAbundanceNames(_return);
    }
    ifaces_[i]->GetResAbundanceNames(_return);
    return;
  }

  void AddMoreResAbundance(const std::vector<ResAbundance> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreResAbundance(objs);
    }
    ifaces_[i]->AddMoreResAbundance(objs);
  }

  void DeleteMoreResAbundance(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreResAbundance(obj_ids);
    }
    ifaces_[i]->DeleteMoreResAbundance(obj_ids);
  }

  void GetResAbundanceByFields(ResAbundance& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResAbundanceByFields(_return, fields);
    }
    ifaces_[i]->GetResAbundanceByFields(_return, fields);
    return;
  }

  void GetResAbundanceByFields1(ResAbundance& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResAbundanceByFields1(_return, field, value);
    }
    ifaces_[i]->GetResAbundanceByFields1(_return, field, value);
    return;
  }

  void GetResAbundanceByFields2(ResAbundance& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResAbundanceByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetResAbundanceByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetResAbundanceListByFields(std::vector<ResAbundance> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResAbundanceListByFields(_return, fields);
    }
    ifaces_[i]->GetResAbundanceListByFields(_return, fields);
    return;
  }

  void GetResAbundanceListByFields1(std::vector<ResAbundance> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResAbundanceListByFields1(_return, field, value);
    }
    ifaces_[i]->GetResAbundanceListByFields1(_return, field, value);
    return;
  }

  void GetResAbundanceListByFields2(std::vector<ResAbundance> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResAbundanceListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetResAbundanceListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddRock(const Rock& rock) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddRock(rock);
    }
    return ifaces_[i]->AddRock(rock);
  }

  bool DeleteRock(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteRock(id);
    }
    return ifaces_[i]->DeleteRock(id);
  }

  bool UpdateRock(const Rock& rock) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateRock(rock);
    }
    return ifaces_[i]->UpdateRock(rock);
  }

  void GetRockById(Rock& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRockById(_return, id);
    }
    ifaces_[i]->GetRockById(_return, id);
    return;
  }

  void GetRockByForeignKey(Rock& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRockByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetRockByForeignKey(_return, fkey, id);
    return;
  }

  void GetRockList(std::vector<Rock> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRockList(_return);
    }
    ifaces_[i]->GetRockList(_return);
    return;
  }

  void GetRockIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRockIds(_return);
    }
    ifaces_[i]->GetRockIds(_return);
    return;
  }

  void GetRockNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRockNames(_return);
    }
    ifaces_[i]->GetRockNames(_return);
    return;
  }

  void AddMoreRock(const std::vector<Rock> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreRock(objs);
    }
    ifaces_[i]->AddMoreRock(objs);
  }

  void DeleteMoreRock(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreRock(obj_ids);
    }
    ifaces_[i]->DeleteMoreRock(obj_ids);
  }

  void GetRockByFields(Rock& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRockByFields(_return, fields);
    }
    ifaces_[i]->GetRockByFields(_return, fields);
    return;
  }

  void GetRockByFields1(Rock& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRockByFields1(_return, field, value);
    }
    ifaces_[i]->GetRockByFields1(_return, field, value);
    return;
  }

  void GetRockByFields2(Rock& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRockByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetRockByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetRockListByFields(std::vector<Rock> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRockListByFields(_return, fields);
    }
    ifaces_[i]->GetRockListByFields(_return, fields);
    return;
  }

  void GetRockListByFields1(std::vector<Rock> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRockListByFields1(_return, field, value);
    }
    ifaces_[i]->GetRockListByFields1(_return, field, value);
    return;
  }

  void GetRockListByFields2(std::vector<Rock> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRockListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetRockListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddSysInfo(const SysInfo& sys_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddSysInfo(sys_info);
    }
    return ifaces_[i]->AddSysInfo(sys_info);
  }

  bool DeleteSysInfo(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteSysInfo(id);
    }
    return ifaces_[i]->DeleteSysInfo(id);
  }

  bool UpdateSysInfo(const SysInfo& sys_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateSysInfo(sys_info);
    }
    return ifaces_[i]->UpdateSysInfo(sys_info);
  }

  void GetSysInfoById(SysInfo& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSysInfoById(_return, id);
    }
    ifaces_[i]->GetSysInfoById(_return, id);
    return;
  }

  void GetSysInfoByForeignKey(SysInfo& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSysInfoByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetSysInfoByForeignKey(_return, fkey, id);
    return;
  }

  void GetSysInfoList(std::vector<SysInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSysInfoList(_return);
    }
    ifaces_[i]->GetSysInfoList(_return);
    return;
  }

  void GetSysInfoIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSysInfoIds(_return);
    }
    ifaces_[i]->GetSysInfoIds(_return);
    return;
  }

  void GetSysInfoNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSysInfoNames(_return);
    }
    ifaces_[i]->GetSysInfoNames(_return);
    return;
  }

  void AddMoreSysInfo(const std::vector<SysInfo> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreSysInfo(objs);
    }
    ifaces_[i]->AddMoreSysInfo(objs);
  }

  void DeleteMoreSysInfo(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreSysInfo(obj_ids);
    }
    ifaces_[i]->DeleteMoreSysInfo(obj_ids);
  }

  void GetSysInfoByFields(SysInfo& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSysInfoByFields(_return, fields);
    }
    ifaces_[i]->GetSysInfoByFields(_return, fields);
    return;
  }

  void GetSysInfoByFields1(SysInfo& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSysInfoByFields1(_return, field, value);
    }
    ifaces_[i]->GetSysInfoByFields1(_return, field, value);
    return;
  }

  void GetSysInfoByFields2(SysInfo& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSysInfoByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetSysInfoByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetSysInfoListByFields(std::vector<SysInfo> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSysInfoListByFields(_return, fields);
    }
    ifaces_[i]->GetSysInfoListByFields(_return, fields);
    return;
  }

  void GetSysInfoListByFields1(std::vector<SysInfo> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSysInfoListByFields1(_return, field, value);
    }
    ifaces_[i]->GetSysInfoListByFields1(_return, field, value);
    return;
  }

  void GetSysInfoListByFields2(std::vector<SysInfo> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSysInfoListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetSysInfoListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddTechMode(const TechMode& tech_mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddTechMode(tech_mode);
    }
    return ifaces_[i]->AddTechMode(tech_mode);
  }

  bool DeleteTechMode(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteTechMode(id);
    }
    return ifaces_[i]->DeleteTechMode(id);
  }

  bool UpdateTechMode(const TechMode& tech_mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateTechMode(tech_mode);
    }
    return ifaces_[i]->UpdateTechMode(tech_mode);
  }

  void GetTechModeById(TechMode& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechModeById(_return, id);
    }
    ifaces_[i]->GetTechModeById(_return, id);
    return;
  }

  void GetTechModeByForeignKey(TechMode& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechModeByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetTechModeByForeignKey(_return, fkey, id);
    return;
  }

  void GetTechModeList(std::vector<TechMode> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechModeList(_return);
    }
    ifaces_[i]->GetTechModeList(_return);
    return;
  }

  void GetTechModeIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechModeIds(_return);
    }
    ifaces_[i]->GetTechModeIds(_return);
    return;
  }

  void GetTechModeNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechModeNames(_return);
    }
    ifaces_[i]->GetTechModeNames(_return);
    return;
  }

  void AddMoreTechMode(const std::vector<TechMode> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreTechMode(objs);
    }
    ifaces_[i]->AddMoreTechMode(objs);
  }

  void DeleteMoreTechMode(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreTechMode(obj_ids);
    }
    ifaces_[i]->DeleteMoreTechMode(obj_ids);
  }

  void GetTechModeByFields(TechMode& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechModeByFields(_return, fields);
    }
    ifaces_[i]->GetTechModeByFields(_return, fields);
    return;
  }

  void GetTechModeByFields1(TechMode& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechModeByFields1(_return, field, value);
    }
    ifaces_[i]->GetTechModeByFields1(_return, field, value);
    return;
  }

  void GetTechModeByFields2(TechMode& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechModeByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetTechModeByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetTechModeListByFields(std::vector<TechMode> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechModeListByFields(_return, fields);
    }
    ifaces_[i]->GetTechModeListByFields(_return, fields);
    return;
  }

  void GetTechModeListByFields1(std::vector<TechMode> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechModeListByFields1(_return, field, value);
    }
    ifaces_[i]->GetTechModeListByFields1(_return, field, value);
    return;
  }

  void GetTechModeListByFields2(std::vector<TechMode> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechModeListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetTechModeListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddTechnology(const Technology& technology) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddTechnology(technology);
    }
    return ifaces_[i]->AddTechnology(technology);
  }

  bool DeleteTechnology(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteTechnology(id);
    }
    return ifaces_[i]->DeleteTechnology(id);
  }

  bool UpdateTechnology(const Technology& technology) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateTechnology(technology);
    }
    return ifaces_[i]->UpdateTechnology(technology);
  }

  void GetTechnologyById(Technology& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechnologyById(_return, id);
    }
    ifaces_[i]->GetTechnologyById(_return, id);
    return;
  }

  void GetTechnologyByForeignKey(Technology& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechnologyByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetTechnologyByForeignKey(_return, fkey, id);
    return;
  }

  void GetTechnologyList(std::vector<Technology> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechnologyList(_return);
    }
    ifaces_[i]->GetTechnologyList(_return);
    return;
  }

  void GetTechnologyIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechnologyIds(_return);
    }
    ifaces_[i]->GetTechnologyIds(_return);
    return;
  }

  void GetTechnologyNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechnologyNames(_return);
    }
    ifaces_[i]->GetTechnologyNames(_return);
    return;
  }

  void AddMoreTechnology(const std::vector<Technology> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreTechnology(objs);
    }
    ifaces_[i]->AddMoreTechnology(objs);
  }

  void DeleteMoreTechnology(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreTechnology(obj_ids);
    }
    ifaces_[i]->DeleteMoreTechnology(obj_ids);
  }

  void GetTechnologyByFields(Technology& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechnologyByFields(_return, fields);
    }
    ifaces_[i]->GetTechnologyByFields(_return, fields);
    return;
  }

  void GetTechnologyByFields1(Technology& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechnologyByFields1(_return, field, value);
    }
    ifaces_[i]->GetTechnologyByFields1(_return, field, value);
    return;
  }

  void GetTechnologyByFields2(Technology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechnologyByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetTechnologyByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetTechnologyListByFields(std::vector<Technology> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechnologyListByFields(_return, fields);
    }
    ifaces_[i]->GetTechnologyListByFields(_return, fields);
    return;
  }

  void GetTechnologyListByFields1(std::vector<Technology> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechnologyListByFields1(_return, field, value);
    }
    ifaces_[i]->GetTechnologyListByFields1(_return, field, value);
    return;
  }

  void GetTechnologyListByFields2(std::vector<Technology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTechnologyListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetTechnologyListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddTopoGeo(const TopoGeo& topo_geo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddTopoGeo(topo_geo);
    }
    return ifaces_[i]->AddTopoGeo(topo_geo);
  }

  bool DeleteTopoGeo(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteTopoGeo(id);
    }
    return ifaces_[i]->DeleteTopoGeo(id);
  }

  bool UpdateTopoGeo(const TopoGeo& topo_geo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateTopoGeo(topo_geo);
    }
    return ifaces_[i]->UpdateTopoGeo(topo_geo);
  }

  void GetTopoGeoById(TopoGeo& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTopoGeoById(_return, id);
    }
    ifaces_[i]->GetTopoGeoById(_return, id);
    return;
  }

  void GetTopoGeoByForeignKey(TopoGeo& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTopoGeoByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetTopoGeoByForeignKey(_return, fkey, id);
    return;
  }

  void GetTopoGeoList(std::vector<TopoGeo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTopoGeoList(_return);
    }
    ifaces_[i]->GetTopoGeoList(_return);
    return;
  }

  void GetTopoGeoIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTopoGeoIds(_return);
    }
    ifaces_[i]->GetTopoGeoIds(_return);
    return;
  }

  void GetTopoGeoNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTopoGeoNames(_return);
    }
    ifaces_[i]->GetTopoGeoNames(_return);
    return;
  }

  void AddMoreTopoGeo(const std::vector<TopoGeo> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreTopoGeo(objs);
    }
    ifaces_[i]->AddMoreTopoGeo(objs);
  }

  void DeleteMoreTopoGeo(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreTopoGeo(obj_ids);
    }
    ifaces_[i]->DeleteMoreTopoGeo(obj_ids);
  }

  void GetTopoGeoByFields(TopoGeo& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTopoGeoByFields(_return, fields);
    }
    ifaces_[i]->GetTopoGeoByFields(_return, fields);
    return;
  }

  void GetTopoGeoByFields1(TopoGeo& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTopoGeoByFields1(_return, field, value);
    }
    ifaces_[i]->GetTopoGeoByFields1(_return, field, value);
    return;
  }

  void GetTopoGeoByFields2(TopoGeo& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTopoGeoByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetTopoGeoByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetTopoGeoListByFields(std::vector<TopoGeo> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTopoGeoListByFields(_return, fields);
    }
    ifaces_[i]->GetTopoGeoListByFields(_return, fields);
    return;
  }

  void GetTopoGeoListByFields1(std::vector<TopoGeo> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTopoGeoListByFields1(_return, field, value);
    }
    ifaces_[i]->GetTopoGeoListByFields1(_return, field, value);
    return;
  }

  void GetTopoGeoListByFields2(std::vector<TopoGeo> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTopoGeoListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetTopoGeoListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddTunnel(const Tunnel& tunnel) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddTunnel(tunnel);
    }
    return ifaces_[i]->AddTunnel(tunnel);
  }

  bool DeleteTunnel(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteTunnel(id);
    }
    return ifaces_[i]->DeleteTunnel(id);
  }

  bool UpdateTunnel(const Tunnel& tunnel) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateTunnel(tunnel);
    }
    return ifaces_[i]->UpdateTunnel(tunnel);
  }

  void GetTunnelById(Tunnel& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTunnelById(_return, id);
    }
    ifaces_[i]->GetTunnelById(_return, id);
    return;
  }

  void GetTunnelByForeignKey(Tunnel& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTunnelByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetTunnelByForeignKey(_return, fkey, id);
    return;
  }

  void GetTunnelList(std::vector<Tunnel> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTunnelList(_return);
    }
    ifaces_[i]->GetTunnelList(_return);
    return;
  }

  void GetTunnelIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTunnelIds(_return);
    }
    ifaces_[i]->GetTunnelIds(_return);
    return;
  }

  void GetTunnelNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTunnelNames(_return);
    }
    ifaces_[i]->GetTunnelNames(_return);
    return;
  }

  void AddMoreTunnel(const std::vector<Tunnel> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreTunnel(objs);
    }
    ifaces_[i]->AddMoreTunnel(objs);
  }

  void DeleteMoreTunnel(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreTunnel(obj_ids);
    }
    ifaces_[i]->DeleteMoreTunnel(obj_ids);
  }

  void GetTunnelByFields(Tunnel& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTunnelByFields(_return, fields);
    }
    ifaces_[i]->GetTunnelByFields(_return, fields);
    return;
  }

  void GetTunnelByFields1(Tunnel& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTunnelByFields1(_return, field, value);
    }
    ifaces_[i]->GetTunnelByFields1(_return, field, value);
    return;
  }

  void GetTunnelByFields2(Tunnel& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTunnelByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetTunnelByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetTunnelListByFields(std::vector<Tunnel> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTunnelListByFields(_return, fields);
    }
    ifaces_[i]->GetTunnelListByFields(_return, fields);
    return;
  }

  void GetTunnelListByFields1(std::vector<Tunnel> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTunnelListByFields1(_return, field, value);
    }
    ifaces_[i]->GetTunnelListByFields1(_return, field, value);
    return;
  }

  void GetTunnelListByFields2(std::vector<Tunnel> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTunnelListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetTunnelListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddWorkArea(const WorkArea& work_area) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddWorkArea(work_area);
    }
    return ifaces_[i]->AddWorkArea(work_area);
  }

  bool DeleteWorkArea(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteWorkArea(id);
    }
    return ifaces_[i]->DeleteWorkArea(id);
  }

  bool UpdateWorkArea(const WorkArea& work_area) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateWorkArea(work_area);
    }
    return ifaces_[i]->UpdateWorkArea(work_area);
  }

  void GetWorkAreaById(WorkArea& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreaById(_return, id);
    }
    ifaces_[i]->GetWorkAreaById(_return, id);
    return;
  }

  void GetWorkAreaByForeignKey(WorkArea& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreaByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetWorkAreaByForeignKey(_return, fkey, id);
    return;
  }

  void GetWorkAreaList(std::vector<WorkArea> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreaList(_return);
    }
    ifaces_[i]->GetWorkAreaList(_return);
    return;
  }

  void GetWorkAreaIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreaIds(_return);
    }
    ifaces_[i]->GetWorkAreaIds(_return);
    return;
  }

  void GetWorkAreaNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreaNames(_return);
    }
    ifaces_[i]->GetWorkAreaNames(_return);
    return;
  }

  void AddMoreWorkArea(const std::vector<WorkArea> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreWorkArea(objs);
    }
    ifaces_[i]->AddMoreWorkArea(objs);
  }

  void DeleteMoreWorkArea(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreWorkArea(obj_ids);
    }
    ifaces_[i]->DeleteMoreWorkArea(obj_ids);
  }

  void GetWorkAreaByFields(WorkArea& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreaByFields(_return, fields);
    }
    ifaces_[i]->GetWorkAreaByFields(_return, fields);
    return;
  }

  void GetWorkAreaByFields1(WorkArea& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreaByFields1(_return, field, value);
    }
    ifaces_[i]->GetWorkAreaByFields1(_return, field, value);
    return;
  }

  void GetWorkAreaByFields2(WorkArea& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreaByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetWorkAreaByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetWorkAreaListByFields(std::vector<WorkArea> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreaListByFields(_return, fields);
    }
    ifaces_[i]->GetWorkAreaListByFields(_return, fields);
    return;
  }

  void GetWorkAreaListByFields1(std::vector<WorkArea> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreaListByFields1(_return, field, value);
    }
    ifaces_[i]->GetWorkAreaListByFields1(_return, field, value);
    return;
  }

  void GetWorkAreaListByFields2(std::vector<WorkArea> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreaListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetWorkAreaListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  int32_t AddWorkSurf(const WorkSurf& work_surf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddWorkSurf(work_surf);
    }
    return ifaces_[i]->AddWorkSurf(work_surf);
  }

  bool DeleteWorkSurf(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteWorkSurf(id);
    }
    return ifaces_[i]->DeleteWorkSurf(id);
  }

  bool UpdateWorkSurf(const WorkSurf& work_surf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateWorkSurf(work_surf);
    }
    return ifaces_[i]->UpdateWorkSurf(work_surf);
  }

  void GetWorkSurfById(WorkSurf& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfById(_return, id);
    }
    ifaces_[i]->GetWorkSurfById(_return, id);
    return;
  }

  void GetWorkSurfByForeignKey(WorkSurf& _return, const std::string& fkey, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfByForeignKey(_return, fkey, id);
    }
    ifaces_[i]->GetWorkSurfByForeignKey(_return, fkey, id);
    return;
  }

  void GetWorkSurfList(std::vector<WorkSurf> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfList(_return);
    }
    ifaces_[i]->GetWorkSurfList(_return);
    return;
  }

  void GetWorkSurfIds(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfIds(_return);
    }
    ifaces_[i]->GetWorkSurfIds(_return);
    return;
  }

  void GetWorkSurfNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfNames(_return);
    }
    ifaces_[i]->GetWorkSurfNames(_return);
    return;
  }

  void AddMoreWorkSurf(const std::vector<WorkSurf> & objs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddMoreWorkSurf(objs);
    }
    ifaces_[i]->AddMoreWorkSurf(objs);
  }

  void DeleteMoreWorkSurf(const std::vector<int32_t> & obj_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteMoreWorkSurf(obj_ids);
    }
    ifaces_[i]->DeleteMoreWorkSurf(obj_ids);
  }

  void GetWorkSurfByFields(WorkSurf& _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfByFields(_return, fields);
    }
    ifaces_[i]->GetWorkSurfByFields(_return, fields);
    return;
  }

  void GetWorkSurfByFields1(WorkSurf& _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfByFields1(_return, field, value);
    }
    ifaces_[i]->GetWorkSurfByFields1(_return, field, value);
    return;
  }

  void GetWorkSurfByFields2(WorkSurf& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetWorkSurfByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void GetWorkSurfListByFields(std::vector<WorkSurf> & _return, const std::map<std::string, std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfListByFields(_return, fields);
    }
    ifaces_[i]->GetWorkSurfListByFields(_return, fields);
    return;
  }

  void GetWorkSurfListByFields1(std::vector<WorkSurf> & _return, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfListByFields1(_return, field, value);
    }
    ifaces_[i]->GetWorkSurfListByFields1(_return, field, value);
    return;
  }

  void GetWorkSurfListByFields2(std::vector<WorkSurf> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfListByFields2(_return, field1, value1, field2, value2);
    }
    ifaces_[i]->GetWorkSurfListByFields2(_return, field1, value1, field2, value2);
    return;
  }

  void InitSampleRegion() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InitSampleRegion();
    }
    ifaces_[i]->InitSampleRegion();
  }

  int32_t GetOnlineAccountId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetOnlineAccountId();
    }
    return ifaces_[i]->GetOnlineAccountId();
  }

  void GetOnlineMine(Mine& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetOnlineMine(_return);
    }
    ifaces_[i]->GetOnlineMine(_return);
    return;
  }

  int32_t VerifyMineAccount(const std::string& username, const std::string& pwd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->VerifyMineAccount(username, pwd);
    }
    return ifaces_[i]->VerifyMineAccount(username, pwd);
  }

  void GetMineRegionsOfBase(std::vector<std::string> & _return, const std::string& baseName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMineRegionsOfBase(_return, baseName);
    }
    ifaces_[i]->GetMineRegionsOfBase(_return, baseName);
    return;
  }

  void GetBaseByRegion(std::string& _return, const std::string& regionName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetBaseByRegion(_return, regionName);
    }
    ifaces_[i]->GetBaseByRegion(_return, regionName);
    return;
  }

  void GetSampleMineOfRegion(Mine& _return, const std::string& regionName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSampleMineOfRegion(_return, regionName);
    }
    ifaces_[i]->GetSampleMineOfRegion(_return, regionName);
    return;
  }

  void GetSampleCoalOfRegion(Coal& _return, const std::string& regionName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSampleCoalOfRegion(_return, regionName);
    }
    ifaces_[i]->GetSampleCoalOfRegion(_return, regionName);
    return;
  }

  void GetCoalNamesOfMine(std::vector<std::string> & _return, const int32_t mine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalNamesOfMine(_return, mine_id);
    }
    ifaces_[i]->GetCoalNamesOfMine(_return, mine_id);
    return;
  }

  void GetCoalIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoalIdsOfMine(_return, mine_id);
    }
    ifaces_[i]->GetCoalIdsOfMine(_return, mine_id);
    return;
  }

  void GetWorkAreasOfMine(std::vector<WorkArea> & _return, const int32_t mine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreasOfMine(_return, mine_id);
    }
    ifaces_[i]->GetWorkAreasOfMine(_return, mine_id);
    return;
  }

  void GetWorkSurfsOfMine(std::vector<WorkSurf> & _return, const int32_t mine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfsOfMine(_return, mine_id);
    }
    ifaces_[i]->GetWorkSurfsOfMine(_return, mine_id);
    return;
  }

  void GetDrillingSurfsOfMine(std::vector<DrillingSurf> & _return, const int32_t mine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfsOfMine(_return, mine_id);
    }
    ifaces_[i]->GetDrillingSurfsOfMine(_return, mine_id);
    return;
  }

  void GetWorkAreaIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkAreaIdsOfMine(_return, mine_id);
    }
    ifaces_[i]->GetWorkAreaIdsOfMine(_return, mine_id);
    return;
  }

  void GetWorkSurfIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWorkSurfIdsOfMine(_return, mine_id);
    }
    ifaces_[i]->GetWorkSurfIdsOfMine(_return, mine_id);
    return;
  }

  void GetDrillingSurfIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDrillingSurfIdsOfMine(_return, mine_id);
    }
    ifaces_[i]->GetDrillingSurfIdsOfMine(_return, mine_id);
    return;
  }

  int32_t DifficultEval(const Coal& coal) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DifficultEval(coal);
    }
    return ifaces_[i]->DifficultEval(coal);
  }

  void DifficultEvalString(std::string& _return, const Coal& coal) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DifficultEvalString(_return, coal);
    }
    ifaces_[i]->DifficultEvalString(_return, coal);
    return;
  }

  double MineGasReservesW1(const int32_t mine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MineGasReservesW1(mine_id);
    }
    return ifaces_[i]->MineGasReservesW1(mine_id);
  }

  double MineGasReservesW2(const int32_t mine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MineGasReservesW2(mine_id);
    }
    return ifaces_[i]->MineGasReservesW2(mine_id);
  }

  double WorkAreaGasFlow(const WorkArea& work_area, const double K1) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WorkAreaGasFlow(work_area, K1);
    }
    return ifaces_[i]->WorkAreaGasFlow(work_area, K1);
  }

  double MineGasFlow(const Mine& mine) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MineGasFlow(mine);
    }
    return ifaces_[i]->MineGasFlow(mine);
  }

  double WorkSurfGasFlow1(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WorkSurfGasFlow1(coal, work_area, work_surf);
    }
    return ifaces_[i]->WorkSurfGasFlow1(coal, work_area, work_surf);
  }

  double WorkSurfGasFlow2(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WorkSurfGasFlow2(coal, work_area, work_surf);
    }
    return ifaces_[i]->WorkSurfGasFlow2(coal, work_area, work_surf);
  }

  void DrillingSurfGasFlow(DrillingSurfGasFlowResult& _return, const Coal& coal, const DrillingSurf& drilling_surf, const Tunnel& tunnel) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DrillingSurfGasFlow(_return, coal, drilling_surf, tunnel);
    }
    ifaces_[i]->DrillingSurfGasFlow(_return, coal, drilling_surf, tunnel);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CbmServiceConcurrentClient : virtual public CbmServiceIf {
 public:
  CbmServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CbmServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t AddAccount(const Account& account);
  int32_t send_AddAccount(const Account& account);
  int32_t recv_AddAccount(const int32_t seqid);
  bool DeleteAccount(const int32_t id);
  int32_t send_DeleteAccount(const int32_t id);
  bool recv_DeleteAccount(const int32_t seqid);
  bool UpdateAccount(const Account& account);
  int32_t send_UpdateAccount(const Account& account);
  bool recv_UpdateAccount(const int32_t seqid);
  void GetAccountById(Account& _return, const int32_t id);
  int32_t send_GetAccountById(const int32_t id);
  void recv_GetAccountById(Account& _return, const int32_t seqid);
  void GetAccountByForeignKey(Account& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetAccountByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetAccountByForeignKey(Account& _return, const int32_t seqid);
  void GetAccountList(std::vector<Account> & _return);
  int32_t send_GetAccountList();
  void recv_GetAccountList(std::vector<Account> & _return, const int32_t seqid);
  void GetAccountIds(std::vector<int32_t> & _return);
  int32_t send_GetAccountIds();
  void recv_GetAccountIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetAccountNames(std::vector<std::string> & _return);
  int32_t send_GetAccountNames();
  void recv_GetAccountNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreAccount(const std::vector<Account> & objs);
  int32_t send_AddMoreAccount(const std::vector<Account> & objs);
  void recv_AddMoreAccount(const int32_t seqid);
  void DeleteMoreAccount(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreAccount(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreAccount(const int32_t seqid);
  void GetAccountByFields(Account& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetAccountByFields(const std::map<std::string, std::string> & fields);
  void recv_GetAccountByFields(Account& _return, const int32_t seqid);
  void GetAccountByFields1(Account& _return, const std::string& field, const std::string& value);
  int32_t send_GetAccountByFields1(const std::string& field, const std::string& value);
  void recv_GetAccountByFields1(Account& _return, const int32_t seqid);
  void GetAccountByFields2(Account& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetAccountByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetAccountByFields2(Account& _return, const int32_t seqid);
  void GetAccountListByFields(std::vector<Account> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetAccountListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetAccountListByFields(std::vector<Account> & _return, const int32_t seqid);
  void GetAccountListByFields1(std::vector<Account> & _return, const std::string& field, const std::string& value);
  int32_t send_GetAccountListByFields1(const std::string& field, const std::string& value);
  void recv_GetAccountListByFields1(std::vector<Account> & _return, const int32_t seqid);
  void GetAccountListByFields2(std::vector<Account> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetAccountListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetAccountListByFields2(std::vector<Account> & _return, const int32_t seqid);
  int32_t AddAdjLayer(const AdjLayer& adj_layer);
  int32_t send_AddAdjLayer(const AdjLayer& adj_layer);
  int32_t recv_AddAdjLayer(const int32_t seqid);
  bool DeleteAdjLayer(const int32_t id);
  int32_t send_DeleteAdjLayer(const int32_t id);
  bool recv_DeleteAdjLayer(const int32_t seqid);
  bool UpdateAdjLayer(const AdjLayer& adj_layer);
  int32_t send_UpdateAdjLayer(const AdjLayer& adj_layer);
  bool recv_UpdateAdjLayer(const int32_t seqid);
  void GetAdjLayerById(AdjLayer& _return, const int32_t id);
  int32_t send_GetAdjLayerById(const int32_t id);
  void recv_GetAdjLayerById(AdjLayer& _return, const int32_t seqid);
  void GetAdjLayerByForeignKey(AdjLayer& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetAdjLayerByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetAdjLayerByForeignKey(AdjLayer& _return, const int32_t seqid);
  void GetAdjLayerList(std::vector<AdjLayer> & _return);
  int32_t send_GetAdjLayerList();
  void recv_GetAdjLayerList(std::vector<AdjLayer> & _return, const int32_t seqid);
  void GetAdjLayerIds(std::vector<int32_t> & _return);
  int32_t send_GetAdjLayerIds();
  void recv_GetAdjLayerIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetAdjLayerNames(std::vector<std::string> & _return);
  int32_t send_GetAdjLayerNames();
  void recv_GetAdjLayerNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreAdjLayer(const std::vector<AdjLayer> & objs);
  int32_t send_AddMoreAdjLayer(const std::vector<AdjLayer> & objs);
  void recv_AddMoreAdjLayer(const int32_t seqid);
  void DeleteMoreAdjLayer(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreAdjLayer(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreAdjLayer(const int32_t seqid);
  void GetAdjLayerByFields(AdjLayer& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetAdjLayerByFields(const std::map<std::string, std::string> & fields);
  void recv_GetAdjLayerByFields(AdjLayer& _return, const int32_t seqid);
  void GetAdjLayerByFields1(AdjLayer& _return, const std::string& field, const std::string& value);
  int32_t send_GetAdjLayerByFields1(const std::string& field, const std::string& value);
  void recv_GetAdjLayerByFields1(AdjLayer& _return, const int32_t seqid);
  void GetAdjLayerByFields2(AdjLayer& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetAdjLayerByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetAdjLayerByFields2(AdjLayer& _return, const int32_t seqid);
  void GetAdjLayerListByFields(std::vector<AdjLayer> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetAdjLayerListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetAdjLayerListByFields(std::vector<AdjLayer> & _return, const int32_t seqid);
  void GetAdjLayerListByFields1(std::vector<AdjLayer> & _return, const std::string& field, const std::string& value);
  int32_t send_GetAdjLayerListByFields1(const std::string& field, const std::string& value);
  void recv_GetAdjLayerListByFields1(std::vector<AdjLayer> & _return, const int32_t seqid);
  void GetAdjLayerListByFields2(std::vector<AdjLayer> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetAdjLayerListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetAdjLayerListByFields2(std::vector<AdjLayer> & _return, const int32_t seqid);
  int32_t AddCoal(const Coal& coal);
  int32_t send_AddCoal(const Coal& coal);
  int32_t recv_AddCoal(const int32_t seqid);
  bool DeleteCoal(const int32_t id);
  int32_t send_DeleteCoal(const int32_t id);
  bool recv_DeleteCoal(const int32_t seqid);
  bool UpdateCoal(const Coal& coal);
  int32_t send_UpdateCoal(const Coal& coal);
  bool recv_UpdateCoal(const int32_t seqid);
  void GetCoalById(Coal& _return, const int32_t id);
  int32_t send_GetCoalById(const int32_t id);
  void recv_GetCoalById(Coal& _return, const int32_t seqid);
  void GetCoalByForeignKey(Coal& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetCoalByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetCoalByForeignKey(Coal& _return, const int32_t seqid);
  void GetCoalList(std::vector<Coal> & _return);
  int32_t send_GetCoalList();
  void recv_GetCoalList(std::vector<Coal> & _return, const int32_t seqid);
  void GetCoalIds(std::vector<int32_t> & _return);
  int32_t send_GetCoalIds();
  void recv_GetCoalIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetCoalNames(std::vector<std::string> & _return);
  int32_t send_GetCoalNames();
  void recv_GetCoalNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreCoal(const std::vector<Coal> & objs);
  int32_t send_AddMoreCoal(const std::vector<Coal> & objs);
  void recv_AddMoreCoal(const int32_t seqid);
  void DeleteMoreCoal(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreCoal(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreCoal(const int32_t seqid);
  void GetCoalByFields(Coal& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetCoalByFields(const std::map<std::string, std::string> & fields);
  void recv_GetCoalByFields(Coal& _return, const int32_t seqid);
  void GetCoalByFields1(Coal& _return, const std::string& field, const std::string& value);
  int32_t send_GetCoalByFields1(const std::string& field, const std::string& value);
  void recv_GetCoalByFields1(Coal& _return, const int32_t seqid);
  void GetCoalByFields2(Coal& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetCoalByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetCoalByFields2(Coal& _return, const int32_t seqid);
  void GetCoalListByFields(std::vector<Coal> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetCoalListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetCoalListByFields(std::vector<Coal> & _return, const int32_t seqid);
  void GetCoalListByFields1(std::vector<Coal> & _return, const std::string& field, const std::string& value);
  int32_t send_GetCoalListByFields1(const std::string& field, const std::string& value);
  void recv_GetCoalListByFields1(std::vector<Coal> & _return, const int32_t seqid);
  void GetCoalListByFields2(std::vector<Coal> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetCoalListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetCoalListByFields2(std::vector<Coal> & _return, const int32_t seqid);
  int32_t AddComplexity(const Complexity& complexity);
  int32_t send_AddComplexity(const Complexity& complexity);
  int32_t recv_AddComplexity(const int32_t seqid);
  bool DeleteComplexity(const int32_t id);
  int32_t send_DeleteComplexity(const int32_t id);
  bool recv_DeleteComplexity(const int32_t seqid);
  bool UpdateComplexity(const Complexity& complexity);
  int32_t send_UpdateComplexity(const Complexity& complexity);
  bool recv_UpdateComplexity(const int32_t seqid);
  void GetComplexityById(Complexity& _return, const int32_t id);
  int32_t send_GetComplexityById(const int32_t id);
  void recv_GetComplexityById(Complexity& _return, const int32_t seqid);
  void GetComplexityByForeignKey(Complexity& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetComplexityByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetComplexityByForeignKey(Complexity& _return, const int32_t seqid);
  void GetComplexityList(std::vector<Complexity> & _return);
  int32_t send_GetComplexityList();
  void recv_GetComplexityList(std::vector<Complexity> & _return, const int32_t seqid);
  void GetComplexityIds(std::vector<int32_t> & _return);
  int32_t send_GetComplexityIds();
  void recv_GetComplexityIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetComplexityNames(std::vector<std::string> & _return);
  int32_t send_GetComplexityNames();
  void recv_GetComplexityNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreComplexity(const std::vector<Complexity> & objs);
  int32_t send_AddMoreComplexity(const std::vector<Complexity> & objs);
  void recv_AddMoreComplexity(const int32_t seqid);
  void DeleteMoreComplexity(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreComplexity(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreComplexity(const int32_t seqid);
  void GetComplexityByFields(Complexity& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetComplexityByFields(const std::map<std::string, std::string> & fields);
  void recv_GetComplexityByFields(Complexity& _return, const int32_t seqid);
  void GetComplexityByFields1(Complexity& _return, const std::string& field, const std::string& value);
  int32_t send_GetComplexityByFields1(const std::string& field, const std::string& value);
  void recv_GetComplexityByFields1(Complexity& _return, const int32_t seqid);
  void GetComplexityByFields2(Complexity& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetComplexityByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetComplexityByFields2(Complexity& _return, const int32_t seqid);
  void GetComplexityListByFields(std::vector<Complexity> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetComplexityListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetComplexityListByFields(std::vector<Complexity> & _return, const int32_t seqid);
  void GetComplexityListByFields1(std::vector<Complexity> & _return, const std::string& field, const std::string& value);
  int32_t send_GetComplexityListByFields1(const std::string& field, const std::string& value);
  void recv_GetComplexityListByFields1(std::vector<Complexity> & _return, const int32_t seqid);
  void GetComplexityListByFields2(std::vector<Complexity> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetComplexityListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetComplexityListByFields2(std::vector<Complexity> & _return, const int32_t seqid);
  int32_t AddDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& design_drilling_surf_technology);
  int32_t send_AddDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& design_drilling_surf_technology);
  int32_t recv_AddDesignDrillingSurfTechnology(const int32_t seqid);
  bool DeleteDesignDrillingSurfTechnology(const int32_t id);
  int32_t send_DeleteDesignDrillingSurfTechnology(const int32_t id);
  bool recv_DeleteDesignDrillingSurfTechnology(const int32_t seqid);
  bool UpdateDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& design_drilling_surf_technology);
  int32_t send_UpdateDesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& design_drilling_surf_technology);
  bool recv_UpdateDesignDrillingSurfTechnology(const int32_t seqid);
  void GetDesignDrillingSurfTechnologyById(DesignDrillingSurfTechnology& _return, const int32_t id);
  int32_t send_GetDesignDrillingSurfTechnologyById(const int32_t id);
  void recv_GetDesignDrillingSurfTechnologyById(DesignDrillingSurfTechnology& _return, const int32_t seqid);
  void GetDesignDrillingSurfTechnologyByForeignKey(DesignDrillingSurfTechnology& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetDesignDrillingSurfTechnologyByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDesignDrillingSurfTechnologyByForeignKey(DesignDrillingSurfTechnology& _return, const int32_t seqid);
  void GetDesignDrillingSurfTechnologyList(std::vector<DesignDrillingSurfTechnology> & _return);
  int32_t send_GetDesignDrillingSurfTechnologyList();
  void recv_GetDesignDrillingSurfTechnologyList(std::vector<DesignDrillingSurfTechnology> & _return, const int32_t seqid);
  void GetDesignDrillingSurfTechnologyIds(std::vector<int32_t> & _return);
  int32_t send_GetDesignDrillingSurfTechnologyIds();
  void recv_GetDesignDrillingSurfTechnologyIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetDesignDrillingSurfTechnologyNames(std::vector<std::string> & _return);
  int32_t send_GetDesignDrillingSurfTechnologyNames();
  void recv_GetDesignDrillingSurfTechnologyNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreDesignDrillingSurfTechnology(const std::vector<DesignDrillingSurfTechnology> & objs);
  int32_t send_AddMoreDesignDrillingSurfTechnology(const std::vector<DesignDrillingSurfTechnology> & objs);
  void recv_AddMoreDesignDrillingSurfTechnology(const int32_t seqid);
  void DeleteMoreDesignDrillingSurfTechnology(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreDesignDrillingSurfTechnology(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDesignDrillingSurfTechnology(const int32_t seqid);
  void GetDesignDrillingSurfTechnologyByFields(DesignDrillingSurfTechnology& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDesignDrillingSurfTechnologyByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignDrillingSurfTechnologyByFields(DesignDrillingSurfTechnology& _return, const int32_t seqid);
  void GetDesignDrillingSurfTechnologyByFields1(DesignDrillingSurfTechnology& _return, const std::string& field, const std::string& value);
  int32_t send_GetDesignDrillingSurfTechnologyByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignDrillingSurfTechnologyByFields1(DesignDrillingSurfTechnology& _return, const int32_t seqid);
  void GetDesignDrillingSurfTechnologyByFields2(DesignDrillingSurfTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDesignDrillingSurfTechnologyByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignDrillingSurfTechnologyByFields2(DesignDrillingSurfTechnology& _return, const int32_t seqid);
  void GetDesignDrillingSurfTechnologyListByFields(std::vector<DesignDrillingSurfTechnology> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDesignDrillingSurfTechnologyListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignDrillingSurfTechnologyListByFields(std::vector<DesignDrillingSurfTechnology> & _return, const int32_t seqid);
  void GetDesignDrillingSurfTechnologyListByFields1(std::vector<DesignDrillingSurfTechnology> & _return, const std::string& field, const std::string& value);
  int32_t send_GetDesignDrillingSurfTechnologyListByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignDrillingSurfTechnologyListByFields1(std::vector<DesignDrillingSurfTechnology> & _return, const int32_t seqid);
  void GetDesignDrillingSurfTechnologyListByFields2(std::vector<DesignDrillingSurfTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDesignDrillingSurfTechnologyListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignDrillingSurfTechnologyListByFields2(std::vector<DesignDrillingSurfTechnology> & _return, const int32_t seqid);
  int32_t AddDesignGoafTechnology(const DesignGoafTechnology& design_goaf_technology);
  int32_t send_AddDesignGoafTechnology(const DesignGoafTechnology& design_goaf_technology);
  int32_t recv_AddDesignGoafTechnology(const int32_t seqid);
  bool DeleteDesignGoafTechnology(const int32_t id);
  int32_t send_DeleteDesignGoafTechnology(const int32_t id);
  bool recv_DeleteDesignGoafTechnology(const int32_t seqid);
  bool UpdateDesignGoafTechnology(const DesignGoafTechnology& design_goaf_technology);
  int32_t send_UpdateDesignGoafTechnology(const DesignGoafTechnology& design_goaf_technology);
  bool recv_UpdateDesignGoafTechnology(const int32_t seqid);
  void GetDesignGoafTechnologyById(DesignGoafTechnology& _return, const int32_t id);
  int32_t send_GetDesignGoafTechnologyById(const int32_t id);
  void recv_GetDesignGoafTechnologyById(DesignGoafTechnology& _return, const int32_t seqid);
  void GetDesignGoafTechnologyByForeignKey(DesignGoafTechnology& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetDesignGoafTechnologyByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDesignGoafTechnologyByForeignKey(DesignGoafTechnology& _return, const int32_t seqid);
  void GetDesignGoafTechnologyList(std::vector<DesignGoafTechnology> & _return);
  int32_t send_GetDesignGoafTechnologyList();
  void recv_GetDesignGoafTechnologyList(std::vector<DesignGoafTechnology> & _return, const int32_t seqid);
  void GetDesignGoafTechnologyIds(std::vector<int32_t> & _return);
  int32_t send_GetDesignGoafTechnologyIds();
  void recv_GetDesignGoafTechnologyIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetDesignGoafTechnologyNames(std::vector<std::string> & _return);
  int32_t send_GetDesignGoafTechnologyNames();
  void recv_GetDesignGoafTechnologyNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreDesignGoafTechnology(const std::vector<DesignGoafTechnology> & objs);
  int32_t send_AddMoreDesignGoafTechnology(const std::vector<DesignGoafTechnology> & objs);
  void recv_AddMoreDesignGoafTechnology(const int32_t seqid);
  void DeleteMoreDesignGoafTechnology(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreDesignGoafTechnology(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDesignGoafTechnology(const int32_t seqid);
  void GetDesignGoafTechnologyByFields(DesignGoafTechnology& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDesignGoafTechnologyByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignGoafTechnologyByFields(DesignGoafTechnology& _return, const int32_t seqid);
  void GetDesignGoafTechnologyByFields1(DesignGoafTechnology& _return, const std::string& field, const std::string& value);
  int32_t send_GetDesignGoafTechnologyByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignGoafTechnologyByFields1(DesignGoafTechnology& _return, const int32_t seqid);
  void GetDesignGoafTechnologyByFields2(DesignGoafTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDesignGoafTechnologyByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignGoafTechnologyByFields2(DesignGoafTechnology& _return, const int32_t seqid);
  void GetDesignGoafTechnologyListByFields(std::vector<DesignGoafTechnology> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDesignGoafTechnologyListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignGoafTechnologyListByFields(std::vector<DesignGoafTechnology> & _return, const int32_t seqid);
  void GetDesignGoafTechnologyListByFields1(std::vector<DesignGoafTechnology> & _return, const std::string& field, const std::string& value);
  int32_t send_GetDesignGoafTechnologyListByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignGoafTechnologyListByFields1(std::vector<DesignGoafTechnology> & _return, const int32_t seqid);
  void GetDesignGoafTechnologyListByFields2(std::vector<DesignGoafTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDesignGoafTechnologyListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignGoafTechnologyListByFields2(std::vector<DesignGoafTechnology> & _return, const int32_t seqid);
  int32_t AddDesignPore(const DesignPore& design_pore);
  int32_t send_AddDesignPore(const DesignPore& design_pore);
  int32_t recv_AddDesignPore(const int32_t seqid);
  bool DeleteDesignPore(const int32_t id);
  int32_t send_DeleteDesignPore(const int32_t id);
  bool recv_DeleteDesignPore(const int32_t seqid);
  bool UpdateDesignPore(const DesignPore& design_pore);
  int32_t send_UpdateDesignPore(const DesignPore& design_pore);
  bool recv_UpdateDesignPore(const int32_t seqid);
  void GetDesignPoreById(DesignPore& _return, const int32_t id);
  int32_t send_GetDesignPoreById(const int32_t id);
  void recv_GetDesignPoreById(DesignPore& _return, const int32_t seqid);
  void GetDesignPoreByForeignKey(DesignPore& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetDesignPoreByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDesignPoreByForeignKey(DesignPore& _return, const int32_t seqid);
  void GetDesignPoreList(std::vector<DesignPore> & _return);
  int32_t send_GetDesignPoreList();
  void recv_GetDesignPoreList(std::vector<DesignPore> & _return, const int32_t seqid);
  void GetDesignPoreIds(std::vector<int32_t> & _return);
  int32_t send_GetDesignPoreIds();
  void recv_GetDesignPoreIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetDesignPoreNames(std::vector<std::string> & _return);
  int32_t send_GetDesignPoreNames();
  void recv_GetDesignPoreNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreDesignPore(const std::vector<DesignPore> & objs);
  int32_t send_AddMoreDesignPore(const std::vector<DesignPore> & objs);
  void recv_AddMoreDesignPore(const int32_t seqid);
  void DeleteMoreDesignPore(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreDesignPore(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDesignPore(const int32_t seqid);
  void GetDesignPoreByFields(DesignPore& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDesignPoreByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignPoreByFields(DesignPore& _return, const int32_t seqid);
  void GetDesignPoreByFields1(DesignPore& _return, const std::string& field, const std::string& value);
  int32_t send_GetDesignPoreByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignPoreByFields1(DesignPore& _return, const int32_t seqid);
  void GetDesignPoreByFields2(DesignPore& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDesignPoreByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignPoreByFields2(DesignPore& _return, const int32_t seqid);
  void GetDesignPoreListByFields(std::vector<DesignPore> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDesignPoreListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignPoreListByFields(std::vector<DesignPore> & _return, const int32_t seqid);
  void GetDesignPoreListByFields1(std::vector<DesignPore> & _return, const std::string& field, const std::string& value);
  int32_t send_GetDesignPoreListByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignPoreListByFields1(std::vector<DesignPore> & _return, const int32_t seqid);
  void GetDesignPoreListByFields2(std::vector<DesignPore> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDesignPoreListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignPoreListByFields2(std::vector<DesignPore> & _return, const int32_t seqid);
  int32_t AddDesignSite(const DesignSite& design_site);
  int32_t send_AddDesignSite(const DesignSite& design_site);
  int32_t recv_AddDesignSite(const int32_t seqid);
  bool DeleteDesignSite(const int32_t id);
  int32_t send_DeleteDesignSite(const int32_t id);
  bool recv_DeleteDesignSite(const int32_t seqid);
  bool UpdateDesignSite(const DesignSite& design_site);
  int32_t send_UpdateDesignSite(const DesignSite& design_site);
  bool recv_UpdateDesignSite(const int32_t seqid);
  void GetDesignSiteById(DesignSite& _return, const int32_t id);
  int32_t send_GetDesignSiteById(const int32_t id);
  void recv_GetDesignSiteById(DesignSite& _return, const int32_t seqid);
  void GetDesignSiteByForeignKey(DesignSite& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetDesignSiteByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDesignSiteByForeignKey(DesignSite& _return, const int32_t seqid);
  void GetDesignSiteList(std::vector<DesignSite> & _return);
  int32_t send_GetDesignSiteList();
  void recv_GetDesignSiteList(std::vector<DesignSite> & _return, const int32_t seqid);
  void GetDesignSiteIds(std::vector<int32_t> & _return);
  int32_t send_GetDesignSiteIds();
  void recv_GetDesignSiteIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetDesignSiteNames(std::vector<std::string> & _return);
  int32_t send_GetDesignSiteNames();
  void recv_GetDesignSiteNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreDesignSite(const std::vector<DesignSite> & objs);
  int32_t send_AddMoreDesignSite(const std::vector<DesignSite> & objs);
  void recv_AddMoreDesignSite(const int32_t seqid);
  void DeleteMoreDesignSite(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreDesignSite(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDesignSite(const int32_t seqid);
  void GetDesignSiteByFields(DesignSite& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDesignSiteByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignSiteByFields(DesignSite& _return, const int32_t seqid);
  void GetDesignSiteByFields1(DesignSite& _return, const std::string& field, const std::string& value);
  int32_t send_GetDesignSiteByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignSiteByFields1(DesignSite& _return, const int32_t seqid);
  void GetDesignSiteByFields2(DesignSite& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDesignSiteByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignSiteByFields2(DesignSite& _return, const int32_t seqid);
  void GetDesignSiteListByFields(std::vector<DesignSite> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDesignSiteListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignSiteListByFields(std::vector<DesignSite> & _return, const int32_t seqid);
  void GetDesignSiteListByFields1(std::vector<DesignSite> & _return, const std::string& field, const std::string& value);
  int32_t send_GetDesignSiteListByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignSiteListByFields1(std::vector<DesignSite> & _return, const int32_t seqid);
  void GetDesignSiteListByFields2(std::vector<DesignSite> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDesignSiteListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignSiteListByFields2(std::vector<DesignSite> & _return, const int32_t seqid);
  int32_t AddDesignTechnology(const DesignTechnology& design_technology);
  int32_t send_AddDesignTechnology(const DesignTechnology& design_technology);
  int32_t recv_AddDesignTechnology(const int32_t seqid);
  bool DeleteDesignTechnology(const int32_t id);
  int32_t send_DeleteDesignTechnology(const int32_t id);
  bool recv_DeleteDesignTechnology(const int32_t seqid);
  bool UpdateDesignTechnology(const DesignTechnology& design_technology);
  int32_t send_UpdateDesignTechnology(const DesignTechnology& design_technology);
  bool recv_UpdateDesignTechnology(const int32_t seqid);
  void GetDesignTechnologyById(DesignTechnology& _return, const int32_t id);
  int32_t send_GetDesignTechnologyById(const int32_t id);
  void recv_GetDesignTechnologyById(DesignTechnology& _return, const int32_t seqid);
  void GetDesignTechnologyByForeignKey(DesignTechnology& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetDesignTechnologyByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDesignTechnologyByForeignKey(DesignTechnology& _return, const int32_t seqid);
  void GetDesignTechnologyList(std::vector<DesignTechnology> & _return);
  int32_t send_GetDesignTechnologyList();
  void recv_GetDesignTechnologyList(std::vector<DesignTechnology> & _return, const int32_t seqid);
  void GetDesignTechnologyIds(std::vector<int32_t> & _return);
  int32_t send_GetDesignTechnologyIds();
  void recv_GetDesignTechnologyIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetDesignTechnologyNames(std::vector<std::string> & _return);
  int32_t send_GetDesignTechnologyNames();
  void recv_GetDesignTechnologyNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreDesignTechnology(const std::vector<DesignTechnology> & objs);
  int32_t send_AddMoreDesignTechnology(const std::vector<DesignTechnology> & objs);
  void recv_AddMoreDesignTechnology(const int32_t seqid);
  void DeleteMoreDesignTechnology(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreDesignTechnology(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDesignTechnology(const int32_t seqid);
  void GetDesignTechnologyByFields(DesignTechnology& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDesignTechnologyByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignTechnologyByFields(DesignTechnology& _return, const int32_t seqid);
  void GetDesignTechnologyByFields1(DesignTechnology& _return, const std::string& field, const std::string& value);
  int32_t send_GetDesignTechnologyByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignTechnologyByFields1(DesignTechnology& _return, const int32_t seqid);
  void GetDesignTechnologyByFields2(DesignTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDesignTechnologyByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignTechnologyByFields2(DesignTechnology& _return, const int32_t seqid);
  void GetDesignTechnologyListByFields(std::vector<DesignTechnology> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDesignTechnologyListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignTechnologyListByFields(std::vector<DesignTechnology> & _return, const int32_t seqid);
  void GetDesignTechnologyListByFields1(std::vector<DesignTechnology> & _return, const std::string& field, const std::string& value);
  int32_t send_GetDesignTechnologyListByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignTechnologyListByFields1(std::vector<DesignTechnology> & _return, const int32_t seqid);
  void GetDesignTechnologyListByFields2(std::vector<DesignTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDesignTechnologyListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignTechnologyListByFields2(std::vector<DesignTechnology> & _return, const int32_t seqid);
  int32_t AddDesignWorkSurfTechnology(const DesignWorkSurfTechnology& design_work_surf_technology);
  int32_t send_AddDesignWorkSurfTechnology(const DesignWorkSurfTechnology& design_work_surf_technology);
  int32_t recv_AddDesignWorkSurfTechnology(const int32_t seqid);
  bool DeleteDesignWorkSurfTechnology(const int32_t id);
  int32_t send_DeleteDesignWorkSurfTechnology(const int32_t id);
  bool recv_DeleteDesignWorkSurfTechnology(const int32_t seqid);
  bool UpdateDesignWorkSurfTechnology(const DesignWorkSurfTechnology& design_work_surf_technology);
  int32_t send_UpdateDesignWorkSurfTechnology(const DesignWorkSurfTechnology& design_work_surf_technology);
  bool recv_UpdateDesignWorkSurfTechnology(const int32_t seqid);
  void GetDesignWorkSurfTechnologyById(DesignWorkSurfTechnology& _return, const int32_t id);
  int32_t send_GetDesignWorkSurfTechnologyById(const int32_t id);
  void recv_GetDesignWorkSurfTechnologyById(DesignWorkSurfTechnology& _return, const int32_t seqid);
  void GetDesignWorkSurfTechnologyByForeignKey(DesignWorkSurfTechnology& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetDesignWorkSurfTechnologyByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDesignWorkSurfTechnologyByForeignKey(DesignWorkSurfTechnology& _return, const int32_t seqid);
  void GetDesignWorkSurfTechnologyList(std::vector<DesignWorkSurfTechnology> & _return);
  int32_t send_GetDesignWorkSurfTechnologyList();
  void recv_GetDesignWorkSurfTechnologyList(std::vector<DesignWorkSurfTechnology> & _return, const int32_t seqid);
  void GetDesignWorkSurfTechnologyIds(std::vector<int32_t> & _return);
  int32_t send_GetDesignWorkSurfTechnologyIds();
  void recv_GetDesignWorkSurfTechnologyIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetDesignWorkSurfTechnologyNames(std::vector<std::string> & _return);
  int32_t send_GetDesignWorkSurfTechnologyNames();
  void recv_GetDesignWorkSurfTechnologyNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreDesignWorkSurfTechnology(const std::vector<DesignWorkSurfTechnology> & objs);
  int32_t send_AddMoreDesignWorkSurfTechnology(const std::vector<DesignWorkSurfTechnology> & objs);
  void recv_AddMoreDesignWorkSurfTechnology(const int32_t seqid);
  void DeleteMoreDesignWorkSurfTechnology(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreDesignWorkSurfTechnology(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDesignWorkSurfTechnology(const int32_t seqid);
  void GetDesignWorkSurfTechnologyByFields(DesignWorkSurfTechnology& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDesignWorkSurfTechnologyByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignWorkSurfTechnologyByFields(DesignWorkSurfTechnology& _return, const int32_t seqid);
  void GetDesignWorkSurfTechnologyByFields1(DesignWorkSurfTechnology& _return, const std::string& field, const std::string& value);
  int32_t send_GetDesignWorkSurfTechnologyByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignWorkSurfTechnologyByFields1(DesignWorkSurfTechnology& _return, const int32_t seqid);
  void GetDesignWorkSurfTechnologyByFields2(DesignWorkSurfTechnology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDesignWorkSurfTechnologyByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignWorkSurfTechnologyByFields2(DesignWorkSurfTechnology& _return, const int32_t seqid);
  void GetDesignWorkSurfTechnologyListByFields(std::vector<DesignWorkSurfTechnology> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDesignWorkSurfTechnologyListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDesignWorkSurfTechnologyListByFields(std::vector<DesignWorkSurfTechnology> & _return, const int32_t seqid);
  void GetDesignWorkSurfTechnologyListByFields1(std::vector<DesignWorkSurfTechnology> & _return, const std::string& field, const std::string& value);
  int32_t send_GetDesignWorkSurfTechnologyListByFields1(const std::string& field, const std::string& value);
  void recv_GetDesignWorkSurfTechnologyListByFields1(std::vector<DesignWorkSurfTechnology> & _return, const int32_t seqid);
  void GetDesignWorkSurfTechnologyListByFields2(std::vector<DesignWorkSurfTechnology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDesignWorkSurfTechnologyListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDesignWorkSurfTechnologyListByFields2(std::vector<DesignWorkSurfTechnology> & _return, const int32_t seqid);
  int32_t AddDrillingRadiusParam(const DrillingRadiusParam& drilling_radius_param);
  int32_t send_AddDrillingRadiusParam(const DrillingRadiusParam& drilling_radius_param);
  int32_t recv_AddDrillingRadiusParam(const int32_t seqid);
  bool DeleteDrillingRadiusParam(const int32_t id);
  int32_t send_DeleteDrillingRadiusParam(const int32_t id);
  bool recv_DeleteDrillingRadiusParam(const int32_t seqid);
  bool UpdateDrillingRadiusParam(const DrillingRadiusParam& drilling_radius_param);
  int32_t send_UpdateDrillingRadiusParam(const DrillingRadiusParam& drilling_radius_param);
  bool recv_UpdateDrillingRadiusParam(const int32_t seqid);
  void GetDrillingRadiusParamById(DrillingRadiusParam& _return, const int32_t id);
  int32_t send_GetDrillingRadiusParamById(const int32_t id);
  void recv_GetDrillingRadiusParamById(DrillingRadiusParam& _return, const int32_t seqid);
  void GetDrillingRadiusParamByForeignKey(DrillingRadiusParam& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetDrillingRadiusParamByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDrillingRadiusParamByForeignKey(DrillingRadiusParam& _return, const int32_t seqid);
  void GetDrillingRadiusParamList(std::vector<DrillingRadiusParam> & _return);
  int32_t send_GetDrillingRadiusParamList();
  void recv_GetDrillingRadiusParamList(std::vector<DrillingRadiusParam> & _return, const int32_t seqid);
  void GetDrillingRadiusParamIds(std::vector<int32_t> & _return);
  int32_t send_GetDrillingRadiusParamIds();
  void recv_GetDrillingRadiusParamIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetDrillingRadiusParamNames(std::vector<std::string> & _return);
  int32_t send_GetDrillingRadiusParamNames();
  void recv_GetDrillingRadiusParamNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreDrillingRadiusParam(const std::vector<DrillingRadiusParam> & objs);
  int32_t send_AddMoreDrillingRadiusParam(const std::vector<DrillingRadiusParam> & objs);
  void recv_AddMoreDrillingRadiusParam(const int32_t seqid);
  void DeleteMoreDrillingRadiusParam(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreDrillingRadiusParam(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDrillingRadiusParam(const int32_t seqid);
  void GetDrillingRadiusParamByFields(DrillingRadiusParam& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDrillingRadiusParamByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDrillingRadiusParamByFields(DrillingRadiusParam& _return, const int32_t seqid);
  void GetDrillingRadiusParamByFields1(DrillingRadiusParam& _return, const std::string& field, const std::string& value);
  int32_t send_GetDrillingRadiusParamByFields1(const std::string& field, const std::string& value);
  void recv_GetDrillingRadiusParamByFields1(DrillingRadiusParam& _return, const int32_t seqid);
  void GetDrillingRadiusParamByFields2(DrillingRadiusParam& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDrillingRadiusParamByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDrillingRadiusParamByFields2(DrillingRadiusParam& _return, const int32_t seqid);
  void GetDrillingRadiusParamListByFields(std::vector<DrillingRadiusParam> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDrillingRadiusParamListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDrillingRadiusParamListByFields(std::vector<DrillingRadiusParam> & _return, const int32_t seqid);
  void GetDrillingRadiusParamListByFields1(std::vector<DrillingRadiusParam> & _return, const std::string& field, const std::string& value);
  int32_t send_GetDrillingRadiusParamListByFields1(const std::string& field, const std::string& value);
  void recv_GetDrillingRadiusParamListByFields1(std::vector<DrillingRadiusParam> & _return, const int32_t seqid);
  void GetDrillingRadiusParamListByFields2(std::vector<DrillingRadiusParam> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDrillingRadiusParamListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDrillingRadiusParamListByFields2(std::vector<DrillingRadiusParam> & _return, const int32_t seqid);
  int32_t AddDrillingSurf(const DrillingSurf& drilling_surf);
  int32_t send_AddDrillingSurf(const DrillingSurf& drilling_surf);
  int32_t recv_AddDrillingSurf(const int32_t seqid);
  bool DeleteDrillingSurf(const int32_t id);
  int32_t send_DeleteDrillingSurf(const int32_t id);
  bool recv_DeleteDrillingSurf(const int32_t seqid);
  bool UpdateDrillingSurf(const DrillingSurf& drilling_surf);
  int32_t send_UpdateDrillingSurf(const DrillingSurf& drilling_surf);
  bool recv_UpdateDrillingSurf(const int32_t seqid);
  void GetDrillingSurfById(DrillingSurf& _return, const int32_t id);
  int32_t send_GetDrillingSurfById(const int32_t id);
  void recv_GetDrillingSurfById(DrillingSurf& _return, const int32_t seqid);
  void GetDrillingSurfByForeignKey(DrillingSurf& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetDrillingSurfByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetDrillingSurfByForeignKey(DrillingSurf& _return, const int32_t seqid);
  void GetDrillingSurfList(std::vector<DrillingSurf> & _return);
  int32_t send_GetDrillingSurfList();
  void recv_GetDrillingSurfList(std::vector<DrillingSurf> & _return, const int32_t seqid);
  void GetDrillingSurfIds(std::vector<int32_t> & _return);
  int32_t send_GetDrillingSurfIds();
  void recv_GetDrillingSurfIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetDrillingSurfNames(std::vector<std::string> & _return);
  int32_t send_GetDrillingSurfNames();
  void recv_GetDrillingSurfNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreDrillingSurf(const std::vector<DrillingSurf> & objs);
  int32_t send_AddMoreDrillingSurf(const std::vector<DrillingSurf> & objs);
  void recv_AddMoreDrillingSurf(const int32_t seqid);
  void DeleteMoreDrillingSurf(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreDrillingSurf(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreDrillingSurf(const int32_t seqid);
  void GetDrillingSurfByFields(DrillingSurf& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDrillingSurfByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDrillingSurfByFields(DrillingSurf& _return, const int32_t seqid);
  void GetDrillingSurfByFields1(DrillingSurf& _return, const std::string& field, const std::string& value);
  int32_t send_GetDrillingSurfByFields1(const std::string& field, const std::string& value);
  void recv_GetDrillingSurfByFields1(DrillingSurf& _return, const int32_t seqid);
  void GetDrillingSurfByFields2(DrillingSurf& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDrillingSurfByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDrillingSurfByFields2(DrillingSurf& _return, const int32_t seqid);
  void GetDrillingSurfListByFields(std::vector<DrillingSurf> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetDrillingSurfListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetDrillingSurfListByFields(std::vector<DrillingSurf> & _return, const int32_t seqid);
  void GetDrillingSurfListByFields1(std::vector<DrillingSurf> & _return, const std::string& field, const std::string& value);
  int32_t send_GetDrillingSurfListByFields1(const std::string& field, const std::string& value);
  void recv_GetDrillingSurfListByFields1(std::vector<DrillingSurf> & _return, const int32_t seqid);
  void GetDrillingSurfListByFields2(std::vector<DrillingSurf> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetDrillingSurfListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetDrillingSurfListByFields2(std::vector<DrillingSurf> & _return, const int32_t seqid);
  int32_t AddEvalUnit(const EvalUnit& eval_unit);
  int32_t send_AddEvalUnit(const EvalUnit& eval_unit);
  int32_t recv_AddEvalUnit(const int32_t seqid);
  bool DeleteEvalUnit(const int32_t id);
  int32_t send_DeleteEvalUnit(const int32_t id);
  bool recv_DeleteEvalUnit(const int32_t seqid);
  bool UpdateEvalUnit(const EvalUnit& eval_unit);
  int32_t send_UpdateEvalUnit(const EvalUnit& eval_unit);
  bool recv_UpdateEvalUnit(const int32_t seqid);
  void GetEvalUnitById(EvalUnit& _return, const int32_t id);
  int32_t send_GetEvalUnitById(const int32_t id);
  void recv_GetEvalUnitById(EvalUnit& _return, const int32_t seqid);
  void GetEvalUnitByForeignKey(EvalUnit& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetEvalUnitByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetEvalUnitByForeignKey(EvalUnit& _return, const int32_t seqid);
  void GetEvalUnitList(std::vector<EvalUnit> & _return);
  int32_t send_GetEvalUnitList();
  void recv_GetEvalUnitList(std::vector<EvalUnit> & _return, const int32_t seqid);
  void GetEvalUnitIds(std::vector<int32_t> & _return);
  int32_t send_GetEvalUnitIds();
  void recv_GetEvalUnitIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetEvalUnitNames(std::vector<std::string> & _return);
  int32_t send_GetEvalUnitNames();
  void recv_GetEvalUnitNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreEvalUnit(const std::vector<EvalUnit> & objs);
  int32_t send_AddMoreEvalUnit(const std::vector<EvalUnit> & objs);
  void recv_AddMoreEvalUnit(const int32_t seqid);
  void DeleteMoreEvalUnit(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreEvalUnit(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreEvalUnit(const int32_t seqid);
  void GetEvalUnitByFields(EvalUnit& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetEvalUnitByFields(const std::map<std::string, std::string> & fields);
  void recv_GetEvalUnitByFields(EvalUnit& _return, const int32_t seqid);
  void GetEvalUnitByFields1(EvalUnit& _return, const std::string& field, const std::string& value);
  int32_t send_GetEvalUnitByFields1(const std::string& field, const std::string& value);
  void recv_GetEvalUnitByFields1(EvalUnit& _return, const int32_t seqid);
  void GetEvalUnitByFields2(EvalUnit& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetEvalUnitByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetEvalUnitByFields2(EvalUnit& _return, const int32_t seqid);
  void GetEvalUnitListByFields(std::vector<EvalUnit> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetEvalUnitListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetEvalUnitListByFields(std::vector<EvalUnit> & _return, const int32_t seqid);
  void GetEvalUnitListByFields1(std::vector<EvalUnit> & _return, const std::string& field, const std::string& value);
  int32_t send_GetEvalUnitListByFields1(const std::string& field, const std::string& value);
  void recv_GetEvalUnitListByFields1(std::vector<EvalUnit> & _return, const int32_t seqid);
  void GetEvalUnitListByFields2(std::vector<EvalUnit> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetEvalUnitListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetEvalUnitListByFields2(std::vector<EvalUnit> & _return, const int32_t seqid);
  int32_t AddHighDrillingPore(const HighDrillingPore& high_drilling_pore);
  int32_t send_AddHighDrillingPore(const HighDrillingPore& high_drilling_pore);
  int32_t recv_AddHighDrillingPore(const int32_t seqid);
  bool DeleteHighDrillingPore(const int32_t id);
  int32_t send_DeleteHighDrillingPore(const int32_t id);
  bool recv_DeleteHighDrillingPore(const int32_t seqid);
  bool UpdateHighDrillingPore(const HighDrillingPore& high_drilling_pore);
  int32_t send_UpdateHighDrillingPore(const HighDrillingPore& high_drilling_pore);
  bool recv_UpdateHighDrillingPore(const int32_t seqid);
  void GetHighDrillingPoreById(HighDrillingPore& _return, const int32_t id);
  int32_t send_GetHighDrillingPoreById(const int32_t id);
  void recv_GetHighDrillingPoreById(HighDrillingPore& _return, const int32_t seqid);
  void GetHighDrillingPoreByForeignKey(HighDrillingPore& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetHighDrillingPoreByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetHighDrillingPoreByForeignKey(HighDrillingPore& _return, const int32_t seqid);
  void GetHighDrillingPoreList(std::vector<HighDrillingPore> & _return);
  int32_t send_GetHighDrillingPoreList();
  void recv_GetHighDrillingPoreList(std::vector<HighDrillingPore> & _return, const int32_t seqid);
  void GetHighDrillingPoreIds(std::vector<int32_t> & _return);
  int32_t send_GetHighDrillingPoreIds();
  void recv_GetHighDrillingPoreIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetHighDrillingPoreNames(std::vector<std::string> & _return);
  int32_t send_GetHighDrillingPoreNames();
  void recv_GetHighDrillingPoreNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreHighDrillingPore(const std::vector<HighDrillingPore> & objs);
  int32_t send_AddMoreHighDrillingPore(const std::vector<HighDrillingPore> & objs);
  void recv_AddMoreHighDrillingPore(const int32_t seqid);
  void DeleteMoreHighDrillingPore(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreHighDrillingPore(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreHighDrillingPore(const int32_t seqid);
  void GetHighDrillingPoreByFields(HighDrillingPore& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetHighDrillingPoreByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingPoreByFields(HighDrillingPore& _return, const int32_t seqid);
  void GetHighDrillingPoreByFields1(HighDrillingPore& _return, const std::string& field, const std::string& value);
  int32_t send_GetHighDrillingPoreByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingPoreByFields1(HighDrillingPore& _return, const int32_t seqid);
  void GetHighDrillingPoreByFields2(HighDrillingPore& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetHighDrillingPoreByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingPoreByFields2(HighDrillingPore& _return, const int32_t seqid);
  void GetHighDrillingPoreListByFields(std::vector<HighDrillingPore> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetHighDrillingPoreListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingPoreListByFields(std::vector<HighDrillingPore> & _return, const int32_t seqid);
  void GetHighDrillingPoreListByFields1(std::vector<HighDrillingPore> & _return, const std::string& field, const std::string& value);
  int32_t send_GetHighDrillingPoreListByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingPoreListByFields1(std::vector<HighDrillingPore> & _return, const int32_t seqid);
  void GetHighDrillingPoreListByFields2(std::vector<HighDrillingPore> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetHighDrillingPoreListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingPoreListByFields2(std::vector<HighDrillingPore> & _return, const int32_t seqid);
  int32_t AddHighDrillingPoreParam(const HighDrillingPoreParam& high_drilling_pore_param);
  int32_t send_AddHighDrillingPoreParam(const HighDrillingPoreParam& high_drilling_pore_param);
  int32_t recv_AddHighDrillingPoreParam(const int32_t seqid);
  bool DeleteHighDrillingPoreParam(const int32_t id);
  int32_t send_DeleteHighDrillingPoreParam(const int32_t id);
  bool recv_DeleteHighDrillingPoreParam(const int32_t seqid);
  bool UpdateHighDrillingPoreParam(const HighDrillingPoreParam& high_drilling_pore_param);
  int32_t send_UpdateHighDrillingPoreParam(const HighDrillingPoreParam& high_drilling_pore_param);
  bool recv_UpdateHighDrillingPoreParam(const int32_t seqid);
  void GetHighDrillingPoreParamById(HighDrillingPoreParam& _return, const int32_t id);
  int32_t send_GetHighDrillingPoreParamById(const int32_t id);
  void recv_GetHighDrillingPoreParamById(HighDrillingPoreParam& _return, const int32_t seqid);
  void GetHighDrillingPoreParamByForeignKey(HighDrillingPoreParam& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetHighDrillingPoreParamByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetHighDrillingPoreParamByForeignKey(HighDrillingPoreParam& _return, const int32_t seqid);
  void GetHighDrillingPoreParamList(std::vector<HighDrillingPoreParam> & _return);
  int32_t send_GetHighDrillingPoreParamList();
  void recv_GetHighDrillingPoreParamList(std::vector<HighDrillingPoreParam> & _return, const int32_t seqid);
  void GetHighDrillingPoreParamIds(std::vector<int32_t> & _return);
  int32_t send_GetHighDrillingPoreParamIds();
  void recv_GetHighDrillingPoreParamIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetHighDrillingPoreParamNames(std::vector<std::string> & _return);
  int32_t send_GetHighDrillingPoreParamNames();
  void recv_GetHighDrillingPoreParamNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreHighDrillingPoreParam(const std::vector<HighDrillingPoreParam> & objs);
  int32_t send_AddMoreHighDrillingPoreParam(const std::vector<HighDrillingPoreParam> & objs);
  void recv_AddMoreHighDrillingPoreParam(const int32_t seqid);
  void DeleteMoreHighDrillingPoreParam(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreHighDrillingPoreParam(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreHighDrillingPoreParam(const int32_t seqid);
  void GetHighDrillingPoreParamByFields(HighDrillingPoreParam& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetHighDrillingPoreParamByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingPoreParamByFields(HighDrillingPoreParam& _return, const int32_t seqid);
  void GetHighDrillingPoreParamByFields1(HighDrillingPoreParam& _return, const std::string& field, const std::string& value);
  int32_t send_GetHighDrillingPoreParamByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingPoreParamByFields1(HighDrillingPoreParam& _return, const int32_t seqid);
  void GetHighDrillingPoreParamByFields2(HighDrillingPoreParam& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetHighDrillingPoreParamByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingPoreParamByFields2(HighDrillingPoreParam& _return, const int32_t seqid);
  void GetHighDrillingPoreParamListByFields(std::vector<HighDrillingPoreParam> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetHighDrillingPoreParamListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingPoreParamListByFields(std::vector<HighDrillingPoreParam> & _return, const int32_t seqid);
  void GetHighDrillingPoreParamListByFields1(std::vector<HighDrillingPoreParam> & _return, const std::string& field, const std::string& value);
  int32_t send_GetHighDrillingPoreParamListByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingPoreParamListByFields1(std::vector<HighDrillingPoreParam> & _return, const int32_t seqid);
  void GetHighDrillingPoreParamListByFields2(std::vector<HighDrillingPoreParam> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetHighDrillingPoreParamListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingPoreParamListByFields2(std::vector<HighDrillingPoreParam> & _return, const int32_t seqid);
  int32_t AddHighDrillingSiteParam(const HighDrillingSiteParam& high_drilling_site_param);
  int32_t send_AddHighDrillingSiteParam(const HighDrillingSiteParam& high_drilling_site_param);
  int32_t recv_AddHighDrillingSiteParam(const int32_t seqid);
  bool DeleteHighDrillingSiteParam(const int32_t id);
  int32_t send_DeleteHighDrillingSiteParam(const int32_t id);
  bool recv_DeleteHighDrillingSiteParam(const int32_t seqid);
  bool UpdateHighDrillingSiteParam(const HighDrillingSiteParam& high_drilling_site_param);
  int32_t send_UpdateHighDrillingSiteParam(const HighDrillingSiteParam& high_drilling_site_param);
  bool recv_UpdateHighDrillingSiteParam(const int32_t seqid);
  void GetHighDrillingSiteParamById(HighDrillingSiteParam& _return, const int32_t id);
  int32_t send_GetHighDrillingSiteParamById(const int32_t id);
  void recv_GetHighDrillingSiteParamById(HighDrillingSiteParam& _return, const int32_t seqid);
  void GetHighDrillingSiteParamByForeignKey(HighDrillingSiteParam& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetHighDrillingSiteParamByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetHighDrillingSiteParamByForeignKey(HighDrillingSiteParam& _return, const int32_t seqid);
  void GetHighDrillingSiteParamList(std::vector<HighDrillingSiteParam> & _return);
  int32_t send_GetHighDrillingSiteParamList();
  void recv_GetHighDrillingSiteParamList(std::vector<HighDrillingSiteParam> & _return, const int32_t seqid);
  void GetHighDrillingSiteParamIds(std::vector<int32_t> & _return);
  int32_t send_GetHighDrillingSiteParamIds();
  void recv_GetHighDrillingSiteParamIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetHighDrillingSiteParamNames(std::vector<std::string> & _return);
  int32_t send_GetHighDrillingSiteParamNames();
  void recv_GetHighDrillingSiteParamNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreHighDrillingSiteParam(const std::vector<HighDrillingSiteParam> & objs);
  int32_t send_AddMoreHighDrillingSiteParam(const std::vector<HighDrillingSiteParam> & objs);
  void recv_AddMoreHighDrillingSiteParam(const int32_t seqid);
  void DeleteMoreHighDrillingSiteParam(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreHighDrillingSiteParam(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreHighDrillingSiteParam(const int32_t seqid);
  void GetHighDrillingSiteParamByFields(HighDrillingSiteParam& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetHighDrillingSiteParamByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingSiteParamByFields(HighDrillingSiteParam& _return, const int32_t seqid);
  void GetHighDrillingSiteParamByFields1(HighDrillingSiteParam& _return, const std::string& field, const std::string& value);
  int32_t send_GetHighDrillingSiteParamByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingSiteParamByFields1(HighDrillingSiteParam& _return, const int32_t seqid);
  void GetHighDrillingSiteParamByFields2(HighDrillingSiteParam& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetHighDrillingSiteParamByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingSiteParamByFields2(HighDrillingSiteParam& _return, const int32_t seqid);
  void GetHighDrillingSiteParamListByFields(std::vector<HighDrillingSiteParam> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetHighDrillingSiteParamListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingSiteParamListByFields(std::vector<HighDrillingSiteParam> & _return, const int32_t seqid);
  void GetHighDrillingSiteParamListByFields1(std::vector<HighDrillingSiteParam> & _return, const std::string& field, const std::string& value);
  int32_t send_GetHighDrillingSiteParamListByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingSiteParamListByFields1(std::vector<HighDrillingSiteParam> & _return, const int32_t seqid);
  void GetHighDrillingSiteParamListByFields2(std::vector<HighDrillingSiteParam> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetHighDrillingSiteParamListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingSiteParamListByFields2(std::vector<HighDrillingSiteParam> & _return, const int32_t seqid);
  int32_t AddHighDrillingTunnel(const HighDrillingTunnel& high_drilling_tunnel);
  int32_t send_AddHighDrillingTunnel(const HighDrillingTunnel& high_drilling_tunnel);
  int32_t recv_AddHighDrillingTunnel(const int32_t seqid);
  bool DeleteHighDrillingTunnel(const int32_t id);
  int32_t send_DeleteHighDrillingTunnel(const int32_t id);
  bool recv_DeleteHighDrillingTunnel(const int32_t seqid);
  bool UpdateHighDrillingTunnel(const HighDrillingTunnel& high_drilling_tunnel);
  int32_t send_UpdateHighDrillingTunnel(const HighDrillingTunnel& high_drilling_tunnel);
  bool recv_UpdateHighDrillingTunnel(const int32_t seqid);
  void GetHighDrillingTunnelById(HighDrillingTunnel& _return, const int32_t id);
  int32_t send_GetHighDrillingTunnelById(const int32_t id);
  void recv_GetHighDrillingTunnelById(HighDrillingTunnel& _return, const int32_t seqid);
  void GetHighDrillingTunnelByForeignKey(HighDrillingTunnel& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetHighDrillingTunnelByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetHighDrillingTunnelByForeignKey(HighDrillingTunnel& _return, const int32_t seqid);
  void GetHighDrillingTunnelList(std::vector<HighDrillingTunnel> & _return);
  int32_t send_GetHighDrillingTunnelList();
  void recv_GetHighDrillingTunnelList(std::vector<HighDrillingTunnel> & _return, const int32_t seqid);
  void GetHighDrillingTunnelIds(std::vector<int32_t> & _return);
  int32_t send_GetHighDrillingTunnelIds();
  void recv_GetHighDrillingTunnelIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetHighDrillingTunnelNames(std::vector<std::string> & _return);
  int32_t send_GetHighDrillingTunnelNames();
  void recv_GetHighDrillingTunnelNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreHighDrillingTunnel(const std::vector<HighDrillingTunnel> & objs);
  int32_t send_AddMoreHighDrillingTunnel(const std::vector<HighDrillingTunnel> & objs);
  void recv_AddMoreHighDrillingTunnel(const int32_t seqid);
  void DeleteMoreHighDrillingTunnel(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreHighDrillingTunnel(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreHighDrillingTunnel(const int32_t seqid);
  void GetHighDrillingTunnelByFields(HighDrillingTunnel& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetHighDrillingTunnelByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingTunnelByFields(HighDrillingTunnel& _return, const int32_t seqid);
  void GetHighDrillingTunnelByFields1(HighDrillingTunnel& _return, const std::string& field, const std::string& value);
  int32_t send_GetHighDrillingTunnelByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingTunnelByFields1(HighDrillingTunnel& _return, const int32_t seqid);
  void GetHighDrillingTunnelByFields2(HighDrillingTunnel& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetHighDrillingTunnelByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingTunnelByFields2(HighDrillingTunnel& _return, const int32_t seqid);
  void GetHighDrillingTunnelListByFields(std::vector<HighDrillingTunnel> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetHighDrillingTunnelListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHighDrillingTunnelListByFields(std::vector<HighDrillingTunnel> & _return, const int32_t seqid);
  void GetHighDrillingTunnelListByFields1(std::vector<HighDrillingTunnel> & _return, const std::string& field, const std::string& value);
  int32_t send_GetHighDrillingTunnelListByFields1(const std::string& field, const std::string& value);
  void recv_GetHighDrillingTunnelListByFields1(std::vector<HighDrillingTunnel> & _return, const int32_t seqid);
  void GetHighDrillingTunnelListByFields2(std::vector<HighDrillingTunnel> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetHighDrillingTunnelListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHighDrillingTunnelListByFields2(std::vector<HighDrillingTunnel> & _return, const int32_t seqid);
  int32_t AddHydrGeo(const HydrGeo& hydr_geo);
  int32_t send_AddHydrGeo(const HydrGeo& hydr_geo);
  int32_t recv_AddHydrGeo(const int32_t seqid);
  bool DeleteHydrGeo(const int32_t id);
  int32_t send_DeleteHydrGeo(const int32_t id);
  bool recv_DeleteHydrGeo(const int32_t seqid);
  bool UpdateHydrGeo(const HydrGeo& hydr_geo);
  int32_t send_UpdateHydrGeo(const HydrGeo& hydr_geo);
  bool recv_UpdateHydrGeo(const int32_t seqid);
  void GetHydrGeoById(HydrGeo& _return, const int32_t id);
  int32_t send_GetHydrGeoById(const int32_t id);
  void recv_GetHydrGeoById(HydrGeo& _return, const int32_t seqid);
  void GetHydrGeoByForeignKey(HydrGeo& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetHydrGeoByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetHydrGeoByForeignKey(HydrGeo& _return, const int32_t seqid);
  void GetHydrGeoList(std::vector<HydrGeo> & _return);
  int32_t send_GetHydrGeoList();
  void recv_GetHydrGeoList(std::vector<HydrGeo> & _return, const int32_t seqid);
  void GetHydrGeoIds(std::vector<int32_t> & _return);
  int32_t send_GetHydrGeoIds();
  void recv_GetHydrGeoIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetHydrGeoNames(std::vector<std::string> & _return);
  int32_t send_GetHydrGeoNames();
  void recv_GetHydrGeoNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreHydrGeo(const std::vector<HydrGeo> & objs);
  int32_t send_AddMoreHydrGeo(const std::vector<HydrGeo> & objs);
  void recv_AddMoreHydrGeo(const int32_t seqid);
  void DeleteMoreHydrGeo(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreHydrGeo(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreHydrGeo(const int32_t seqid);
  void GetHydrGeoByFields(HydrGeo& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetHydrGeoByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHydrGeoByFields(HydrGeo& _return, const int32_t seqid);
  void GetHydrGeoByFields1(HydrGeo& _return, const std::string& field, const std::string& value);
  int32_t send_GetHydrGeoByFields1(const std::string& field, const std::string& value);
  void recv_GetHydrGeoByFields1(HydrGeo& _return, const int32_t seqid);
  void GetHydrGeoByFields2(HydrGeo& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetHydrGeoByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHydrGeoByFields2(HydrGeo& _return, const int32_t seqid);
  void GetHydrGeoListByFields(std::vector<HydrGeo> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetHydrGeoListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetHydrGeoListByFields(std::vector<HydrGeo> & _return, const int32_t seqid);
  void GetHydrGeoListByFields1(std::vector<HydrGeo> & _return, const std::string& field, const std::string& value);
  int32_t send_GetHydrGeoListByFields1(const std::string& field, const std::string& value);
  void recv_GetHydrGeoListByFields1(std::vector<HydrGeo> & _return, const int32_t seqid);
  void GetHydrGeoListByFields2(std::vector<HydrGeo> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetHydrGeoListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetHydrGeoListByFields2(std::vector<HydrGeo> & _return, const int32_t seqid);
  int32_t AddMine(const Mine& mine);
  int32_t send_AddMine(const Mine& mine);
  int32_t recv_AddMine(const int32_t seqid);
  bool DeleteMine(const int32_t id);
  int32_t send_DeleteMine(const int32_t id);
  bool recv_DeleteMine(const int32_t seqid);
  bool UpdateMine(const Mine& mine);
  int32_t send_UpdateMine(const Mine& mine);
  bool recv_UpdateMine(const int32_t seqid);
  void GetMineById(Mine& _return, const int32_t id);
  int32_t send_GetMineById(const int32_t id);
  void recv_GetMineById(Mine& _return, const int32_t seqid);
  void GetMineByForeignKey(Mine& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetMineByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetMineByForeignKey(Mine& _return, const int32_t seqid);
  void GetMineList(std::vector<Mine> & _return);
  int32_t send_GetMineList();
  void recv_GetMineList(std::vector<Mine> & _return, const int32_t seqid);
  void GetMineIds(std::vector<int32_t> & _return);
  int32_t send_GetMineIds();
  void recv_GetMineIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetMineNames(std::vector<std::string> & _return);
  int32_t send_GetMineNames();
  void recv_GetMineNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreMine(const std::vector<Mine> & objs);
  int32_t send_AddMoreMine(const std::vector<Mine> & objs);
  void recv_AddMoreMine(const int32_t seqid);
  void DeleteMoreMine(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreMine(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreMine(const int32_t seqid);
  void GetMineByFields(Mine& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetMineByFields(const std::map<std::string, std::string> & fields);
  void recv_GetMineByFields(Mine& _return, const int32_t seqid);
  void GetMineByFields1(Mine& _return, const std::string& field, const std::string& value);
  int32_t send_GetMineByFields1(const std::string& field, const std::string& value);
  void recv_GetMineByFields1(Mine& _return, const int32_t seqid);
  void GetMineByFields2(Mine& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetMineByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetMineByFields2(Mine& _return, const int32_t seqid);
  void GetMineListByFields(std::vector<Mine> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetMineListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetMineListByFields(std::vector<Mine> & _return, const int32_t seqid);
  void GetMineListByFields1(std::vector<Mine> & _return, const std::string& field, const std::string& value);
  int32_t send_GetMineListByFields1(const std::string& field, const std::string& value);
  void recv_GetMineListByFields1(std::vector<Mine> & _return, const int32_t seqid);
  void GetMineListByFields2(std::vector<Mine> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetMineListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetMineListByFields2(std::vector<Mine> & _return, const int32_t seqid);
  int32_t AddMineBase(const MineBase& mine_base);
  int32_t send_AddMineBase(const MineBase& mine_base);
  int32_t recv_AddMineBase(const int32_t seqid);
  bool DeleteMineBase(const int32_t id);
  int32_t send_DeleteMineBase(const int32_t id);
  bool recv_DeleteMineBase(const int32_t seqid);
  bool UpdateMineBase(const MineBase& mine_base);
  int32_t send_UpdateMineBase(const MineBase& mine_base);
  bool recv_UpdateMineBase(const int32_t seqid);
  void GetMineBaseById(MineBase& _return, const int32_t id);
  int32_t send_GetMineBaseById(const int32_t id);
  void recv_GetMineBaseById(MineBase& _return, const int32_t seqid);
  void GetMineBaseByForeignKey(MineBase& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetMineBaseByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetMineBaseByForeignKey(MineBase& _return, const int32_t seqid);
  void GetMineBaseList(std::vector<MineBase> & _return);
  int32_t send_GetMineBaseList();
  void recv_GetMineBaseList(std::vector<MineBase> & _return, const int32_t seqid);
  void GetMineBaseIds(std::vector<int32_t> & _return);
  int32_t send_GetMineBaseIds();
  void recv_GetMineBaseIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetMineBaseNames(std::vector<std::string> & _return);
  int32_t send_GetMineBaseNames();
  void recv_GetMineBaseNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreMineBase(const std::vector<MineBase> & objs);
  int32_t send_AddMoreMineBase(const std::vector<MineBase> & objs);
  void recv_AddMoreMineBase(const int32_t seqid);
  void DeleteMoreMineBase(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreMineBase(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreMineBase(const int32_t seqid);
  void GetMineBaseByFields(MineBase& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetMineBaseByFields(const std::map<std::string, std::string> & fields);
  void recv_GetMineBaseByFields(MineBase& _return, const int32_t seqid);
  void GetMineBaseByFields1(MineBase& _return, const std::string& field, const std::string& value);
  int32_t send_GetMineBaseByFields1(const std::string& field, const std::string& value);
  void recv_GetMineBaseByFields1(MineBase& _return, const int32_t seqid);
  void GetMineBaseByFields2(MineBase& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetMineBaseByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetMineBaseByFields2(MineBase& _return, const int32_t seqid);
  void GetMineBaseListByFields(std::vector<MineBase> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetMineBaseListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetMineBaseListByFields(std::vector<MineBase> & _return, const int32_t seqid);
  void GetMineBaseListByFields1(std::vector<MineBase> & _return, const std::string& field, const std::string& value);
  int32_t send_GetMineBaseListByFields1(const std::string& field, const std::string& value);
  void recv_GetMineBaseListByFields1(std::vector<MineBase> & _return, const int32_t seqid);
  void GetMineBaseListByFields2(std::vector<MineBase> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetMineBaseListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetMineBaseListByFields2(std::vector<MineBase> & _return, const int32_t seqid);
  int32_t AddMineRegion(const MineRegion& mine_region);
  int32_t send_AddMineRegion(const MineRegion& mine_region);
  int32_t recv_AddMineRegion(const int32_t seqid);
  bool DeleteMineRegion(const int32_t id);
  int32_t send_DeleteMineRegion(const int32_t id);
  bool recv_DeleteMineRegion(const int32_t seqid);
  bool UpdateMineRegion(const MineRegion& mine_region);
  int32_t send_UpdateMineRegion(const MineRegion& mine_region);
  bool recv_UpdateMineRegion(const int32_t seqid);
  void GetMineRegionById(MineRegion& _return, const int32_t id);
  int32_t send_GetMineRegionById(const int32_t id);
  void recv_GetMineRegionById(MineRegion& _return, const int32_t seqid);
  void GetMineRegionByForeignKey(MineRegion& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetMineRegionByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetMineRegionByForeignKey(MineRegion& _return, const int32_t seqid);
  void GetMineRegionList(std::vector<MineRegion> & _return);
  int32_t send_GetMineRegionList();
  void recv_GetMineRegionList(std::vector<MineRegion> & _return, const int32_t seqid);
  void GetMineRegionIds(std::vector<int32_t> & _return);
  int32_t send_GetMineRegionIds();
  void recv_GetMineRegionIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetMineRegionNames(std::vector<std::string> & _return);
  int32_t send_GetMineRegionNames();
  void recv_GetMineRegionNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreMineRegion(const std::vector<MineRegion> & objs);
  int32_t send_AddMoreMineRegion(const std::vector<MineRegion> & objs);
  void recv_AddMoreMineRegion(const int32_t seqid);
  void DeleteMoreMineRegion(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreMineRegion(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreMineRegion(const int32_t seqid);
  void GetMineRegionByFields(MineRegion& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetMineRegionByFields(const std::map<std::string, std::string> & fields);
  void recv_GetMineRegionByFields(MineRegion& _return, const int32_t seqid);
  void GetMineRegionByFields1(MineRegion& _return, const std::string& field, const std::string& value);
  int32_t send_GetMineRegionByFields1(const std::string& field, const std::string& value);
  void recv_GetMineRegionByFields1(MineRegion& _return, const int32_t seqid);
  void GetMineRegionByFields2(MineRegion& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetMineRegionByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetMineRegionByFields2(MineRegion& _return, const int32_t seqid);
  void GetMineRegionListByFields(std::vector<MineRegion> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetMineRegionListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetMineRegionListByFields(std::vector<MineRegion> & _return, const int32_t seqid);
  void GetMineRegionListByFields1(std::vector<MineRegion> & _return, const std::string& field, const std::string& value);
  int32_t send_GetMineRegionListByFields1(const std::string& field, const std::string& value);
  void recv_GetMineRegionListByFields1(std::vector<MineRegion> & _return, const int32_t seqid);
  void GetMineRegionListByFields2(std::vector<MineRegion> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetMineRegionListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetMineRegionListByFields2(std::vector<MineRegion> & _return, const int32_t seqid);
  int32_t AddPoreFlow(const PoreFlow& pore_flow);
  int32_t send_AddPoreFlow(const PoreFlow& pore_flow);
  int32_t recv_AddPoreFlow(const int32_t seqid);
  bool DeletePoreFlow(const int32_t id);
  int32_t send_DeletePoreFlow(const int32_t id);
  bool recv_DeletePoreFlow(const int32_t seqid);
  bool UpdatePoreFlow(const PoreFlow& pore_flow);
  int32_t send_UpdatePoreFlow(const PoreFlow& pore_flow);
  bool recv_UpdatePoreFlow(const int32_t seqid);
  void GetPoreFlowById(PoreFlow& _return, const int32_t id);
  int32_t send_GetPoreFlowById(const int32_t id);
  void recv_GetPoreFlowById(PoreFlow& _return, const int32_t seqid);
  void GetPoreFlowByForeignKey(PoreFlow& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetPoreFlowByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetPoreFlowByForeignKey(PoreFlow& _return, const int32_t seqid);
  void GetPoreFlowList(std::vector<PoreFlow> & _return);
  int32_t send_GetPoreFlowList();
  void recv_GetPoreFlowList(std::vector<PoreFlow> & _return, const int32_t seqid);
  void GetPoreFlowIds(std::vector<int32_t> & _return);
  int32_t send_GetPoreFlowIds();
  void recv_GetPoreFlowIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetPoreFlowNames(std::vector<std::string> & _return);
  int32_t send_GetPoreFlowNames();
  void recv_GetPoreFlowNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMorePoreFlow(const std::vector<PoreFlow> & objs);
  int32_t send_AddMorePoreFlow(const std::vector<PoreFlow> & objs);
  void recv_AddMorePoreFlow(const int32_t seqid);
  void DeleteMorePoreFlow(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMorePoreFlow(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMorePoreFlow(const int32_t seqid);
  void GetPoreFlowByFields(PoreFlow& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetPoreFlowByFields(const std::map<std::string, std::string> & fields);
  void recv_GetPoreFlowByFields(PoreFlow& _return, const int32_t seqid);
  void GetPoreFlowByFields1(PoreFlow& _return, const std::string& field, const std::string& value);
  int32_t send_GetPoreFlowByFields1(const std::string& field, const std::string& value);
  void recv_GetPoreFlowByFields1(PoreFlow& _return, const int32_t seqid);
  void GetPoreFlowByFields2(PoreFlow& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetPoreFlowByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetPoreFlowByFields2(PoreFlow& _return, const int32_t seqid);
  void GetPoreFlowListByFields(std::vector<PoreFlow> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetPoreFlowListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetPoreFlowListByFields(std::vector<PoreFlow> & _return, const int32_t seqid);
  void GetPoreFlowListByFields1(std::vector<PoreFlow> & _return, const std::string& field, const std::string& value);
  int32_t send_GetPoreFlowListByFields1(const std::string& field, const std::string& value);
  void recv_GetPoreFlowListByFields1(std::vector<PoreFlow> & _return, const int32_t seqid);
  void GetPoreFlowListByFields2(std::vector<PoreFlow> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetPoreFlowListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetPoreFlowListByFields2(std::vector<PoreFlow> & _return, const int32_t seqid);
  int32_t AddPoreSize(const PoreSize& pore_size);
  int32_t send_AddPoreSize(const PoreSize& pore_size);
  int32_t recv_AddPoreSize(const int32_t seqid);
  bool DeletePoreSize(const int32_t id);
  int32_t send_DeletePoreSize(const int32_t id);
  bool recv_DeletePoreSize(const int32_t seqid);
  bool UpdatePoreSize(const PoreSize& pore_size);
  int32_t send_UpdatePoreSize(const PoreSize& pore_size);
  bool recv_UpdatePoreSize(const int32_t seqid);
  void GetPoreSizeById(PoreSize& _return, const int32_t id);
  int32_t send_GetPoreSizeById(const int32_t id);
  void recv_GetPoreSizeById(PoreSize& _return, const int32_t seqid);
  void GetPoreSizeByForeignKey(PoreSize& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetPoreSizeByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetPoreSizeByForeignKey(PoreSize& _return, const int32_t seqid);
  void GetPoreSizeList(std::vector<PoreSize> & _return);
  int32_t send_GetPoreSizeList();
  void recv_GetPoreSizeList(std::vector<PoreSize> & _return, const int32_t seqid);
  void GetPoreSizeIds(std::vector<int32_t> & _return);
  int32_t send_GetPoreSizeIds();
  void recv_GetPoreSizeIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetPoreSizeNames(std::vector<std::string> & _return);
  int32_t send_GetPoreSizeNames();
  void recv_GetPoreSizeNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMorePoreSize(const std::vector<PoreSize> & objs);
  int32_t send_AddMorePoreSize(const std::vector<PoreSize> & objs);
  void recv_AddMorePoreSize(const int32_t seqid);
  void DeleteMorePoreSize(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMorePoreSize(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMorePoreSize(const int32_t seqid);
  void GetPoreSizeByFields(PoreSize& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetPoreSizeByFields(const std::map<std::string, std::string> & fields);
  void recv_GetPoreSizeByFields(PoreSize& _return, const int32_t seqid);
  void GetPoreSizeByFields1(PoreSize& _return, const std::string& field, const std::string& value);
  int32_t send_GetPoreSizeByFields1(const std::string& field, const std::string& value);
  void recv_GetPoreSizeByFields1(PoreSize& _return, const int32_t seqid);
  void GetPoreSizeByFields2(PoreSize& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetPoreSizeByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetPoreSizeByFields2(PoreSize& _return, const int32_t seqid);
  void GetPoreSizeListByFields(std::vector<PoreSize> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetPoreSizeListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetPoreSizeListByFields(std::vector<PoreSize> & _return, const int32_t seqid);
  void GetPoreSizeListByFields1(std::vector<PoreSize> & _return, const std::string& field, const std::string& value);
  int32_t send_GetPoreSizeListByFields1(const std::string& field, const std::string& value);
  void recv_GetPoreSizeListByFields1(std::vector<PoreSize> & _return, const int32_t seqid);
  void GetPoreSizeListByFields2(std::vector<PoreSize> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetPoreSizeListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetPoreSizeListByFields2(std::vector<PoreSize> & _return, const int32_t seqid);
  int32_t AddResAbundance(const ResAbundance& res_abundance);
  int32_t send_AddResAbundance(const ResAbundance& res_abundance);
  int32_t recv_AddResAbundance(const int32_t seqid);
  bool DeleteResAbundance(const int32_t id);
  int32_t send_DeleteResAbundance(const int32_t id);
  bool recv_DeleteResAbundance(const int32_t seqid);
  bool UpdateResAbundance(const ResAbundance& res_abundance);
  int32_t send_UpdateResAbundance(const ResAbundance& res_abundance);
  bool recv_UpdateResAbundance(const int32_t seqid);
  void GetResAbundanceById(ResAbundance& _return, const int32_t id);
  int32_t send_GetResAbundanceById(const int32_t id);
  void recv_GetResAbundanceById(ResAbundance& _return, const int32_t seqid);
  void GetResAbundanceByForeignKey(ResAbundance& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetResAbundanceByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetResAbundanceByForeignKey(ResAbundance& _return, const int32_t seqid);
  void GetResAbundanceList(std::vector<ResAbundance> & _return);
  int32_t send_GetResAbundanceList();
  void recv_GetResAbundanceList(std::vector<ResAbundance> & _return, const int32_t seqid);
  void GetResAbundanceIds(std::vector<int32_t> & _return);
  int32_t send_GetResAbundanceIds();
  void recv_GetResAbundanceIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetResAbundanceNames(std::vector<std::string> & _return);
  int32_t send_GetResAbundanceNames();
  void recv_GetResAbundanceNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreResAbundance(const std::vector<ResAbundance> & objs);
  int32_t send_AddMoreResAbundance(const std::vector<ResAbundance> & objs);
  void recv_AddMoreResAbundance(const int32_t seqid);
  void DeleteMoreResAbundance(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreResAbundance(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreResAbundance(const int32_t seqid);
  void GetResAbundanceByFields(ResAbundance& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetResAbundanceByFields(const std::map<std::string, std::string> & fields);
  void recv_GetResAbundanceByFields(ResAbundance& _return, const int32_t seqid);
  void GetResAbundanceByFields1(ResAbundance& _return, const std::string& field, const std::string& value);
  int32_t send_GetResAbundanceByFields1(const std::string& field, const std::string& value);
  void recv_GetResAbundanceByFields1(ResAbundance& _return, const int32_t seqid);
  void GetResAbundanceByFields2(ResAbundance& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetResAbundanceByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetResAbundanceByFields2(ResAbundance& _return, const int32_t seqid);
  void GetResAbundanceListByFields(std::vector<ResAbundance> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetResAbundanceListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetResAbundanceListByFields(std::vector<ResAbundance> & _return, const int32_t seqid);
  void GetResAbundanceListByFields1(std::vector<ResAbundance> & _return, const std::string& field, const std::string& value);
  int32_t send_GetResAbundanceListByFields1(const std::string& field, const std::string& value);
  void recv_GetResAbundanceListByFields1(std::vector<ResAbundance> & _return, const int32_t seqid);
  void GetResAbundanceListByFields2(std::vector<ResAbundance> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetResAbundanceListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetResAbundanceListByFields2(std::vector<ResAbundance> & _return, const int32_t seqid);
  int32_t AddRock(const Rock& rock);
  int32_t send_AddRock(const Rock& rock);
  int32_t recv_AddRock(const int32_t seqid);
  bool DeleteRock(const int32_t id);
  int32_t send_DeleteRock(const int32_t id);
  bool recv_DeleteRock(const int32_t seqid);
  bool UpdateRock(const Rock& rock);
  int32_t send_UpdateRock(const Rock& rock);
  bool recv_UpdateRock(const int32_t seqid);
  void GetRockById(Rock& _return, const int32_t id);
  int32_t send_GetRockById(const int32_t id);
  void recv_GetRockById(Rock& _return, const int32_t seqid);
  void GetRockByForeignKey(Rock& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetRockByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetRockByForeignKey(Rock& _return, const int32_t seqid);
  void GetRockList(std::vector<Rock> & _return);
  int32_t send_GetRockList();
  void recv_GetRockList(std::vector<Rock> & _return, const int32_t seqid);
  void GetRockIds(std::vector<int32_t> & _return);
  int32_t send_GetRockIds();
  void recv_GetRockIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetRockNames(std::vector<std::string> & _return);
  int32_t send_GetRockNames();
  void recv_GetRockNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreRock(const std::vector<Rock> & objs);
  int32_t send_AddMoreRock(const std::vector<Rock> & objs);
  void recv_AddMoreRock(const int32_t seqid);
  void DeleteMoreRock(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreRock(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreRock(const int32_t seqid);
  void GetRockByFields(Rock& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetRockByFields(const std::map<std::string, std::string> & fields);
  void recv_GetRockByFields(Rock& _return, const int32_t seqid);
  void GetRockByFields1(Rock& _return, const std::string& field, const std::string& value);
  int32_t send_GetRockByFields1(const std::string& field, const std::string& value);
  void recv_GetRockByFields1(Rock& _return, const int32_t seqid);
  void GetRockByFields2(Rock& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetRockByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetRockByFields2(Rock& _return, const int32_t seqid);
  void GetRockListByFields(std::vector<Rock> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetRockListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetRockListByFields(std::vector<Rock> & _return, const int32_t seqid);
  void GetRockListByFields1(std::vector<Rock> & _return, const std::string& field, const std::string& value);
  int32_t send_GetRockListByFields1(const std::string& field, const std::string& value);
  void recv_GetRockListByFields1(std::vector<Rock> & _return, const int32_t seqid);
  void GetRockListByFields2(std::vector<Rock> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetRockListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetRockListByFields2(std::vector<Rock> & _return, const int32_t seqid);
  int32_t AddSysInfo(const SysInfo& sys_info);
  int32_t send_AddSysInfo(const SysInfo& sys_info);
  int32_t recv_AddSysInfo(const int32_t seqid);
  bool DeleteSysInfo(const int32_t id);
  int32_t send_DeleteSysInfo(const int32_t id);
  bool recv_DeleteSysInfo(const int32_t seqid);
  bool UpdateSysInfo(const SysInfo& sys_info);
  int32_t send_UpdateSysInfo(const SysInfo& sys_info);
  bool recv_UpdateSysInfo(const int32_t seqid);
  void GetSysInfoById(SysInfo& _return, const int32_t id);
  int32_t send_GetSysInfoById(const int32_t id);
  void recv_GetSysInfoById(SysInfo& _return, const int32_t seqid);
  void GetSysInfoByForeignKey(SysInfo& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetSysInfoByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetSysInfoByForeignKey(SysInfo& _return, const int32_t seqid);
  void GetSysInfoList(std::vector<SysInfo> & _return);
  int32_t send_GetSysInfoList();
  void recv_GetSysInfoList(std::vector<SysInfo> & _return, const int32_t seqid);
  void GetSysInfoIds(std::vector<int32_t> & _return);
  int32_t send_GetSysInfoIds();
  void recv_GetSysInfoIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetSysInfoNames(std::vector<std::string> & _return);
  int32_t send_GetSysInfoNames();
  void recv_GetSysInfoNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreSysInfo(const std::vector<SysInfo> & objs);
  int32_t send_AddMoreSysInfo(const std::vector<SysInfo> & objs);
  void recv_AddMoreSysInfo(const int32_t seqid);
  void DeleteMoreSysInfo(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreSysInfo(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreSysInfo(const int32_t seqid);
  void GetSysInfoByFields(SysInfo& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetSysInfoByFields(const std::map<std::string, std::string> & fields);
  void recv_GetSysInfoByFields(SysInfo& _return, const int32_t seqid);
  void GetSysInfoByFields1(SysInfo& _return, const std::string& field, const std::string& value);
  int32_t send_GetSysInfoByFields1(const std::string& field, const std::string& value);
  void recv_GetSysInfoByFields1(SysInfo& _return, const int32_t seqid);
  void GetSysInfoByFields2(SysInfo& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetSysInfoByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetSysInfoByFields2(SysInfo& _return, const int32_t seqid);
  void GetSysInfoListByFields(std::vector<SysInfo> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetSysInfoListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetSysInfoListByFields(std::vector<SysInfo> & _return, const int32_t seqid);
  void GetSysInfoListByFields1(std::vector<SysInfo> & _return, const std::string& field, const std::string& value);
  int32_t send_GetSysInfoListByFields1(const std::string& field, const std::string& value);
  void recv_GetSysInfoListByFields1(std::vector<SysInfo> & _return, const int32_t seqid);
  void GetSysInfoListByFields2(std::vector<SysInfo> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetSysInfoListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetSysInfoListByFields2(std::vector<SysInfo> & _return, const int32_t seqid);
  int32_t AddTechMode(const TechMode& tech_mode);
  int32_t send_AddTechMode(const TechMode& tech_mode);
  int32_t recv_AddTechMode(const int32_t seqid);
  bool DeleteTechMode(const int32_t id);
  int32_t send_DeleteTechMode(const int32_t id);
  bool recv_DeleteTechMode(const int32_t seqid);
  bool UpdateTechMode(const TechMode& tech_mode);
  int32_t send_UpdateTechMode(const TechMode& tech_mode);
  bool recv_UpdateTechMode(const int32_t seqid);
  void GetTechModeById(TechMode& _return, const int32_t id);
  int32_t send_GetTechModeById(const int32_t id);
  void recv_GetTechModeById(TechMode& _return, const int32_t seqid);
  void GetTechModeByForeignKey(TechMode& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetTechModeByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetTechModeByForeignKey(TechMode& _return, const int32_t seqid);
  void GetTechModeList(std::vector<TechMode> & _return);
  int32_t send_GetTechModeList();
  void recv_GetTechModeList(std::vector<TechMode> & _return, const int32_t seqid);
  void GetTechModeIds(std::vector<int32_t> & _return);
  int32_t send_GetTechModeIds();
  void recv_GetTechModeIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetTechModeNames(std::vector<std::string> & _return);
  int32_t send_GetTechModeNames();
  void recv_GetTechModeNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreTechMode(const std::vector<TechMode> & objs);
  int32_t send_AddMoreTechMode(const std::vector<TechMode> & objs);
  void recv_AddMoreTechMode(const int32_t seqid);
  void DeleteMoreTechMode(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreTechMode(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreTechMode(const int32_t seqid);
  void GetTechModeByFields(TechMode& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetTechModeByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTechModeByFields(TechMode& _return, const int32_t seqid);
  void GetTechModeByFields1(TechMode& _return, const std::string& field, const std::string& value);
  int32_t send_GetTechModeByFields1(const std::string& field, const std::string& value);
  void recv_GetTechModeByFields1(TechMode& _return, const int32_t seqid);
  void GetTechModeByFields2(TechMode& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetTechModeByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTechModeByFields2(TechMode& _return, const int32_t seqid);
  void GetTechModeListByFields(std::vector<TechMode> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetTechModeListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTechModeListByFields(std::vector<TechMode> & _return, const int32_t seqid);
  void GetTechModeListByFields1(std::vector<TechMode> & _return, const std::string& field, const std::string& value);
  int32_t send_GetTechModeListByFields1(const std::string& field, const std::string& value);
  void recv_GetTechModeListByFields1(std::vector<TechMode> & _return, const int32_t seqid);
  void GetTechModeListByFields2(std::vector<TechMode> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetTechModeListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTechModeListByFields2(std::vector<TechMode> & _return, const int32_t seqid);
  int32_t AddTechnology(const Technology& technology);
  int32_t send_AddTechnology(const Technology& technology);
  int32_t recv_AddTechnology(const int32_t seqid);
  bool DeleteTechnology(const int32_t id);
  int32_t send_DeleteTechnology(const int32_t id);
  bool recv_DeleteTechnology(const int32_t seqid);
  bool UpdateTechnology(const Technology& technology);
  int32_t send_UpdateTechnology(const Technology& technology);
  bool recv_UpdateTechnology(const int32_t seqid);
  void GetTechnologyById(Technology& _return, const int32_t id);
  int32_t send_GetTechnologyById(const int32_t id);
  void recv_GetTechnologyById(Technology& _return, const int32_t seqid);
  void GetTechnologyByForeignKey(Technology& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetTechnologyByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetTechnologyByForeignKey(Technology& _return, const int32_t seqid);
  void GetTechnologyList(std::vector<Technology> & _return);
  int32_t send_GetTechnologyList();
  void recv_GetTechnologyList(std::vector<Technology> & _return, const int32_t seqid);
  void GetTechnologyIds(std::vector<int32_t> & _return);
  int32_t send_GetTechnologyIds();
  void recv_GetTechnologyIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetTechnologyNames(std::vector<std::string> & _return);
  int32_t send_GetTechnologyNames();
  void recv_GetTechnologyNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreTechnology(const std::vector<Technology> & objs);
  int32_t send_AddMoreTechnology(const std::vector<Technology> & objs);
  void recv_AddMoreTechnology(const int32_t seqid);
  void DeleteMoreTechnology(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreTechnology(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreTechnology(const int32_t seqid);
  void GetTechnologyByFields(Technology& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetTechnologyByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTechnologyByFields(Technology& _return, const int32_t seqid);
  void GetTechnologyByFields1(Technology& _return, const std::string& field, const std::string& value);
  int32_t send_GetTechnologyByFields1(const std::string& field, const std::string& value);
  void recv_GetTechnologyByFields1(Technology& _return, const int32_t seqid);
  void GetTechnologyByFields2(Technology& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetTechnologyByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTechnologyByFields2(Technology& _return, const int32_t seqid);
  void GetTechnologyListByFields(std::vector<Technology> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetTechnologyListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTechnologyListByFields(std::vector<Technology> & _return, const int32_t seqid);
  void GetTechnologyListByFields1(std::vector<Technology> & _return, const std::string& field, const std::string& value);
  int32_t send_GetTechnologyListByFields1(const std::string& field, const std::string& value);
  void recv_GetTechnologyListByFields1(std::vector<Technology> & _return, const int32_t seqid);
  void GetTechnologyListByFields2(std::vector<Technology> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetTechnologyListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTechnologyListByFields2(std::vector<Technology> & _return, const int32_t seqid);
  int32_t AddTopoGeo(const TopoGeo& topo_geo);
  int32_t send_AddTopoGeo(const TopoGeo& topo_geo);
  int32_t recv_AddTopoGeo(const int32_t seqid);
  bool DeleteTopoGeo(const int32_t id);
  int32_t send_DeleteTopoGeo(const int32_t id);
  bool recv_DeleteTopoGeo(const int32_t seqid);
  bool UpdateTopoGeo(const TopoGeo& topo_geo);
  int32_t send_UpdateTopoGeo(const TopoGeo& topo_geo);
  bool recv_UpdateTopoGeo(const int32_t seqid);
  void GetTopoGeoById(TopoGeo& _return, const int32_t id);
  int32_t send_GetTopoGeoById(const int32_t id);
  void recv_GetTopoGeoById(TopoGeo& _return, const int32_t seqid);
  void GetTopoGeoByForeignKey(TopoGeo& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetTopoGeoByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetTopoGeoByForeignKey(TopoGeo& _return, const int32_t seqid);
  void GetTopoGeoList(std::vector<TopoGeo> & _return);
  int32_t send_GetTopoGeoList();
  void recv_GetTopoGeoList(std::vector<TopoGeo> & _return, const int32_t seqid);
  void GetTopoGeoIds(std::vector<int32_t> & _return);
  int32_t send_GetTopoGeoIds();
  void recv_GetTopoGeoIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetTopoGeoNames(std::vector<std::string> & _return);
  int32_t send_GetTopoGeoNames();
  void recv_GetTopoGeoNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreTopoGeo(const std::vector<TopoGeo> & objs);
  int32_t send_AddMoreTopoGeo(const std::vector<TopoGeo> & objs);
  void recv_AddMoreTopoGeo(const int32_t seqid);
  void DeleteMoreTopoGeo(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreTopoGeo(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreTopoGeo(const int32_t seqid);
  void GetTopoGeoByFields(TopoGeo& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetTopoGeoByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTopoGeoByFields(TopoGeo& _return, const int32_t seqid);
  void GetTopoGeoByFields1(TopoGeo& _return, const std::string& field, const std::string& value);
  int32_t send_GetTopoGeoByFields1(const std::string& field, const std::string& value);
  void recv_GetTopoGeoByFields1(TopoGeo& _return, const int32_t seqid);
  void GetTopoGeoByFields2(TopoGeo& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetTopoGeoByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTopoGeoByFields2(TopoGeo& _return, const int32_t seqid);
  void GetTopoGeoListByFields(std::vector<TopoGeo> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetTopoGeoListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTopoGeoListByFields(std::vector<TopoGeo> & _return, const int32_t seqid);
  void GetTopoGeoListByFields1(std::vector<TopoGeo> & _return, const std::string& field, const std::string& value);
  int32_t send_GetTopoGeoListByFields1(const std::string& field, const std::string& value);
  void recv_GetTopoGeoListByFields1(std::vector<TopoGeo> & _return, const int32_t seqid);
  void GetTopoGeoListByFields2(std::vector<TopoGeo> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetTopoGeoListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTopoGeoListByFields2(std::vector<TopoGeo> & _return, const int32_t seqid);
  int32_t AddTunnel(const Tunnel& tunnel);
  int32_t send_AddTunnel(const Tunnel& tunnel);
  int32_t recv_AddTunnel(const int32_t seqid);
  bool DeleteTunnel(const int32_t id);
  int32_t send_DeleteTunnel(const int32_t id);
  bool recv_DeleteTunnel(const int32_t seqid);
  bool UpdateTunnel(const Tunnel& tunnel);
  int32_t send_UpdateTunnel(const Tunnel& tunnel);
  bool recv_UpdateTunnel(const int32_t seqid);
  void GetTunnelById(Tunnel& _return, const int32_t id);
  int32_t send_GetTunnelById(const int32_t id);
  void recv_GetTunnelById(Tunnel& _return, const int32_t seqid);
  void GetTunnelByForeignKey(Tunnel& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetTunnelByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetTunnelByForeignKey(Tunnel& _return, const int32_t seqid);
  void GetTunnelList(std::vector<Tunnel> & _return);
  int32_t send_GetTunnelList();
  void recv_GetTunnelList(std::vector<Tunnel> & _return, const int32_t seqid);
  void GetTunnelIds(std::vector<int32_t> & _return);
  int32_t send_GetTunnelIds();
  void recv_GetTunnelIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetTunnelNames(std::vector<std::string> & _return);
  int32_t send_GetTunnelNames();
  void recv_GetTunnelNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreTunnel(const std::vector<Tunnel> & objs);
  int32_t send_AddMoreTunnel(const std::vector<Tunnel> & objs);
  void recv_AddMoreTunnel(const int32_t seqid);
  void DeleteMoreTunnel(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreTunnel(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreTunnel(const int32_t seqid);
  void GetTunnelByFields(Tunnel& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetTunnelByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTunnelByFields(Tunnel& _return, const int32_t seqid);
  void GetTunnelByFields1(Tunnel& _return, const std::string& field, const std::string& value);
  int32_t send_GetTunnelByFields1(const std::string& field, const std::string& value);
  void recv_GetTunnelByFields1(Tunnel& _return, const int32_t seqid);
  void GetTunnelByFields2(Tunnel& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetTunnelByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTunnelByFields2(Tunnel& _return, const int32_t seqid);
  void GetTunnelListByFields(std::vector<Tunnel> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetTunnelListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetTunnelListByFields(std::vector<Tunnel> & _return, const int32_t seqid);
  void GetTunnelListByFields1(std::vector<Tunnel> & _return, const std::string& field, const std::string& value);
  int32_t send_GetTunnelListByFields1(const std::string& field, const std::string& value);
  void recv_GetTunnelListByFields1(std::vector<Tunnel> & _return, const int32_t seqid);
  void GetTunnelListByFields2(std::vector<Tunnel> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetTunnelListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetTunnelListByFields2(std::vector<Tunnel> & _return, const int32_t seqid);
  int32_t AddWorkArea(const WorkArea& work_area);
  int32_t send_AddWorkArea(const WorkArea& work_area);
  int32_t recv_AddWorkArea(const int32_t seqid);
  bool DeleteWorkArea(const int32_t id);
  int32_t send_DeleteWorkArea(const int32_t id);
  bool recv_DeleteWorkArea(const int32_t seqid);
  bool UpdateWorkArea(const WorkArea& work_area);
  int32_t send_UpdateWorkArea(const WorkArea& work_area);
  bool recv_UpdateWorkArea(const int32_t seqid);
  void GetWorkAreaById(WorkArea& _return, const int32_t id);
  int32_t send_GetWorkAreaById(const int32_t id);
  void recv_GetWorkAreaById(WorkArea& _return, const int32_t seqid);
  void GetWorkAreaByForeignKey(WorkArea& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetWorkAreaByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetWorkAreaByForeignKey(WorkArea& _return, const int32_t seqid);
  void GetWorkAreaList(std::vector<WorkArea> & _return);
  int32_t send_GetWorkAreaList();
  void recv_GetWorkAreaList(std::vector<WorkArea> & _return, const int32_t seqid);
  void GetWorkAreaIds(std::vector<int32_t> & _return);
  int32_t send_GetWorkAreaIds();
  void recv_GetWorkAreaIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetWorkAreaNames(std::vector<std::string> & _return);
  int32_t send_GetWorkAreaNames();
  void recv_GetWorkAreaNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreWorkArea(const std::vector<WorkArea> & objs);
  int32_t send_AddMoreWorkArea(const std::vector<WorkArea> & objs);
  void recv_AddMoreWorkArea(const int32_t seqid);
  void DeleteMoreWorkArea(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreWorkArea(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreWorkArea(const int32_t seqid);
  void GetWorkAreaByFields(WorkArea& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetWorkAreaByFields(const std::map<std::string, std::string> & fields);
  void recv_GetWorkAreaByFields(WorkArea& _return, const int32_t seqid);
  void GetWorkAreaByFields1(WorkArea& _return, const std::string& field, const std::string& value);
  int32_t send_GetWorkAreaByFields1(const std::string& field, const std::string& value);
  void recv_GetWorkAreaByFields1(WorkArea& _return, const int32_t seqid);
  void GetWorkAreaByFields2(WorkArea& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetWorkAreaByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetWorkAreaByFields2(WorkArea& _return, const int32_t seqid);
  void GetWorkAreaListByFields(std::vector<WorkArea> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetWorkAreaListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetWorkAreaListByFields(std::vector<WorkArea> & _return, const int32_t seqid);
  void GetWorkAreaListByFields1(std::vector<WorkArea> & _return, const std::string& field, const std::string& value);
  int32_t send_GetWorkAreaListByFields1(const std::string& field, const std::string& value);
  void recv_GetWorkAreaListByFields1(std::vector<WorkArea> & _return, const int32_t seqid);
  void GetWorkAreaListByFields2(std::vector<WorkArea> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetWorkAreaListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetWorkAreaListByFields2(std::vector<WorkArea> & _return, const int32_t seqid);
  int32_t AddWorkSurf(const WorkSurf& work_surf);
  int32_t send_AddWorkSurf(const WorkSurf& work_surf);
  int32_t recv_AddWorkSurf(const int32_t seqid);
  bool DeleteWorkSurf(const int32_t id);
  int32_t send_DeleteWorkSurf(const int32_t id);
  bool recv_DeleteWorkSurf(const int32_t seqid);
  bool UpdateWorkSurf(const WorkSurf& work_surf);
  int32_t send_UpdateWorkSurf(const WorkSurf& work_surf);
  bool recv_UpdateWorkSurf(const int32_t seqid);
  void GetWorkSurfById(WorkSurf& _return, const int32_t id);
  int32_t send_GetWorkSurfById(const int32_t id);
  void recv_GetWorkSurfById(WorkSurf& _return, const int32_t seqid);
  void GetWorkSurfByForeignKey(WorkSurf& _return, const std::string& fkey, const int32_t id);
  int32_t send_GetWorkSurfByForeignKey(const std::string& fkey, const int32_t id);
  void recv_GetWorkSurfByForeignKey(WorkSurf& _return, const int32_t seqid);
  void GetWorkSurfList(std::vector<WorkSurf> & _return);
  int32_t send_GetWorkSurfList();
  void recv_GetWorkSurfList(std::vector<WorkSurf> & _return, const int32_t seqid);
  void GetWorkSurfIds(std::vector<int32_t> & _return);
  int32_t send_GetWorkSurfIds();
  void recv_GetWorkSurfIds(std::vector<int32_t> & _return, const int32_t seqid);
  void GetWorkSurfNames(std::vector<std::string> & _return);
  int32_t send_GetWorkSurfNames();
  void recv_GetWorkSurfNames(std::vector<std::string> & _return, const int32_t seqid);
  void AddMoreWorkSurf(const std::vector<WorkSurf> & objs);
  int32_t send_AddMoreWorkSurf(const std::vector<WorkSurf> & objs);
  void recv_AddMoreWorkSurf(const int32_t seqid);
  void DeleteMoreWorkSurf(const std::vector<int32_t> & obj_ids);
  int32_t send_DeleteMoreWorkSurf(const std::vector<int32_t> & obj_ids);
  void recv_DeleteMoreWorkSurf(const int32_t seqid);
  void GetWorkSurfByFields(WorkSurf& _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetWorkSurfByFields(const std::map<std::string, std::string> & fields);
  void recv_GetWorkSurfByFields(WorkSurf& _return, const int32_t seqid);
  void GetWorkSurfByFields1(WorkSurf& _return, const std::string& field, const std::string& value);
  int32_t send_GetWorkSurfByFields1(const std::string& field, const std::string& value);
  void recv_GetWorkSurfByFields1(WorkSurf& _return, const int32_t seqid);
  void GetWorkSurfByFields2(WorkSurf& _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetWorkSurfByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetWorkSurfByFields2(WorkSurf& _return, const int32_t seqid);
  void GetWorkSurfListByFields(std::vector<WorkSurf> & _return, const std::map<std::string, std::string> & fields);
  int32_t send_GetWorkSurfListByFields(const std::map<std::string, std::string> & fields);
  void recv_GetWorkSurfListByFields(std::vector<WorkSurf> & _return, const int32_t seqid);
  void GetWorkSurfListByFields1(std::vector<WorkSurf> & _return, const std::string& field, const std::string& value);
  int32_t send_GetWorkSurfListByFields1(const std::string& field, const std::string& value);
  void recv_GetWorkSurfListByFields1(std::vector<WorkSurf> & _return, const int32_t seqid);
  void GetWorkSurfListByFields2(std::vector<WorkSurf> & _return, const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  int32_t send_GetWorkSurfListByFields2(const std::string& field1, const std::string& value1, const std::string& field2, const std::string& value2);
  void recv_GetWorkSurfListByFields2(std::vector<WorkSurf> & _return, const int32_t seqid);
  void InitSampleRegion();
  int32_t send_InitSampleRegion();
  void recv_InitSampleRegion(const int32_t seqid);
  int32_t GetOnlineAccountId();
  int32_t send_GetOnlineAccountId();
  int32_t recv_GetOnlineAccountId(const int32_t seqid);
  void GetOnlineMine(Mine& _return);
  int32_t send_GetOnlineMine();
  void recv_GetOnlineMine(Mine& _return, const int32_t seqid);
  int32_t VerifyMineAccount(const std::string& username, const std::string& pwd);
  int32_t send_VerifyMineAccount(const std::string& username, const std::string& pwd);
  int32_t recv_VerifyMineAccount(const int32_t seqid);
  void GetMineRegionsOfBase(std::vector<std::string> & _return, const std::string& baseName);
  int32_t send_GetMineRegionsOfBase(const std::string& baseName);
  void recv_GetMineRegionsOfBase(std::vector<std::string> & _return, const int32_t seqid);
  void GetBaseByRegion(std::string& _return, const std::string& regionName);
  int32_t send_GetBaseByRegion(const std::string& regionName);
  void recv_GetBaseByRegion(std::string& _return, const int32_t seqid);
  void GetSampleMineOfRegion(Mine& _return, const std::string& regionName);
  int32_t send_GetSampleMineOfRegion(const std::string& regionName);
  void recv_GetSampleMineOfRegion(Mine& _return, const int32_t seqid);
  void GetSampleCoalOfRegion(Coal& _return, const std::string& regionName);
  int32_t send_GetSampleCoalOfRegion(const std::string& regionName);
  void recv_GetSampleCoalOfRegion(Coal& _return, const int32_t seqid);
  void GetCoalNamesOfMine(std::vector<std::string> & _return, const int32_t mine_id);
  int32_t send_GetCoalNamesOfMine(const int32_t mine_id);
  void recv_GetCoalNamesOfMine(std::vector<std::string> & _return, const int32_t seqid);
  void GetCoalIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id);
  int32_t send_GetCoalIdsOfMine(const int32_t mine_id);
  void recv_GetCoalIdsOfMine(std::vector<int32_t> & _return, const int32_t seqid);
  void GetWorkAreasOfMine(std::vector<WorkArea> & _return, const int32_t mine_id);
  int32_t send_GetWorkAreasOfMine(const int32_t mine_id);
  void recv_GetWorkAreasOfMine(std::vector<WorkArea> & _return, const int32_t seqid);
  void GetWorkSurfsOfMine(std::vector<WorkSurf> & _return, const int32_t mine_id);
  int32_t send_GetWorkSurfsOfMine(const int32_t mine_id);
  void recv_GetWorkSurfsOfMine(std::vector<WorkSurf> & _return, const int32_t seqid);
  void GetDrillingSurfsOfMine(std::vector<DrillingSurf> & _return, const int32_t mine_id);
  int32_t send_GetDrillingSurfsOfMine(const int32_t mine_id);
  void recv_GetDrillingSurfsOfMine(std::vector<DrillingSurf> & _return, const int32_t seqid);
  void GetWorkAreaIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id);
  int32_t send_GetWorkAreaIdsOfMine(const int32_t mine_id);
  void recv_GetWorkAreaIdsOfMine(std::vector<int32_t> & _return, const int32_t seqid);
  void GetWorkSurfIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id);
  int32_t send_GetWorkSurfIdsOfMine(const int32_t mine_id);
  void recv_GetWorkSurfIdsOfMine(std::vector<int32_t> & _return, const int32_t seqid);
  void GetDrillingSurfIdsOfMine(std::vector<int32_t> & _return, const int32_t mine_id);
  int32_t send_GetDrillingSurfIdsOfMine(const int32_t mine_id);
  void recv_GetDrillingSurfIdsOfMine(std::vector<int32_t> & _return, const int32_t seqid);
  int32_t DifficultEval(const Coal& coal);
  int32_t send_DifficultEval(const Coal& coal);
  int32_t recv_DifficultEval(const int32_t seqid);
  void DifficultEvalString(std::string& _return, const Coal& coal);
  int32_t send_DifficultEvalString(const Coal& coal);
  void recv_DifficultEvalString(std::string& _return, const int32_t seqid);
  double MineGasReservesW1(const int32_t mine_id);
  int32_t send_MineGasReservesW1(const int32_t mine_id);
  double recv_MineGasReservesW1(const int32_t seqid);
  double MineGasReservesW2(const int32_t mine_id);
  int32_t send_MineGasReservesW2(const int32_t mine_id);
  double recv_MineGasReservesW2(const int32_t seqid);
  double WorkAreaGasFlow(const WorkArea& work_area, const double K1);
  int32_t send_WorkAreaGasFlow(const WorkArea& work_area, const double K1);
  double recv_WorkAreaGasFlow(const int32_t seqid);
  double MineGasFlow(const Mine& mine);
  int32_t send_MineGasFlow(const Mine& mine);
  double recv_MineGasFlow(const int32_t seqid);
  double WorkSurfGasFlow1(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf);
  int32_t send_WorkSurfGasFlow1(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf);
  double recv_WorkSurfGasFlow1(const int32_t seqid);
  double WorkSurfGasFlow2(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf);
  int32_t send_WorkSurfGasFlow2(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf);
  double recv_WorkSurfGasFlow2(const int32_t seqid);
  void DrillingSurfGasFlow(DrillingSurfGasFlowResult& _return, const Coal& coal, const DrillingSurf& drilling_surf, const Tunnel& tunnel);
  int32_t send_DrillingSurfGasFlow(const Coal& coal, const DrillingSurf& drilling_surf, const Tunnel& tunnel);
  void recv_DrillingSurfGasFlow(DrillingSurfGasFlowResult& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
