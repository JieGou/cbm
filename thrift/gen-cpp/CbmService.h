/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CbmService_H
#define CbmService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "cbm_types.h"

namespace cbm {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CbmServiceIf {
 public:
  virtual ~CbmServiceIf() {}
  virtual int32_t VerifyMineAccount(const std::string& username, const std::string& pwd) = 0;
  virtual void GetAllMineBases(std::vector<std::string> & _return) = 0;
};

class CbmServiceIfFactory {
 public:
  typedef CbmServiceIf Handler;

  virtual ~CbmServiceIfFactory() {}

  virtual CbmServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CbmServiceIf* /* handler */) = 0;
};

class CbmServiceIfSingletonFactory : virtual public CbmServiceIfFactory {
 public:
  CbmServiceIfSingletonFactory(const boost::shared_ptr<CbmServiceIf>& iface) : iface_(iface) {}
  virtual ~CbmServiceIfSingletonFactory() {}

  virtual CbmServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CbmServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CbmServiceIf> iface_;
};

class CbmServiceNull : virtual public CbmServiceIf {
 public:
  virtual ~CbmServiceNull() {}
  int32_t VerifyMineAccount(const std::string& /* username */, const std::string& /* pwd */) {
    int32_t _return = 0;
    return _return;
  }
  void GetAllMineBases(std::vector<std::string> & /* _return */) {
    return;
  }
};

typedef struct _CbmService_VerifyMineAccount_args__isset {
  _CbmService_VerifyMineAccount_args__isset() : username(false), pwd(false) {}
  bool username :1;
  bool pwd :1;
} _CbmService_VerifyMineAccount_args__isset;

class CbmService_VerifyMineAccount_args {
 public:

  CbmService_VerifyMineAccount_args(const CbmService_VerifyMineAccount_args&);
  CbmService_VerifyMineAccount_args& operator=(const CbmService_VerifyMineAccount_args&);
  CbmService_VerifyMineAccount_args() : username(), pwd() {
  }

  virtual ~CbmService_VerifyMineAccount_args() throw();
  std::string username;
  std::string pwd;

  _CbmService_VerifyMineAccount_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_pwd(const std::string& val);

  bool operator == (const CbmService_VerifyMineAccount_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(pwd == rhs.pwd))
      return false;
    return true;
  }
  bool operator != (const CbmService_VerifyMineAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_VerifyMineAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_VerifyMineAccount_pargs {
 public:


  virtual ~CbmService_VerifyMineAccount_pargs() throw();
  const std::string* username;
  const std::string* pwd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_VerifyMineAccount_result__isset {
  _CbmService_VerifyMineAccount_result__isset() : success(false) {}
  bool success :1;
} _CbmService_VerifyMineAccount_result__isset;

class CbmService_VerifyMineAccount_result {
 public:

  CbmService_VerifyMineAccount_result(const CbmService_VerifyMineAccount_result&);
  CbmService_VerifyMineAccount_result& operator=(const CbmService_VerifyMineAccount_result&);
  CbmService_VerifyMineAccount_result() : success(0) {
  }

  virtual ~CbmService_VerifyMineAccount_result() throw();
  int32_t success;

  _CbmService_VerifyMineAccount_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CbmService_VerifyMineAccount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_VerifyMineAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_VerifyMineAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_VerifyMineAccount_presult__isset {
  _CbmService_VerifyMineAccount_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_VerifyMineAccount_presult__isset;

class CbmService_VerifyMineAccount_presult {
 public:


  virtual ~CbmService_VerifyMineAccount_presult() throw();
  int32_t* success;

  _CbmService_VerifyMineAccount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CbmService_GetAllMineBases_args {
 public:

  CbmService_GetAllMineBases_args(const CbmService_GetAllMineBases_args&);
  CbmService_GetAllMineBases_args& operator=(const CbmService_GetAllMineBases_args&);
  CbmService_GetAllMineBases_args() {
  }

  virtual ~CbmService_GetAllMineBases_args() throw();

  bool operator == (const CbmService_GetAllMineBases_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CbmService_GetAllMineBases_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAllMineBases_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CbmService_GetAllMineBases_pargs {
 public:


  virtual ~CbmService_GetAllMineBases_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAllMineBases_result__isset {
  _CbmService_GetAllMineBases_result__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAllMineBases_result__isset;

class CbmService_GetAllMineBases_result {
 public:

  CbmService_GetAllMineBases_result(const CbmService_GetAllMineBases_result&);
  CbmService_GetAllMineBases_result& operator=(const CbmService_GetAllMineBases_result&);
  CbmService_GetAllMineBases_result() {
  }

  virtual ~CbmService_GetAllMineBases_result() throw();
  std::vector<std::string>  success;

  _CbmService_GetAllMineBases_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const CbmService_GetAllMineBases_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CbmService_GetAllMineBases_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CbmService_GetAllMineBases_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CbmService_GetAllMineBases_presult__isset {
  _CbmService_GetAllMineBases_presult__isset() : success(false) {}
  bool success :1;
} _CbmService_GetAllMineBases_presult__isset;

class CbmService_GetAllMineBases_presult {
 public:


  virtual ~CbmService_GetAllMineBases_presult() throw();
  std::vector<std::string> * success;

  _CbmService_GetAllMineBases_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CbmServiceClient : virtual public CbmServiceIf {
 public:
  CbmServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CbmServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t VerifyMineAccount(const std::string& username, const std::string& pwd);
  void send_VerifyMineAccount(const std::string& username, const std::string& pwd);
  int32_t recv_VerifyMineAccount();
  void GetAllMineBases(std::vector<std::string> & _return);
  void send_GetAllMineBases();
  void recv_GetAllMineBases(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CbmServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CbmServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CbmServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_VerifyMineAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAllMineBases(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CbmServiceProcessor(boost::shared_ptr<CbmServiceIf> iface) :
    iface_(iface) {
    processMap_["VerifyMineAccount"] = &CbmServiceProcessor::process_VerifyMineAccount;
    processMap_["GetAllMineBases"] = &CbmServiceProcessor::process_GetAllMineBases;
  }

  virtual ~CbmServiceProcessor() {}
};

class CbmServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CbmServiceProcessorFactory(const ::boost::shared_ptr< CbmServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CbmServiceIfFactory > handlerFactory_;
};

class CbmServiceMultiface : virtual public CbmServiceIf {
 public:
  CbmServiceMultiface(std::vector<boost::shared_ptr<CbmServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CbmServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CbmServiceIf> > ifaces_;
  CbmServiceMultiface() {}
  void add(boost::shared_ptr<CbmServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t VerifyMineAccount(const std::string& username, const std::string& pwd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->VerifyMineAccount(username, pwd);
    }
    return ifaces_[i]->VerifyMineAccount(username, pwd);
  }

  void GetAllMineBases(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAllMineBases(_return);
    }
    ifaces_[i]->GetAllMineBases(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CbmServiceConcurrentClient : virtual public CbmServiceIf {
 public:
  CbmServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CbmServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t VerifyMineAccount(const std::string& username, const std::string& pwd);
  int32_t send_VerifyMineAccount(const std::string& username, const std::string& pwd);
  int32_t recv_VerifyMineAccount(const int32_t seqid);
  void GetAllMineBases(std::vector<std::string> & _return);
  int32_t send_GetAllMineBases();
  void recv_GetAllMineBases(std::vector<std::string> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
