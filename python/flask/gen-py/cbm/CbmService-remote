#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from cbm import CbmService
from cbm.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void InitSampleRegion()')
  print('  i32 GetOnlineAccountId()')
  print('  Mine GetOnlineMine()')
  print('  i32 VerifyMineAccount(string username, string pwd)')
  print('   GetAllMineBases()')
  print('   GetAllMineRegions(string baseName)')
  print('  string GetBaseByRegion(string regionName)')
  print('  Mine GetSampleMine(string regionName)')
  print('  Coal GetSampleCoal(string regionName)')
  print('   GetCoalNames(i32 mine_id)')
  print('   GetCoalIds(i32 mine_id)')
  print('   GetWorkAreas(i32 mine_id)')
  print('   GetWorkSurfs(i32 mine_id)')
  print('   GetDrillingSurfs(i32 mine_id)')
  print('   GetWorkAreaIds(i32 mine_id)')
  print('   GetWorkSurfIds(i32 mine_id)')
  print('   GetDrillingSurfIds(i32 mine_id)')
  print('  i32 DifficultEval(Coal coal)')
  print('  string DifficultEvalString(Coal coal)')
  print('  double MineGasReservesW1(i32 mine_id)')
  print('  double MineGasReservesW2(i32 mine_id)')
  print('  double WorkAreaGasFlow(WorkArea work_area, double K1)')
  print('  double MineGasFlow(Mine mine)')
  print('  double WorkSurfGasFlow1(Coal coal, WorkArea work_area, WorkSurf work_surf)')
  print('  double WorkSurfGasFlow2(Coal coal, WorkArea work_area, WorkSurf work_surf)')
  print('  void DrillingSurfGasFlow(Coal coal, DrillingSurf drilling_surf, Tunnel tunnel)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = CbmService.Client(protocol)
transport.open()

if cmd == 'InitSampleRegion':
  if len(args) != 0:
    print('InitSampleRegion requires 0 args')
    sys.exit(1)
  pp.pprint(client.InitSampleRegion())

elif cmd == 'GetOnlineAccountId':
  if len(args) != 0:
    print('GetOnlineAccountId requires 0 args')
    sys.exit(1)
  pp.pprint(client.GetOnlineAccountId())

elif cmd == 'GetOnlineMine':
  if len(args) != 0:
    print('GetOnlineMine requires 0 args')
    sys.exit(1)
  pp.pprint(client.GetOnlineMine())

elif cmd == 'VerifyMineAccount':
  if len(args) != 2:
    print('VerifyMineAccount requires 2 args')
    sys.exit(1)
  pp.pprint(client.VerifyMineAccount(args[0],args[1],))

elif cmd == 'GetAllMineBases':
  if len(args) != 0:
    print('GetAllMineBases requires 0 args')
    sys.exit(1)
  pp.pprint(client.GetAllMineBases())

elif cmd == 'GetAllMineRegions':
  if len(args) != 1:
    print('GetAllMineRegions requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetAllMineRegions(args[0],))

elif cmd == 'GetBaseByRegion':
  if len(args) != 1:
    print('GetBaseByRegion requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetBaseByRegion(args[0],))

elif cmd == 'GetSampleMine':
  if len(args) != 1:
    print('GetSampleMine requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetSampleMine(args[0],))

elif cmd == 'GetSampleCoal':
  if len(args) != 1:
    print('GetSampleCoal requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetSampleCoal(args[0],))

elif cmd == 'GetCoalNames':
  if len(args) != 1:
    print('GetCoalNames requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetCoalNames(eval(args[0]),))

elif cmd == 'GetCoalIds':
  if len(args) != 1:
    print('GetCoalIds requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetCoalIds(eval(args[0]),))

elif cmd == 'GetWorkAreas':
  if len(args) != 1:
    print('GetWorkAreas requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetWorkAreas(eval(args[0]),))

elif cmd == 'GetWorkSurfs':
  if len(args) != 1:
    print('GetWorkSurfs requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetWorkSurfs(eval(args[0]),))

elif cmd == 'GetDrillingSurfs':
  if len(args) != 1:
    print('GetDrillingSurfs requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetDrillingSurfs(eval(args[0]),))

elif cmd == 'GetWorkAreaIds':
  if len(args) != 1:
    print('GetWorkAreaIds requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetWorkAreaIds(eval(args[0]),))

elif cmd == 'GetWorkSurfIds':
  if len(args) != 1:
    print('GetWorkSurfIds requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetWorkSurfIds(eval(args[0]),))

elif cmd == 'GetDrillingSurfIds':
  if len(args) != 1:
    print('GetDrillingSurfIds requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetDrillingSurfIds(eval(args[0]),))

elif cmd == 'DifficultEval':
  if len(args) != 1:
    print('DifficultEval requires 1 args')
    sys.exit(1)
  pp.pprint(client.DifficultEval(eval(args[0]),))

elif cmd == 'DifficultEvalString':
  if len(args) != 1:
    print('DifficultEvalString requires 1 args')
    sys.exit(1)
  pp.pprint(client.DifficultEvalString(eval(args[0]),))

elif cmd == 'MineGasReservesW1':
  if len(args) != 1:
    print('MineGasReservesW1 requires 1 args')
    sys.exit(1)
  pp.pprint(client.MineGasReservesW1(eval(args[0]),))

elif cmd == 'MineGasReservesW2':
  if len(args) != 1:
    print('MineGasReservesW2 requires 1 args')
    sys.exit(1)
  pp.pprint(client.MineGasReservesW2(eval(args[0]),))

elif cmd == 'WorkAreaGasFlow':
  if len(args) != 2:
    print('WorkAreaGasFlow requires 2 args')
    sys.exit(1)
  pp.pprint(client.WorkAreaGasFlow(eval(args[0]),eval(args[1]),))

elif cmd == 'MineGasFlow':
  if len(args) != 1:
    print('MineGasFlow requires 1 args')
    sys.exit(1)
  pp.pprint(client.MineGasFlow(eval(args[0]),))

elif cmd == 'WorkSurfGasFlow1':
  if len(args) != 3:
    print('WorkSurfGasFlow1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.WorkSurfGasFlow1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'WorkSurfGasFlow2':
  if len(args) != 3:
    print('WorkSurfGasFlow2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.WorkSurfGasFlow2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'DrillingSurfGasFlow':
  if len(args) != 3:
    print('DrillingSurfGasFlow requires 3 args')
    sys.exit(1)
  pp.pprint(client.DrillingSurfGasFlow(eval(args[0]),eval(args[1]),eval(args[2]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
