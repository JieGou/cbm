/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ControlService_H
#define ControlService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ctrl_types.h"

namespace ctrl {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ControlServiceIf {
 public:
  virtual ~ControlServiceIf() {}
  virtual void ShutDown() = 0;
};

class ControlServiceIfFactory {
 public:
  typedef ControlServiceIf Handler;

  virtual ~ControlServiceIfFactory() {}

  virtual ControlServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ControlServiceIf* /* handler */) = 0;
};

class ControlServiceIfSingletonFactory : virtual public ControlServiceIfFactory {
 public:
  ControlServiceIfSingletonFactory(const boost::shared_ptr<ControlServiceIf>& iface) : iface_(iface) {}
  virtual ~ControlServiceIfSingletonFactory() {}

  virtual ControlServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ControlServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ControlServiceIf> iface_;
};

class ControlServiceNull : virtual public ControlServiceIf {
 public:
  virtual ~ControlServiceNull() {}
  void ShutDown() {
    return;
  }
};


class ControlService_ShutDown_args {
 public:

  ControlService_ShutDown_args(const ControlService_ShutDown_args&);
  ControlService_ShutDown_args& operator=(const ControlService_ShutDown_args&);
  ControlService_ShutDown_args() {
  }

  virtual ~ControlService_ShutDown_args() throw();

  bool operator == (const ControlService_ShutDown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ControlService_ShutDown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlService_ShutDown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControlService_ShutDown_pargs {
 public:


  virtual ~ControlService_ShutDown_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControlService_ShutDown_result {
 public:

  ControlService_ShutDown_result(const ControlService_ShutDown_result&);
  ControlService_ShutDown_result& operator=(const ControlService_ShutDown_result&);
  ControlService_ShutDown_result() {
  }

  virtual ~ControlService_ShutDown_result() throw();

  bool operator == (const ControlService_ShutDown_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ControlService_ShutDown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlService_ShutDown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControlService_ShutDown_presult {
 public:


  virtual ~ControlService_ShutDown_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ControlServiceClient : virtual public ControlServiceIf {
 public:
  ControlServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ControlServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ShutDown();
  void send_ShutDown();
  void recv_ShutDown();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ControlServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ControlServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ControlServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ShutDown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ControlServiceProcessor(boost::shared_ptr<ControlServiceIf> iface) :
    iface_(iface) {
    processMap_["ShutDown"] = &ControlServiceProcessor::process_ShutDown;
  }

  virtual ~ControlServiceProcessor() {}
};

class ControlServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ControlServiceProcessorFactory(const ::boost::shared_ptr< ControlServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ControlServiceIfFactory > handlerFactory_;
};

class ControlServiceMultiface : virtual public ControlServiceIf {
 public:
  ControlServiceMultiface(std::vector<boost::shared_ptr<ControlServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ControlServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ControlServiceIf> > ifaces_;
  ControlServiceMultiface() {}
  void add(boost::shared_ptr<ControlServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ShutDown() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ShutDown();
    }
    ifaces_[i]->ShutDown();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ControlServiceConcurrentClient : virtual public ControlServiceIf {
 public:
  ControlServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ControlServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ShutDown();
  int32_t send_ShutDown();
  void recv_ShutDown(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
