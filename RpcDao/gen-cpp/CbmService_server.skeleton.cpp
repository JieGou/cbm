// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CbmService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::cbm;

class CbmServiceHandler : virtual public CbmServiceIf {
 public:
  CbmServiceHandler() {
    // Your initialization goes here
  }

  void InitSampleRegion() {
    // Your implementation goes here
    printf("InitSampleRegion\n");
  }

  int32_t GetOnlineAccountId() {
    // Your implementation goes here
    printf("GetOnlineAccountId\n");
  }

  void GetOnlineMine(Mine& _return) {
    // Your implementation goes here
    printf("GetOnlineMine\n");
  }

  int32_t VerifyMineAccount(const std::string& username, const std::string& pwd) {
    // Your implementation goes here
    printf("VerifyMineAccount\n");
  }

  void GetAllMineBases(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("GetAllMineBases\n");
  }

  void GetAllMineRegions(std::vector<std::string> & _return, const std::string& baseName) {
    // Your implementation goes here
    printf("GetAllMineRegions\n");
  }

  void GetBaseByRegion(std::string& _return, const std::string& regionName) {
    // Your implementation goes here
    printf("GetBaseByRegion\n");
  }

  void GetSampleMine(Mine& _return, const std::string& regionName) {
    // Your implementation goes here
    printf("GetSampleMine\n");
  }

  void GetSampleCoal(Coal& _return, const std::string& regionName) {
    // Your implementation goes here
    printf("GetSampleCoal\n");
  }

  void GetCoalNames(std::vector<std::string> & _return, const int32_t mine_id) {
    // Your implementation goes here
    printf("GetCoalNames\n");
  }

  void GetCoalIds(std::vector<int32_t> & _return, const int32_t mine_id) {
    // Your implementation goes here
    printf("GetCoalIds\n");
  }

  void GetWorkAreas(std::vector<WorkArea> & _return, const int32_t mine_id) {
    // Your implementation goes here
    printf("GetWorkAreas\n");
  }

  void GetWorkSurfs(std::vector<WorkSurf> & _return, const int32_t mine_id) {
    // Your implementation goes here
    printf("GetWorkSurfs\n");
  }

  void GetDrillingSurfs(std::vector<DrillingSurf> & _return, const int32_t mine_id) {
    // Your implementation goes here
    printf("GetDrillingSurfs\n");
  }

  int32_t DifficultEval(const Coal& coal) {
    // Your implementation goes here
    printf("DifficultEval\n");
  }

  void DifficultEvalString(std::string& _return, const Coal& coal) {
    // Your implementation goes here
    printf("DifficultEvalString\n");
  }

  double MineGasReservesW1(const int32_t mine_id) {
    // Your implementation goes here
    printf("MineGasReservesW1\n");
  }

  double MineGasReservesW2(const int32_t mine_id) {
    // Your implementation goes here
    printf("MineGasReservesW2\n");
  }

  double WorkAreaGasFlow(const WorkArea& work_area, const double K1) {
    // Your implementation goes here
    printf("WorkAreaGasFlow\n");
  }

  double MineGasFlow(const Mine& mine) {
    // Your implementation goes here
    printf("MineGasFlow\n");
  }

  double WorkSurfGasFlow1(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf) {
    // Your implementation goes here
    printf("WorkSurfGasFlow1\n");
  }

  double WorkSurfGasFlow2(const Coal& coal, const WorkArea& work_area, const WorkSurf& work_surf) {
    // Your implementation goes here
    printf("WorkSurfGasFlow2\n");
  }

  void DrillingSurfGasFlow(const Coal& coal, const DrillingSurf& drilling_surf, const Tunnel& tunnel) {
    // Your implementation goes here
    printf("DrillingSurfGasFlow\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<CbmServiceHandler> handler(new CbmServiceHandler());
  shared_ptr<TProcessor> processor(new CbmServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

